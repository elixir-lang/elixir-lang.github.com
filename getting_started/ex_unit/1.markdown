---
layout: getting_started
title: 1 Introduction to ExUnit
guide: 1
total_guides: 1
---

# {{ page.title }}

ExUnit is a unit test framework that ships with Elixir.

Using ExUnit is quite easy, here is a file with the minimum required:

```elixir
ExUnit.start

defmodule MyTest do
  use ExUnit.Case

  test "the truth" do
    assert true
  end
end
```

In general, we just need to invoke `ExUnit.start`, define a test case using `ExUnit.Case` and our batch of tests. Assuming we saved this file as `assertion_test.exs`, we can run it directly:

    bin/elixir assertion_test.exs

In this chapter, we will discuss the most common features available in ExUnit and how to customize it further.

## 1.1 Starting ExUnit

ExUnit is usually started via `ExUnit.start`. This function accepts a couple options, so [check its documentation](/docs/stable/ExUnit.html) for more details. For now, we will just detail the most common ones:

* `:formatter` - When you run tests with ExUnit, all the IO is done by [the formatter](https://github.com/elixir-lang/elixir/blob/master/lib/ex_unit/lib/ex_unit/formatter.ex). Developers can define their own formatters and this is the configuration that tells ExUnit to use a custom formatter;

* `:max_cases` - As we are going to see soon, ExUnit allows you to easily run tests concurrently. This is very useful to speed up your tests that have no side affects. This option allows us to configure the maximum number of cases ExUnit runs concurrently.

## 1.2 Defining a test case

After ExUnit is started, we can define our own test cases. This is done by using `ExUnit.Case` in our module:

```elixir
use ExUnit.Case
```

`ExUnit.Case` provides some features, so let's take a look at them.

### 1.2.1 The test macro

`ExUnit.Case` runs all functions whose name start with `test` and expects one argument:

```elixir
def test_the_truth(_) do
  assert true
end
```

As a convenience to define such functions, `ExUnit.Case` provides a `test` macro, which allows one to write:

```elixir
test "the truth" do
  assert true
end
```

This construct is considered more readable. The `test` macro accepts either a binary or an atom as name.

### 1.2.2 Assertions

Another convenience provided by `ExUnit.Case` is to automatically import a set of assertion macros and functions, available in [`ExUnit.Assertions`](/docs/stable/ExUnit.Assertions.html).

In the majority of tests, the only assertion macros you will need to use are `assert` and `refute`:

```elixir
assert 1 + 1 == 2
refute 1 + 3 == 3
```

ExUnit automatically breaks those expressions apart and attempt to provide detailed information in case the assertion fails. For example, the failing assertion:

```elixir
assert 1 + 1 == 3
```

Will fail as:

    Expected 2 to be equal to (==) 3

However, some extra assertions are convenient to make testing easier for some specific cases. A good example is the `assert_raise` macro:

```elixir
assert_raise ArithmeticError, "bad argument in arithmetic expression", fn ->
  1 + "test"
end
```

So don't forget to check [`ExUnit.Assertions`' documentation](/docs/stable/ExUnit.Assertions.html) for more examples.

### 1.2.3 Callbacks

`ExUnit.Case` defines four callbacks: `setup`, `teardown`, `setup_all` and `teardown_all`:

```elixir
defmodule CallbacksTest do
  use ExUnit.Case, async: true

  setup do
    IO.puts "This is a setup callback"
    :ok
  end

  test "the truth" do
    assert true
  end
end
```

In the example above, the `setup` callback will be run before each test. In case a `setup_all` callback is defined, it would run once before all tests in that module.

A callback **must** return `:ok` or `{ :ok, data }`. When the latter is returned, the `data` argument must be a keywords list containing metadata about the test. This metadata can be accessed in any other callback or in the test itself:

```elixir
defmodule CallbacksTest do
  use ExUnit.Case, async: true

  setup do
    IO.puts "This is a setup callback"
    { :ok, from_setup: :hello }
  end

  test "the truth", meta do
    assert meta[:from_setup] == :hello
  end

  teardown meta do
    assert meta[:from_setup] == :hello
    :ok
  end
end
```

Metadata is used when state need to be explicitly passed to tests.

### 1.2.4 Async

Finally, ExUnit also allows test cases to run concurrently. All you need to do is pass the `:async` option set to true:

```elixir
use ExUnit.Case, async: true
```

This will run this test case concurrently with other test cases which are async too. The tests inside a particular case are still run sequentially.

## 2 Lots To Do

ExUnit is still a work in progress. Feel free to visit [our issues tracker](https://github.com/elixir-lang/elixir/issues) to add issues for anything you'd like to see in ExUnit and feel free to contribute.
