---
layout: getting_started
title: 2 Building OTP apps with Mix
guide: 2
total_guides: 3
---

# {{ page.title }}

In the previous chapter, we have generated a project with Mix and explored a bit how Mix works. In this chapter, we will learn how to build an OTP application. In practice, we don't need Mix in order to build such applications, however Mix provides some conveniences that we are going to explore throughout this chapter.

## 2.1 The Stacker server

Our application is going to be a simple stack that allow us push and pop items as we wish. Let's call it stacker:

    $ mix new stacker

Our application is going to have one stack which may be accessed by many processes at the same time. To achieve that, we will create a server that is responsible to manage the stack. Clients will send messages to the server whenever they want to push or pop something from the stack.

Since creating such servers is a common pattern when building Erlang and Elixir applications, we have a behavior in OTP that encapsulates common server functionalities called **GenServer**. Let's create a file named `lib/stacker/server.ex` with our first server:

{% highlight ruby %}
defmodule Stacker.Server do
  use GenServer.Behaviour

  def init(stack) do
    { :ok, stack }
  end

  def handle_call(:pop, _from, [h|stack]) do
    { :reply, h, stack }
  end

  def handle_cast({ :push, new }, stack) do
    { :noreply, [new|stack] }
  end
end
{% endhighlight %}

Our server defines three callbacks: `init/1`, `handle_call/3` and `handle_cast/2`. We never call those functions directly, they are called by OTP whenever we interact with the server. We will go into details about these soon, let's just ensure it works as expected. To do so, run `iex -S mix` on your command line to start iex with mix and type the following:

    # Let's start the server using Erlang's :gen_server module.
    # It expects 3 arguments: the server module, the initial
    # stack and some options (if desired):
    iex> { :ok, pid } = :gen_server.start_link(Stacker.Server, [], [])
    {:ok,<...>}

    # Now let's push something onto the stack
    iex> :gen_server.cast(pid, { :push, 13 })
    :ok

    # Now let's get it out from the stack
    # Notice we are using *call* instead of *cast*
    iex> :gen_server.call(pid, :pop)
    13

Excellent, our server works as expected! There are many things happening behind the scenes, so let's discuss them one by one.

First, we started the server using [the `:gen_server` module from OTP](http://www.erlang.org/doc/man/gen_server.html). Notice we have used `start_link`, which starts the server and links our current process to the server. In this scenario, if the server dies, it will send an exit message to our process, making it crash too. We will see this in action later. The `start_link` function returns the process identifier (`pid`) of the newly spawned server.

Later, we have sent a **cast** message to the `pid`. The message was `{ :push, 13 }`, written in the same format as we specified in the `handle_cast/2` callback in `Stacker.Server`. Whenever we send a `cast` message, the `handle_cast/2` callback will be invoked to handle the message.

Then we finally read what was on the stack by sending a **call** message, which will dispatch to the `handle_call/3` callback. So, what is the difference between **cast** and **call** after all?

`cast` messages are asynchronous: we simply send a message to the server and don't expect a reply back. That's why our `handle_cast/2` callback returns `{ :noreply, [new|stack] }`. The first item of the tuple states nothing should be replied and the second contains our updated stack with the new item.

On the other hand, `call` messages are synchronous. When we send a `call` message, the client expects a response back. In this case, the `handle_call/3` callback returns `{ :reply, h, stack }`, where the second item is the term to be returned and the third is our new stack without its head. Since `call`s are able to send messages back to the client, it also receives the client information as argument (`_from`).

### 2.1.1 Learning more about callbacks

In the GenServer's case, there are 8 different values a callback such as `handle_call` or `handle_cast` can return:

    { :reply, reply, new_state }
    { :reply, reply, new_state, timeout }
    { :reply, reply, new_state, :hibernate }
    { :noreply, new_state }
    { :noreply, new_state, timeout }
    { :noreply, new_state, :hibernate }
    { :stop, reason, new_state }
    { :stop, reason, reply, new_state }

There are 6 callbacks required to be implemented in a GenServer. The `GenServer.Behaviour` module defines all of them automatically but allows us to customize the ones we need. The list of callbacks are:

* `init(args)` - invoked when the server is started;
* `handle_call(msg, from, state)` - invoked to handle call messages;
* `handle_cast(msg, state)` - invoked to handle cast messages;
* `handle_info(msg, state)` - handle all other messages which are normally received by processes;
* `terminate(reason, state)` - called when the server is about to terminate, useful for cleaning up;
* `code_change(old_vsn, state, extra)` - called when the application code is being upgraded live (hot code swap);

### 2.1.2 Crashing a server

Of what use is a server if we cannot crash it?

It is actually quite easy to crash our server. Our `handle_call/3` callback only works if there is something on the stack (remember `[h|t]` won't match an empty list). So let's simply send a message when the stack is empty:

    # Start another server, but with an initial :hello item
    iex> { :ok, pid } = :gen_server.start_link(Stacker.Server, [:hello], [])
    {:ok,<...>}

    # Let's get our initial item:
    iex> :gen_server.call(pid, :pop)
    :hello

    # And now let's call pop again
    iex> :gen_server.call(pid, :pop)

    =ERROR REPORT==== 6-Dec-2012::19:15:33 ===
    ...
    ** (exit) {{:function_clause,...}}
    ...

You can see there are two error reports. The first one is generated by server, due to the crash. Since the server is linked to our process, it also sent an exit message which was printed by `IEx` as `** (exit) ...`.

Since our servers may eventually crash, it is common to supervise them, and that's what we are going to next. There is a bit more to `GenServer` than what we have seen here. For more information, check [`GenServer.Behaviour`'s documentation](http://elixir-lang.org/docs/stable/GenServer.Behaviour.html).

## 2.2 Supervising our servers

When building applications in Erlang/Elixir, a common philosophy is to "let it crash". Resources are going to become unavailable, timeout in between services are going to happen and other possible failures exist. That's why it is important to recover and react to such failures. With this in mind, we are going to write a supervisor for our server.

Create a file at `lib/stacker/supervisor.ex` with the following:

{% highlight ruby %}
defmodule Stacker.Supervisor do
  use Supervisor.Behaviour

  # A convenience to start the supervisor
  def start_link(stack) do
    :supervisor.start_link(__MODULE__, stack)
  end

  # The callback invoked when the supervisor starts
  def init(stack) do
    children = [ worker(Stacker.Server, [stack]) ]
    supervise children, strategy: :one_for_one
  end
end
{% endhighlight %}

In case of supervisors, the only callback that needs to be implemented is `init(args)`. This callback needs to return a supervisor specification, in this case returned by the helper function `supervise/2`.

Our supervisor is very simple: it has to supervise one worker, in this case, `Stacker.Server` and the worker will be started by receiving one argument, which is the default stack. The defined worker is then going to be supervised using the `:one_for_one` strategy, which restarts each worker after it dies.

Given that our worker is specified by the `Stacker.Server` module passing the `stack` as argument, the supervisor will by default invoke the `Stacker.Server.start_link(stack)` function to start the worker, so let's implement it:

{% highlight ruby %}
defmodule Stacker.Server do
  use GenServer.Behaviour

  def start_link(stack) do
    :gen_server.start_link({ :local, :stacker }, __MODULE__, stack, [])
  end

  def init(stack) do
    { :ok, stack }
  end

  def handle_call(:pop, _from, [h|stack]) do
    { :reply, h, stack }
  end

  def handle_cast({ :push, new }, stack) do
    { :noreply, [new|stack] }
  end
end
{% endhighlight %}

The `start_link` function is quite similar to how we were starting our server previously, except that now we passed one extra argument: `{ :local, :stacker }`. This argument registers the server on our local nodes, allowing it to be invoked by the given name (in this case, `:stacker`), instead of directly using the `pid`.

With our supervisor in hand, let's start the console by running `iex -S mix` once again, which will recompile our files too:

    # Now we will start the supervisor with a
    # default stack containing :hello
    iex> Stacker.Supervisor.start_link([:hello])
    {:ok,<...>}

    # And we will access the server by name since
    # we registered it
    iex> :gen_server.call(:stacker, :pop)
    :hello

Notice the supervisor started the server for us and we were able to send messages to it via the name `:stacker`. What happens if we crash our server again?

    iex> :gen_server.call(:stacker, :pop)

    =ERROR REPORT==== 6-Dec-2012::19:15:33 ===
    ...
    ** (exit) {{:function_clause,...}}
    ...

    iex> :gen_server.call(:stacker, :pop)
    :hello

It crashes exactly as before but it is restarted right away by the supervisor with the default stack, allowing us to retrieve `:hello` again. Excellent!

By default the supervisor allows a worker to restart at maximum 5 times in a 5 seconds timespan. If the worker crashes more frequently than that, the supervisor gives up on the worker and no longer restarts it. Let's check it by sending 5 unknown messages one right after the other (be fast!):

    iex> :gen_server.call(:stacker, :unknown)
    ... 5 times ...

    iex> :gen_server.call(:stacker, :unknown)
    ** (exit) {:noproc,{:gen_server,:call,[:stacker,:unknown]}}
        gen_server.erl:180: :gen_server.call/2

The sixth message no longer generates an error report, since our server was no longer started automatically. Elixir returns `:noproc` (which stands for no process), meaning there isn't a process named `:stacker`. The number of restarts allowed and its time interval can be customized by passing options to the `supervise` function. Different restart strategies, besides the `:one_for_one` used above, can be chosen for the supervisor as well. For more information on the supported options, [check the documentation for `Supervisor.Behaviour`](http://elixir-lang.org/docs/stable/Supervisor.Behaviour.html).

## 2.3 Who supervises the supervisor?

We have built our supervisor but a pertinent question is: who supervisors the supervisor? To answer this question, OTP contains the concept of applications. Applications can be started and stopped as an unit and, when doing so, they are often linked to a supervisor.

In the previous chapter, we have learned how Mix automatically generates an `.app` file every time we compile our project based on the information contained on the `application` function in our `mix.exs` file.

The `.app` file is called **application specification** and it must contain our application dependencies, the modules it defines, registered names and many others. Some of this information is filled in automatically by Mix but other data needs to be added manually.

In this particular case, our application has a supervisor and, furthermore, it registers a server with name `:stacker`. That said, it is useful to add to the **application specification** all registered names in order to avoid conflicts. If it happens that two applications register the same name, we will be able to find about this conflict sooner. So, let's open the `mix.exs` file and edit the `application` function to the following:

{% highlight ruby %}
def application do
  [ registered: [:stacker],
    mod: { Stacker, [:hello] } ]
end
{% endhighlight %}

In the `:registered` key we specify all names registered by our application. The `:mod` key specifies that, as soon as the application is started, it must invoke the **application module callback**. In this case, the **application module callback** will be the `Stacker` module and it will receive the default stack `[:hello]` as argument. The callback must return the `pid` of the supervisor which is associated to this application.

With this in mind, let's open up the `lib/stacker.ex` file and add the following:

{% highlight ruby %}
defmodule Stacker do
  use Application.Behaviour

  def start(_type, stack) do
    Stacker.Supervisor.start_link(stack)
  end
end
{% endhighlight %}

The `Application.Behaviour` expects two callbacks, `start(type, args)` and `stop(state)`. We are required to implement `start/2` though we have decided to not bother about `stop(state)` for now.

After adding the application behavior above, all you need to do is to start `iex -S mix` once again. Our files are going to be recompiled and the supervisor (and consequently our server) will be automatically started:

    iex> :gen_server.call(:stacker, :pop)
    :hello

Amazing, it works! As you may have noticed, the application `start/2` callback receives a type argument, which we have ignored. The type controls how the VM should behave when the supervisor, and consequently our application, crashes. You can learn more about it by [reading the documentation for `Application.Behaviour`](http://elixir-lang.org/docs/stable/Application.Behaviour.html).

## 2.4 Starting applications

Mix will always start the current application and all application dependencies. Notice there is a difference between your project dependencies (the ones defined under the `deps` key we have discussed in the previous chapter) and the application dependencies.

The project dependencies may contain your test framework or a compile-time only dependency. The application dependency is everything you depend on at runtime. Any application dependency needs to be explicitly added to the `application` function too:

{% highlight ruby %}
def application do
  [ registered: [:stacker],
    applications: [:some_dep],
    mod: { Stacker, [:hello] } ]
end
{% endhighlight %}

When running tasks on Mix, it will ensure the application and all application dependencies are started. This can also be done via command line with the flag `--app`:

    $ elixir -pa ebin --app my_project

You may also start each application individually via the command line using [Erlang's :application module](http://www.erlang.org/doc/man/application.html):

    :application.start(:my_project)

Besides `registered`, `applications` and `mod`, there are other keys allowed in the application specification. You can learn more about them [in the applications chapter from Learn You Some Erlang](http://learnyousomeerlang.com/building-otp-applications).

Finally, notice that `mix new` supports a `--sup` option, which tells Mix to generate a supervisor with an application module callback, automating some of the work we have done here (try it!). With this note, we finalize this chapter. We have learned how to create servers, supervise them, and hook them into our application lifecycle. In the next chapter, we will learn how to create custom tasks in Mix.
