---
layout: getting_started
title: 2 Agent
guide: 2
---

# {{ page.title }}

  <div class="toc"></div>

In this chapter, we will create a module named `KV.Bucket`. This module will be responsible to store our key-value entries in a way they can be read and modified by different processes.

If you have skipped the Getting Started guide or if you have read it long ago, be sure to re-read the chapter about [Processes](/getting_started/11.html). We will use it as starting point.

## 2.1 The trouble with state

Elixir is an immutable language where nothing is shared by default. If we want to create buckets, store and access them from multiple places, we have two main options in Elixir:

* Processes
* [ETS (Erlang Term Storage)](http://www.erlang.org/doc/man/ets.html)

We have talked about processes, while ETS is something new that we will explore later in this guide. When it comes to processes though, we rarely hand-roll our own process, instead we use the abstractions available in Elixir and OTP:

* [Agent](/docs/stable/elixir/Agent.html) - agents are simple wrappers around state;
* [GenServer](/docs/stable/elixir/GenServer.html) - generic servers (processes) that encapsulate state, provide sync and async calls, support for code reloading and more;
* [GenEvent](/docs/stable/elixir/GenEvent.html) - generic event managers and event handlers. If you need to publish events that are consumed by many handlers, you want a GenEvent;
* [Task](/docs/stable/elixir/Task.html) - tasks are abstractions around computation. If you want to spawn a computation to happen asynchronously and read its value later, tasks are a great fit;

We will explore all of those in this guide. Keep in mind that all of those abstractions are implemented on top of processes using the basic features provided by the VM, like `send`, `receive`, `spawn` and `link`.

## 2.2 Agents

[Agents](/docs/stable/elixir/Agent.html) are simple wrappers around state. If all you want from a process is to keep state, agents are a great fit. Let's start an `iex` session inside the project with:

    $ iex -S mix

And play a bit with agents:

```iex
iex> {:ok, agent} = Agent.start_link fn -> [] end
{:ok, #PID<0.57.0>}
iex> Agent.update(agent, fn list -> ["eggs"|list] end)
:ok
iex> Agent.get(agent, fn list -> list end)
["eggs"]
iex> Agent.stop(agent)
:ok
```

We have started an agent with an initial state of an empty list. Then we issue commands to add a new item to the list and finally retrieved the whole list. Once we are done with the agent, we can call `Agent.stop/1` to terminate the agent process.

Let's implement our `KV.Bucket` using agents. But before starting the implementation, let's first write some tests. Create a file at `test/kv/bucket_test.exs` (remember the `.exs` extension) with the following:

```elixir
defmodule KV.BucketTest do
  use ExUnit.Case, async: true

  test "stores values by key" do
    {:ok, bucket} = KV.Bucket.start_link
    assert KV.Bucket.get(bucket, "milk") == nil

    KV.Bucket.put(bucket, "milk", 3)
    assert KV.Bucket.get(bucket, "milk") == 3
  end
end
```

Our first test is quite straight-forward. We start a new `KV.Bucket` and perform some `get/2` and `put/3` operations on it, asserting the result. We don't need to explicitly stop the agent because it is linked to the test process and the agent is shut down automatically once the test finishes.

Also note that we passed the `async: true` option to `ExUnit.Case`. This option makes this test case run in parallel with other test cases that set up the `:async` option. This is extremely useful to speed up our test suite by using our cores in our machine. Note though the `:async option must only be set if the test case does not rely or change any global value. For example, if the test requires writing to the filesystem, registering processes, accessing a database, you must not make it async to avoid race conditions in between tests.

Regardless of being async or not, our new test should obviously fail, as none of the functionality is implemented.

In order to fix the failing test, let's create a file at `lib/kv/bucket.ex` with the contents below. Feel free to give a try at implementing the `KV.Bucket` module yourself using agents before peeking the implementation below.

```elixir
defmodule KV.Bucket do
  @doc """
  Starts a new bucket.
  """
  def start_link do
    Agent.start_link(fn -> HashDict.new end)
  end

  @doc """
  Gets a value from the `bucket` by `key`.
  """
  def get(bucket, key) do
    Agent.get(bucket, &HashDict.get(&1, key))
  end

  @doc """
  Puts the `value` for the given `key` in the `bucket`.
  """
  def put(bucket, key, value) do
    Agent.update(bucket, &HashDict.put(&1, key, value))
  end
end
```

With the `KV.Bucket` module defined, our test should pass! Note we are using a HashDict as state instead of a `Map` because in the current Elixir version maps are only efficient when holding a small amount of keys.

## 2.3 ExUnit callbacks

Before moving on and adding more features to `KV.Bucket`, let's talk about ExUnit callbacks. As you may expect, all `KV.Bucket` tests will require a bucket to be started during setup and stopped after the test. Luckily, ExUnit supports callbacks that allows us to skip such repetitive tasks.

Let's rewrite the test case to use callbacks:

```elixir
defmodule KV.BucketTest do
  use ExUnit.Case, async: true

  setup do
    {:ok, bucket} = KV.Bucket.start_link
    {:ok, bucket: bucket}
  end

  test "stores values by key", %{bucket: bucket} do
    assert KV.Bucket.get(bucket, "milk") == nil

    KV.Bucket.put(bucket, "milk", 3)
    assert KV.Bucket.get(bucket, "milk") == 3
  end
end
```

We have first defined a setup callback with the help of the `setup/1` macro. The `setup/1` callback runs before every test, in the same process as the test itself.

Note that we need a mechanism to pass the `bucket` pid from the callback to the test. We do so by using the *test context*. When we return `{:ok, bucket: bucket}` from the callback, ExUnit will merge the second element of the tuple (a dictionary) into the test context. The test context is a map which we can then match during the test definition:

```elixir
test "stores values by key", %{bucket: bucket} do
```

You can read more about ExUnit cases in the [`ExUnit.Case` module documentation](/docs/stable/ex_unit/ExUnit.Case.html) and more about callbacks in [`ExUnit.Callbacks` docs](/docs/stable/ex_unit/ExUnit.Callbacks.html).

## 2.4 Other Agent actions

Besides getting a value and updating the agent state, agents allow us to get a value and update the agent state in one tackle via `Agent.get_and_update/2`. Let's implement a `KV.Bucket.delete/2` function that deletes a key from the bucket, returning its current value:

```elixir
@doc """
Deletes `key` from `bucket`.

Returns its current value if such `key` exists.
"""
def delete(bucket, key) do
  Agent.get_and_update(bucket, &HashDict.pop(&1, key))
end
```

Now it is your turn to write a test for the functionality above! Also, be sure to explore the documentation for Agents to learn more about them.

## 2.5 Client/Server in Agents

Before we move on to the next chapter, let's discuss the client/server dichotomy in agents. Let's expand the `delete/2` function we have just implemented:

```elixir
def delete(bucket, key) do
  Agent.get_and_update(bucket, fn dict->
    HashDict.pop(dict, key)
  end)
end
```

Everything that is inside the function passed to the agent happens in the agent process. In this case, since the agent process is the one receiving and responding to our messages, we say the agent process is the server. Everything outside the function is happening in the client.

This distinction is important in case there are expensive actions to be done and you must consider if it will be better to perform such actions on the client or on the server. For example:

```elixir
def delete(bucket, key) do
  :timer.sleep(1000) # sleeps the client
  Agent.get_and_update(bucket, fn dict ->
    :timer.sleep(1000) # sleeps the server
    HashDict.pop(dict, key)
  end)
end
```

When a long action is performed on the server, all other requests to that particular server will wait until the action is done, which may cause some clients to timeout.

In the next chapter we will explore GenServers, where the segregation in between clients and servers is made even more apparent.
