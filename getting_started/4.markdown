---
layout: getting_started
title: 4 Records & Protocols
guide: 4
total_guides: 7
---

# {{ page.title }}

Elixir provides both records and protocols. This chapter will outline the main features of both and provide some examples. More specifically, we will learn how to use `defrecord`, `defprotocol` and `defimpl`.

## 4.1 Records

Records are simple structures that hold values. For example, we can define a `FileInfo` record that is supposed to store information about files as follows:

    defrecord FileInfo, atime: nil, accesses: 0

The line above will define a module named `FileInfo` which contains a function named `new` that returns a new record and other functions to read and set the values in the record:

    file_info = FileInfo.new(atime: { 2010, 4, 17 })
    file_info.atime                   #=> Returns the value of atime
    file_info.atime({ 2012, 10, 13 }) #=> Updates the value of atime

A record is simply a tuple where the first element is the record module name. We can get the record raw representation as follow:

    inspect FileInfo.new, raw: true
    #=> "{ FileInfo, nil, nil }"

Besides defining readers and writers for each attribute, Elixir also defines an `update_#{attribute}` function to update the value. Such functions expect a function as argument that receives the current value and must return the new one. For example, every time the file is accessed, the accesses counter can be incremented with:

    file_info = FileInfo.new(accesses: 10)
    file_info = file_info.update_accesses(fn(x) -> x + 1 end)
    file_info.accesses #=> 11

### 4.1.1 Pattern matching

Elixir also allows one to pattern match against records. For example, imagine we want to check if a file was accessed or not based on the `FileInfo` record above, we could implement it as follow:

    def was_accessed?(FileInfo[accesses: 0]), do: true
    def was_accessed?(FileInfo[]),            do: false

The first clause will only match if a `FileInfo` record is given and the `accesses` field is equal to zero. If instead we would like to assign the value of `accesses` to a variable, we could write:

    def was_accessed?(FileInfo[accesses: accesses]), do: accesses == 0

This syntax can also be used to create new records:

    file_info = FileInfo[accesses: 0]

As we are going to see in the next section (4.2), this "brackets syntax" is powered by the access protocol and, in the records case, it is handled at compilation time which provides faster access and creation times compared to `file_info.accesses` and `FileInfo.new`.

For more information on records, [check out the documentation for the `defrecord` macro](http://elixir-lang.org/docs/master/Kernel.html#defrecord/4)

## 4.2 Protocols

Protocols allow us to define contracts. Dispatching a protocol is available to any data type as long as it implements the prototype. Let's consider a practical example.

In Elixir, only `false` and `nil` are considered falsy values. Everything else evaluates to true. Depending on the application, it may be important to specify a `blank?` protocol that returns a boolean for other data types that should be considered blank. For instance, an empty list or an empty binary could be considered blanks.

We could implement this protocol as follows:

    defprotocol Blank do
      @doc "Returns true if data is considered blank/empty"
      def blank?(data)
    end

The protocol expects a function called `blank?` that receives one argument to be implemented. We can implement this protocol for some Elixir data types in the following way:

    # Numbers are never blank
    defimpl Blank, for: Number do
      def blank?(number), do: false
    end

    # Just empty list is blank
    defimpl Blank, for: List do
      def blank?([]), do: true
      def blank?(_),  do: false
    end

    # Just the atoms false and nil are blank
    defimpl Blank, for: Atom do
      def blank?(false), do: true
      def blank?(nil),   do: true
      def blank?(_),     do: false
    end

And we would do so for all native data types. The types available are:

* Record
* Tuple
* Atom
* List
* BitString
* Number
* Function
* PID
* Port
* Reference
* Any

### 4.2.1 Selecting implementations

Implementing the protocol for all 9 types above can be cumbersome. Even more if you consider that Number, Function, PID, Port and Reference are never going to be blank. For this reason, Elixir allows us to declare the fact that we are going to implement the protocol just for some types, as follows:

    defprotocol Blank do
      @only [Atom, Tuple, List, BitString, Any]
      def blank?(data)
    end

Since we also specified `Any` as a data type, if the data type is not any of Atom, Tuple, List or BitString, it will automatically fallback to Any:

    defimpl Blank, for: Any do
      def blank?(_), do: false
    end

Now all data types that we have not specified will be automatically considered non-blank.

### 4.2.2 Using protocols with records

The real benefit of protocols comes when mixed with records. For instance, imagine we have a module called `RedBlack` that provides an API to create and manipulate Red-Black trees. This module represents such trees via a record named `RedBlack.Tree` and we want this tree to be considered blank in case it has no items. To achieve this, the developer just needs to implement the protocol for `RedBlack.Tree`:

    defimpl Blank, for: RedBlack.Tree do
      def blank?(tree), do: RedBlack.empty?(tree)
    end

In the example above, we have implemented `blank?` for `RedBlack.Tree` that simply delegates to `RedBlack.empty?` passing the tree as argument. This implementation doesn't need to be defined inside the `RedBlack` tree or inside the record, but anywhere in the code.

Finally, since records are simply tuples, one can add a default protocol implementation to any record by defining a default implementation for tuples.

### 4.2.3 Built-in protocols

Elixir ships with five built-in protocols, they are:

* Access - specifies how to access an element. This is the protocol that empowers bracket access in Elixir, for example:

        iex> x = [a: 1, b: 2]
        [{:a, 1}, {:b, 2}]
        iex> x[:a]
        1
        iex> x[:b]
        2

* Enum.Iterator - specifies an iteration contract for any data structure. Exposed via the `Enum` module;
* List.Chars - specifies how to convert a data structures with characters to lists. Exposed via the `to_char_list` function;
* Binary.Chars - specifies how to convert a data structure with characters to binary. Exposed via the `to_binary` function. For instance, interpolation calls `to_binary` in the interpolated content before adding it to the binary;
* Binary.Inspect - specifies how to convert any data structure to a string for inspection. Exposed via the `inspect` function;

You can check the source code for those protocols for more information about how each one is used and how to implement your own. With this, we have finally finished this chapter which has described `defrecord`, `defprotocol` and `defimpl`. Next, we are going to build some macros using `defmacro` and `defmacrop`!
