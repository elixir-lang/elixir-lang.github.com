---
layout: getting_started
title: 3. Modules
guide: 3
---

# 3 Modules

In Elixir, you can group several functions into a module. In the previous chapter, for example, we have invoked functions from the module List:

    iex> List.flatten [1,[2],3]
    [1, 2, 3]

In order to create our own modules in Elixir, all we have to do is to call the `defmodule` function and use `def` to define our functions:

    iex> defmodule Math do
    ...>   def sum(a, b) do
    ...>     a + b
    ...>   end
    ...> end

    iex> Math.sum(1, 2)
    3

Before diving into modules, let's first have a brief overview about compilation.

## 3.1 Compilation

Most of the times it is convenient to write modules into files so they can be compiled and re-used. Let's assume we have a file named `math.ex` with the following contents:

    defmodule Math do
      def sum(a, b) do
        a + b
      end
    end

This file can be compiled using `bin/elixirc` (or simply `elixirc` if you installed Elixir via a distribution):

    bin/elixirc math.ex

Which will then generate a file named `Math.beam` containing the bytecode for the defined module. Now, if we start `bin/iex` again, our module definition will be available (considering `bin/iex` is being started in the same directory the bytecode file is):

    iex> Math.sum(1, 2)
    3

Elixir projects are usually organized into three directories:

* ebin - holds the compiled bytecode
* lib - holds elixir code (usually `.ex` files)
* test - holds tests (usually `.exs` files)

In many cases, since the bytecode is in `ebin`, you need to explicitly tell Elixir to lookup for code in the `ebin` directory:

    bin/iex -pa ebin

Where `-pa` stands for `path append`. The same option can also be passed to `elixir` and `elixirc` executables. You can execute `bin/elixir` and `bin/elixirc` without arguments to get a list with all options.

## 3.2 Scripted mode

Besides the Elixir file `.ex`, Elixir also supports `.exs` files for scripting. Elixir treats both files exactly the same way, the only difference is in intention. `.ex` files are meant to be compiled while `.exs` files are used for scripting, without a need for compilation. For instance, one can create a file called `math.exs`:

    defmodule Math do
      def sum(a, b) do
        a + b
      end
    end

    IO.puts Math.sum(1, 2)

And execute it as:

    bin/elixir math.exs

The file will be compiled in memory and executed, printing 3 as result. No bytecode file will be created.

## 3.3 Functions and private functions

Inside a module, we can define functions with `def` and private functions with `defp`. A function defined with `def` is available to be invoked from other modules while a private function can only be invoked locally.

    defmodule Math do
      def sum(a, b) do
        do_sum(a, b)
      end

      defp do_sum(a, b) do
        a + b
      end
    end

    Math.sum(1, 2)    #=> 3
    Math.do_sum(1, 2) #=> ** (UndefinedFunctionError)

Function declarations also support guards and multiple clauses. If a function has several clauses, Elixir will try each clause until it finds one that matches. For example, here is the implementation for a function that checks if the given number is zero or not:

    defmodule Math do
      def zero?(0) do
        true
      end

      def zero?(x) when is_number(x) do
        false
      end
    end

    Math.zero?(0)  #=> true
    Math.zero?(1)  #=> false

    Math.zero?([1,2,3])
    #=> ** (FunctionClauseError)

Notice that giving an argument that does not match any of the clauses raises an error.

Named functions also support default arguments:

    defmodule Funs do
      def join(a, b, sep // ' ') do
        List.wrap(a) ++ sep ++ List.wrap(b)
      end
    end

    IO.puts Funs.join('Hello', 'world')      #=> Hello world
    IO.puts Funs.join('Hello', 'world', '_') #=> Hello_world

When using default values, one must be careful and avoid overlapping function definitions. Consider the following example:

    defmodule Funs do
      def join(a, b) do
        IO.puts "***First join"
        List.wrap(a) ++ List.wrap(b)
      end

      def join(a, b, sep // ' ') do
        IO.puts "***Second join"
        List.wrap(a) ++ sep ++ List.wrap(b)
      end
    end

If we save the code above in a file named "test_funs.ex" and compile it, Elixir will emit the following warning:

    test_funs.ex:7: this clause cannot match because a previous clause at line 2 always matches

The compiler is telling us that invoking the `join` function with two arguments will always choose the first definition of `join` whereas the second one will only be invoked when three arguments are passed:

    $ iex test_funs.ex

    iex> Funs.join 'Hello', 'world'
    ***First join
    'Helloworld'

    iex> Funs.join 'Hello', 'world', ' '
    ***Second join
    'Hello world'


## 3.4 Directives

In order to support software-reuse, Elixir supports three directives. As we are going to see below, they are called directives because they are the only functions in Elixir that have **lexical scope**.

### 3.4.1 refer

`refer` allows you to setup references to a given module. For instance, one can do:

    defmodule Math do
      refer MyList, as: List
    end

And now, any reference to `List` will be automatically replaced by `MyList`. In case one wants to access the original `List`, it can be done by accessing the module directly via `__MAIN__`:

    List.values           #=> uses MyList.values
    __MAIN__.List.values  #=> uses List.values

Calling `refer` without an `as` option sets the reference automatically to the last part of the module name, for example:

    refer Foo.Bar.Baz

Is the same as:

    refer Foo.Bar.Baz, as: Baz

Notice that `refer` is **lexically scoped**, which allows you to set references inside specific functions:

    defmodule Math do
      def add(a, b) do
        refer MyList, as: List
        # ...
      end

      def minus(a, b) do
        # ...
      end
    end

In the example above, since we are invoking `refer` inside the function `add`, the reference will just be valid inside the function `add`. `minus` won't be affected at all.

### 3.4.2 require

In general, a module does not need to be required before usage, except if we want to use the macros available in that module. For instance, suppose we created our own `my_if` implementation in a module named `MyMacros`. If we want to invoke it, we need to first explicitly require `MyMacros`:

    defmodule Math do
      require MyMacros
      MyMacros.my_if do_something, it_works
    end

An attempt to call a macro that was not loaded will raise an error. Note that, as the `refer` directive, `require` is also lexically scoped.

### 3.4.3 import

We use `import` whenever we want to easily access functions or macros from others modules without using the qualified name. For instance, if we want to use the `duplicate` function from `List` several times in a module and we don't want to always type `List.duplicate`, we can simply import it:

    defmodule Math do
      import List, only: [duplicate: 2]

      def some_function do
        # call duplicate
      end
    end

In this case, we are importing only the function `duplicate` (with arity 2) from `List`. Although `only:` is optional, its usage is recommended. `except` could also be given as an option.

If we want to import only `:functions` or `:macros` from a given module, we can also pass a first argument selecting the scope:

    import :macros, MyMacros

And then we can use `only` or `except` to filter the macros being included. Finally, note that `import` is **lexically scoped**, this means we can import specific macros inside specific functions:

    defmodule Math do
      def some_function do
        import List, only: [duplicate: 2]
        # call duplicate
      end
    end

In the example above, the imported `List.duplicate` is only visible within that specific function. `duplicate` won't be available in any other function in that module (or any other module for that matter).

Note that importing a module automatically requires it. Furthermore, `import` also accept `as:` as option which is automatically passed to `refer` in order to create a reference.

## 3.5 Module data

Elixir also allows modules to store their own data. The canonical example for such data is annotating that a module implements the OTP behavior called `gen_server`:

    defmodule MyServer do
      @behavior :gen_server
      # ... callbacks ...
    end

Now if the module above does not implement any of the callbacks required by `gen_server`, a warning will be raised. Another data used internally by Elixir is is the `@vsn`:

    defmodule MyServer do
      @vsn 2
    end

`@vsn` refers to the version and is used by the code reloading mechanism to check if a module has been updated or not. If no version is specified, the version is set to the MD5 checksum of the module functions.

Elixir has a handful of reserved data attributes. The following are currently functional in Elixir:

* `@behaviour` and `@behavior` - used for specifying an OTP or user-defined behavior;
* `@vsn` - used for specifying the module version;
* `@compile` - provides options for the module compilation;
* `@moduledoc` - provides documentation for the current module;
* `@doc` - provides documentation for the function that follows it;
* `@on_load` - provides a function, with arity 0, that will be invoked whenever the module is loaded. The function has to return `:ok`, otherwise the loading of the module is aborted;
* `@overridable` - when true, the following function can be overridden and referenced later using the special form `super`;

The following ones are also reserved by Elixir (as they have special semantics to the Erlang VM) but not currently supported (if you need support for any of these in your current projects, please open a ticket on the issue tracker):

* `@spec` - provides a specification for the function following it;
* `@callback` - provides a specification for the behavior callback;
* `@type` - provides a type to be used in @spec;
* `@export_type` - provides a type to be used in @spec that can be accessed from external specs;

Besides the built-in data attributes outlined above, any developer can also add custom data:

    defmodule MyServer do
      @my_data 13
      IO.inspect @my_data #=> 13
    end

After the module is compiled, the stored custom data can be accessed via `__info__(:data)` and it will return a keywords list:

    MyServer.__info__(:data) #=> [my_data: 13]

> Note: Erlang developers may be wondering why Elixir provides its own data abstraction instead of using Erlang attributes. Erlang attributes are basically lists which also allow duplicated entries. For Elixir, since the same data may be read and updated several times during compilation, it makes more sense to have a dictionary structure instead of a list. Erlang developers wishing to have the attributes functionality have two options:
>
> 1) Manually add Erlang attributes via the `Module.add_attribute(module, attribute, value)` API;
>
> 2) Register a name as an attribute via the `Module.register_attribute(module, attr)` API; For instance, `@behavior` seen above is registered as Erlang attribute, allowing it to be written to more than once;

## 3.6 Module nesting

In Elixir, nesting a module inside the other affects its name:

    defmodule Foo do
      defmodule Bar do
      end
    end

The example above will define two modules `Foo` and `Foo.Bar`. The second can be accessed as `Bar` inside `Foo` in the same lexical scope. If the nested module `Bar` is moved to another file, it needs to be referenced via the full name (`Foo.Bar`) or a reference need to be set using the directive `refer` discussed above.

## 3.7 References

In Erlang (and consequently in the Erlang VM), modules and functions are represented by atoms. For instance, this is valid Erlang code:

    Mod = lists,
    Mod:flatten([1,[2],3]).

In the example above, we store the atom `lists` in the variable `Mod` and then invoke the function `flatten` in it. In Elixir, exactly the same idiom is allowed. In fact, we could call the same function `flatten` in `lists` as:

    iex> :lists.flatten([1,[2],3])
    [1,2,3]

This mechanism is exactly what empowers Elixir references. A reference in Elixir is a capitalized identifier (like `List`, `Keyword`, etc) which is converted to an atom representing a module during compilation. For instance, by default `List` translates to the atom `__MAIN__.List`:

    iex> is_atom(List)
    true
    iex> to_binary(List)
    "__MAIN__.List"

References are powerful when used with the `refer` directive discussed above. For instance, let's imagine that our Math module relies heavily on the `List` module. If, at some point, we find out most algorithms in `List` could be implemented in a much faster way, we could implement `FastList` and use it as a drop-in replacement:

    defmodule Math do
      refer FastList, as: List
      # ...
    end

Now any reference to `List` will be automatically replaced by `FastList`. In case one wants to access the original `List`, it can be done by accessing the module name via `__MAIN__`:

    List.values           #=> uses FastList.values
    __MAIN__.List.values  #=> uses List.values

> Note: a reference does not actually ensure the referenced module really exists. For instance, `Foo.Bar.Baz` will return an atom regardless if a `Foo.Bar.Baz` module is defined or not.
