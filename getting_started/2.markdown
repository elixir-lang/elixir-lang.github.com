---
layout: getting_started
title: 2. Diving in
guide: 2
---

# 2 Diving in

In this chapter we'll go a bit deeper into the basic data-types, learn some control flow mechanisms and how to create and invoke anonymous functions.

## 2.1 Lists and tuples

Elixir provides both lists and tuples:

    iex> is_list [1,2,3]
    true
    iex> is_tuple {1,2,3}
    true

While both are used to store items, they differ on how those items are stored in memory. Lists are implemented as linked lists (where each item in the list points to the next item) while tuples are stored contiguously in memory.

This means that accessing a tuple element is very fast (constant time) and can be achieved using the `elem` function (notice that indexes in Elixir data-types start with `1`):

    iex> elem { :a, :b, :c }, 1
    :a

On the other hand, updating a tuple is expensive as it needs to duplicate the tuple contents in memory. Updating a tuple can be done with the `setelem` function:

    iex> setelem { :a, :b, :c }, 1, :d
    {:d,:b,:c}

> Note: If you are an Erlang developer, you will notice that we used the `elem` and `setelem` functions instead of Erlang's `element` and `setelement`. The reason for this choice is that Elixir attempts to normalize Erlang API's to always receive the `subject` of the function as the first argument.

Since updating a tuple is expensive, when we want to add or remove elements, we use lists. Since lists are linked, it means accessing the first element of the list is very cheap. Accessing the n-th element, however, will require the algorithm to pass through n-1 nodes before reaching the n-th. We can access the `head` of the list as follows:

    iex> [head | tail] = [1,2,3]
    [1,2,3]
    iex> head
    1
    iex> tail
    [2,3]
    iex> [head | tail]
    [1,2,3]
    iex> length [head | tail]
    3

In the example above, we have assigned the head of the list to the variable `head` and the tail of the list to the variable `tail`. The [`Enum` module](/docs/stable/Enum.html) provides several helpers to manipulate lists (and other enumerables in general) while the [`List` module](/docs/stable/List.html) provides several helpers specific to lists:

    iex> Enum.map [1,2,3], fn(x) -> x * 2 end
    [2,4,6]
    iex> List.flatten [1,[2],3]
    [1,2,3]

## 2.2 Keyword lists

Elixir also provides a special syntax to create a list of keywords. They can be created as follows:

    iex> [a: 1, b: 2]
    [{:a,1},{:b,2}]

Keyword lists are nothing more than a list of two element tuples, where the first element of the tuple is an atom. Keyword lists are ordered according to the first element of the tuple and not according to insertion order:

    iex> [foo: 1, bar: 2]
    [{:bar,2},{:foo,1}]

The reason for such ordering is faster access. Unlike dictionaries, keyword lists also allow duplicated entries:

    iex> [foo: 1, bar: 2, foo: 3]
    [{:bar,2},{:foo,1},{:foo,3}]

The [`Keyword` module](/docs/stable/Keyword.html) contains several functions that allow you to manipulate a keyword list ignoring duplicated entries or not. For example:

    iex> keywords = [foo: 1, bar: 2, foo: 3]
    iex> Keyword.get keywords, :foo
    1
    iex> Keyword.get_values keywords, :foo
    [1,3]

Since keyword lists are very frequently passed as arguments, they do not require brackets when given as the last argument in a function call. For instance, the examples below are valid and equivalent:

    iex> if(2 + 2 == 4, [do: "OK"])
    "OK"
    iex> if(2 + 2 == 4, do: "OK")
    "OK"
    iex> if 2 + 2 == 4, do: "OK"
    "OK"

## 2.3 Char lists and binaries

In the previous chapter we discussed double- and single-quoted strings. Double quoted strings are binaries while single-quoted strings are lists:

    iex> "string" == 'string'
    false
    iex> is_binary "string"
    true
    iex> is_list 'string'
    true

In fact, both double-quoted and single-quoted representations are just a shorter representation of binaries and lists. Considering that `?a` in Elixir returns the ASCII integer for the letter `a`, we can also write:

    iex> <<?a, ?b, ?c>>
    "abc"
    iex> [?a, ?b, ?c]
    'abc'

In such cases, Elixir detects that all characters in the list and in the binary are printable and returns the quoted representation. However, adding a non-printable character forces them to be printed differently:

    iex> <<?a, ?b, ?c, 1>>
    <<97,98,99,1>>

    iex> [?a, ?b, ?c, 1]
    [97,98,99,1]

Since lists are implemented as linked lists, a string represented as a list usually takes a lot of space in memory (in ASCII, it would be one byte for each character and another byte to point to the next character). For this reason, binary (double-quoted) strings are preferred unless you want to explicitly iterate over the string as a list.

Although a bit more verbose, it is also possible to do head/tail style pattern matching with binaries. A binary is made up of a number of parts which must be tagged with their type. Most of the time, Elixir will figure out the part's type and won't require any work from you:

    iex> <<102, "oo">>
    "foo"

In this example, we have two parts: the first is an integer and the second is a binary. However, if we use any other Elixir expression, Elixir can no longer guess the type:

    iex> rest = "oo"
    iex> <<102, rest>>
    ** (ArgumentError) argument error

When a variable or expression is given as a binary part, Elixir defaults the type of that part to an integer. In the example above, since we haven't specified a type, Elixir expected an integer but we passed a binary, resulting in `ArgumentError`. We can solve this by explicitly tagging it as a binary:

    iex> <<102, rest|:binary>>
    "foo"

The type can be `:integer`, `:float` or `:binary` (we can also pass endianness and signedness as type specifiers, but we'll leave that for later). In addition, we can also specify the bit size for each part:

    iex> <<102, rest|16>> = "foo"
    "foo"
    iex> <<102, rest|32>> = "foo"
    ** (MatchError) no match of right hand side value: "foo"

In the example above, the first expression matches because the right string "foo" takes 24 bits and we are matching against a binary of 24 bits as well, 8 of which are taken by the integer 102 and the remaining 16 bits are specified on the `rest`. On the second example, we expect a `rest` with size 32, which won't match.

If you would like to match the top of a binary against any other binary without caring about the size of the rest, you can specify the type as binary (which has an unspecified size):

    iex> <<102, rest|:binary>> = "foobar"
    "foobar"
    iex> rest
    "oobar"

This is equivalent to the head and tail pattern matching we saw in lists. There is much more to binaries and pattern matching in Elixir that allows great flexibility when working with such structures, but they are beyond the scope of a getting started guide.

Currently, Elixir does not ship with any library for doing string manipulation, but this will be amended soon.

## 2.4 Calling Erlang functions

Elixir's plan is to provide a small standard library responsible for handling most basic structures (lists, ordered dicts, strings and so forth) and IO. That said, complex applications will require the developer to use Erlang's libraries.

Erlang ships with a group of libraries called OTP (Open Telecom Platform). Besides being a standard library, OTP provides several facilities to build OTP applications with supervisors that are robust, distributed and fault-tolerant. Invoking those libraries from Elixir is quite straight-forward. For example, we can call the [function `flatten` from the module `lists`](http://www.erlang.org/doc/man/lists.html#flatten-1) as follows:

    iex> Erlang.lists.flatten [1,[2],3]
    [1,2,3]

Erlang's OTP is very well documented and easily navigable:

* [OTP docs](http://www.erlang.org/doc/)
* [Standard library docs](http://www.erlang.org/doc/man/STDLIB_app.html)

## 2.5 Pattern matching

When discussing lists earlier we saw the following example:

    iex> [h | t] = [1,2,3]
    [1, 2, 3]
    iex> h
    1
    iex> t
    [2, 3]

In Elixir, `=` does not mean assignment as in programming languages like Java and Ruby. `=` is actually a match operator which will check if the expressions on both left and right side match. Consider this example:

    iex> { 1, 2, 3 } = { 1, 2, 3 }
    { 1, 2, 3 }
    iex> { 1, 2, 3 } = { 1, 4, 3 }
    ** (MatchError) no match of right hand side value: {1,4,3}

If the tuples given on the left and right side do not match, an error is raised. If any of the tuples contain a variable, this variable will always be assigned:

    iex> { 1, x, 3 } = { 1, 2, 3 }
    { 1, 2, 3 }
    iex> x
    2
    iex> { 1, x, 3 } = { 1, 4, 3 }
    { 1, 4, 3 }
    iex> x
    4

This is exactly what happened in the list example:

    iex> [h | t] = [1,2,3]
    [1, 2, 3]

We have assigned the head of the list to `h` and the tail to `t`. In fact, if we want to check if the head of the list is `1` and assign the tail, we could do:

    iex> [1 | t] = [1,2,3]
    [1, 2, 3]
    iex> [0 | t] = [1,2,3]
    ** (MatchError) no match of right hand side value: [1,2,3]

If you want to pattern match against the value of a variable, you can use the `^` operator:

    iex> x = 1
    1
    iex> ^x = 1
    1
    iex> ^x = 2
    ** (MatchError) no match of right hand side value: 2
    iex> x = 2
    2

In Elixir, it is a common practice to assign a value to underscore `_` if we don't intend to use it. For example, if only the head of the list matters to us, we can assign the tail to underscore:

    iex> [h | _] = [1,2,3]
    [1, 2, 3]
    iex> h
    1

The variable `_` in Elixir is special in that it can never be read from. Trying to read from it gives an unbound variable error:

    iex> _
    ** (ErlangError) erlang error {:unbound_var, :_}

Although pattern matching allows us to build powerful constructs, its usage is limited. For instance, you cannot make function calls on the left side of the match. The following example is invalid:

    iex> Erlang.lists.flatten([1,[2],3]) = [1,2,3]
    ** (ErlangError) erlang error :illegal_pattern

## 2.6 Blocks

One of the first control flow constructs we usually learn is the conditional `if`. In Elixir, we can write `if` in these two ways:

    iex> if true, do: 1 + 2
    3
    iex> if true do
    ...>   1 + 2
    ...> end
    3

The second example uses the block syntax. We can also use `else` in the block syntax:

    if false do
      1 + 2
    else
      10 + 3
    end

Elixir blocks work similarly to Ruby blocks. For example, a developer could add parentheses as follow:

    if(false) do
      1 + 2
    else
      10 + 3
    end

It is also important to notice that `do`/`end` always binds to the farthest function call. For example, the following expression:

    Enum.map [1,2,3], fn(x) do
      x * 2
    end

Would be parsed as:

    Enum.map([1,2,3], fn(x)) do
      x * 2
    end

Which is not what we want since `do` is binding to the farthest function call; in this case `Enum.map`. For this reason, we always use the `->` syntax for functions and reserve `do/end` for the remaining control structures:

    Enum.map [1,2,3], fn(x) ->
      x * 2
    end

Which is then parsed as:

    Enum.map([1,2,3], fn(x) ->
      x * 2
    end)

## 2.7 Control flow structures

In this section we'll describe Elixir's main control flow structures.

### 2.7.1 If

Refreshing from the section above, all these calls behave the same:

    if false, do: 1 + 2, else: 10 + 3

    if false do
      1 + 2
    else
      10 + 3
    end

In Elixir, all values except `false` and `nil` evaluate to `true`. Therefore there is no need to explicit convert the `if` argument to a boolean. If you want to check if one of many conditions are true, you can use the `cond` macro.

### 2.7.2 Cond

`cond` allows you to check many expressions and executes the first one that evaluates to true:

    cond do
      2 + 2 == 5 ->
        "This will never match"
      2 * 2 == 3 ->
        "Nor this"
      1 + 1 == 2 ->
        "But this will"
    end

If none of the expressions above return true, an error would be raised.

### 2.7.3 Other boolean operators

In the previous chapter, we discussed the boolean operators `and`, `or` and `not`. These operators are strict in that they only accept booleans as their first argument.

Elixir provides three operators with similar functionality but that accept arguments of any type: `||`, `&&` and `!`. For these operators, all values except `false` and `nil` will evaluate to true.

    # or
    iex> 1 || true
    1
    iex> false || 11
    11

    # and
    iex> nil && 13
    nil
    iex> true && 17
    17

    # !
    iex> !true
    false
    iex> !1
    false
    iex> !nil
    true

As a rule of thumb, use `and`, `or` and `not` when both arguments are expected to be booleans, as in guard clauses. If any of the arguments are non-booleans, use `&&`, `||` and `!`.

### 2.7.4 Case

In section 2.5, we introduced pattern matching via the `=` operator. Sometimes, however, it is convenient to compare an expression against several expressions until we find a matching one. In this scenario, we use `case`:

    case { 1, 2, 3 } do
      { 4, 5, 6 } ->
        "This won't match"
      { 1, x, 3 } ->
        "This will match and assign x to 2"
      _ ->
        "This is a match any clause"
    end

As in the `=` operator, any assigned variable will be overridden in the match clause. If you want to pattern match against a variable, you need to use the `^` operator:

    x = 1
    case 10 do
      ^x -> "Won't match"
      _  -> "Will match"
    end

Each match clause also supports special conditions specified via guards:

    case { 1, 2, 3 } do
      { 4, 5, 6 } ->
        "This won't match"
      { 1, x, 3 } when x > 0 ->
        "This will match and assign x"
      _ ->
        "No match"
    end

In the example above, the second clause will only match when x is positive. The Erlang VM only allows the following expressions as guards:

* comparison operators (`==`, `!=`, `===`, `!===`, `>`, `<`, `<=`, `>=`);
* strict boolean operators (`and`, `or`, `not`). Note that `||` and `&&` are not allowed;
* arithmetic operators (`+`, `-`, `*`, `/`);
* `<>` and `++` as long as the left side is a literal;
* all the following type check functions:

    * is_atom/1
    * is_binary/1
    * is_bitstring/1
    * is_boolean/1
    * is_float/1
    * is_function/1
    * is_function/2
    * is_integer/1
    * is_list/1
    * is_number/1
    * is_pid/1
    * is_port/1
    * is_record/2
    * is_record/3
    * is_reference/1
    * is_tuple/1
    * is_exception/1

* plus these functions:

    * abs(Number)
    * bit_size(Bitstring)
    * byte_size(Bitstring)
    * div(Number, Number)
    * elem(Tuple, n)
    * float(Term)
    * hd(List)
    * length(List)
    * node()
    * node(Pid|Ref|Port)
    * rem(Number, Number)
    * round(Number)
    * self()
    * size(Tuple|Bitstring)
    * tl(List)
    * trunc(Number)
    * tuple_size(Tuple)

Many independent guard clauses can also be given at the same time. For example, consider a function that checks if the first element of a tuple or a list is zero. It could be written as:

    def first_is_zero?(tuple_or_list) when
      elem(tuple_or_list, 1) == 0 or hd(tuple_or_list) == 0 do
      true
    end

However, the example above will always fail. If the argument is a list, calling `elem` on a list will raise an error. If the element is a tuple, calling `hd` on a tuple will also raise an error. To fix this, we can rewrite it to become two different clauses:

    def first_is_zero?(tuple_or_list) when
      elem(tuple_or_list, 1) == 0 when
      hd(tuple_or_list) == 0 do
      true
    end

In such cases, if there is an error in one of the guards, it won't affect the next one.

### 2.7.5 Functions

In Elixir, creating a function is similar to the `case` mechanism we have just seen. It allows us to define a function with many clauses:

    f = function do
      x, y when x > 0 -> x + y
      x, y -> x * y
    end

    f.(1, 3)  #=> 4
    f.(-1, 3) #=> -3

A function with one clause can be defined with a (preferred) shortcut syntax as follows:

    function = fn x, y -> x + y end

This is the syntax that's going to be used throughout this guide.

As Elixir is an immutable language, the binding of the function is also immutable. This means that setting a variable inside the function does not affect its outer scope:

    x = 1
    (fn -> x = 2 end).()
    x #=> 1

### 2.7.6 Try

The next control-flow mechanism is `try/catch/after`:

    iex> try do
    ...>   throw 13
    ...> catch
    ...>   number -> number
    ...> end
    13

`try/catch` is the main mechanism for catching values thrown by Elixir at runtime. It also supports an `after` clause that is invoked regardless of whether or not the value was caught:

    iex> try do
    ...>   throw 13
    ...> catch
    ...>   nan when not is_number(nan) -> nan
    ...> after
    ...>   IO.puts "Didn't catch"
    ...> end
    Didn't catch
    ** throw 13
        erl_eval:expr/3

There is one particularity that applies to `try/catch/after` when compared to other control-flow expressions. The Erlang VM considers such clauses unsafe (since they may or may not fail) and does not allow variables defined inside `try/catch/after` to be accessed from the outer scope:

    iex> try do
    ...>   new_var = 1
    ...> catch
    ...>   value -> value
    ...> end
    1
    iex> new_var
    ** error :undef

The common strategy is to explicitly make all arguments that are required after the `try`:

    { x, y } = try do
      x = calculate_some_value()
      y = some_other_value()
      { x, y }
    catch
      _ -> { nil, nil }
    end

    x #=> returns the value of x or nil for failures

### 2.7.7 Rescue

For catching exceptions in Elixir, we can use `rescue` instead of `catch`. In addition to allowing the same pattern matching rules as `catch`, `rescue` also allows a developer to easily rescue an exception by its name and not by its internal contents. Consider the following examples:

    # rescue only runtime error
    try do
      raise "some error"
    rescue
      RuntimeError -> "rescued"
    end

    # rescue runtime and argument errors
    try do
      raise "some error"
    rescue
      [RuntimeError, ArgumentError] -> "rescued"
    end

    # rescue and assign to x
    try do
      raise "some error"
    rescue
      x in [RuntimeError] ->
        # all exceptions respond to message
        x.message
    end

    # rescue all (discouraged) and assign to x
    try do
      raise ArgumentError, message: "unexpected argument"
    rescue
      x -> x.message
    end

Custom exceptions can be defined using the `defexception` macro. You can check a list of defined exceptions in [our documentations page](/docs/stable/), by clicking "Records" in the upper left corner.

### 2.7.8 Receive

The last control-flow mechanism we are going to discuss is essential to Elixir's and Erlang's actor mechanism. In Elixir, the code is run in separate processes that exchange messages between them. Those processes are not Operating System processes (they are actually quite light-weight) but are called so since they do not share state with each other.

In order to exchange messages, each process has a mailbox where the received messages are stored. The `receive` mechanism allows us to go through this mailbox searching for a message that matches the given pattern. Here is an example that uses the arrow operator `<-` to send a message to the current process and then collects this message from its mailbox:

    # Get the current process id
    iex> current_pid = Process.self

    # Spawn another process that will send a message to current_pid
    iex> spawn fn ->
      current_pid <- { :hello, Process.self }
    end
    <0.36.0>

    # Collect the message
    iex> receive do
    ...>   { :hello, pid } ->
    ...>     IO.puts "Hello from #{inspect(pid)}"
    ...> end
    Hello from <0.36.0>

You may not see exactly `<0.36.0>` back, but something similar. If there are no messages in the mailbox, the current process will hang until a matching message arrives unless an after clause is given:

    iex> receive do
    ...>   :waiting ->
    ...>     IO.puts "This may never come"
    ...> after
    ...>   1000 -> # 1 second
    ...>     IO.puts "Too late"
    ...> end
    Too late

Notice we spawned a new function using the `spawn` function passing another function as argument. Elixir also supports `spawn_link`, which spawns a child process but keeps the parent and child connected. This way, if the child dies unexpectedly, the parent receives a notification. [`Process`](/docs/stable/Process.html) and [`Node`](/docs/stable/Node.html) modules contains many functions to manage processes, including spawning and get information about processes running in other nodes in the network.

## 2.8 Built-in functions

Elixir ships with many built-in functions automatically available in the current scope. In addition to the control flow expressions seen above, Elixir also adds: `elem` and `setelem` to read and set values in tuples, `inspect` that returns the representation of a given data type as a string, and many others. All of these functions imported by default are available in [`Kernel`](/docs/stable/Kernel.html) and [Elixir special forms are available in `Kernel.SpecialForms`](/docs/stable/Kernel.SpecialForms.html).

All of these functions and control flow expressions are essential for building Elixir programs. The next chapter will discuss how to organize our code into modules, so it can be easily reused between different components.
