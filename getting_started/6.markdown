---
layout: getting_started
title: 6. Other topics
guide: 6
---

# 6 Other topics

This chapter contains different small topics that are part of Elixir's day to day work. We will learn about writing documentation, list and binary comprehensions, partial function application and more!

## 6.1 String sigils

Elixir provides string sigils via the token `%`:

    %b(Binary with escaping and interpolation)
    %B(Binary without escaping \n and without #{interpolation})

Sigils starting with an uppercase letter never escape characters or do interpolation. Notice the separators are not necessarily parenthesis, but any non-alphanumeric character:

    %b-another binary-

Internally, `%b` is translated as a function call to `__b__`. For instance, the docs for `%b` are available [in the function `__b__/2` defined in `Kernel` module](/docs/stable/Kernel.html#__b__/2).

The sigils defined in Elixir by default are:

* `%b` and `%B` - Returns a binary;
* `%c` and `%C` - Returns a char list;
* `%r` and `%R` - Returns a regular expression;

## 6.2 Heredocs

Elixir supports heredocs as a way to define long strings. Heredocs are delimited by triple double-quotes for binaries or triple single-quotes for char lists:

    """
    Binary heredoc
    """

    '''
    Charlist heredoc
    '''

The heredoc ending must be in a line on its own, otherwise it is part of the heredoc:

    """
    Binary heredocs in Elixir use """
    """

Notice the sigils discussed in the previous section are also available as heredocs:

    %B"""
    A heredoc without escaping or interpolation
    """

## 6.3 Documentation

Elixir uses module attributes described in chapter 3 to drive its documentation system. For instance, consider the following example:

    defmodule MyModule do
      @moduledoc "It does X"

      @doc "Returns the version"
      def version, do: 1
    end

In the example above, we are adding a module documentation to `MyModule` via `@moduledoc` and using `@doc` to document each function. When compiled, we are able to inspect the documentation attributes at runtime (remember to start iex in the same directory in which you compiled the module):

    $ elixirc my_module.ex
    $ iex
    iex> MyModule.__info__(:docs)
    [{ { :version, 0 }, 5, :def, [], "Returns the version" }]
    iex> MyModule.__info__(:moduledoc)
    {1,"It does X"}

`__info__(:docs)` returns a list of tuples where each tuple contains a function/arity pair, the line the function was defined on, the kind of the function (`def` or `defmacro`, private functions cannot be documented), the function arguments and its documentation. The comment will be either a binary or `nil` (not given) or `false` (explicit no doc).

Similarly, `__info__(:moduledoc)` returns a tuple with the line the module was defined on and its documentation.

Elixir promotes the use of markdown with heredocs to write readable documentation:

    defmodule Math do
      @moduledoc """
      This module provides mathematical functions
      as sin, cos and constants like pi.

      ## Examples

          Math.pi
          #=> 3.1415...

      """
    end

## 6.4 IEx Helpers

Elixir's interactive console (IEx) ships with many functions to make the developer's life easier. One of these functions is called `h`, which shows documentation directly at the command line:

    iex> h()
    # IEx.Helpers
    ...
    :ok

As you can see, invoking `h()` prints the documentation of `IEx.Helpers`. From there, we can navigate to any of the other helpers by giving its name and arity to get more information:

    iex> h(c/2)
    * def c(files, path // ".")
    ...
    :ok

This functionality can also be used to print the documentation for any Elixir module in the system:

    iex> h(Enum)
    ...
    iex> h(Enum.each/2)
    ...

The documentation for built-in functions can also be accessed directly or indirectly from the `Kernel` module:

    iex> h(is_atom/1)
    ...
    iex> h(Kernel.is_atom/1)
    ...

## 6.5 Function retrieval and partial application

Elixir supports a convenient syntax for retrieving functions. Let's suppose we have a list of binaries and we want to calculate the size of each of them. We could do it in the following way:

    iex> list = ["foo", "bar", "baz"]
    ["foo","bar","baz"]
    iex> Enum.map list, fn(x) -> size(x) end
    [3,3,3]

We could also write this as:

    iex> Enum.map list, size(&1)
    [3,3,3]

The example above works as if `size(&1)` translates directly to `fn(x) -> size(x) end`. Since operators are also function calls, they can also benefit of the same syntax:

    iex> Enum.reduce [1,2,3], 0, &1 * &2
    6

In this case, `&1 * &2` translates to `fn(x, y) -> x * y end`. The values `&1` and `&2` maps to the argument order in the generated function.

This syntax can also be used to do partial application in Elixir. For instance, if we want to multiply each item in a list per two, we could write it as:

    iex> Enum.map [1,2,3], &1 * 2
    [2,4,6]

All functions and macros can be retrieved and partially applied, except [Elixir's special forms](/docs/stable/Kernel.SpecialForms.html).

## 6.6 Use

`use` is a macro that provides a common API for extension. For instance, in order to use the `ExUnit` test framework that ships with Elixir, you simply need to use `ExUnit.Case` in your module:

    defmodule AssertionTest do
      use ExUnit.Case, async: true

      def test_always_pass do
        true = true
      end
    end

By calling `use`, a hook called `__using__` will be invoked in `ExUnit.Case` which will then do the proper setup. The `use` call above is simply a translation to:

    defmodule AssertionTest do
      require ExUnit.Case
      ExUnit.Case.__using__(async: true)

      def test_always_pass do
        true = true
      end
    end

In general, we recommend APIs to provide a `__using__` hook in case they want to expose functionality to developers.

## 6.7 Comprehensions

Elixir also provides list and bit comprehensions. List comprehensions allow you to quickly build a list from another list:

    iex> lc n inlist [1,2,3,4], do: n * 2
    [2,4,6,8]

Or, using keywords blocks:

    lc n inlist [1,2,3,4] do
      n * 2
    end

A comprehension accepts many generators (given by `inlist` or `inbits` operators) as well as filters:

    # A comprehension with a generator and a filter
    iex> lc n inlist [1,2,3,4,5,6], rem(n, 2) == 0, do: n
    [2,4,6]

    # A comprehension with two generators
    iex> lc x inlist [1,2], y inlist [2,3], do: x*y
    [2,3,4,6]

Elixir provides generators for both lists and bitstrings:

    # A list generator:
    iex> lc n inlist [1,2,3,4], do: n * 2
    [2,4,6,8]

    # A bit string generator:
    iex> lc <<n>> inbits <<1,2,3,4>>, do: n * 2
    [2,4,6,8]

Bit string generators are quite useful when you need to organize streams:

    iex> pixels = <<213,45,132,64,76,32,76,0,0,234,32,15>>
    iex> lc <<r:8,g:8,b:8>> inbits pixels, do: {r,g,b}
    [{213,45,132},{64,76,32},{76,0,0},{234,32,15}]

Remember, as strings are binaries and a binary is a bitstring, we can also use strings in comprehensions. For instance, the example below removes all white space characters from a string via bit comprehensions:

    iex> bc <<c>> inbits " hello world ", c != ?\s, do: <<c>>
    "helloworld"

## 6.8 Pseudo variables

Elixir provides a set of pseudo-variables. These variables can only be read and never assigned to. They are:

* `__MODULE__` - Returns an atom representing the current module or nil;
* `__FILE__` - Returns a string representing the current file;
* `__ENV__` - Returns a [Macro.Env](/docs/stable/Macro.Env.html) record with information about the compilation environment. Here we can access the current module, function, line, file and others;
* `__CALLER__` - Also returns a [Macro.Env](/docs/stable/Macro.Env.html) record but with information of the calling site. `__CALLER__` is available only inside macros;

## 6.9 Native compilation

Elixir can compile to native code using the Hipe compiler. All you need to do is export the following environment variable before running your code:

    export ERL_COMPILER_OPTIONS=native
