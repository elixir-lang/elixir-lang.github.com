---
layout: getting_started
title: 6 Other topics
guide: 6
total_guides: 7
---

# {{ page.title }}

This chapter contains a number of small topics that are the kinds of things you do every day in Elixir. We'll learn about writing documentation, comprehensions, partial function application and more!

## 6.1 Sigils

Sigils are a way of representing constants that contain character data. They all start with  `~`.

* `~c` and `~C` - Returns a char list;
* `~r` and `~R` - Returns a regular expression;
* `~s` and `~S` - Returns a string;
* `~w` and `~W` - Returns a list of "words" split by whitespace;

Sigils starting with an uppercase letter never escape characters or do interpolation.

Following the letter, the body of a sigil is delimited by one of the character pairs `<>`, `{}`, `[]`, `()`, or by the single characters `||`, `//`, `"` or `'`.

```elixir
~s(String with escape codes \x26 interpolation)
~S(String without escape codes and without #{interpolation})
~s|another string|
~r/a regular expression/
~w{ cat dog elk fox }
```

Internally, `~s` is translated as a call to `sigil_s`. For instance, the docs for `~s` are available in the macro [`sigil_s/2`](/docs/stable/Kernel.html#sigil_s/2) defined in the `Kernel` module.

You are free to define your own sigilsâ€”for the sigil `~q` define a function `sigil_q/2`.


## 6.2 Heredocs

Elixir supports heredocs as a way to define long strings. Heredocs are delimited by triple double-quotes for string or triple single-quotes for char lists:

```elixir
"""
String heredoc
"""

'''
Charlist heredoc
'''
```

The heredoc ending must be in a line on its own, otherwise it is part of the heredoc:

```elixir
"""
String heredocs in Elixir use """
"""
```

Notice the sigils discussed in the previous section are also available as heredocs:

```elixir
~S"""
A heredoc without escaping or interpolation
"""
```

## 6.3 Documentation

Elixir uses module attributes described in chapter 3 to drive its documentation system. For instance, consider the following example:

```elixir
defmodule MyModule do
  @moduledoc "it does x"

  @doc "returns the version"
  def version, do: 1
end
```

In the example above, we are adding a module documentation to `MyModule` via `@moduledoc` and using `@doc` to document each function. When compiled, we are able to inspect the documentation attributes at runtime (remember to start iex in the same directory in which you compiled the module):

    $ elixirc my_module.ex
    $ iex

```iex
iex> MyModule.__info__(:docs)
[{ { :version, 0 }, 5, :def, [], "Returns the version" }]
iex> MyModule.__info__(:moduledoc)
{1,"It does X"}
```

`__info__(:docs)` returns a list of tuples where each tuple contains a function/arity pair, the line the function was defined on, the kind of the function (either `def` or `defmacro`, private functions defined with `defp` or `defmacrop` cannot be documented), the function arguments and its documentation. The comment will be either a binary or `nil` (not given) or `false` (explicit no doc).

Similarly, `__info__(:moduledoc)` returns a tuple with the line the module was defined on and its documentation.

Elixir promotes the use of markdown with heredocs to write readable documentation:

```elixir
defmodule Math do
  @moduledoc """
  This module provides mathematical functions
  as sin, cos and constants like pi.

  ## Examples

      Math.pi
      #=> 3.1415...

  """
end
```

## 6.4 IEx Helpers

Elixir's interactive console (IEx) ships with many functions to make the developer's life easier. One of these functions is called `h`, which shows documentation directly at the command line:

```iex
iex> h()
# IEx.Helpers
...
:ok
```

As you can see, invoking `h()` prints the documentation of `IEx.Helpers`. From there, we can navigate to any of the other helpers by giving its name and arity to get more information:

```iex
iex> h(c/2)
* def c(files, path \\ ".")
...
:ok
```

This functionality can also be used to print the documentation for any Elixir module in the system:

```iex
iex> h(Enum)
...
iex> h(Enum.each/2)
...
```

The documentation for built-in functions can also be accessed directly or indirectly from the `Kernel` module:

```iex
iex> h(is_atom/1)
...
iex> h(Kernel.is_atom/1)
...
```

## 6.5 Function capture

Functions in Elixir are identified by their name and arity (the number of arguments it expects). Since passing functions around is a common practice in Elixir, Elixir provides the capture operator `&` as a convenience. Consider this example:

```iex
iex> list = ["foo", "bar", "baz"]
["foo","bar","baz"]
iex> Enum.map list, fn(x) -> size(x) end
[3,3,3]
```

We could write the second line using the capture operator as:

```iex
iex> Enum.map list, &size/1
[3,3,3]
```

The capture operator retrieves the function size with arity 1 as an anonymous function and passes it down to `Enum.map/2`. Remote calls can also be captured:

```iex
iex> fun = &Kernel.size/1
&Kernel.size/1
iex> fun.("hello")
5
```

A capture also allows the captured functions to be partially applied, for example:

```iex
iex> fun = &rem(&1, 2)                  
#Function<6.80484245 in :erl_eval.expr/5>
iex> fun.(4)
0
```

In the example above, we use `&1` as a placeholder, generating a function with one argument. The capture above is equivalent to `fn(x) -> rem(x, 2) end`.

Since operators are treated as regular function calls in Elixir, they are also supported, although they require explicit parentheses:

```iex
iex> fun = &(&1 + &2)
iex> fun.(1, 2)
3
```

The capture operator is a handy way of capturing functions and passing them around as anonymous functions. To learn more, [read the documentation](http://elixir-lang.org/docs/stable/Kernel.SpecialForms.html#&/1).

## 6.6 Use

`use` is a macro that provides a common API for extension. For instance, in order to use the `ExUnit` test framework that ships with Elixir, you simply need to use `ExUnit.Case` in your module:

```elixir
defmodule AssertionTest do
  use ExUnit.Case, async: true

  test "always pass" do
    true = true
  end
end
```

This allows `ExUnit.Case` to configure and set up the module for testing, for example, by making the `test` macro used above available.

The implementation of the `use` macro is actually quite trivial. When you invoke `use` with a module, it invokes a hook called `__using__` in this module. For example, the `use` call above is simply a translation to:

```elixir
defmodule AssertionTest do
  require ExUnit.Case
  ExUnit.Case.__using__(async: true)

  test "always pass" do
    true = true
  end
end
```

In general, we recommend APIs to provide a `__using__` hook in case they want to expose functionality to developers.

## 6.7 Comprehensions

Comprehensions allow you to quickly build a collection from one or more other collections or binaries, optionally applying filters and transformations:

```iex
iex> for n <- [1,2,3,4], do: n * 2
[2,4,6,8]
```

Or, using the block form of `do`:

```elixir
for n <- [1,2,3,4] do
  n * 2
end
```

The phrase `n <- [1,2,3,4]` is an example of a _generator_. The right hand side is any enumerable value, and the left is a pattern. The enumerable is iterated, and successive values are matched against the pattern.

The generator can also extract values from a binary. The syntax for this is

```iex
iex> binary = "hello"
"hello"
iex> for << x <- binary >>, do: { x }
[{104}, {101}, {108}, {108}, {111}]

# THe binary can be a literal, too
iex> for << x <- << 1, 2, 3 >> >>, do:  64+x 
'ABC'
```

A comprehension accepts many generators as well as filters:

```iex
# A comprehension with a generator and a filter
iex> for n <- [1,2,3,4,5,6], rem(n, 2) == 0, do: n
[2, 4, 6]

# A comprehension with two generators and a filter
iex> for x <- 1..10, y <- [3,5], x < y, do: x*y
[3, 5, 6, 10, 15, 20]
```

The default result of a comprehension is a list containing the values returned by the `do` block. You can modify this using the `into:` option. This takes any value that implements `Collectable`, and fills it with successive values from the `do` block.

```iex
# Insert values into an empty map
iex> for n <- [1,2,3,4], into: %{}, do: {n, n*2}
%{1 => 2, 2 => 4, 3 => 6, 4 => 8}

# Insert values into a non-empty binary (string)
iex> for ch <- 65..69, into: "The result is: ", do: <<ch, ch+32>>
"The result is: AaBbCcDdEe"
```

Bit string generators are quite useful when you need to organize streams:

```iex
iex> pixels = <<213,45,132,64,76,32,76,0,0,234,32,15>>
iex> for << <<r :: size(8), g :: size(8), b :: size(8)>> <- pixels >>, do: {r,g,b}
[{213, 45, 132}, {64, 76, 32}, {76, 0, 0}, {234, 32, 15}]
```

Remember, as strings are binaries and a binary is a bitstring, we can also use strings in comprehensions. For instance, the example below removes all white space characters from a string:

```iex
iex> for << <<ch>> <- " hello world ">>, ch != ?\s, into: "", do: <<ch>>
"helloworld"
```

## 6.8 Pseudo variables

Elixir provides a set of pseudo-variables. These variables can only be read and never assigned to. They are:

* `__MODULE__` - Returns an atom representing the current module or nil;
* `__DIR__` - Returns a string representing the current directory;
* `__ENV__` - Returns a [Macro.Env](/docs/stable/Macro.Env.html) record with information about the compilation environment. Here we can access the current module, function, line, file and others;
* `__CALLER__` - Also returns a [Macro.Env](/docs/stable/Macro.Env.html) record but with information of the calling site. `__CALLER__` is available only inside macros;
