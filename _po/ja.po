msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2018-08-11 01:00+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"          1> application:start(iex).\n"
"          ok"
msgstr ""

msgid ""
"          User switch command\n"
"           --> s 'Elixir.IEx'\n"
"           --> c"
msgstr ""

msgid ""
"          def deps do\n"
"            [ { :lingex, github: \"maximk/lingex\" } ]\n"
"          end"
msgstr ""

msgid ""
"          def project do\n"
"            [ lingex_opts: [\n"
"                build_host: \"build.erlangonxen.org:8080\",\n"
"          \t\t\tusername: \"test\",\n"
"          \t\t\tpassword: \"test\" ] ]\n"
"          end"
msgstr ""

msgid ""
"       list <- list_of(positive_integer())\n"
"       #=> [4]"
msgstr ""

msgid ""
"      # Initialize @tests to an empty list\n"
"      @tests []"
msgstr ""

msgid ""
"      # Invoke TestCase.__before_compile__/1 before the module is compiled\n"
"      @before_compile TestCase\n"
"    end\n"
"  end"
msgstr ""

msgid ""
"      :elixir_compiler.file_to_path(current, output)\n"
"      send parent, { :compiled, Process.self() }\n"
"    end)"
msgstr ""

msgid ""
"      <!-- <div class=\"entry-meta\">\n"
"      </div> -->\n"
"    </div>\n"
"  </div>\n"
"</div>"
msgstr ""

msgid "      </div><!-- #main -->"
msgstr ""

msgid "      <div class=\"clear\"></div>"
msgstr ""

msgid ""
"      <div class=\"clear\"></div>\n"
"    </div>"
msgstr ""

msgid ""
"      <div class=\"entry-content\">\n"
"        {{ content }}\n"
"      </div>"
msgstr ""

msgid ""
"      <div class=\"entry-summary\">\n"
"        {{ post.excerpt }}\n"
"      </div><!-- .entry-summary -->"
msgstr ""

msgid ""
"      <div id=\"copyright\">\n"
"        &copy; 2012–{{ 'now' | date: \"%Y\" }} <a href=\"http://plataformatec.com"
".br/\">Plataformatec</a>. All rights reserved.\n"
"      </div>\n"
"    </div><!-- .wrap -->\n"
"  </div><!-- #container -->"
msgstr ""

msgid ""
"      <div id=\"menu-primary\" class=\"menu-container\">\n"
"        <div class=\"menu\">\n"
"          <ul id=\"menu-primary-items\">\n"
"            <li class=\"menu-item home\"><a class=\"spec\" href=\"/\">Home</a></li>\n"
"            <li class=\"menu-item install\"><a class=\"spec\" href=\"/install.html\""
">Install</a></li>\n"
"            <li class=\"menu-item getting-started\"><a class=\"spec\" href=\"/getti"
"ng-started/introduction.html\">Guides</a></li>\n"
"            <li class=\"menu-item learning\"><a class=\"spec\" href=\"/learning.htm"
"l\">Learning</a></li>\n"
"            <li class=\"menu-item docs\"><a class=\"spec\" href=\"/docs.html\">Docs<"
"/a></li>\n"
"            <li class=\"menu-item development\"><a class=\"spec\" href=\"/developme"
"nt.html\">Development</a></li>\n"
"            <li class=\"menu-item blog\"><a class=\"spec\" href=\"/blog/\">Blog</a><"
"/li>\n"
"            <li class=\"menu-item packages\"><a class=\"spec\" href=\"https://hex.p"
"m/\">Packages</a></li>\n"
"          </ul>\n"
"        </div>\n"
"      </div>"
msgstr ""

msgid ""
"      <p><a href=\"{{ post.url }}\" title=\"{{ post.title }}\" rel=\"bookmark\">Cont"
"inue reading →</a></p>\n"
"  </div>\n"
"  {% endfor %}\n"
"</div><!-- .hfeed -->"
msgstr ""

msgid ""
"      <p>All Elixir code runs inside lightweight threads of execution (called "
"processes) that are isolated and exchange information via messages:</p>"
msgstr ""
"      <p>全てのElixirのコードは、隔離された軽量の実行スレッド（プロセスと呼ばれる）の中で動作し、メッセージを通して情報をやり取りします。</"
"p>"

msgid ""
"      <p>As an example, let&rsquo;s write a simple test case using <a href=\"ht"
"tps://hexdocs.pm/ex_unit/\">Elixir&rsquo;s test framework called ExUnit</a>:</p"
">"
msgstr ""
"      <p>例として、 <a href=\"https://hexdocs.pm/ex_unit/\">ExUnitと呼ばれるElixirのテストフレーム"
"ワーク</a> を使った簡単なテストケースを書いてみましょう。</p>"

msgid ""
"      <p>Due to their lightweight nature, it is not uncommon to have hundreds "
"of thousands of processes running <i>concurrently</i> in the same machine. Iso"
"lation allows processes to be garbage collected independently, reducing system"
"-wide pauses, and using all machine resources as efficiently as possible (vert"
"ical scaling).</p>"
msgstr ""
"      <p>その軽量性により、同一のマシン内で数千のプロセスが <i>同時に</i> 起動することも珍しくありません。プロセスの隔離により、各プロセス"
"が個別にガベージコレクションされることを許容し、システムの広範に及ぶポーズを減らし、全てのマシンリソースを可能な限り効率的に使うことが出来ます。（垂直拡張）"
"</p>"

msgid ""
"      <p>Elixir leverages the Erlang VM, known for running low-latency, distri"
"buted and fault-tolerant systems, while also being successfully used in web de"
"velopment and the embedded software domain.</p>"
msgstr ""
"      <p>Elixirは、低レイテンシで分散型のフォールトトレラントシステムや、Webや組み込みシステムの領域で成功を収めている、Erlang VM"
"を利用します。</p>"

msgid ""
"      <p>Elixir relies heavily on those features to ensure your software is wo"
"rking under the expected constraints. And when it is not, don&rsquo;t worry, s"
"upervisors have your back!</p>\n"
"    </div>\n"
"  </div>"
msgstr ""
"      <p>予期される様々な制約の下で、ソフトウェアが動作することを確実にするために、Elixirはこれらの特徴に強く依存します。そしてもし動作しなか"
"ったとしても心配無用です。その場合はスーパーバイザがサポートします。</p>\n"
"    </div>\n"
"  </div>"

msgid ""
"      <p>Mix is also able to manage dependencies and integrates nicely with th"
"e <a href=\"https://hex.pm/\">Hex package manager</a>, which provides dependency"
" resolution and the ability to remotely fetch packages.</p>\n"
"    </div>\n"
"  </div>"
msgstr ""

msgid ""
"      <p>Processes are also able to communicate with other processes running o"
"n different machines in the same network. This provides the foundation for dis"
"tribution, allowing developers to coordinate work across multiple nodes (horiz"
"ontal scaling).</p>\n"
"    </div>\n"
"  </div>"
msgstr ""
"      <p>プロセスは、同一のネットワーク内に存在する、他のマシン上で動作しているプロセスとも通信することが出来ます。これは分散型システムの基盤となり"
"、複数のノードにまたがったシステムの構築を可能にします。（水平拡張）</p>\n"
"    </div>\n"
"  </div>"

msgid ""
"      <p>The <code>async: true</code> option allows <code>test</code>s to run "
"in parallel, using as many CPU cores as possible, while the <code>assert</code"
"> functionality can introspect your code, providing great reports in case of f"
"ailures. Those features are built using Elixir macros, making it possible to a"
"dd new constructs as if they were part of the language itself.</p>\n"
"    </div>\n"
"  </div>"
msgstr ""
"      <p><code>async: true</code> オプションは、可能な限り多くのCPUコアを使うことで、各 <code>test</cod"
"e> を並列に実行することを可能にします。<code>assert</code> はコードを内観でき、テスト失敗時に素晴らしいレポートを提供してくれます。こ"
"れらの機能はElixirのマクロを利用して実現されており、あたかもそれが言語の一部であるかのように、新しい構文を追加することが可能です。</p>\n"
"    </div>\n"
"  </div>"

msgid ""
"      <p>To cope with failures, Elixir provides supervisors which describe how"
" to restart parts of your system when things go awry, going back to a known in"
"itial state that is guaranteed to work:</p>"
msgstr ""
"      <p>障害に対処するために、Elixirはスーパーバイザを提供します。スーパーバイザは何かが失敗した時にシステムの構成要素をどのようにリスタート"
"するかや、動作が保証された既知の初期状態に戻す方法を表します。</p>"

msgid ""
"      <p>To learn more about Elixir, check our <a href=\"/getting-started/intro"
"duction.html\">getting started guide</a> and our <a href=\"/learning.html\">learn"
"ing page for other resources</a>. Or keep reading to get an overview of the pl"
"atform, language and tools.</p>\n"
"    </div>\n"
"  </div>"
msgstr ""
"      <p>詳しくは <a href=\"/getting-started/introduction.html\">getting started gui"
"de</a> や <a href=\"/learning.html\">learning page for other resources</a>をご覧ください"
"。以下ではElixirのプラットフォームや言語、ツールの概要を説明します。</p>\n"
"    </div>\n"
"  </div>"

msgid ""
"      <p>To learn more about Elixir, check our <a href=\"/getting-started/intro"
"duction.html\">getting started guide</a>. We also have <a href=\"/docs.html\">onl"
"ine documentation available</a> and a <a href=\"/crash-course.html\">Crash Cours"
"e for Erlang developers</a>.</p>\n"
"    </div>\n"
"  </div>\n"
"</div>"
msgstr ""

msgid ""
"      <p>When mixed with guards, pattern matching allows us to elegantly match"
" and assert specific conditions for some code to execute:</p>"
msgstr ""
"      <p>ガードとパターンマッチングをの組み合わせは、あるコードを実行するための特定の条件を、エレガントに match, assert することを可"
"能にします。</p>"

msgid ""
"      def undefined_lambda(module, fun, args) do\n"
"        ensure_loaded(module)\n"
"        :error_handler.undefined_lambda(module, fun, args)\n"
"      end"
msgstr ""

msgid ""
"      defp ensure_loaded(module) do\n"
"        case Code.ensure_loaded(module) do\n"
"          { :module, _ } ->\n"
"            []\n"
"          { :error, _ } ->\n"
"            parent = Process.get(:elixir_parent_compiler)\n"
"            send parent, { :waiting, Process.self, module }\n"
"            receive do\n"
"              { :release, ^parent } -> ensure_loaded(module)\n"
"            end\n"
"        end\n"
"      end\n"
"    end"
msgstr ""

msgid ""
"      iex> KV.hello()\n"
"      :world"
msgstr ""

msgid ""
"      iex> KVServer.Command.parse(\"CREATE shopping\n"
"\")\n"
"      {:ok, {:create, \"shopping\"}}"
msgstr ""

msgid ""
"      iex> Math.add(1, 2)\n"
"      3"
msgstr ""

msgid ""
"      iex> Math.sum(1, 2)\n"
"      3"
msgstr ""

msgid ""
"      test \"arithmetic operations\" do\n"
"        4 = 2 + 2\n"
"      end"
msgstr ""

msgid ""
"     13:44:10.035 [info]  Application kv exited: :stopped\n"
"```"
msgstr ""

msgid "     The following output was logged:"
msgstr ""

msgid ""
"    # Do a call to ensure the registry processed the DOWN message\n"
"    _ = KV.Registry.create(registry, \"bogus\")\n"
"    assert KV.Registry.lookup(registry, \"shopping\") == :error\n"
"  end"
msgstr ""

msgid ""
"    # Do a call to ensure the registry processed the DOWN message\n"
"    _ = KV.Registry.create(registry, \"bogus\")\n"
"    assert KV.Registry.lookup(registry, \"shopping\") == :error\n"
"  end\n"
"```"
msgstr ""

msgid ""
"    # GET returns two lines\n"
"    assert send_and_recv(socket, \"GET shopping eggs\n"
"\") == \"\n"
"\"\n"
"    assert send_and_recv(socket, \"\") == \"OK\n"
"\"\n"
"  end"
msgstr ""

msgid ""
"    # GET returns two lines\n"
"    assert send_and_recv(socket, \"GET shopping eggs\n"
"\") == \"3\n"
"\"\n"
"    assert send_and_recv(socket, \"\") == \"OK\n"
"\""
msgstr ""

msgid ""
"    # If the entry node is the current node\n"
"    if elem(entry, 1) == node() do\n"
"      apply(mod, fun, args)\n"
"    else\n"
"      {KV.RouterTasks, elem(entry, 1)}\n"
"      |> Task.Supervisor.async(KV.Router, :route, [bucket, mod, fun, args])\n"
"      |> Task.await()\n"
"    end\n"
"  end"
msgstr ""

msgid ""
"    # No more files and stack is empty, we are done\n"
"    def spawn_compilers([], _output, []) do\n"
"      :done\n"
"    end"
msgstr ""

msgid ""
"    # No more files and stack is not empty, wait for all messages\n"
"    def spawn_compilers([], output, stack) do\n"
"      wait_for_messages([], output, stack)\n"
"    end"
msgstr ""

msgid ""
"    # See https://hexdocs.pm/elixir/Supervisor.html\n"
"    # for other strategies and supported options\n"
"    opts = [strategy: :one_for_one, name: KVServer.Supervisor]\n"
"    Supervisor.start_link(children, opts)\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"    # Sleep the configured time.\n"
"    Process.sleep(sleeping_time)"
msgstr ""

msgid ""
"    # Stop the bucket with non-normal reason\n"
"    Agent.stop(bucket, :shutdown)"
msgstr ""

msgid ""
"    # The events to emit is the second element of the tuple,\n"
"    # the third being the state.\n"
"    {:noreply, events, counter + demand}\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"    # Try to find an entry in the table() or raise\n"
"    entry =\n"
"      Enum.find(table(), fn {enum, _node} ->\n"
"        first in enum\n"
"      end) || no_entry_error(bucket)"
msgstr ""

msgid ""
"    # We are a consumer, so we never emit events.\n"
"    {:noreply, [], sleeping_time}\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"    # a.ex\n"
"    defmodule A do\n"
"      B.define\n"
"    end"
msgstr ""

msgid ""
"    # b.ex\n"
"    defmodule B do\n"
"      defmacro define do\n"
"        quote do\n"
"          def one, do: 1\n"
"        end\n"
"      end\n"
"    end"
msgstr ""

msgid ""
"    ## Title\n"
"    ## Page 1\n"
"    ### Note on Paragraph 3\n"
"    ## Page 2\n"
"    ### Note on Paragraph 2\n"
"    ### Note on Paragraph 4"
msgstr ""

msgid "    $ mix epub"
msgstr ""

msgid ""
"    * creating README.md\n"
"    * creating .formatter.exs\n"
"    * creating .gitignore\n"
"    * creating mix.exs\n"
"    * creating config\n"
"    * creating config/config.exs\n"
"    * creating lib\n"
"    * creating lib/kv.ex\n"
"    * creating test\n"
"    * creating test/test_helper.exs\n"
"    * creating test/kv_test.exs"
msgstr ""

msgid ""
"    ** (MatchError) no match of right hand side value: {:error, :closed}\n"
"        (kv_server) lib/kv_server.ex:45: KVServer.read_line/1\n"
"        (kv_server) lib/kv_server.ex:37: KVServer.serve/1\n"
"        (kv_server) lib/kv_server.ex:30: KVServer.loop_acceptor/1"
msgstr ""

msgid ""
"    + kv_umbrella\n"
"      + apps\n"
"        + kv\n"
"        + kv_server"
msgstr ""

msgid ""
"    1. Title\n"
"    2. Page 1\n"
"      a. Note on Paragraph 3\n"
"    3. Page 2\n"
"      a. Note on Paragraph 2\n"
"      b. Note on Paragraph 4"
msgstr ""

msgid ""
"    <div class=\"entry-summary\">\n"
"      <p>Elixir has been designed to be extensible, letting developers natural"
"ly extend the language to particular domains, in order to increase their produ"
"ctivity.</p>"
msgstr ""
"    <div class=\"entry-summary\">\n"
"      <p>Elixirは拡張可能なようにデザインされています。開発者は生産性を高めるために、特定のドメイン用に言語を自然に拡張することができます。<"
"/p>"

msgid ""
"    <div class=\"entry-summary\">\n"
"      <p>Elixir is a dynamic, functional language designed for building scalab"
"le and maintainable applications.</p>"
msgstr ""
"    <div class=\"entry-summary\">\n"
"      <p>Elixirは拡張性と保守性の高いアプリケーションを構築するためにデザインされた、動的で関数型のプログラミング言語です。</p>"

msgid ""
"    <div class=\"entry-summary\">\n"
"      <p>Elixir runs on the Erlang VM giving developers complete access to Erl"
"ang&rsquo;s ecosystem, used by companies like <a href=\"https://www.heroku.com\""
">Heroku</a>, <a href=\"https://www.whatsapp.com\">WhatsApp</a>, <a href=\"https:/"
"/klarna.com\">Klarna</a> and many more to build distributed, fault-tolerant app"
"lications. An Elixir programmer can invoke any Erlang function with no runtime"
" cost:</p>"
msgstr ""

msgid ""
"    <div class=\"entry-summary\">\n"
"      <p>Elixir ships with a great set of tools to ease development. <a href=\""
"https://hexdocs.pm/mix/\">Mix is a build tool</a> that allows you to easily cre"
"ate projects, manage tasks, run tests and more:</p>"
msgstr ""

msgid ""
"    <div class=\"entry-summary\">\n"
"      <p>Functional programming promotes a coding style that helps developers "
"write code that is short, fast, and maintainable. For example, pattern matchin"
"g allows developers to easily destructure data and access its contents:</p>"
msgstr ""
"    <div class=\"entry-summary\">\n"
"      <p>関数型プログラミングは、保守性が高く、高速に動作し、また少ない記述量でコードを書く、というコーディングスタイルを促進します。例えば、パター"
"ンマッチングはデータを容易に分解し、その内容にアクセスすることができます。</p>"

msgid ""
"    <div class=\"entry-summary\">\n"
"      <p>The unavoidable truth about software running in production is that <i"
">things will go wrong</i>. Even more when we take network, file systems, and o"
"ther third-party resources into account.</p>"
msgstr ""
"    <div class=\"entry-summary\">\n"
"      <p>本番環境で動作するソフトウェアに対する避けられない真実は <i>いつかは壊れる</i> ということです。ネットワークやファイルシステム、サ"
"ードパーティのリソースを考慮するとその確度はさらに高まります。</p>"

msgid ""
"    <div class=\"entry-summary\">\n"
"      <p>Tools like <a href=\"https://hexdocs.pm/iex/\">IEx (Elixir&rsquo;s inte"
"ractive shell)</a> are able to leverage many aspects of the language and platf"
"orm to provide auto-complete, debugging tools, code reloading, as well as nice"
"ly formatted documentation:</p>"
msgstr ""

msgid "    <div id=\"main\">"
msgstr ""

msgid ""
"    Compiled lib/kv.ex\n"
"    Generated kv app\n"
"    .."
msgstr ""

msgid ""
"    Compiling 1 file (.ex)\n"
"    Generated kv app"
msgstr ""

msgid ""
"    Erlang/OTP {{ stable.minimum_otp }} [64-bit] [smp:2:2] [async-threads:0] ["
"hipe] [kernel-poll:false]"
msgstr ""

msgid ""
"    Finished in 0.04 seconds\n"
"    1 doctest, 1 test, 0 failures"
msgstr ""

msgid ""
"    Interactive Elixir - press Ctrl+C to exit (type h() ENTER for help)\n"
"    iex(foo@jv)1>"
msgstr ""

msgid ""
"    KV.Bucket.put(bucket, \"milk\", 1)\n"
"    assert KV.Bucket.get(bucket, \"milk\") == 1\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"    KV.Bucket.put(bucket, \"milk\", 3)\n"
"    assert KV.Bucket.get(bucket, \"milk\") == 3\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"    KV.Registry.create(registry, \"shopping\")\n"
"    assert {:ok, bucket} = KV.Registry.lookup(registry, \"shopping\")"
msgstr ""

msgid "    Randomized with seed 540224"
msgstr ""

msgid ""
"    Supervisor.init(children, strategy: :one_for_all)\n"
"  end\n"
"```"
msgstr ""

msgid ""
"    Supervisor.init(children, strategy: :one_for_one)\n"
"  end\n"
"```"
msgstr ""

msgid ""
"    Supervisor.init(children, strategy: :one_for_one)\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"    apps/\n"
"    mix.exs\n"
"    README.md"
msgstr ""

msgid ""
"    assert send_and_recv(socket, \"CREATE shopping\n"
"\") ==\n"
"           \"OK\n"
"\""
msgstr ""

msgid ""
"    assert send_and_recv(socket, \"DELETE shopping eggs\n"
"\") ==\n"
"           \"OK\n"
"\""
msgstr ""

msgid ""
"    assert send_and_recv(socket, \"GET shopping eggs\n"
"\") ==\n"
"           \"NOT FOUND\n"
"\""
msgstr ""

msgid ""
"    assert send_and_recv(socket, \"PUT shopping eggs 3\n"
"\") ==\n"
"           \"OK\n"
"\""
msgstr ""

msgid ""
"    children = [\n"
"      {Task.Supervisor, name: KVServer.TaskSupervisor},\n"
"      Supervisor.child_spec({Task, fn -> KVServer.accept(port) end}, restart: "
":permanent)\n"
"    ]"
msgstr ""

msgid ""
"    children = [\n"
"      {Task.Supervisor, name: KVServer.TaskSupervisor},\n"
"      {Task, fn -> KVServer.accept(port) end}\n"
"    ]"
msgstr ""

msgid "    data > functions > macros"
msgstr ""

msgid ""
"    def spawn_compilers([], _output) do\n"
"      :done\n"
"    end"
msgstr ""

msgid ""
"    def spawn_compilers([current | files], output) do\n"
"      parent = Process.self()\n"
"      child  = spawn_link(fn ->\n"
"        :elixir_compiler.file_to_path(current, output)\n"
"        send parent, { :compiled, Process.self() }\n"
"      end)\n"
"      receive do\n"
"        { :compiled, ^child } ->\n"
"          spawn_compilers(files, output)\n"
"        { :EXIT, ^child, { reason, where } } ->\n"
"          :erlang.raise(:error, reason, where)\n"
"      end\n"
"    end"
msgstr ""

msgid ""
"    def spawn_compilers([current | files], output, stack) do\n"
"      parent = Process.self()\n"
"      child  = spawn_link(fn ->\n"
"        :elixir_compiler.file_to_path(current, output)\n"
"        send parent, { :compiled, Process.self() }\n"
"      end)\n"
"      wait_for_messages(files, output, [child | stack])\n"
"    end"
msgstr ""

msgid ""
"    defmodule Elixir.ErrorHandler do\n"
"      def undefined_function(module, fun, args) do\n"
"        ensure_loaded(module)\n"
"        :error_handler.undefined_function(module, fun, args)\n"
"      end"
msgstr ""

msgid ""
"    defp priv do\n"
"      :cant_touch_this\n"
"    end\n"
"  end"
msgstr ""

msgid ""
"    defp wait_for_messages(files, output, stack) do\n"
"      receive do\n"
"        { :compiled, child } ->\n"
"          new_stack = List.delete(stack, child)\n"
"          Enum.each new_stack, fn(pid) ->\n"
"            send pid, { :release, Process.self }\n"
"          end\n"
"          spawn_compilers(files, output, new_stack)\n"
"        { :waiting, _child, _module } ->\n"
"          spawn_compilers(files, output, stack)\n"
"        { :EXIT, _child, { reason, where } } ->\n"
"          :erlang.raise(:error, reason, where)\n"
"      after\n"
"        10_000 ->\n"
"          raise \"dependency on unexesting module or possible deadlock\"\n"
"      end\n"
"    end"
msgstr ""

msgid "    elixir --app my_app"
msgstr ""

msgid "    ex_doc"
msgstr ""

msgid "    https://github.com/elixir-lang/elixir.git"
msgstr ""

msgid ""
"    iex> KVServer.Command.parse \"CREATE  shopping  \n"
"\"\n"
"    {:ok, {:create, \"shopping\"}}"
msgstr ""

msgid ""
"    iex> KVServer.Command.parse \"CREATE shopping\n"
"\"\n"
"    {:ok, {:create, \"shopping\"}}"
msgstr ""

msgid ""
"    iex> KVServer.Command.parse \"DELETE shopping eggs\n"
"\"\n"
"    {:ok, {:delete, \"shopping\", \"eggs\"}}"
msgstr ""

msgid ""
"    iex> KVServer.Command.parse \"GET shopping\n"
"\"\n"
"    {:error, :unknown_command}"
msgstr ""

msgid ""
"    iex> KVServer.Command.parse \"GET shopping milk\n"
"\"\n"
"    {:ok, {:get, \"shopping\", \"milk\"}}"
msgstr ""

msgid ""
"    iex> KVServer.Command.parse \"PUT shopping milk 1\n"
"\"\n"
"    {:ok, {:put, \"shopping\", \"milk\", \"1\"}}"
msgstr ""

msgid ""
"    iex> KVServer.Command.parse \"UNKNOWN shopping eggs\n"
"\"\n"
"    {:error, :unknown_command}"
msgstr ""

msgid ""
"    iex> convert(\"\\\"foo\\\"\")\n"
"    \"'foo'\""
msgstr ""

msgid ""
"    iex> convert(\"\\\\\\\"foo\\\\\\\"\")\n"
"    \"'foo'\""
msgstr ""

msgid "    mix escript.install hex ex_doc"
msgstr ""

msgid "    mix new my_app --sup"
msgstr ""

msgid ""
"    number < atom < reference < function < port < pid < tuple < map < list < b"
"itstring"
msgstr ""

msgid ""
"    opts = [strategy: :one_for_one, name: KVServer.Supervisor]\n"
"    Supervisor.start_link(children, opts)\n"
"  end\n"
"```"
msgstr ""

msgid ""
"    serve(socket)\n"
"  end"
msgstr ""

msgid ""
"    spawn_link(fn ->\n"
"      Process.put(:elixir_parent_compiler, parent)\n"
"      Process.flag(:error_handler, Elixir.ErrorHandler)"
msgstr ""

msgid ""
"    test \"lowercases the remaining graphemes\" do\n"
"      assert \"Test\" = String.capitalize(\"TEST\")\n"
"    end\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"    test ...\n"
"  end"
msgstr ""

msgid ""
"    warning: this clause cannot match because a previous clause at line 2 alwa"
"ys matches"
msgstr ""

msgid ""
"    x + y\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid "    {:distillery, \"> 0.0.0\", runtime: false}"
msgstr ""

msgid ""
"   Expected false or nil, got true\n"
"   code: refute Enum.any?(list, &(rem(&1, 4) == 0))\n"
"```"
msgstr ""

msgid "  \"\"\""
msgstr ""

msgid ""
"  \"\"\"\n"
"  def add(a, b) do\n"
"    a + b\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"  \"\"\"\n"
"  def hello do\n"
"    :world\n"
"  end\n"
"end"
msgstr ""

msgid ""
"  \"\"\"\n"
"  def parse(_line) do\n"
"    :not_implemented\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"  \"\"\"\n"
"  defmacro test(description, do: block) do\n"
"    function_name = String.to_atom(\"test \" <> description)\n"
"    quote do\n"
"      # Prepend the newly defined test to the list of tests\n"
"      @tests [unquote(function_name) | @tests]\n"
"      def unquote(function_name)(), do: unquote(block)\n"
"    end\n"
"  end"
msgstr ""

msgid ""
"  \"\"\"\n"
"  defmacro test(description, do: block) do\n"
"    function_name = String.to_atom(\"test \" <> description)\n"
"    quote do\n"
"      def unquote(function_name)(), do: unquote(block)\n"
"    end\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid "  # 4. The previous handle_call callback for lookup was removed"
msgstr ""

msgid ""
"  # A private function\n"
"  defp priv do\n"
"    :secret_info\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid "  # Callbacks"
msgstr ""

msgid ""
"  # Run \"mix help compile.app\" to learn about applications.\n"
"  def application do\n"
"    [\n"
"      extra_applications: [:logger]\n"
"    ]\n"
"  end"
msgstr ""

msgid ""
"  # Run \"mix help compile.app\" to learn about applications.\n"
"  def application do\n"
"    [\n"
"      extra_applications: [:logger],\n"
"      mod: {KVServer.Application, []}\n"
"    ]\n"
"  end"
msgstr ""

msgid ""
"  # Run \"mix help deps\" to learn about dependencies.\n"
"  defp deps do\n"
"    [\n"
"      # {:dep_from_hexpm, \"~> 0.3.0\"},\n"
"      # {:dep_from_git, git: \"https://github.com/elixir-lang/my_dep.git\", tag:"
" \"0.1.0\"},\n"
"      # {:sibling_app_in_umbrella, in_umbrella: true},\n"
"    ]\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"  # Run \"mix help deps\" to learn about dependencies.\n"
"  defp deps do\n"
"    [\n"
"      # {:dep_from_hexpm, \"~> 0.3.0\"},\n"
"      # {:dep_from_git, git: \"https://github.com/elixir-lang/my_dep.git\", tag:"
" \"0.1.0\"},\n"
"    ]\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"  # Stop the bucket with non-normal reason\n"
"  Agent.stop(bucket, :shutdown)\n"
"  assert KV.Registry.lookup(registry, \"shopping\") == :error\n"
"end\n"
"```"
msgstr ""

msgid ""
"  # This one works only with lists\n"
"  def some_fun(list) when is_list(list) do\n"
"    IO.inspect list\n"
"  end"
msgstr ""

msgid ""
"  # This will be invoked right before the target module is compiled\n"
"  # giving us the perfect opportunity to inject the `run/0` function\n"
"  @doc false\n"
"  defmacro __before_compile__(_env) do\n"
"    quote do\n"
"      def run do\n"
"        Enum.each @tests, fn name ->\n"
"          IO.puts \"Running #{name}\"\n"
"          apply(__MODULE__, name, [])\n"
"        end\n"
"      end\n"
"    end\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid "  ## Callbacks"
msgstr ""

msgid "  ## Client API"
msgstr ""

msgid "  ## Examples"
msgstr ""

msgid "  ## Server Callbacks"
msgstr ""

msgid "  ## Server callbacks"
msgstr ""

msgid ""
"  * 4 log levels: debug, info, warn and error\n"
"  * Custom formatting: you can specify a format string that tells exactly how "
"messages should be logged. The default string is: \"$time $metadata[$level] $me"
"ssage\n"
"\" but [many attributes are supported](https://hexdocs.pm/logger/Logger.Formatt"
"er.html)\n"
"  * Custom translators: so you can translate log messages coming from any Erla"
"ng application into Elixir syntax\n"
"  * Metadata: metadata allows developers to store information in the current p"
"rocess that will be available to all logged messages. For example, a web appli"
"cation can generate a `request_id`, store it as metadata, and all messages log"
"ged during that request will be properly identified with `request_id=...` in t"
"he log"
msgstr ""

msgid ""
"  * Alongside the observer application, Erlang also includes a `:crashdump_vie"
"wer` to view crash dumps\n"
"  * Integration with OS level tracers, such as [Linux Trace Toolkit,](http://e"
"rlang.org/doc/apps/runtime_tools/LTTng.html) [DTRACE,](http://erlang.org/doc/a"
"pps/runtime_tools/DTRACE.html) and [SystemTap](http://erlang.org/doc/apps/runt"
"ime_tools/SYSTEMTAP.html)\n"
"  * [Microstate accounting](http://erlang.org/doc/man/msacc.html) measures how"
" much time the runtime spends in several low-level tasks in a short time inter"
"val\n"
"  * Mix ships with many tasks under the `profile` namespace, such as `cprof` a"
"nd `fprof`\n"
"  * And more"
msgstr ""

msgid ""
"  * Arch Linux (Community repo)\n"
"    * Run: `pacman -S elixir`\n"
"  * openSUSE (and SLES 11 SP3+)\n"
"    * Add Erlang devel repo: `zypper ar -f http://download.opensuse.org/reposi"
"tories/devel:/languages:/erlang/openSUSE_Factory/ erlang`\n"
"    * Run: `zypper in elixir`\n"
"  * Gentoo\n"
"    * Run: `emerge --ask dev-lang/elixir`\n"
"  * GNU Guix\n"
"    * Run: `guix package -i elixir`\n"
"  * Fedora 21 (and older)\n"
"    * Run: `yum install elixir`\n"
"  * Fedora 22 (and newer)\n"
"    * Run `dnf install elixir`\n"
"  * FreeBSD\n"
"    * From ports: `cd /usr/ports/lang/elixir && make install clean`\n"
"    * From pkg: `pkg install elixir`\n"
"  * Solus\n"
"    * Run: `eopkg install elixir`\n"
"  * Ubuntu 14.04/16.04/16.10/17.04 or Debian 7/8/9\n"
"    * Add Erlang Solutions repo: `wget https://packages.erlang-solutions.com/e"
"rlang-solutions_1.0_all.deb && sudo dpkg -i erlang-solutions_1.0_all.deb`\n"
"    * Run: `sudo apt-get update`\n"
"    * Install the Erlang/OTP platform and all of its applications: `sudo apt-g"
"et install esl-erlang`\n"
"    * Install Elixir: `sudo apt-get install elixir`"
msgstr ""
"  * Arch Linux (Community repo) をお使いの場合\n"
"    * インストール: `pacman -S elixir`\n"
"  * openSUSE (and SLES 11 SP3+) をお使いの場合\n"
"    * Erlang devel リポジトリの追加: `zypper ar -f http://download.opensuse.org/reposi"
"tories/devel:/languages:/erlang/openSUSE_Factory/ erlang`\n"
"    * インストール: `zypper in elixir`\n"
"  * Gentoo をお使いの場合\n"
"    * インストール: `emerge --ask dev-lang/elixir`\n"
"  * GNU Guix\n"
"    * インストール: `guix package -i elixir`\n"
"  * Fedora 21 (and older) をお使いの場合\n"
"    * インストール: `yum install elixir`\n"
"  * Fedora 22 (and newer)\n"
"    * インストール `dnf install elixir`\n"
"  * FreeBSD をお使いの場合\n"
"    * ports : `cd /usr/ports/lang/elixir && make install clean`\n"
"    * pkg: `pkg install elixir`\n"
"  * Solus をお使いの場合\n"
"    * インストール: `eopkg install elixir`\n"
"  * Ubuntu 14.04/16.04/16.10/17.04 or Debian 7/8/9\n"
"    * Erlang Solutions リポジトリの追加: `wget https://packages.erlang-solutions.com/e"
"rlang-solutions_1.0_all.deb && sudo dpkg -i erlang-solutions_1.0_all.deb`\n"
"    * リストのアップデート: `sudo apt-get update`\n"
"    * Erlang/OTP プラットフォームとそれら全アプリケーションのインストール: `sudo apt-get install esl-erlan"
"g`\n"
"    * Elixir をインストール: `sudo apt-get install elixir`"

msgid ""
"  * Archives must be used sparingly because every new archive installed affect"
"s Mix performance, as every new archive is loaded when Mix boots. Escripts sol"
"ve this by being managed apart from your Elixir/Mix installed\n"
"  * Archives depends on the current Elixir version. Therefore, updating your E"
"lixir version may break an archive. Fortunately, escripts include Elixir insid"
"e themselves, and therefore do not depend on your Elixir system version"
msgstr ""

msgid ""
"  * Bugs: if an application has undesired behaviour, a program that depends on"
" the buggy behaviour may break if the bug is fixed. We reserve the right to fi"
"x such bugs."
msgstr ""

msgid ""
"  * Compiler front-end: improvements may be done to the compiler, introducing "
"new warnings for ambiguous modes and providing more detailed error messages. T"
"hose can lead to compilation errors (when running with `--warning-as-errors`) "
"or tooling failures when asserting on specific error messages (although one sh"
"ould avoid such). We reserve the right to do such improvements."
msgstr ""

msgid ""
"  * Deprecated modules, functions, callbacks and types have a warning automati"
"cally attached to them. [See the deprecated `Behaviour` module as an example]("
"https://hexdocs.pm/elixir/Behaviour.html)"
msgstr ""

msgid ""
"  * Elixir - Version 1.5.0 onwards\n"
"  * Erlang - Version 19.0 onwards"
msgstr ""

msgid ""
"  * Enter interactive mode\n"
"    * Run: `docker run -it --rm elixir`\n"
"  * Enter bash within container with installed `elixir`\n"
"    * Run: `docker run -it --rm elixir bash`"
msgstr ""
"  * インタラクティブモード\n"
"    * Run: `docker run -it --rm elixir`\n"
"  * イメージからインストールしたコンテナ内で bash シェルを起動\n"
"    * Run: `docker run -it --rm elixir bash`"

msgid ""
"  * Functions, macros, callbacks and types now include the version in which th"
"ey were added. For example, [see the top right corner of the `defguard` docs]("
"https://hexdocs.pm/elixir/Kernel.html#defguard/1)"
msgstr ""

msgid ""
"  * Future Elixir versions will [include its own section for guards in the doc"
"umentation and in the sidebar](https://hexdocs.pm/elixir/master/Kernel.html#gu"
"ards). We are currently exploring ways to [generalize this feature in ExDoc it"
"self](https://github.com/elixir-lang/ex_doc/issues/876)"
msgstr ""

msgid ""
"  * Guaranteeing our test suite is green on Windows, fixing many bugs in the p"
"rocess;\n"
"  * [Documenting how to compile Elixir from source on Windows](https://github."
"com/elixir-lang/elixir/wiki/Windows)\n"
"  * Ensuring important projects like our [C markdown processor](https://github"
".com/devinus/markdown/pull/7) compiles on Windows"
msgstr ""

msgid ""
"  * Homebrew\n"
"    * Update your homebrew to latest: `brew update`\n"
"    * Run: `brew install elixir`\n"
"  * Macports\n"
"    * Run: `sudo port install elixir`"
msgstr ""
"  * Homebrew をお使いの場合\n"
"    * Homebrew を最新バージョンにアップデート: `brew update`\n"
"    * インストール: `brew install elixir`\n"
"  * Macports をお使いの場合\n"
"    * インストール: `sudo port install elixir`"

msgid ""
"  * If `Stream.async` is introducing new processes, how can we guarantee those"
" processes are supervised?"
msgstr ""

msgid ""
"  * If you define `@impl` before a function that is not a callback, Elixir wil"
"l error. This is useful in case of typos or in case the behaviour definition c"
"hanges (such as a new major version of a library you depend on is released)"
msgstr ""

msgid ""
"  * If you saved a test file on disk, Mix will run that file and ignore the on"
"es that have not changed\n"
"  * If you changed a library file, for example, `lib/foo.ex` that defines `Foo"
"`, any test that invokes a function in `Foo` directly or indirectly will also "
"run\n"
"  * If you modify your `mix.exs` or your `test/test_helper.exs`, Mix will run "
"the whole test suite"
msgstr ""

msgid ""
"  * If you use `@impl` in one implementation, Elixir will force you to declare"
" `@impl` for all other implementations in the same module, keeping your module"
"s consistent"
msgstr ""

msgid ""
"  * Imports: new functions may be added to the Kernel module, which is auto-im"
"ported. They may collide with local functions defined in your modules. Collisi"
"ons can be resolved in a backwards compatible fashion using `import Kernel, ex"
"cept: [...]` with a list of all functions you don't want imported from Kernel."
" We reserve the right to do such additions."
msgstr ""

msgid ""
"  * In case things are not working as expected, please include as much informa"
"tion as you can in your report, for example: your Elixir version, the code sni"
"ppet and the error message alongside the error stacktrace. Use sites like [Gis"
"t](https://gist.github.com/) to paste this information."
msgstr ""

msgid ""
"  * Instead of asking \"how to do X in Elixir\", ask \"how to solve Y in Elixir\"."
" In other words, don't ask how to implement a particular solution, instead des"
"cribe the problem at hand. Stating the problem gives more context and less bia"
"s for a correct answer."
msgstr ""

msgid ""
"  * Keys must be atoms.\n"
"  * Keys are ordered, as specified by the developer.\n"
"  * Keys can be given more than once."
msgstr ""

msgid ""
"  * Local because keys and values are only accessible to the current node (opp"
"osite to distributed)\n"
"  * Decentralized because there is no single entity responsible for managing t"
"he registry\n"
"  * Scalable because performance scales linearly with the addition of more cor"
"es upon partitioning"
msgstr ""

msgid ""
"  * Maps allow any value as a key.\n"
"  * Maps' keys do not follow any ordering."
msgstr ""

msgid ""
"  * Maps can now scale from dozens to millions of keys. Therefore, usage of th"
"e modules `Dict` and `HashDict` is now discouraged and will be deprecated in f"
"uture releases, instead use `Map`. Similarly, `Set` and `HashSet` will be depr"
"ecated in favor of `MapSet`\n"
"  * Compilation times are ~15% faster on average due to improvements in both t"
"he Elixir and Erlang compilers and by using maps more extensively in the compi"
"lation stack\n"
"  * Dialyzer now emits less false negative warnings thanks to new annotations "
"available in the Erlang compiler"
msgstr ""

msgid ""
"  * Readability of the code is increased, as it is now clear which functions a"
"re part of your API and which ones are callback implementations. To reinforce "
"this idea, `@impl true` automatically marks the function as `@doc false`, disa"
"bling documentation unless `@doc` is explicitly set"
msgstr ""

msgid ""
"  * Security: a security issue in the implementation may arise whose resolutio"
"n requires backwards incompatible changes. We reserve the right to address suc"
"h security issues."
msgstr ""

msgid ""
"  * Since we are exchanging messages between processes, how do we prevent a pr"
"ocess from receiving too many messages? We need a back-pressure mechanism that"
" allows the receiving process to specify how much it can handle from the sendi"
"ng process."
msgstr ""

msgid ""
"  * The Erlang Solutions repository has a prebuilt package for armhf. This sav"
"es a significant amount of time in comparison to recompiling natively\n"
"  * Get Erlang key\n"
"    * `echo \"deb https://packages.erlang-solutions.com/debian stretch contrib\""
" | sudo tee /etc/apt/sources.list.d/erlang-solutions.list`\n"
"    * Run: `wget https://packages.erlang-solutions.com/debian/erlang_solutions"
".asc`\n"
"    * Add to keychain: `sudo apt-key add erlang_solutions.asc`\n"
"  * Install Elixir\n"
"    * Update apt to latest: `sudo apt update`\n"
"    * Run: `sudo apt install elixir`"
msgstr ""
"  * armhf でパッケージをプリビルドしましょう。再コンパイルに比べると大幅に時間を短縮してくれます。\n"
"  * 公開鍵の取得\n"
"    * `echo \"deb https://packages.erlang-solutions.com/debian stretch contrib\""
" | sudo tee /etc/apt/sources.list.d/erlang-solutions.list`\n"
"    * Erlang のインストール: `wget https://packages.erlang-solutions.com/debian/erlan"
"g_solutions.asc`\n"
"    * 鍵を keychain に追加: `sudo apt-key add erlang_solutions.asc`\n"
"  * Elixir\n"
"    * apt のアップデート: `sudo apt update`\n"
"    * Elixir のインストール: `sudo apt install elixir`"

msgid ""
"  * We have added [a \"Development\" section](https://elixir-lang.org/developmen"
"t.html) to the website, that outlines the Elixir team structure and goals"
msgstr ""

msgid ""
"  * We have already highlighted some of the improvements in the ExDoc tool. An"
"other improvement worth mentioning is the syntax highlighting is now done in E"
"lixir itself, via the [Makeup](https://github.com/tmbb/makeup) library. This g"
"ives us more control over the grammar, the style, and improves load times. If "
"you would like to add support for other languages, [reach out](https://github."
"com/tmbb/makeup)!"
msgstr ""

msgid ""
"  * Web installer\n"
"    * [Download the installer](https://repo.hex.pm/elixir-websetup.exe)\n"
"    * Click next, next, ..., finish\n"
"  * Chocolatey\n"
"    * `cinst elixir`"
msgstr ""
"  * インストーラーの利用\n"
"    * [ダウンロード](https://repo.hex.pm/elixir-websetup.exe)\n"
"    * 画面に従って進んでいただくと完了です\n"
"  * Chocolatey\n"
"    * インストール: `cinst elixir`"

msgid ""
"  * [#elixir-lang on freenode IRC](irc://irc.freenode.net/elixir-lang)\n"
"  * [Elixir on Slack](https://elixir-slackin.herokuapp.com/)\n"
"  * [Elixir Forum](http://elixirforum.com)\n"
"  * [elixir tag on StackOverflow](https://stackoverflow.com/questions/tagged/e"
"lixir)"
msgstr ""

msgid ""
"  * [Elixir now has its own mini-documentary](http://doc.honeypot.io/elixir-do"
"cumentary-2018/), by [Honeypot](https://www.honeypot.io/)"
msgstr ""

msgid ""
"  * [Elixir](https://hexdocs.pm/elixir/) - the Elixir compiler, runtime and th"
"e standard library\n"
"  * [EEx](https://hexdocs.pm/eex/) - Elixir's templating library, useful for g"
"enerating any kind of document dynamically\n"
"  * [ExUnit](https://hexdocs.pm/ex_unit/) - Elixir's unit test library, with s"
"upport for concurrent testing, custom formatters, filters and much more\n"
"  * [IEx](https://hexdocs.pm/iex/) - Elixir's interactive shell with code relo"
"ading, auto-complete, and easy access to documentation, typespecs and more\n"
"  * [Logger](https://hexdocs.pm/logger/) - the latest addition to the group, L"
"ogger provides reliable logging and configurable backends (with syslog, file a"
"nd many other backends provided by the community)\n"
"  * [Mix](https://hexdocs.pm/mix/) - Elixir's build tool that generates, compi"
"les and tests projects as well as manages your dependencies"
msgstr ""

msgid ""
"  * [asdf](https://github.com/asdf-vm/asdf) - install and manage different Eli"
"xir and Erlang versions\n"
"  * [exenv](https://github.com/mururu/exenv) - install and manage different El"
"ixir versions\n"
"  * [kiex](https://github.com/taylor/kiex) - install and manage different Elix"
"ir versions\n"
"  * [kerl](https://github.com/yrashk/kerl) - install and manage different Erla"
"ng versions"
msgstr ""
"  * [asdf](https://github.com/asdf-vm/asdf) - Erlang と Elixir の複数バージョンをインストールし"
"管理ができます。\n"
"  * [exenv](https://github.com/mururu/exenv) - 〃\n"
"  * [kiex](https://github.com/taylor/kiex) - 〃\n"
"  * [kerl](https://github.com/yrashk/kerl) - 〃"

msgid ""
"  * [wObserver](https://github.com/shinyscorpion/wObserver) observes productio"
"n nodes through a web interface.\n"
"  * [visualixir](https://github.com/koudelka/visualixir) is a development-time"
" process message visualizer.\n"
"  * [erlyberly](https://github.com/andytill/erlyberly) is a GUI for tracing du"
"ring development."
msgstr ""

msgid ""
"  * `:crash_reason` - a two-element tuple with the throw/error/exit reason as "
"the first argument and the stacktrace as the second"
msgstr ""

msgid "  * `:initial_call` - the initial call that started the process"
msgstr ""

msgid "  * `:registered_name` - the process' registered name as an atom"
msgstr ""

msgid ""
"  * `Date` - used to store dates (year, month, day) in a given calendar\n"
"  * `Time` - used to store time (hour, minute, second, microseconds)\n"
"  * `NaiveDateTime` - used to store datetimes without a timezone (year, month,"
" day, hour, minute, second, microseconds) in a given calendar. It is called na"
"ïve because without a timezone, the datetime may not actually exist. For examp"
"le, when there are daylight savings changes, a whole hour may not exist (when "
"the clock moves forward) or a particular instant may happen twice (when the cl"
"ock moves backwards)\n"
"  * `DateTime` - used to store datetimes with timezone (year, month, day, hour"
", minute, second, microsecond and time zone, with abbreviation, UTC and standa"
"rd offset)"
msgstr ""

msgid ""
"  * `break!/2` - sets up a breakpoint for a given `Mod.fun/arity`\n"
"  * `break!/4` - sets up a breakpoint for the given module, function, arity\n"
"  * `breaks/0` - prints all breakpoints and their ids\n"
"  * `continue/0` - continues until the next breakpoint in the same process\n"
"  * `open/0` - opens editor on the current breakpoint\n"
"  * `remove_breaks/0` - removes all breakpoints in all modules\n"
"  * `remove_breaks/1` - removes all breakpoints in a given module\n"
"  * `reset_break/1` - sets the number of stops on the given id to zero\n"
"  * `reset_break/3` - sets the number of stops on the given module, function, "
"arity to zero\n"
"  * `respawn/0` - starts a new shell (breakpoints will ask for permission once"
" more)\n"
"  * `whereami/1` - shows the current location"
msgstr ""

msgid ""
"  * `mix xref callers Foo` - used to find all places in your code that calls a"
" function from the module `Foo`"
msgstr ""

msgid ""
"  * `mix xref graph` - generates a graph with dependencies between source file"
"s"
msgstr ""

msgid ""
"  * `~D[2016-05-29]` - builds a new date\n"
"  * `~T[08:00:00]` and `~T[08:00:00.285]` - builds a new time (with different "
"precisions)\n"
"  * `~N[2016-05-29 08:00:00]` - builds a naive date time"
msgstr ""

msgid ""
"  * alternates between sync and async modes when logging messages to keep it p"
"erformant when required but also apply back-pressure when under stress\n"
"  * formats and truncates messages on the client to avoid clogging the backend"
"s\n"
"  * provide a highwater mark around Erlang's error_logger to avoid it from ove"
"rflowing"
msgstr ""

msgid ""
"  1. A string containing the task and arguments to be invoked\n"
"  2. An anonymous function (that is invoked passing the task arguments)\n"
"  3. A list containing strings or anonymous functions"
msgstr ""

msgid ""
"  1. Listens to a port until the port is available and it gets hold of the soc"
"ket\n"
"  2. Waits for a client connection on that port and accepts it\n"
"  3. Reads the client request and writes a response back"
msgstr ""

msgid ""
"  1. We are prematurely optimizing (by adding this cache layer)\n"
"  2. We are using `cast/2` (while we should be using `call/2`)"
msgstr ""

msgid ""
"  1. `mix c` - is now a shortcut to `mix compile`\n"
"  2. `mix hello` - is equivalent to the `Mix.Tasks.Hello` we have defined earl"
"ier, although now it is more easily defined as an alias\n"
"  3. `mix clean` - extends the existing `clean` task to ensure we invoke `clea"
"n_vendor/1` afterwards"
msgstr ""

msgid ""
"  1. are necessary for developing the language itself\n"
"  2. bring important concepts/features to the community in a way its effect ca"
"n only be maximized or leveraged by making it part of the language"
msgstr ""

msgid ""
"  <div class=\"hentry post\">\n"
"    <h3>Language features</h3>\n"
"  </div>"
msgstr ""
"  <div class=\"hentry post\">\n"
"    <h3>言語の特徴</h3>\n"
"  </div>"

msgid ""
"  <div class=\"hentry post\">\n"
"    <h3>Platform features</h3>\n"
"  </div>"
msgstr ""
"  <div class=\"hentry post\">\n"
"    <h3>プラットフォームの特徴</h3>\n"
"  </div>"

msgid ""
"  <div class=\"hentry post\">\n"
"    <h3>Tooling features</h3>\n"
"  </div>"
msgstr ""

msgid ""
"  <div class=\"hentry post\">\n"
"    <h4>A growing ecosystem</h4>"
msgstr ""

msgid ""
"  <div class=\"hentry post\">\n"
"    <h4>Erlang compatible</h4>"
msgstr ""

msgid ""
"  <div class=\"hentry post\">\n"
"    <h4>Extensibility and DSLs</h4>"
msgstr ""
"  <div class=\"hentry post\">\n"
"    <h4>拡張性とDSL</h4>"

msgid ""
"  <div class=\"hentry post\">\n"
"    <h4>Fault-tolerance</h4>"
msgstr ""
"  <div class=\"hentry post\">\n"
"    <h4>フォールトトレランス</h4>"

msgid ""
"  <div class=\"hentry post\">\n"
"    <h4>Functional programming</h4>"
msgstr ""
"  <div class=\"hentry post\">\n"
"    <h4>関数型プログラミング</h4>"

msgid ""
"  <div class=\"hentry post\">\n"
"    <h4>Interactive development</h4>"
msgstr ""

msgid ""
"  <div class=\"hentry post\">\n"
"    <h4>Scalability</h4>\n"
"    <div class=\"entry-summary\">"
msgstr ""
"  <div class=\"hentry post\">\n"
"    <h4>スケーラビリティ（拡張性）</h4>\n"
"    <div class=\"entry-summary\">"

msgid ""
"  <div id=\"edit-on-github\">\n"
"    <span>Is something wrong?</span>\n"
"    <a href=\"{{ site.github.repository_url }}/edit/master/{{ page.path }}\">\n"
"      Edit this page on GitHub.\n"
"    </a>\n"
"  </div>"
msgstr ""

msgid ""
"  <p>\n"
"    <a class=\"spec\" href=\"http://plataformatec.com.br\">Plataformatec</a> offer"
"s consulting and development services for companies using Elixir.\n"
"  </p>\n"
"</div>"
msgstr ""

msgid ""
"  <script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js\"></"
"script>\n"
"  <script src=\"/js/toc/toc.js\" type=\"text/javascript\" charset=\"utf-8\"></script"
">\n"
"  <script type=\"text/javascript\">\n"
"    $(document).ready(function() {\n"
"      $('.toc').toc({\n"
"        title: '',\n"
"        listType: 'ol',\n"
"        minimumHeaders: 2,\n"
"        headers: 'h2, h3, h4, h5, h6',\n"
"        linkHere: true,\n"
"        linkHereTitle: 'Link here',\n"
"        backToTop: true,\n"
"        backToTopId: 'toc',\n"
"        backToTopTitle: 'Back to Table of Contents',\n"
"      });\n"
"      $('.jekyll-toc-header a.jekyll-toc-link-here span.jekyll-toc-icon').addC"
"lass('icon icon-link');\n"
"      $('.jekyll-toc-header a.jekyll-toc-back-to-top span.jekyll-toc-icon').ad"
"dClass('icon icon-chevron-up');\n"
"    });\n"
"  </script>\n"
"</body>\n"
"</html>"
msgstr ""

msgid ""
"  @doc \"\"\"\n"
"  Calculates the sum of two numbers.\n"
"  \"\"\"\n"
"  def sum(a, b), do: a + b\n"
"end\n"
"```"
msgstr ""

msgid ""
"  @doc \"\"\"\n"
"  Defines a test case with the given description."
msgstr ""

msgid ""
"  @doc \"\"\"\n"
"  Ensures there is a bucket associated with the given `name` in `server`.\n"
"  \"\"\"\n"
"  def create(server, name) do\n"
"    GenServer.cast(server, {:create, name})\n"
"  end"
msgstr ""

msgid ""
"  @doc \"\"\"\n"
"  Gets a value from the `bucket` by `key`.\n"
"  \"\"\"\n"
"  def get(bucket, key) do\n"
"    Agent.get(bucket, &Map.get(&1, key))\n"
"  end"
msgstr ""

msgid ""
"  @doc \"\"\"\n"
"  Hello world."
msgstr ""

msgid ""
"  @doc \"\"\"\n"
"  Looks up the bucket pid for `name` stored in `server`."
msgstr ""

msgid ""
"  @doc \"\"\"\n"
"  Puts the `value` for the given `key` in the `bucket`.\n"
"  \"\"\"\n"
"  def put(bucket, key, value) do\n"
"    Agent.update(bucket, &Map.put(&1, key, value))\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"  @doc \"\"\"\n"
"  Sends an event and returns only after the event is dispatched.\n"
"  \"\"\"\n"
"  def sync_notify(event, timeout \\\\ 5000) do\n"
"    GenStage.call(__MODULE__, {:notify, event}, timeout)\n"
"  end"
msgstr ""

msgid ""
"  @doc \"\"\"\n"
"  Starts a new bucket.\n"
"  \"\"\"\n"
"  def start_link(_opts) do\n"
"    Agent.start_link(fn -> %{} end)\n"
"  end"
msgstr ""

msgid ""
"  @doc \"\"\"\n"
"  Starts accepting connections on the given `port`.\n"
"  \"\"\"\n"
"  def accept(port) do\n"
"    {:ok, socket} = :gen_tcp.listen(port,\n"
"                      [:binary, packet: :line, active: false, reuseaddr: true]"
")\n"
"    Logger.info \"Accepting connections on port #{port}\"\n"
"    loop_acceptor(socket)\n"
"  end"
msgstr ""

msgid ""
"  @doc \"\"\"\n"
"  Starts the manager.\n"
"  \"\"\"\n"
"  def start_link() do\n"
"    GenStage.start_link(__MODULE__, :ok, name: __MODULE__)\n"
"  end"
msgstr ""

msgid ""
"  @doc \"\"\"\n"
"  Starts the registry with the given options."
msgstr ""

msgid ""
"  @doc \"\"\"\n"
"  Starts the registry.\n"
"  \"\"\"\n"
"  def start_link(opts) do\n"
"    GenServer.start_link(__MODULE__, :ok, opts)\n"
"  end"
msgstr ""

msgid ""
"  @doc \"\"\"\n"
"  The routing table.\n"
"  \"\"\"\n"
"  def table do\n"
"    # Replace computer-name with your local machine name.\n"
"    [{?a..?m, :\"foo@computer-name\"}, {?n..?z, :\"bar@computer-name\"}]\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"  @impl true\n"
"  def call(conn, _opts) do\n"
"    Plug.Conn.send_resp(conn, 200, \"hello world\")\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"  @impl true\n"
"  def init(_opts) do\n"
"    opts\n"
"  end"
msgstr ""

msgid ""
"  @spec add(number, number) :: number_with_remark\n"
"  def add(x, y), do: {x + y, \"You need a calculator to do that?\"}"
msgstr ""

msgid ""
"  @spec make_quiet(LousyCalculator.number_with_remark) :: number\n"
"  defp make_quiet({num, _remark}), do: num\n"
"end\n"
"```"
msgstr ""

msgid ""
"  @spec multiply(number, number) :: number_with_remark\n"
"  def multiply(x, y), do: {x * y, \"It is like addition on steroids.\"}\n"
"end\n"
"```"
msgstr ""

msgid ""
"  @spec multiply(number, number) :: {number, String.t}\n"
"  def multiply(x, y), do: {x * y, \"Jeez, come on!\"}\n"
"end\n"
"```"
msgstr ""

msgid ""
"  @tag :external\n"
"  test \"contacts external service\" do\n"
"    # ...\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"  KV.Bucket.put(bucket, \"milk\", 1)\n"
"  assert KV.Bucket.get(bucket, \"milk\") == 1\n"
"end\n"
"```"
msgstr ""

msgid ""
"  KV.Registry.create(registry, \"shopping\")\n"
"  assert {:ok, bucket} = KV.Registry.lookup(registry, \"shopping\")"
msgstr ""

msgid ""
"  Returns `{:ok, pid}` if the bucket exists, `:error` otherwise.\n"
"  \"\"\"\n"
"  def lookup(server, name) do\n"
"    # 2. Lookup is now done directly in ETS, without accessing the server\n"
"    case :ets.lookup(server, name) do\n"
"      [{^name, pid}] -> {:ok, pid}\n"
"      [] -> :error\n"
"    end\n"
"  end"
msgstr ""

msgid ""
"  Returns `{:ok, pid}` if the bucket exists, `:error` otherwise.\n"
"  \"\"\"\n"
"  def lookup(server, name) do\n"
"    GenServer.call(server, {:lookup, name})\n"
"  end"
msgstr ""

msgid ""
"  `:name` is always required.\n"
"  \"\"\"\n"
"  def start_link(opts) do\n"
"    # 1. Pass the name to GenServer's init\n"
"    server = Keyword.fetch!(opts, :name)\n"
"    GenServer.start_link(__MODULE__, server, opts)\n"
"  end"
msgstr ""

msgid ""
"  def call(conn, _opts) do\n"
"    Plug.Conn.send_resp(conn, 200, \"hello world\")\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"  def do_this_that_and_that(a, b, c) do\n"
"    do_this(a)\n"
"    ...\n"
"    do_that(b)\n"
"    ...\n"
"    and_that(c)\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"  def double_each([]) do\n"
"    []\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"  def dummy do\n"
"    :ok\n"
"  end\n"
"end"
msgstr ""

msgid ""
"  def handle_call({:lookup, name}, _from, names) do\n"
"    {:reply, Map.fetch(names, name), names}\n"
"  end"
msgstr ""

msgid ""
"  def handle_call({:notify, event}, from, {queue, demand}) do\n"
"    dispatch_events(:queue.in({from, event}, queue), demand, [])\n"
"  end"
msgstr ""

msgid ""
"  def handle_cast({:create, name}, names) do\n"
"    if Map.has_key?(names, name) do\n"
"      {:noreply, names}\n"
"    else\n"
"      {:ok, bucket} = KV.Bucket.start_link([])\n"
"      {:noreply, Map.put(names, name, bucket)}\n"
"    end\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"  def handle_cast({:create, name}, {names, refs}) do\n"
"    # 5. Read and write to the ETS table instead of the map\n"
"    case lookup(names, name) do\n"
"      {:ok, _pid} ->\n"
"        {:noreply, {names, refs}}\n"
"      :error ->\n"
"        {:ok, pid} = DynamicSupervisor.start_child(KV.BucketSupervisor, KV.Buc"
"ket)\n"
"        ref = Process.monitor(pid)\n"
"        refs = Map.put(refs, ref, name)\n"
"        :ets.insert(names, {name, pid})\n"
"        {:noreply, {names, refs}}\n"
"    end\n"
"  end"
msgstr ""

msgid ""
"  def handle_demand(demand, counter) when demand > 0 do\n"
"    # If the counter is 3 and we ask for 2 items, we will\n"
"    # emit the items 3 and 4, and set the state to 5.\n"
"    events = Enum.to_list(counter..counter+demand-1)"
msgstr ""

msgid ""
"  def handle_demand(incoming_demand, {queue, demand}) do\n"
"    dispatch_events(queue, incoming_demand + demand, [])\n"
"  end"
msgstr ""

msgid ""
"  def handle_events(events, _from, number) do\n"
"    events = Enum.map(events, & &1 * number)\n"
"    {:noreply, events, number}\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"  def handle_events(events, _from, sleeping_time) do\n"
"    # Print events to terminal.\n"
"    IO.inspect(events)"
msgstr ""

msgid ""
"  def handle_events(events, _from, state) do\n"
"    IO.inspect events\n"
"    {:noreply, [], state}\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"  def handle_info(_msg, state) do\n"
"    {:noreply, state}\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"  def handle_info({:DOWN, ref, :process, _pid, _reason}, {names, refs}) do\n"
"    # 6. Delete from the ETS table instead of the map\n"
"    {name, refs} = Map.pop(refs, ref)\n"
"    :ets.delete(names, name)\n"
"    {:noreply, {names, refs}}\n"
"  end"
msgstr ""

msgid ""
"  def init(:ok) do\n"
"    # Starts a permanent subscription to the broadcaster\n"
"    # which will automatically start requesting items.\n"
"    {:consumer, :ok, subscribe_to: [EventManager]}\n"
"  end"
msgstr ""

msgid ""
"  def init(:ok) do\n"
"    children = [\n"
"      KV.Registry\n"
"    ]"
msgstr ""

msgid ""
"  def init(:ok) do\n"
"    {:ok, %{}}\n"
"  end"
msgstr ""

msgid ""
"  def init(:ok) do\n"
"    {:producer, {:queue.new, 0}, dispatcher: GenStage.BroadcastDispatcher}\n"
"  end"
msgstr ""

msgid ""
"  def init(_opts) do\n"
"    opts\n"
"  end"
msgstr ""

msgid ""
"  def init(counter) do\n"
"    {:producer, counter}\n"
"  end"
msgstr ""

msgid ""
"  def init(number) do\n"
"    {:producer_consumer, number}\n"
"  end"
msgstr ""

msgid ""
"  def init(sleeping_time) do\n"
"    {:consumer, sleeping_time}\n"
"  end"
msgstr ""

msgid ""
"  def init(table) do\n"
"    # 3. We have replaced the names map by the ETS table\n"
"    names = :ets.new(table, [:named_table, read_concurrency: true])\n"
"    refs  = %{}\n"
"    {:ok, {names, refs}}\n"
"  end"
msgstr ""

msgid ""
"  def join(a, b, _sep) when is_nil(b) do\n"
"    a\n"
"  end"
msgstr ""

msgid ""
"  def join(a, b, sep \\\\ \" \") do\n"
"    IO.puts \"***Second join\"\n"
"    a <> sep <> b\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"  def join(a, b, sep) do\n"
"    a <> sep <> b\n"
"  end\n"
"end"
msgstr ""

msgid ""
"  def minus(a, b) do\n"
"    # ...\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"  def parse!(implementation, contents) do\n"
"    case implementation.parse(contents) do\n"
"      {:ok, data} -> data\n"
"      {:error, error} -> raise ArgumentError, \"parsing error: #{error}\"\n"
"    end\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"  def parse(str), do: {:ok, \"some json \" <> str} # ... parse JSON\n"
"  def extensions, do: [\"json\"]\n"
"end\n"
"```"
msgstr ""

msgid ""
"  def parse(str), do: {:ok, \"some yaml \" <> str} # ... parse YAML\n"
"  def extensions, do: [\"yml\"]\n"
"end\n"
"```"
msgstr ""

msgid ""
"  def print_multiple_times(msg, n) do\n"
"    IO.puts msg\n"
"    print_multiple_times(msg, n - 1)\n"
"  end\n"
"end"
msgstr ""

msgid ""
"  def project do\n"
"    [\n"
"      app: :kv,\n"
"      version: \"0.1.0\",\n"
"      elixir: \"~> 1.6-dev\",\n"
"      start_permanent: Mix.env == :prod,\n"
"      deps: deps()\n"
"    ]\n"
"  end"
msgstr ""

msgid ""
"  def project do\n"
"    [\n"
"      app: :kv_server,\n"
"      version: \"0.1.0\",\n"
"      build_path: \"../../_build\",\n"
"      config_path: \"../../config/config.exs\",\n"
"      deps_path: \"../../deps\",\n"
"      lockfile: \"../../mix.lock\",\n"
"      elixir: \"~> 1.7-dev\",\n"
"      start_permanent: Mix.env() == :prod,\n"
"      deps: deps()\n"
"    ]\n"
"  end"
msgstr ""

msgid ""
"  def project do\n"
"    [\n"
"      apps_path: \"apps\",\n"
"      start_permanent: Mix.env() == :prod,\n"
"      deps: deps()\n"
"    ]\n"
"  end"
msgstr ""

msgid ""
"  def project do\n"
"    [app: :my_project,\n"
"     aliases: aliases]\n"
"  end"
msgstr ""

msgid ""
"  def run do\n"
"    initialize_to_char_count [:red, :green, :yellow]\n"
"    [red, green, yellow]\n"
"  end\n"
"end"
msgstr ""

msgid ""
"  def run(_) do\n"
"    IO.puts \"Hello world\"\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"  def send_ok(conn, _opts) do\n"
"    send(conn, 200, \"ok\")\n"
"  end\n"
"end"
msgstr ""

msgid ""
"  def set_header(conn, _opts) do\n"
"    put_resp_header(conn, \"x-header\", \"set\")\n"
"  end"
msgstr ""

msgid ""
"  def start(_type, _args) do\n"
"    # List all child processes to be supervised\n"
"    children = [\n"
"      # Starts a worker by calling: KVServer.Worker.start_link(arg)\n"
"      # {KVServer.Worker, arg},\n"
"    ]"
msgstr ""

msgid ""
"  def start(_type, _args) do\n"
"    KV.Supervisor.start_link(name: KV.Supervisor)\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"  def start_link() do\n"
"    GenStage.start_link(__MODULE__, :ok)\n"
"  end"
msgstr ""

msgid ""
"  def start_link(opts) do\n"
"    Supervisor.start_link(__MODULE__, :ok, opts)\n"
"  end"
msgstr ""

msgid ""
"  def sum_list([], accumulator) do\n"
"    accumulator\n"
"  end\n"
"end"
msgstr ""

msgid ""
"  def zero?(x) when is_integer(x) do\n"
"    false\n"
"  end\n"
"end"
msgstr ""

msgid ""
"  defmacro macro_unless(clause, do: expression) do\n"
"    quote do\n"
"      if(!unquote(clause), do: unquote(expression))\n"
"    end\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"  defp aliases do\n"
"    [c: \"compile\",\n"
"     hello: &print_hello/1,\n"
"     clean: [\"clean\", &clean_vendor/1]]\n"
"  end"
msgstr ""

msgid ""
"  defp deps do\n"
"    []\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"  defp dispatch_events(queue, demand, events) do\n"
"    with d when d > 0 <- demand,\n"
"         {item, queue} = :queue.out(queue),\n"
"         {:value, {from, event}} <- item do\n"
"      GenStage.reply(from, :ok)\n"
"      dispatch_events(queue, demand - 1, [event | events])\n"
"    else\n"
"      _ -> {:noreply, Enum.reverse(events), {queue, demand}}\n"
"    end\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"  defp do_interleave(a, b, acc) do\n"
"    case a.({ :cont, acc }) do\n"
"      { :suspended, acc, a } ->\n"
"        case b.({ :cont, acc }) do\n"
"          { :suspended, acc, b } ->\n"
"            do_interleave(a, b, acc)\n"
"          { :halted, acc } ->\n"
"            acc\n"
"          { :done, acc } ->\n"
"            finish_interleave(a, acc)\n"
"        end\n"
"      { :halted, acc } ->\n"
"        acc\n"
"      { :done, acc } ->\n"
"        finish_interleave(b, acc)\n"
"    end\n"
"  end"
msgstr ""

msgid ""
"  defp do_reduce([], acc, fun) do\n"
"    acc\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"  defp do_reduce([h | t], acc, fun) do\n"
"    do_reduce(t, fun.(h, acc), fun)\n"
"  end"
msgstr ""

msgid ""
"  defp do_sum(a, b) do\n"
"    a + b\n"
"  end\n"
"end"
msgstr ""

msgid ""
"  defp finish_interleave(a_or_b, acc) do\n"
"    case a_or_b.({ :cont, acc }) do\n"
"      { :suspended, acc, a_or_b } ->\n"
"        finish_interleave(a_or_b, acc)\n"
"      { _, acc } ->\n"
"        acc\n"
"    end\n"
"  end\n"
"end"
msgstr ""

msgid ""
"  defp hard_work(x, y) do\n"
"    x = 2 * x\n"
"    y = 2 * y"
msgstr ""

msgid ""
"  defp log_user_in(context) do\n"
"    # ...\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"  defp loop(map) do\n"
"    receive do\n"
"      {:get, key, caller} ->\n"
"        send caller, Map.get(map, key)\n"
"        loop(map)\n"
"      {:put, key, value} ->\n"
"        loop(Map.put(map, key, value))\n"
"    end\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"  defp loop_acceptor(socket) do\n"
"    {:ok, client} = :gen_tcp.accept(socket)\n"
"    serve(client)\n"
"    loop_acceptor(socket)\n"
"  end"
msgstr ""

msgid ""
"  defp loop_acceptor(socket) do\n"
"    {:ok, client} = :gen_tcp.accept(socket)\n"
"    {:ok, pid} = Task.Supervisor.start_child(KVServer.TaskSupervisor, fn -> se"
"rve(client) end)\n"
"    :ok = :gen_tcp.controlling_process(client, pid)\n"
"    loop_acceptor(socket)\n"
"  end"
msgstr ""

msgid ""
"  defp no_entry_error(bucket) do\n"
"    raise \"could not find entry for #{inspect bucket} in table #{inspect table"
"()}\"\n"
"  end"
msgstr ""

msgid ""
"  defp print_hello(_),  do: IO.puts \"Hello world\"\n"
"  defp clean_vendor(_), do: File.rm_rf!(\"vendor\")\n"
"end\n"
"```"
msgstr ""

msgid ""
"  defp read_line(socket) do\n"
"    {:ok, data} = :gen_tcp.recv(socket, 0)\n"
"    data\n"
"  end"
msgstr ""

msgid ""
"  defp send_and_recv(socket, command) do\n"
"    :ok = :gen_tcp.send(socket, command)\n"
"    {:ok, data} = :gen_tcp.recv(socket, 0, 1000)\n"
"    data\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"  defp serve(socket) do\n"
"    socket\n"
"    |> read_line()\n"
"    |> write_line(socket)"
msgstr ""

msgid ""
"  defp write_line(line, socket) do\n"
"    :gen_tcp.send(socket, line)\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"  describe \"String.capitalize/2\" do\n"
"    test \"uppercases the first grapheme\" do\n"
"      assert \"T\" <> _ = String.capitalize(\"test\")\n"
"    end"
msgstr ""

msgid ""
"  describe \"when user is logged in and is a manager\" do\n"
"    setup [:log_user_in, :set_type_to_manager]"
msgstr ""

msgid ""
"  describe \"when user is logged in and is an admin\" do\n"
"    setup [:log_user_in, :set_type_to_admin]"
msgstr ""

msgid ""
"  ga('create', 'UA-8268430-6', 'auto');\n"
"  ga('send', 'pageview');\n"
"  </script>\n"
"  {% seo title=false %}\n"
"</head>"
msgstr ""

msgid ""
"  plug :set_header\n"
"  plug :send_ok"
msgstr ""

msgid ""
"  property \"starts_with?\" do\n"
"    forall({s1, s2} <- {utf8, utf8}) do\n"
"      String.starts_with?(s1 <> s2, s1)\n"
"    end\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"  property \"sum of positive integer is greater than both integers\" do\n"
"    check all list <- list_of(term()),\n"
"              list != [],\n"
"              elem <- member_of(list) do\n"
"      assert elem in list\n"
"    end\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"  serve(socket)\n"
"end"
msgstr ""

msgid ""
"  setup do\n"
"    Application.stop(:kv)\n"
"    :ok = Application.start(:kv)\n"
"  end"
msgstr ""

msgid ""
"  setup do\n"
"    opts = [:binary, packet: :line, active: false]\n"
"    {:ok, socket} = :gen_tcp.connect('localhost', 4040, opts)\n"
"    %{socket: socket}\n"
"  end"
msgstr ""

msgid ""
"  setup do\n"
"    registry = start_supervised!(KV.Registry)\n"
"    %{registry: registry}\n"
"  end"
msgstr ""

msgid ""
"  setup do\n"
"    {:ok, bucket} = KV.Bucket.start_link([])\n"
"    %{bucket: bucket}\n"
"  end"
msgstr ""

msgid ""
"  test \"adding two numbers\" do\n"
"    assert 1 + 2 == 4\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"  test \"always pass\" do\n"
"    assert true\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"  test \"arithmetic operations\" do\n"
"    4 = 2 + 2\n"
"  end"
msgstr ""

msgid ""
"  test \"can add two numbers\" do\n"
"    assert 1 + 1 == 2\n"
"  end\n"
"end\n"
"{% endhighlight %}"
msgstr ""

msgid ""
"  test \"greets the world\" do\n"
"    assert KV.hello() == :world\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"  test \"list operations\" do\n"
"    [1, 2, 3] = [1, 2] ++ [3]\n"
"  end\n"
"end"
msgstr ""

msgid ""
"  test \"raises on unknown entries\" do\n"
"    assert_raise RuntimeError, ~r/could not find entry/, fn ->\n"
"      KV.Router.route(<<0>>, Kernel, :node, [])\n"
"    end\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"  test \"removes bucket on crash\", %{registry: registry} do\n"
"    KV.Registry.create(registry, \"shopping\")\n"
"    {:ok, bucket} = KV.Registry.lookup(registry, \"shopping\")"
msgstr ""

msgid ""
"  test \"route requests across nodes\" do\n"
"    assert KV.Router.route(\"hello\", Kernel, :node, []) ==\n"
"           :\"foo@computer-name\"\n"
"    assert KV.Router.route(\"world\", Kernel, :node, []) ==\n"
"           :\"bar@computer-name\"\n"
"  end"
msgstr ""

msgid ""
"  test \"server interaction\", %{socket: socket} do\n"
"    assert send_and_recv(socket, \"UNKNOWN shopping\n"
"\") ==\n"
"           \"UNKNOWN COMMAND\n"
"\""
msgstr ""

msgid ""
"  test \"spawns buckets\", %{registry: registry} do\n"
"    assert KV.Registry.lookup(registry, \"shopping\") == :error"
msgstr ""

msgid ""
"  test \"stores values by key\" do\n"
"    {:ok, bucket} = KV.Bucket.start_link([])\n"
"    assert KV.Bucket.get(bucket, \"milk\") == nil"
msgstr ""

msgid ""
"  test \"stores values by key\", %{bucket: bucket} do\n"
"    assert KV.Bucket.get(bucket, \"milk\") == nil"
msgstr ""

msgid ""
"  test \"the in/2 operator works with lists\" do\n"
"    check all list <- list_of(term()),\n"
"              list != [],\n"
"              elem <- member_of(list) do\n"
"      assert elem in list\n"
"    end\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid "  use Application"
msgstr ""

msgid ""
"  write_line(socket, msg)\n"
"  serve(socket)\n"
"end"
msgstr ""

msgid ""
"  write_line(socket, msg)\n"
"  serve(socket)\n"
"end\n"
"```"
msgstr ""

msgid ""
"  {% assign guides = site.data.getting-started  %}\n"
"  {% for guide in site.data.getting-started %}\n"
"    <div class=\"widget\">\n"
"     <h3 class=\"widget-title\">{{guide.title}}</h3>\n"
"      <ol>\n"
"        {% for node in guide.pages %}\n"
"          <li><a class=\"spec\" href=\"{{guide.dir}}{{node.slug}}.html\" title=\"{{"
"node.title | escape}}\">{{node.title}}</a></li>\n"
"        {% endfor %}\n"
"      </ol>\n"
"    </div>\n"
"  {% endfor %}"
msgstr ""

msgid ""
"  {% assign guides = site.data.getting-started  %}\n"
"  {% for guide in site.data.getting-started %}\n"
"    {% if guide.dir == guide_base_url %}\n"
"      {% for node in guide.pages %}\n"
"        {% if node.slug == page_slug %}\n"
"          <div class=\"pagination loop-pagination\">\n"
"            {% unless forloop.first %}\n"
"              <a href=\"{{guide.dir}}{{prev.slug}}.html\" class=\"previous page-n"
"umbers spec\" title=\"{{prev.title | escape}}\">&larr; Previous</a>\n"
"            {% endunless %}\n"
"              <a class=\"page-numbers spec\" href=\"#container\">Top</a>\n"
"            {% unless forloop.last %}\n"
"              {% assign next = guide.pages[forloop.index] %}\n"
"              <a href=\"{{guide.dir}}{{next.slug}}.html\" class=\"previous page-n"
"umbers spec\" title=\"{{next.title | escape}}\">Next &rarr;</a>\n"
"            {% endunless %}\n"
"          </div>\n"
"        {% endif %}\n"
"        {% assign prev = node %}\n"
"      {% endfor %}\n"
"    {% endif %}\n"
"  {% endfor %}"
msgstr ""

msgid ""
"  {% assign url_parts = page.url | split: '/' %}\n"
"  {% assign url_parts_size = url_parts | size %}\n"
"  {% assign file_name = url_parts | last %}\n"
"  {% assign guide_base_url = page.url | replace: file_name %}\n"
"  {% assign page_slug = file_name | replace: '.html' %}"
msgstr ""

msgid ""
"  {% for count in (2..paginator.total_pages) %}\n"
"    {% if count == paginator.page %}\n"
"      <span class=\"page-numbers current\">{{count}}</span>\n"
"    {% else %}\n"
"      <a class=\"page-numbers\" href=\"/blog/page{{count}}\">{{count}}</a>\n"
"    {% endif %}\n"
"  {% endfor %}"
msgstr ""

msgid ""
"  {% if paginator.next_page %}\n"
"    <a class=\"next page-numbers spec\" href=\"/blog/page{{paginator.next_page}}\""
">Next</a>\n"
"  {% endif %}\n"
"</div>"
msgstr ""

msgid ""
"  {% if paginator.page == 1 %}\n"
"    <span class=\"page-numbers current\">1</span>\n"
"  {% else %}\n"
"    <a class=\"page-numbers\" href=\"/blog\">1</a>\n"
"  {% endif %}"
msgstr ""

msgid ""
"  {% include elixir-radar.html %}\n"
"  {% include distilled-by.html %}\n"
"</div>"
msgstr ""

msgid ""
"  {path, message}\n"
"end\n"
"```"
msgstr ""

msgid "![ANSI escape with ExUnit](/images/contents/exunit-ansi.png)"
msgstr ""

msgid ""
"![Comparison of fetch times with string keys](/images/contents/hash-dict-fetch"
".png)"
msgstr ""

msgid ""
"![Comparison of update times with string keys](/images/contents/hash-dict-upda"
"te.png)"
msgstr ""

msgid ""
"![ExUnit Bare Asssertion Diff](/images/contents/exunit-bare-assertion-diff.png"
")"
msgstr ""

msgid "![ExUnit Diff](/images/contents/exunit-diff.png)"
msgstr ""

msgid "![ExUnit Fast Fail](/images/contents/fast-fail.png)"
msgstr ""

msgid "![ExUnit diff](/images/contents/exunit-diff.png)"
msgstr ""

msgid "![IEx coloring](/images/contents/iex-coloring.png)"
msgstr ""

msgid "![IEx metadata](/images/contents/iex-metadata.png)"
msgstr ""

msgid "![IEx pry example](/images/contents/iex-pry.png)"
msgstr ""

msgid "![String module docs](/images/contents/string-help.png)"
msgstr ""

msgid ""
"\"\"\"\n"
"```"
msgstr ""

msgid ""
"\"\"\"\n"
"def convert(...)\n"
"```"
msgstr ""

msgid ""
"# !\n"
"iex> !true\n"
"false\n"
"iex> !1\n"
"false\n"
"iex> !nil\n"
"true\n"
"```"
msgstr ""

msgid ""
"# ... other run clauses ...\n"
"```"
msgstr ""

msgid ""
"# 2. functions\n"
"import Validator\n"
"user\n"
"|> validate_length(:name, 1..100)\n"
"|> validate_matches(:email, ~r/@/)"
msgstr ""

msgid ""
"# 3. macros + modules\n"
"defmodule MyValidator do\n"
"  use Validator\n"
"  validate_length :name, 1..100\n"
"  validate_matches :email, ~r/@/\n"
"end"
msgstr ""

msgid ""
"# Adding two lists\n"
"[1, 2, 3] ++ [4, 5, 6]"
msgstr ""

msgid "# Assets"
msgstr ""

msgid ""
"# Block until the message is received\n"
"receive do\n"
"  {:msg, contents} -> IO.puts contents\n"
"end\n"
"{% endhighlight %}"
msgstr ""

msgid ""
"# Case\n"
"case expr do\n"
"  { x, y } -> x + y\n"
"  other when is_integer(other) -> other\n"
"end\n"
"```"
msgstr ""

msgid "# Documentation"
msgstr ""

msgid "# Elixir Lang Guides (EPUB format)"
msgstr ""

msgid ""
"# Import functions from Foo so they can be called without the `Foo.` prefix\n"
"import Foo"
msgstr ""

msgid ""
"# Invokes the custom code defined in Foo as an extension point\n"
"use Foo\n"
"```"
msgstr ""

msgid ""
"# Let's compile common patterns for performance\n"
"empty_space = :binary.compile_pattern(\" \") # NEW!"
msgstr ""

msgid ""
"# Require the module in order to use its macros\n"
"require Foo"
msgstr ""

msgid ""
"# Sleep so we see events printed.\n"
"Process.sleep(:infinity)\n"
"```"
msgstr ""

msgid ""
"# Spawn an Elixir process (not an operating system one!)\n"
"spawn_link(fn ->\n"
"  send current_process, {:msg, \"hello world\"}\n"
"end)"
msgstr ""

msgid ""
"# This is fast as we only need to traverse `[0]` to prepend to `list`\n"
"iex> [0] ++ list\n"
"[0, 1, 2, 3]"
msgstr ""

msgid ""
"# This is slow as we need to traverse `list` to append 4\n"
"iex> list ++ [4]\n"
"[1, 2, 3, 4]\n"
"```"
msgstr ""

msgid ""
"# To get all files lib/foo.ex depends on\n"
"mix xref graph --source lib/foo.ex --only-nodes"
msgstr ""

msgid ""
"# To get all files that depend on lib/foo.ex at compile time\n"
"mix xref graph --label compile --sink lib/foo.ex --only-nodes"
msgstr ""

msgid ""
"# To limit statistics only to compile time dependencies\n"
"mix xref graph --format stats --label compile\n"
"```"
msgstr ""

msgid ""
"# and\n"
"iex> nil && 13\n"
"nil\n"
"iex> true && 17\n"
"17"
msgstr ""

msgid "# jekyll-table-of-contents"
msgstr ""

msgid "# {{ page.title }}"
msgstr ""

msgid "# {{ page.title }}<span hidden>.</span>"
msgstr ""

msgid "## (Linked) Lists"
msgstr ""

msgid "## @derive"
msgstr ""

msgid "## @impl"
msgstr ""

msgid "## A byte of Erlang"
msgstr ""

msgid "## A new way to manipulate pathnames"
msgstr ""

msgid "## A recap of enumerators, and some terminology"
msgstr ""

msgid "## AST metadata"
msgstr ""

msgid "## Accessing and updating structs"
msgstr ""

msgid "## Adding Elixir to existing Erlang programs"
msgstr ""

msgid "## After"
msgstr ""

msgid "## Agents"
msgstr ""

msgid "## Anonymous functions"
msgstr ""

msgid "## Application environment and configuration"
msgstr ""

msgid "## Application inference"
msgstr ""

msgid "## As \"constants\""
msgstr ""

msgid "## As annotations"
msgstr ""

msgid "## As temporary storage"
msgstr ""

msgid "## Asking questions"
msgstr ""

msgid "## Atoms"
msgstr ""

msgid "## Automatic code formatting"
msgstr ""

msgid "## Available [gulp] tasks"
msgstr ""

msgid "## Background"
msgstr ""

msgid "## Basic arithmetic"
msgstr ""

msgid "## Behaviours"
msgstr ""

msgid "## Binaries (and bitstrings)"
msgstr ""

msgid "## Bitstring generators"
msgstr ""

msgid "## Books"
msgstr ""

msgid "## Booleans"
msgstr ""

msgid "## Build your first Elixir project"
msgstr ""

msgid "## Building our own test case"
msgstr ""

msgid "## Built-in protocols"
msgstr ""

msgid "## Calendar improvements"
msgstr ""

msgid "## Charlists"
msgstr ""

msgid "## Checking the installed version of Elixir"
msgstr "## インストール済み Elixir を確認する"

msgid "## Client/Server in agents"
msgstr ""

msgid "## Code formatter"
msgstr ""

msgid "## Community and other resources"
msgstr ""

msgid "## Compatibility"
msgstr ""

msgid "## Compilation"
msgstr ""

msgid "## Compilation time improvements"
msgstr ""

msgid "## Compiling from source (Unix and MinGW)"
msgstr "## ソースファイルから直接コンパイルする (UNIX 系や MinGW)"

msgid "## Compiling with version managers"
msgstr "## バージョン管理ツールを使用する"

msgid "## Comprehensions"
msgstr ""

msgid "## Conclusion"
msgstr ""

msgid "## Control flow"
msgstr ""

msgid "## Copyright"
msgstr ""

msgid "## Custom error handler"
msgstr ""

msgid "## Custom sigils"
msgstr ""

msgid "## Data types"
msgstr ""

msgid "## Debugger"
msgstr ""

msgid "## Default arguments"
msgstr ""

msgid "## Default values and required keys"
msgstr ""

msgid "## Defining structs"
msgstr ""

msgid "## Dependencies"
msgstr ""

msgid "## Dependencies within an umbrella project"
msgstr ""

msgid "## Dependency between files"
msgstr ""

msgid "## Dialyzer task for Elixir"
msgstr ""

msgid "## Distributed tasks"
msgstr ""

msgid "## Distributions"
msgstr "## ディストリビューション"

msgid "## Doctests"
msgstr ""

msgid "## Documentation metadata"
msgstr ""

msgid "## Don't drink the kool aid"
msgstr ""

msgid "## Dynamic Supervisor"
msgstr ""

msgid "## ETS as a cache"
msgstr ""

msgid "## Eager vs Lazy"
msgstr ""

msgid "## Echo server"
msgstr ""

msgid "## Elixir Web Installer for Windows"
msgstr ""

msgid "## ElixirBench"
msgstr ""

msgid "## ElixirConf"
msgstr ""

msgid "## Else"
msgstr ""

msgid "## Enumerables"
msgstr ""

msgid "## Environments"
msgstr ""

msgid "## Erlang 18 support"
msgstr ""

msgid "## Erlang Term Storage"
msgstr ""

msgid "## Erlang/OTP logger integration"
msgstr ""

msgid "## Errors"
msgstr ""

msgid "## Escaping"
msgstr ""

msgid "## ExUnit"
msgstr ""

msgid "## ExUnit improvements"
msgstr ""

msgid "## Examples"
msgstr ""

msgid "## Exception.blame"
msgstr ""

msgid "## Exits"
msgstr ""

msgid "## Expectations"
msgstr ""

msgid "## Exploring"
msgstr ""

msgid "## Extensibility"
msgstr ""

msgid "## External dependencies"
msgstr ""

msgid "## Foreword"
msgstr ""

msgid "## Formatted text output"
msgstr ""

msgid "## Function capturing"
msgstr ""

msgid "## Function syntax"
msgstr ""

msgid "## Further reading"
msgstr ""

msgid "## GenStage"
msgstr ""

msgid "## Generators and filters"
msgstr ""

msgid "## Getting started"
msgstr ""

msgid "## Getting started experience"
msgstr ""

msgid "## IEx"
msgstr ""

msgid "## IEx helpers and breakpoints"
msgstr ""

msgid "## IEx improvements"
msgstr ""

msgid "## IO.inspect/2"
msgstr ""

msgid "## Identifying functions"
msgstr ""

msgid "## Implementing `Any`"
msgstr ""

msgid "## Implementing `interleave`"
msgstr ""

msgid "## Improved Unicode support"
msgstr ""

msgid "## In-depth Resources"
msgstr ""

msgid "## Installation"
msgstr ""

msgid "## Installing Erlang"
msgstr "## Erlang をインストールする"

msgid "## Interactive mode"
msgstr ""

msgid "## Internal dependencies"
msgstr ""

msgid "## Interpolation and escaping in sigils"
msgstr ""

msgid "## Keyword lists"
msgstr ""

msgid "## Language improvements"
msgstr ""

msgid "## Learn more"
msgstr ""

msgid "## Links"
msgstr ""

msgid "## Lists or tuples?"
msgstr ""

msgid "## Logger"
msgstr ""

msgid "## Logger compile-time purging"
msgstr ""

msgid "## Looking back"
msgstr ""

msgid "## Looking forward"
msgstr ""

msgid "## Loops through recursion"
msgstr ""

msgid "## Macros expansion"
msgstr ""

msgid "## Macros hygiene"
msgstr ""

msgid "## Maps"
msgstr ""

msgid "## Maps, structs and the future"
msgstr ""

msgid "## Meta-programming"
msgstr ""

msgid "## Mix"
msgstr ""

msgid "## Mix aliases"
msgstr ""

msgid "## Mix and OTP"
msgstr ""

msgid "## Mix install from SCM"
msgstr ""

msgid "## Mix workflows"
msgstr ""

msgid "## Module nesting"
msgstr ""

msgid "## Modules"
msgstr ""

msgid "## Monitors or links?"
msgstr ""

msgid "## Multi alias/import/require/use"
msgstr ""

msgid "## Named functions"
msgstr ""

msgid "## Naming processes"
msgstr ""

msgid "## Nested access"
msgstr ""

msgid "## Nested data structures"
msgstr ""

msgid "## Notable differences"
msgstr ""

msgid "## OTP applications"
msgstr ""

msgid "## Observer"
msgstr ""

msgid "## Other Resources"
msgstr ""

msgid "## Other agent actions"
msgstr ""

msgid "## Other bits"
msgstr ""

msgid "## Other changes"
msgstr ""

msgid "## Other improvements"
msgstr ""

msgid "## Other tools and community"
msgstr ""

msgid "## Our first GenServer"
msgstr ""

msgid "## Our first distributed code"
msgstr ""

msgid "## Our first macro"
msgstr ""

msgid "## Our first project"
msgstr ""

msgid "## Our first supervisor"
msgstr ""

msgid "## Pattern matching"
msgstr ""

msgid "## Power to the consumer!"
msgstr ""

msgid "## Precompiled package"
msgstr "## プリコンパイル済みパッケージ"

msgid "## Pretty printing"
msgstr ""

msgid "## Private macros"
msgstr ""

msgid "## Process-based serial compilation"
msgstr ""

msgid "## Processes and group leaders"
msgstr ""

msgid "## Productivity"
msgstr ""

msgid "## Project compilation"
msgstr ""

msgid "## Projects or applications?"
msgstr ""

msgid "## Property-based testing"
msgstr ""

msgid "## Protocol consolidation"
msgstr ""

msgid "## Protocols and structs"
msgstr ""

msgid "## Quoting"
msgstr ""

msgid "## Race conditions?"
msgstr ""

msgid "## Rebar 3 support"
msgstr ""

msgid "## Reduce and map algorithms"
msgstr ""

msgid "## Reducers"
msgstr ""

msgid "## Registry"
msgstr ""

msgid "## Regular expressions"
msgstr ""

msgid "## Roadmap"
msgstr ""

msgid "## Routing layer"
msgstr ""

msgid "## Running code"
msgstr ""

msgid "## Running commands"
msgstr ""

msgid "## Running scripts"
msgstr ""

msgid "## Running tests"
msgstr ""

msgid "## Sample data generation"
msgstr ""

msgid ""
"## Screencasts\n"
"<h4 class=\"resource\">Elixir Sips</h4>"
msgstr ""

msgid "## Scripted mode"
msgstr ""

msgid "## Sets"
msgstr ""

msgid "## Setting PATH environment variable"
msgstr "## 環境変数を設定する"

msgid "## Shared state in tests"
msgstr ""

msgid "## State"
msgstr ""

msgid "## Storing information with attributes"
msgstr ""

msgid "## StreamData integration with typespecs"
msgstr ""

msgid "## Streamlined child specs"
msgstr ""

msgid "## Streams"
msgstr ""

msgid "## Strings"
msgstr ""

msgid "## Strings, char lists, and word lists sigils"
msgstr ""

msgid "## Structs"
msgstr ""

msgid "## Structs are bare maps underneath"
msgstr ""

msgid "## Summary"
msgstr ""

msgid "## Summing up"
msgstr ""

msgid "## Supervision trees"
msgstr ""

msgid "## Syntax coloring"
msgstr ""

msgid "## Task supervisor"
msgstr ""

msgid "## Task.async_stream"
msgstr ""

msgid "## Tasks"
msgstr ""

msgid "## Tensorflex: Tensorflow bindings for the Elixir programming language"
msgstr ""

msgid "## Test filters and tags"
msgstr ""

msgid "## Test setup with ExUnit callbacks"
msgstr ""

msgid "## Testing a GenServer"
msgstr ""

msgid "## The `:into` option"
msgstr ""

msgid "## The `File` module"
msgstr ""

msgid "## The `IO` module"
msgstr ""

msgid "## The `Path` module"
msgstr ""

msgid "## The `__STACKTRACE__` construct"
msgstr ""

msgid "## The `test` macro"
msgstr ""

msgid "## The application callback"
msgstr ""

msgid "## The binary module"
msgstr ""

msgid "## The bucket supervisor"
msgstr ""

msgid "## The crypto module"
msgstr ""

msgid "## The digraph module"
msgstr ""

msgid "## The environment"
msgstr ""

msgid "## The match operator"
msgstr ""

msgid "## The math module"
msgstr ""

msgid "## The need for monitoring"
msgstr ""

msgid "## The new HashDict"
msgstr ""

msgid "## The next steps"
msgstr ""

msgid "## The path forward"
msgstr ""

msgid "## The pin operator"
msgstr ""

msgid "## The pipe operator"
msgstr ""

msgid "## The queue module"
msgstr ""

msgid "## The rand module"
msgstr ""

msgid "## The trouble with state"
msgstr ""

msgid "## The zip and zlib modules"
msgstr ""

msgid "## Throws"
msgstr ""

msgid "## Tidying up"
msgstr ""

msgid "## Tuples"
msgstr ""

msgid "## Two issues with classic Elixir enumerators"
msgstr ""

msgid "## Types and specs"
msgstr ""

msgid "## UTF-8 and Unicode"
msgstr ""

msgid "## UTF-8 atoms, function names and variables"
msgstr ""

msgid "## Umbrella projects"
msgstr ""

msgid "## Understanding Aliases"
msgstr ""

msgid "## Understanding applications"
msgstr ""

msgid "## Unquoting"
msgstr ""

msgid "## Usage"
msgstr ""

msgid "## Variables scope"
msgstr ""

msgid "## Video/Interactive Resources"
msgstr ""

msgid "## Welcome Alexei!"
msgstr ""

msgid "## Welcome, Eric!"
msgstr ""

msgid "## What's Elixir?"
msgstr ""

msgid "## What's new"
msgstr ""

msgid "## What's new?"
msgstr ""

msgid "## What's next?"
msgstr ""

msgid "## Where we are"
msgstr ""

msgid "## Why Xen?"
msgstr ""

msgid "## Why include property-based testing in Elixir (and rewriting from scratch)"
msgstr ""

msgid "## Workflow improvements"
msgstr ""

msgid "## Wrapping up"
msgstr ""

msgid "## Write macros responsibly"
msgstr ""

msgid "## `@deprecated` and `@since` attributes"
msgstr ""

msgid "## `IEx.pry/0` and `IEx.break!/2`"
msgstr ""

msgid "## `call`, `cast` or `info`?"
msgstr ""

msgid "## `case`"
msgstr ""

msgid "## `cond`"
msgstr ""

msgid "## `defguard` and `defguardp`"
msgstr ""

msgid "## `do/end` blocks"
msgstr ""

msgid "## `if` and `unless`"
msgstr ""

msgid "## `iodata` and `chardata`"
msgstr ""

msgid "## `send` and `receive`"
msgstr ""

msgid "## `spawn`"
msgstr ""

msgid "## alias"
msgstr ""

msgid "## async/await"
msgstr ""

msgid "## hex.pm"
msgstr ""

msgid "## import"
msgstr ""

msgid "## mix xref"
msgstr ""

msgid "## require"
msgstr ""

msgid "## use"
msgstr ""

msgid "## with"
msgstr ""

msgid "### Access selectors"
msgstr ""

msgid "### Adopting behaviours"
msgstr ""

msgid "### Advantages of property-based testing"
msgstr ""

msgid "### Anonymous functions"
msgstr ""

msgid "### Atoms"
msgstr ""

msgid "### Basic Usage"
msgstr ""

msgid "### Better dependency tracking"
msgstr ""

msgid "### Calendar types and sigils"
msgstr ""

msgid "### Calling functions"
msgstr ""

msgid "### Case"
msgstr ""

msgid "### Char lists"
msgstr ""

msgid "### Compiling n files"
msgstr ""

msgid "### Configuration"
msgstr ""

msgid "### Default values"
msgstr ""

msgid "### Defining behaviours"
msgstr ""

msgid "### Defining custom types"
msgstr ""

msgid "### Delimiters"
msgstr ""

msgid "### Deprecation of imperative assignment"
msgstr ""

msgid "### Deriving"
msgstr ""

msgid "### Diffing"
msgstr ""

msgid "### Docker"
msgstr "### Docker"

msgid "### Dynamic dispatch"
msgstr ""

msgid "### Elixir"
msgstr ""

msgid "### Erlang"
msgstr ""

msgid "### Fallback to `Any`"
msgstr ""

msgid "### First-class functions"
msgstr ""

msgid "### Function specifications"
msgstr ""

msgid "### GenStage for data-ingestion"
msgstr ""

msgid "### GenStage for event dispatching"
msgstr ""

msgid "### How It Works"
msgstr ""

msgid "### Identifying functions"
msgstr ""

msgid "### If"
msgstr ""

msgid "### Keyword list"
msgstr ""

msgid "### Learning resources"
msgstr ""

msgid "### Lists and binaries"
msgstr ""

msgid "### Mac OS X"
msgstr "### macOS(Mac OS X)"

msgid "### Manual integration"
msgstr ""

msgid "### Maps"
msgstr ""

msgid "### Named setups and describes"
msgstr ""

msgid "### Operator names"
msgstr ""

msgid "### Option parser integration"
msgstr ""

msgid "### Partials and function captures in Elixir"
msgstr ""

msgid "### Pattern matching"
msgstr ""

msgid "### Raspberry Pi"
msgstr "### Raspberry Pi"

msgid "### Rebar integration"
msgstr ""

msgid "### Regular expressions"
msgstr ""

msgid "### Sending and receiving messages"
msgstr ""

msgid "### Shrinking"
msgstr ""

msgid "### Starting applications"
msgstr ""

msgid "### Static code analysis"
msgstr ""

msgid "### Strings"
msgstr ""

msgid "### Syntax"
msgstr ""

msgid "### Test types"
msgstr ""

msgid "### Tuples"
msgstr ""

msgid "### Unix (and Unix-like)"
msgstr "### UNIX 系"

msgid "### Using property-based testing in stream_data"
msgstr ""

msgid "### Variable names"
msgstr ""

msgid "### Windows"
msgstr "### Windows"

msgid "### Word lists"
msgstr ""

msgid "### mix app.tree and deps.tree"
msgstr ""

msgid "### mix escript.install"
msgstr ""

msgid "### mix test \\-\\-stale"
msgstr ""

msgid "### mix xref"
msgstr ""

msgid ""
"#### Effects\n"
"Finally, you can also change the way the toc is displayed, choosing a `slideSh"
"ow` or a `fadeIn` effect instead of `show`:"
msgstr ""

msgid ""
"#### Header Styling\n"
"The script also adds an `<i>` tag next to each header. This uses the class `ic"
"on-arrow-up`, which if you're using [Bootstrap](http://twitter.github.io/boots"
"trap/), will be an arrow pointing to the top of the page.\n"
"Clicking that arrow will scroll you to the top, while clicking on a header wil"
"l get a permanent link to that particular header (using `window.location.hash`"
")."
msgstr ""

msgid ""
"#### Headers Used\n"
"By default the table of content is displayed when at least 3 headers are found"
". \n"
"You can customize the minimum number of headers required with this setting:"
msgstr ""

msgid ""
"#### List Type\n"
"By default the table of contents is rendered as an `<ol>`, so you can change t"
"he number formatting using CSS.\n"
"However you can use the `<ul>` tag, using the `listType` option:"
msgstr ""

msgid "#### Master"
msgstr ""

msgid "#### `build`"
msgstr ""

msgid "#### `clean`"
msgstr ""

msgid "#### `javascript`"
msgstr ""

msgid "#### `less`"
msgstr ""

msgid "#### `lint`"
msgstr ""

msgid ""
"% A \"Hello world\" function\n"
"some_fun() ->\n"
"  io:format('~s~n', ['Hello world!'])."
msgstr ""

msgid ""
"% Adding two lists\n"
"[1, 2, 3] ++ [4, 5, 6]."
msgstr ""

msgid ""
"% Case\n"
"case Expr of\n"
"  { X, Y } -> X + Y;\n"
"  Other when is_integer(Other) -> Other\n"
"end.\n"
"```"
msgstr ""

msgid ""
"% Non-exported functions are private\n"
"priv() ->\n"
"  secret_info.\n"
"```"
msgstr ""

msgid ""
"% This one works only with lists\n"
"some_fun(List) when is_list(List) ->\n"
"  io:format('~s~n', List)."
msgstr ""

msgid ""
"%User{name: \"jose\"}\n"
"#=> %User{name: \"jose\", age: 0}\n"
"```"
msgstr ""

msgid ""
"* ***OTP*** _(Open Telecom Platform)_ is a set of libraries that ships with Er"
"lang. Erlang developers use OTP to build robust, fault-tolerant applications. "
"In this chapter we will explore how many aspects from OTP integrate with Elixi"
"r, including supervision trees, event managers and more;"
msgstr ""

msgid ""
"* ***[ExUnit](https://hexdocs.pm/ex_unit/)*** is a test-unit based framework t"
"hat ships with Elixir;"
msgstr ""

msgid ""
"* ***[Mix](https://hexdocs.pm/mix/)*** is a build tool that ships with Elixir "
"that provides tasks for creating, compiling, testing your application, managin"
"g its dependencies and much more;"
msgstr ""

msgid ""
"* A functional programming language, called Erlang\n"
"* A set of design principles, called OTP\n"
"* The Erlang Virtual Machine, referred to as EVM or BEAM"
msgstr ""

msgid ""
"* Continue the work of cleaning up the [Kernel module](https://hexdocs.pm/elix"
"ir/Kernel.html). In v0.14.0, we added alternatives for conversion functions, l"
"ike `integer_to_binary/1` to `Integer.to_string/1`, now they must be properly "
"deprecated and removed;"
msgstr ""

msgid "* Elixir now runs on and requires Erlang R17;"
msgstr ""

msgid ""
"* Elixir v0.13 also provides structs, an alternative to Elixir records. Struct"
"s are more flexible than records, provide faster polymorphic operations, and s"
"till provide the same compile-time guarantees many came to love in records;"
msgstr ""

msgid ""
"* Elixir v0.13 provides a new comprehension syntax that not only works with li"
"sts, but with any [`Enumerable`](https://hexdocs.pm/elixir/Enumerable.html). T"
"he output of a comprehension is also extensible via the [`Collectable`](https:"
"//hexdocs.pm/elixir/Collectable.html) protocol;"
msgstr ""

msgid ""
"* Erlang's official website has a short [tutorial](http://www.erlang.org/cours"
"e/concurrent_programming.html) with pictures that briefly describe Erlang's pr"
"imitives for concurrent programming."
msgstr ""

msgid ""
"* ExUnit now supports the trace option, enabled via `mix test --trace`, which "
"forces tests to run sequentially and print the test names and extra informatio"
"n as it goes;"
msgstr ""

msgid ""
"* Integrate applications configuration (provided by OTP) right into Mix;\n"
"* Provide an Elixir logger that knows how to print and format Elixir exception"
"s and stacktraces;\n"
"* Properly expose the functionality provided by Applications, Supervisors, Gen"
"Servers and GenEvents and study how they can integrate with Elixir. For exampl"
"e, how to consume events from GenEvent as a [stream of data](https://hexdocs.p"
"m/elixir/Stream.html)?\n"
"* Study how patterns like tasks and agents can be integrated into the language"
", often picking up the lessons learned by libraries like [e2](http://e2project"
".org/erlang.html) and [functionality exposed by OTP itself](http://www.erlang."
"org/doc/man/rpc.html);\n"
"* Rewrite the Mix and ExUnit guides to focus on applications and OTP as a whol"
"e, rebranding it to \"Building Apps with Mix and OTP\";"
msgstr ""

msgid ""
"* Iterators are very hard to compose;\n"
"* Iterators contain state. You need to know, at each moment, what is the next "
"element you have to iterate next. We use functions and their bindings to pass "
"the iteration state around;\n"
"* Iterators have the \"dangling open resource\" problem. Consider that you want "
"to iterate a file with `Enum.map/2` as above. If any step during the iteration"
" fails, there is no easy way to notify the resource being iterated  (in this c"
"ase, the opened file) that iteration failed, so we can't close the file automa"
"tically, leaving it to the user."
msgstr ""

msgid ""
"* Macros are explicit: it is impossible to run a macro without explicitly invo"
"king it. For example, some languages allow developers to completely rewrite fu"
"nctions behind the scenes, often via parse transforms or via some reflection m"
"echanisms. In Elixir, a macro must be explicitly invoked in the caller during "
"compilation time."
msgstr ""

msgid ""
"* Macros are hygienic: by default, variables defined inside a macro are not go"
"ing to affect the user code. Furthermore, function calls and aliases available"
" in the macro context are not going to leak into the user context."
msgstr ""

msgid ""
"* Macros are lexical: it is impossible to inject code or macros globally. In o"
"rder to use a macro, you need to explicitly `require` or `import` the module t"
"hat defines the macro."
msgstr ""

msgid ""
"* Macros' language is clear: many languages provide syntax shortcuts for `quot"
"e` and `unquote`. In Elixir, we preferred to have them explicitly spelled out,"
" in order to clearly delimit the boundaries of a macro definition and its quot"
"ed expressions."
msgstr ""

msgid ""
"* Meta-programming in Elixir was also improved by the addition of the `binding"
"/0` and `binding/1` macros plus the additions of `Macro.expand_once/2` and `Ma"
"cro.expand_all/2` to the [`Macro` module](https://hexdocs.pm/elixir/Macro.html"
");"
msgstr ""

msgid ""
"* Mix, Elixir's build tool, has been improved in order to provide better workf"
"lows when compiling projects and working with dependencies;"
msgstr ""

msgid ""
"* Our CLI now supports `--hidden` and `--cookie` flags which are useful for di"
"stributed modes;\n"
"* Our test framework, ExUnit, is now able to capture all the communication tha"
"t happens with a registed IO device, like `:stdio` and `:stderr`, via [`ExUnit"
".CaptureIO`](https://hexdocs.pm/ex_unit/ExUnit.CaptureIO.html). This is very u"
"seful for testing how your software reacts to some inputs and what it prints t"
"o the terminal;\n"
"* `IEx` now allows files to be imported into the shell with `import_file` and "
"also loads `~/.iex` on startup for custom configuration;\n"
"* The `String`, `Enum` and `Dict` modules got more convenience functions that "
"goes from checking unicode character validity to taking values out of a dictio"
"nary;\n"
"* And many, many more!"
msgstr ""

msgid ""
"* Processes\n"
"* [ETS (Erlang Term Storage)](http://www.erlang.org/doc/man/ets.html)"
msgstr ""

msgid ""
"* Provide an Elixir logger that knows how to print and format Elixir exception"
"s and stacktraces. Work has already started on this front as Elixir already pr"
"ints errors coming from the application startup nicely;"
msgstr ""

msgid ""
"* Reducers are composable (notice how we have implemented map on top of reduce"
" by composing functions);\n"
"* Reducers are self-contained: there is no need keep state around, which also "
"solves the \"dangling open resource\" problem. The data type now knows exactly w"
"hen the iteration starts and when it finishes;\n"
"* Reducers do not dictate how a type should be enumerated. This means types li"
"ke `Range` and `HashDict` can provide a much faster implementation for Reducer"
"s;\n"
"* Furthermore, the end result is a cleaner implementation of most of `Enum` fu"
"nctions (the [reducers pull request](https://github.com/elixir-lang/elixir/pul"
"l/1102) removes over 500LOC) and better performance!"
msgstr ""

msgid ""
"* Solve all remaining [open issues](https://github.com/elixir-lang/elixir/issu"
"es?state=open). We have always kept the issues tracker tidy and there is littl"
"e work left to solve the existing issues. Note we have also listed all [upcomi"
"ng backwards incompatible changes](https://github.com/elixir-lang/elixir/issue"
"s?labels=Note%3ABackwards+incompatible&page=1&state=open). Many of those chang"
"es will actually be deprecated first and developers should be able to follow a"
"long without breaking changes in minor releases, but they are breaking changes"
" in the sense they work in v0.14.0 but will work differently by the time v1.0 "
"is released;"
msgstr ""

msgid ""
"* Support mix aliases, allowing developers to easily define Mix shortcuts for "
"their favorite tasks;"
msgstr ""

msgid ""
"* The [Getting Started guide](/getting-started/introduction.html) was rewritte"
"n from scratch. The previous guide was comprised of 7 chapters and was about t"
"o become 2 years old. The new guide features 20 chapters, it explores the new "
"maps and structs (which are part of this release), and it goes deeper into top"
"ics like IO and File handling. It also includes an extra guide, still in devel"
"opment, about [Meta-Programming in Elixir](/getting-started/meta/quote-and-unq"
"uote.html);"
msgstr ""

msgid ""
"* The first element is an atom or another tuple in the same representation;\n"
"* The second element is a keyword list containing metadata, like numbers and c"
"ontexts;\n"
"* The third element is either a list of arguments for the function call or an "
"atom. When this element is an atom, it means the tuple represents a variable."
msgstr ""

msgid ""
"* There are many other changes, like the addition of [StringIO](https://hexdoc"
"s.pm/elixir/StringIO.html), support for [tags and filters in ExUnit](https://h"
"exdocs.pm/ex_unit/ExUnit.Case.html) and more. Please check the [CHANGELOG](htt"
"ps://github.com/elixir-lang/elixir/blob/v0.13.0/CHANGELOG.md) for the complete"
" list."
msgstr ""

msgid ""
"* This [Erlang Syntax: A Crash Course](/crash-course.html) provides a concise "
"intro to Erlang's syntax. Each code snippet is accompanied by equivalent code "
"in Elixir. This is an opportunity for you to not only get some exposure to Erl"
"ang's syntax but also review some of the things you have learned in this guide"
"."
msgstr ""

msgid ""
"* Unicode strings and unicode operations\n"
"* A powerful unit test framework\n"
"* More data structures like ranges, including novel implementations for sets a"
"nd dictionaries\n"
"* Polymorphic records (in contrast to Erlang's compilation-time only records)\n"
"* Strict and lazy enumeration APIs\n"
"* Convenience functions for scripting, like working with paths and the filesys"
"tem\n"
"* A project management tool to compile and test Elixir code"
msgstr ""

msgid ""
"* We are also working hard on Windows support, improving its command-line tool"
"s and working towards a green test suite, thanks to [Tom Jansens](https://gith"
"ub.com/tojans);"
msgstr ""

msgid ""
"* We have improved Mix to be able to fetch Rebar dependencies, making integrat"
"ion with the existing Erlang ecossystem much easier, thanks to [Eric Meadows-J"
"onsson](https://github.com/ericmj);"
msgstr ""

msgid ""
"* With Erlang R17, Elixir also adds support for maps, which are key-value data"
" structures that supports pattern matching. We'll explore maps, their features"
" and limitations in this post;"
msgstr ""

msgid ""
"* [Agent](https://hexdocs.pm/elixir/Agent.html) - Simple wrappers around state"
".\n"
"* [GenServer](https://hexdocs.pm/elixir/GenServer.html) - \"Generic servers\" (p"
"rocesses) that encapsulate state, provide sync and async calls, support code r"
"eloading, and more.\n"
"* [Task](https://hexdocs.pm/elixir/Task.html) - Asynchronous units of computat"
"ion that allow spawning a process and potentially retrieving its result at a l"
"ater time."
msgstr ""

msgid ""
"* [Elixir](https://hexdocs.pm/elixir/) - standard library\n"
"* [EEx](https://hexdocs.pm/eex/) - templating library\n"
"* [ExUnit](https://hexdocs.pm/ex_unit/) - unit test library\n"
"* [IEx](https://hexdocs.pm/iex/) - interactive shell\n"
"* [Logger](https://hexdocs.pm/logger/) - built-in Logger\n"
"* [Mix](https://hexdocs.pm/mix/) - build tool"
msgstr ""

msgid ""
"* [Elixir](https://hexdocs.pm/elixir/master/) - standard library\n"
"* [EEx](https://hexdocs.pm/eex/master/) - templating library\n"
"* [ExUnit](https://hexdocs.pm/ex_unit/master/) - unit test library\n"
"* [IEx](https://hexdocs.pm/iex/master/) - interactive shell\n"
"* [Logger](https://hexdocs.pm/logger/master/) - built-in Logger\n"
"* [Mix](https://hexdocs.pm/mix/master/) - build tool"
msgstr ""

msgid ""
"* [Elixir](https://hexdocs.pm/elixir/{{ version[1].version }}/) - standard lib"
"rary\n"
"* [EEx](https://hexdocs.pm/eex/{{ version[1].version }}/) - templating library"
"\n"
"* [ExUnit](https://hexdocs.pm/ex_unit/{{ version[1].version }}/) - unit test l"
"ibrary\n"
"* [IEx](https://hexdocs.pm/iex/{{ version[1].version }}/) - interactive shell\n"
"* [Logger](https://hexdocs.pm/logger/{{ version[1].version }}/) - built-in Log"
"ger\n"
"* [Mix](https://hexdocs.pm/mix/{{ version[1].version }}/) - build tool\n"
"{% endfor %}"
msgstr ""

msgid ""
"* [Learn You Some Erlang for Great Good!](http://learnyousomeerlang.com/) is a"
"n excellent introduction to Erlang, its design principles, standard library, b"
"est practices, and much more. Once you have read through the crash course ment"
"ioned above, you'll be able to safely skip the first couple of chapters in the"
" book that mostly deal with the syntax. When you reach [The Hitchhiker's Guide"
" to Concurrency](http://learnyousomeerlang.com/the-hitchhikers-guide-to-concur"
"rency) chapter, that's where the real fun starts."
msgstr ""

msgid "* [Meta-programming in Elixir](/getting-started/meta/quote-and-unquote.html)"
msgstr ""

msgid "* [Mix and OTP](/getting-started/mix-otp/introduction-to-mix.html)"
msgstr ""

msgid ""
"* `:cont` - Keep producing.\n"
"* `:halt` - Stop producing.\n"
"* `:suspend` - Temporarily stop producing."
msgstr ""

msgid ""
"* `:dev` - the one in which Mix tasks (like `compile`) run by default\n"
"* `:test` - used by `mix test`\n"
"* `:prod` - the one you will use to run your project in production"
msgstr ""

msgid ""
"* `:done` - Completed normally.\n"
"* `:halted` - Consumer returned a `:halt` instruction.\n"
"* `:suspended` - Consumer return a `:suspend` instruction."
msgstr ""

msgid ""
"* `@moduledoc` - provides documentation for the current module.\n"
"* `@doc` - provides documentation for the function or macro that follows the a"
"ttribute.\n"
"* `@behaviour` - (notice the British spelling) used for specifying an <abbr ti"
"tle=\"Open Telecom Platform\">OTP</abbr> or user-defined behaviour.\n"
"* `@before_compile` - provides a hook that will be invoked before the module i"
"s compiled. This makes it possible to inject functions inside the module exact"
"ly before compilation."
msgstr ""

msgid ""
"* `Atom`\n"
"* `BitString`\n"
"* `Float`\n"
"* `Function`\n"
"* `Integer`\n"
"* `List`\n"
"* `Map`\n"
"* `PID`\n"
"* `Port`\n"
"* `Reference`\n"
"* `Tuple`"
msgstr ""

msgid ""
"* `\\\\` – single backslash\n"
"* `\\a` – bell/alert\n"
"* `\\b` – backspace\n"
"* `\\d` - delete\n"
"* `\\e` - escape\n"
"* `\\f` - form feed\n"
"* `\n"
"` – newline\n"
"* `` – carriage return\n"
"* `\\s` – space\n"
"* `\t` – tab\n"
"* `\\v` – vertical tab\n"
"* `\\0` - null byte\n"
"* `\\xDD` - represents a single byte in hexadecimal (such as `\\x13`)\n"
"* `\\uDDDD` and `\\u{D...}` - represents a Unicode codepoint in hexadecimal (suc"
"h as `\\u{1F600}`)"
msgstr ""

msgid ""
"* `after: 10_000` - This clause is going to be invoked whenever the main proce"
"ss does not receive a message for 10 seconds. This means a file depends on a m"
"odule that does not exist (and therefore waits forever) or there is a cyclic d"
"ependency;"
msgstr ""

msgid ""
"* `{ :EXIT, ^child, { reason, where } }` - this is the message sent by the chi"
"ld process in case it dies. This message is only received if the child is star"
"ted via `spawn_link`. In the message, we can find the reason why it failed and"
" the stacktrace. We then proceed to call an Erlang internal function to re-rai"
"se the error in the main process, effectively stopping compilation."
msgstr ""

msgid ""
"* `{ :EXIT, _child, { reason, where } }` - The same behaviour as before, it si"
"mply raises an error if any of the child processes fail;"
msgstr ""

msgid ""
"* `{ :compiled, ^child }` - a message sent by the child informing us that comp"
"ilation finished. Note that use of `^` before the variable `child` to tell Eli"
"xir to match the current value of `child` with the one received in the message"
". If compilation succeeds, we move forward and spawn the next child by calling"
" `spawn_compilers` recursively;"
msgstr ""

msgid ""
"* `{ :compiled, child }` - Similar as before, it is the notification a child p"
"rocessed finished compilation. Every time we receive such notifications, we re"
"move the child PID from the stack and notify the remaining PIDs in the stack t"
"hat new modules are available. Notice that we no longer match on a specific `^"
"child` PID, since now we can receive messages from different children at the s"
"ame time;"
msgstr ""

msgid ""
"* `{ :waiting, _child, _module }` - A message received every time a child proc"
"ess is waiting on a module to be compiled. In this scenario, all we do is spaw"
"n a new process to compile another file, ensuring compilation is never blocked"
";"
msgstr ""

msgid ""
"* change and configure the `:kv_server` application to use the routing functio"
"nality instead of dispatching directly to the local `KV.Registry`. For `:kv_se"
"rver` tests, you can make the routing table point to the current node itself"
msgstr ""

msgid ""
"* change the `:kv_server` application to read the port from its application en"
"vironment instead of using the hardcoded value of 4040"
msgstr ""

msgid ""
"* define a set of functions that have to be implemented by a module;\n"
"* ensure that a module implements all the functions in that set."
msgstr ""

msgid ""
"* deploy only the `:kv` application when we want a node to work only as storag"
"e (no TCP access)"
msgstr ""

msgid ""
"* deploy the `:kv_server` application to work only as a TCP server as long as "
"the routing table points only to other nodes"
msgstr ""

msgid ""
"* deploy the umbrella application to a node that will work as both TCP server "
"and key-value storage"
msgstr ""

msgid ""
"* ebin - contains the compiled bytecode\n"
"* lib - contains elixir code (usually `.ex` files)\n"
"* test - contains tests (usually `.exs` files)"
msgstr ""

msgid ""
"** (EXIT from #PID<0.41.0>) evaluator process exited with reason: an exception"
" was raised:\n"
"    ** (RuntimeError) oops\n"
"        (stdlib) erl_eval.erl:668: :erl_eval.do_apply/6"
msgstr ""

msgid "**Elixir**"
msgstr ""

msgid "**Erlang**"
msgstr ""

msgid ""
"**Note**. Since Erlang modules are represented by atoms, you may invoke Erlang"
" functions in Elixir as follows:"
msgstr ""

msgid ""
"**Note**: in Elixir, you don't have to define the `Foo` module before being ab"
"le to define the `Foo.Bar` module, as the language translates all module names"
" to atoms. You can define arbitrarily-nested modules without defining any modu"
"le in the chain (e.g., `Foo.Bar.Baz` without defining `Foo` or `Foo.Bar` first"
")."
msgstr ""

msgid ""
"**PS:** We have just released v0.11.1 which addresses a regression in Mix and "
"improves the dependencies update process."
msgstr ""

msgid "*Student: Anshuman Chhabra*"
msgstr ""

msgid "*Student: Gabriel Gatu*"
msgstr ""

msgid "*Student: Nikola Jichev*"
msgstr ""

msgid "*Student: Tallys Martins*"
msgstr ""

msgid ""
"*The leading underscore in `_sep` means that the variable will be ignored in t"
"his function; see [Naming Conventions](https://hexdocs.pm/elixir/master/naming"
"-conventions.html#underscore-_foo).*"
msgstr ""

msgid ""
"*The trailing question mark in `zero?` means that this function returns a bool"
"ean; see [Naming Conventions](https://hexdocs.pm/elixir/master/naming-conventi"
"ons.html#trailing-question-mark-foo).*"
msgstr ""

msgid ""
"- Guy Steele, keynote at the 1998 ACM OOPSLA conference on \"Growing a Language"
"\""
msgstr ""

msgid "---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: Agent\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: Basic operators\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: Basic types\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: Binaries, strings, and charlists\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: Comprehensions\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: Debugging\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: Dependencies and umbrella projects\n"
"redirect_from: /getting-started/mix-otp/dependencies-and-umbrella-apps.html\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: Distributed tasks and configuration\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: Doctests, patterns and with\n"
"redirect_from: /getting-started/mix_otp/docs-tests-and-pipelines.html\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: Domain-specific languages\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: Dynamic supervisors\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: ETS\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: Enumerables and Streams\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: Erlang libraries\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: GenServer\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: IO and the file system\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: Introduction\n"
"redirect_from: /getting_started/1.html\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: Introduction to Mix\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: Keyword lists and maps\n"
"redirect_from: /getting-started/maps-and-dicts.html\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: Macros\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: Module attributes\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: Modules and functions\n"
"redirect_from: /getting-started/modules.html\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: Pattern matching\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: Processes\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: Protocols\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: Quote and unquote\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: Recursion\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: Sigils\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: Structs\n"
"redirect_from: /getting-started/struct.html\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: Supervisor and Application\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: Task and gen_tcp\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: Typespecs and behaviours\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: Where to go next\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: alias, require, and import\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: case, cond, and if\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: getting-started\n"
"title: try, catch, and rescue\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: post\n"
"title: \"StreamData: Property-based testing and data generation for Elixir\"\n"
"author: Andrea Leopardi\n"
"category: Releases\n"
"excerpt: We are working on data generation and property-based testing for the "
"next versions of Elixir.\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: post\n"
"title: A peek inside Elixir's Parallel Compiler\n"
"author: José Valim\n"
"category: Internals\n"
"excerpt: Today, a parallel compiler just landed in Elixir master. The goal of "
"the parallel compiler is to compile files in parallel, automatically detecting"
" dependencies between files. In this blog post, we are going to take a peek in"
"to the parallel compiler internals and learn more about Erlang and Elixir in t"
"he process.\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: post\n"
"title: Announcing GenStage\n"
"author: José Valim\n"
"category: Announcements\n"
"excerpt: GenStage is a new Elixir behaviour for exchanging events with back-pr"
"essure between Elixir processes. In this blog post we will cover the backgroun"
"d that led us to GenStage, some example use cases, and what we are exploring f"
"or future releases.\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: post\n"
"title: Elixir Design Goals\n"
"author: José Valim\n"
"category: Internals\n"
"excerpt: Highlight of Elixir design goals.\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: post\n"
"title: Elixir on Xen\n"
"author: José Valim\n"
"category: Announcements\n"
"excerpt: The Erlang on Xen team has added support for Elixir and we will tell "
"you how you can use it!\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: post\n"
"title: Elixir v0.10.0 released\n"
"author: José Valim\n"
"category: Releases\n"
"excerpt: Elixir v0.10.0 is out with support for streams, sets, pretty printing"
" and many improvements for Mix and ExUnit.\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: post\n"
"title: Elixir v0.11.0 released\n"
"author: José Valim\n"
"category: Releases\n"
"excerpt: Elixir v0.11.0 is out and it focus on improving and optimizing the pa"
"tterns often used by the community.\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: post\n"
"title: Elixir v0.12.0 released\n"
"author: José Valim\n"
"category: Releases\n"
"excerpt: Elixir v0.12.0 is out with improved enumerables, build patterns and w"
"elcoming a new member to our team\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: post\n"
"title: Elixir v0.13.0 released, hex.pm and ElixirConf announced\n"
"author: José Valim\n"
"category: Releases\n"
"excerpt: \"Elixir v0.13.0 comes with substantial improvements to the language: "
"maps, structs, comprehensiona and more. It also marks the announcement of the "
"hex.pm package manager and the announcment of ElixirConf!\"\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: post\n"
"title: Elixir v0.14.0 released\n"
"author: José Valim\n"
"category: Releases\n"
"excerpt: \"Elixir v0.14.0 is released and expands the work on structs and bring"
"ing more of OTP right into Elixir and Mix\"\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: post\n"
"title: Elixir v0.15.0 released\n"
"author: José Valim\n"
"category: Releases\n"
"excerpt: \"Elixir v0.15.0 introduces Elixir's Logger, Mix aliases and is the la"
"st stop before Elixir v1.0. We are also glad to welcome Alexei into our team!\""
"\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: post\n"
"title: Elixir v0.5.0 released\n"
"author: José Valim\n"
"category: Releases\n"
"excerpt: We have finally released Elixir v0.5.0! This marks the first release "
"since the language was rewritten. In this blog post, we will discuss what we a"
"chieved during this time and what are the next steps!"
msgstr ""

msgid ""
"---\n"
"layout: post\n"
"title: Elixir v0.6.0 released\n"
"author: José Valim\n"
"category: Releases\n"
"excerpt: We have finally released Elixir v0.6.0! This release includes a build"
" tool called Mix, support for Erlang typespecs, many improvements to IEx and i"
"mproved IO, File and Macro support."
msgstr ""

msgid ""
"---\n"
"layout: post\n"
"title: Elixir v0.7.0 released\n"
"author: José Valim\n"
"category: Releases\n"
"excerpt: Elixir v0.7.0 is released with many improvements! Read on for more in"
"formation."
msgstr ""

msgid ""
"---\n"
"layout: post\n"
"title: Elixir v0.7.1 released\n"
"author: José Valim\n"
"category: Releases\n"
"excerpt: Elixir v0.7.1 was released to celebrate the end of a two months journ"
"ey traveling around Europe, United States and Brazil talking about Elixir."
msgstr ""

msgid ""
"---\n"
"layout: post\n"
"title: Elixir v0.7.2 released\n"
"author: Yurii Rashkovskii\n"
"category: Releases\n"
"excerpt: Elixir v0.7.2 is released, new, improved type specifications syntax a"
"nd many other improvements."
msgstr ""

msgid ""
"---\n"
"layout: post\n"
"title: Elixir v0.8.0 released\n"
"author: José Valim\n"
"category: Releases\n"
"excerpt: On the last 9th January, we celebrated two years since Elixir's first"
" commit and to celebrate this occasion we have prepared a big release. Elixir "
"v0.8 is out, with documentation, optimizations, bug fixes and shiny new featur"
"es. Let's take a look at them!\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: post\n"
"title: Elixir v0.8.2 released\n"
"author: José Valim\n"
"category: Releases\n"
"excerpt: Elixir v0.8.2 is released with bug fixes, better Erlang R16 support a"
"nd doctests.\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: post\n"
"title: Elixir v0.9.0 released\n"
"author: José Valim\n"
"category: Releases\n"
"excerpt: Elixir v0.9.0 is released with support for reducers, umbrella project"
"s, faster compilation times and dropped support for R15 and earlier OTP versio"
"ns.\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: post\n"
"title: Elixir v1.0 released\n"
"author: José Valim\n"
"category: Releases\n"
"excerpt: Elixir v1.0 is finally out!\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: post\n"
"title: Elixir v1.1 released\n"
"author: José Valim\n"
"category: Releases\n"
"excerpt: Elixir v1.1 brings enhancements, bug fixes, performance improvements "
"and more into Elixir.\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: post\n"
"title: Elixir v1.2 released\n"
"author: José Valim\n"
"category: Releases\n"
"excerpt: Elixir v1.2 brings enhancements, bug fixes, performance improvements "
"and more into Elixir.\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: post\n"
"title: Elixir v1.3 released\n"
"author: José Valim\n"
"category: Releases\n"
"excerpt: Elixir v1.3 brings many improvements to the language, the compiler an"
"d its tooling, specially Mix (Elixir's build tool) and ExUnit (Elixir's test f"
"ramework).\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: post\n"
"title: Elixir v1.4 released\n"
"author: José Valim\n"
"category: Releases\n"
"excerpt: Elixir v1.4 brings many improvements to the language, its standard li"
"brary and the Mix build tool.\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: post\n"
"title: Elixir v1.5 released\n"
"author: José Valim\n"
"category: Releases\n"
"excerpt: Elixir v1.5 integrates with Erlang/OTP 20 and bring changes that impr"
"oves the language reach and the developer experience\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: post\n"
"title: Elixir v1.6 released\n"
"author: José Valim\n"
"category: Releases\n"
"excerpt: Elixir v1.6 includes a code formatter, defguard, dynamic supervision "
"and new module attributes that improves code quality and the developer experie"
"nce\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: post\n"
"title: Elixir v1.7 released\n"
"author: José Valim\n"
"category: Releases\n"
"excerpt: Elixir v1.7 includes many quality of life improvements, focusing on d"
"ocumentation, Logger and ExUnit, as well as a new Elixir Core team member!\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: post\n"
"title: Elixir's new continuable enumerators\n"
"author: Peter Minten\n"
"category: Internals\n"
"excerpt: In 0.12.0 Elixir's enumerators have gained the ability to suspend val"
"ue\n"
"         production and to terminate early.\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: post\n"
"title: Google Summer of Code 2013\n"
"author: José Valim\n"
"category: Announcements\n"
"excerpt: Elixir is taking part in Google Summer of Code 2013! Are you a studen"
"t? Join us!\n"
"---"
msgstr ""

msgid ""
"---\n"
"layout: post\n"
"title: Google Summer of Code 2018 projects\n"
"author: Andrea Leopardi\n"
"category: Announcements\n"
"excerpt: Once again Elixir is participating in Google Summer of Code 2018. In "
"this post, we'll have a look at the active projects.\n"
"---"
msgstr ""

msgid ""
"---\n"
"section: blog\n"
"layout: blog\n"
"---"
msgstr ""

msgid ""
"---\n"
"section: getting-started\n"
"---"
msgstr ""

msgid ""
"---\n"
"section: home\n"
"layout: default\n"
"---"
msgstr ""

msgid ""
"---\n"
"title: \"Development\"\n"
"section: development\n"
"layout: default\n"
"---"
msgstr ""

msgid ""
"---\n"
"title: \"Elxir をインストール\"\n"
"section: install\n"
"layout: default\n"
"---\n"
"{% assign stable = site.data.elixir-versions[site.data.elixir-versions.stable]"
" %}"
msgstr ""

msgid ""
"---\n"
"title: \"Erlang/Elixir Syntax: A Crash Course\"\n"
"section: home\n"
"layout: default\n"
"---"
msgstr ""

msgid ""
"---\n"
"title: \"Learning resources\"\n"
"section: learning\n"
"layout: default\n"
"---"
msgstr ""

msgid ""
"---\n"
"title: Blog\n"
"section: blog\n"
"layout: blog\n"
"---"
msgstr ""

msgid ""
"---\n"
"title: Elixir Documentation\n"
"section: docs\n"
"layout: default\n"
"---"
msgstr ""

msgid ""
"---\n"
"title: Posts by category\n"
"section: blog\n"
"layout: blog\n"
"---"
msgstr ""

msgid "."
msgstr ""

msgid "......."
msgstr ""

msgid ""
"...and [many other fixes & improvements](https://github.com/elixir-lang/elixir"
"/blob/v0.7.2/CHANGELOG.md)."
msgstr ""

msgid ""
"1) `cond` allows any expression on the left side while Erlang allows only guar"
"d clauses;"
msgstr ""

msgid ""
"1. A way to organize data by fields\n"
"2. Efficient in-memory representation and operations\n"
"3. Compile-time structures with compile-time errors\n"
"4. The basic foundation for polymorphism in Elixir"
msgstr ""

msgid "1. Add a dependency on `lingex` to your `mix.exs` file:"
msgstr ""

msgid "1. In the Erlang shell, first start IEx:"
msgstr ""

msgid "1. Mix automatically starts our current application for us"
msgstr ""

msgid ""
"1. Provide a build tool that makes it easy to create, compile and test Elixir "
"projects;\n"
"2. Support [Erlang typespecs](http://www.erlang.org/doc/reference_manual/types"
"pec.html);\n"
"3. Improve IO and File modules to be more robust and complete."
msgstr ""

msgid ""
"1. The `subject` of the function is always the first argument.\n"
"2. All data structures functions employ zero-based access."
msgstr ""

msgid ""
"1. The module where the server callbacks are implemented, in this case `__MODU"
"LE__`, meaning the current module"
msgstr ""

msgid ""
"1. They serve to annotate the module, often with information to be used by the"
" user or the <abbr title=\"Virtual Machine\">VM</abbr>.\n"
"2. They work as constants.\n"
"3. They work as a temporary module storage to be used during compilation."
msgstr ""

msgid ""
"1. We could use Erlang's [:rpc](http://www.erlang.org/doc/man/rpc.html) module"
" to execute functions on a remote node. Inside the `bar@computer-name` shell a"
"bove, you can call `:rpc.call(:\"foo@computer-name\", Hello, :world, [])` and it"
" will print \"hello world\""
msgstr ""

msgid ""
"1. We invoke `KV.Registry.create(registry, \"shopping\")`\n"
"2. The registry creates the bucket and updates the cache table\n"
"3. We access the information from the table with `KV.Registry.lookup(registry,"
" \"shopping\")`\n"
"4. The command above returns `{:ok, bucket}`"
msgstr ""

msgid ""
"1. We invoke `KV.Registry.create(registry, \"shopping\")`\n"
"2. We access the information from the table with `KV.Registry.lookup(registry,"
" \"shopping\")`\n"
"3. The command above returns `:error`\n"
"4. The registry creates the bucket and updates the cache table"
msgstr ""

msgid ""
"1. `handle_call/3` must be used for synchronous requests. This should be the d"
"efault choice as waiting for the server reply is a useful backpressure mechani"
"sm."
msgstr ""

msgid ""
"1. declaring typed function signatures (specifications);\n"
"2. declaring custom data types."
msgstr ""

msgid ""
"1. the test file is an Elixir script file (`.exs`). This is convenient because"
" we don't need to compile test files before running them;"
msgstr ""

msgid ""
"15:22:33.046 [error] Task #PID<0.55.0> started from #PID<0.53.0> terminating\n"
"** (RuntimeError) oops\n"
"    (stdlib) erl_eval.erl:668: :erl_eval.do_apply/6\n"
"    (elixir) lib/task/supervised.ex:85: Task.Supervised.do_apply/2\n"
"    (stdlib) proc_lib.erl:247: :proc_lib.init_p_do_apply/3\n"
"Function: #Function<20.99386804/0 in :erl_eval.expr/5>\n"
"    Args: []\n"
"```"
msgstr ""

msgid ""
"2) `cond` uses Elixir's concepts of truthy and falsy values (everything is tru"
"thy except `nil` and `false`), Erlang's `if` expects strictly a boolean;"
msgstr ""

msgid ""
"2. Even if Mix didn't start our application for us, our application does not y"
"et do anything when it starts"
msgstr ""

msgid ""
"2. Run `mix deps.get` to update your dependencies. This adds a few custom task"
"s\n"
"to the mix tool (`lingex.build`, `lingex.image`, and `lingex.build_image`)"
msgstr ""

msgid "2. The initialization arguments, in this case, the atom `:ok`"
msgstr ""

msgid ""
"2. Then hit `Ctrl+G`. This will open up the user switch command interface from"
" the Erlang shell."
msgstr ""

msgid ""
"2. We could have a server running on the other node and send requests to that "
"node via the [GenServer](https://hexdocs.pm/elixir/GenServer.html) API. For ex"
"ample, you can call a server on a remote node by using `GenServer.call({name, "
"node}, arg)` or passing the remote process PID as the first argument"
msgstr ""

msgid ""
"2. `handle_cast/2` must be used for asynchronous requests, when you don't care"
" about a reply. A cast does not even guarantee the server has received the mes"
"sage and, for this reason, should be used sparingly. For example, the `create/"
"2` function we have defined in this chapter should have used `call/2`. We have"
" used `cast/2` for didactic purposes."
msgstr ""

msgid ""
"2. we define a test module named `KVTest`, use [`ExUnit.Case`](https://hexdocs"
".pm/ex_unit/ExUnit.Case.html) to inject the testing API and define a simple te"
"st using the `test/2` macro;"
msgstr ""

msgid ""
"3. A list of options which can be used to specify things like the name of the "
"server. For now, we forward the list of options that we receive on `start_link"
"/1`, which defaults to an empty list. We will customize it later on"
msgstr ""

msgid "3. In the user switch interface, type:"
msgstr ""

msgid "3. Set `lingex` options. Add the following lines to your `mix.exs` file:"
msgstr ""

msgid ""
"3. We could use [tasks](https://hexdocs.pm/elixir/Task.html), which we have le"
"arned about in [a previous chapter](/getting-started/mix-otp/task-and-gen-tcp."
"html), as they can be spawned on both local and remote nodes"
msgstr ""

msgid ""
"3. `handle_info/2` must be used for all other messages a server may receive th"
"at are not sent via `GenServer.call/2` or `GenServer.cast/2`, including regula"
"r messages sent with `send/2`. The monitoring `:DOWN` messages are such an exa"
"mple of this."
msgstr ""

msgid ""
"4. Optionally, you may register with the build service [here](http://build.erl"
"angonxen.org/register) and update the credentials accordingly. For the complet"
"e list of recognized options see the build service documentation."
msgstr ""

msgid ""
"5. Run `mix lingex.build_image`. This will archive all `*.beam` files of your "
"project and submit them to the build service."
msgstr ""

msgid ""
"6. The build process will complete in about 30s. An image file called 'vmling'"
" will appear in the current directory, ready to boot as a Xen guest. The image"
" file will contain LING VM and your project code."
msgstr ""

msgid ""
"<!DOCTYPE html>\n"
"<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\">\n"
"<head>\n"
"  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n"
"  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n"
"  <title>{% if page.title %}{{ page.title }} - {% endif %}Elixir</title>\n"
"  <link href=\"http://feeds.feedburner.com/ElixirLang\" rel=\"alternate\" title=\"E"
"lixir's Blog\" type=\"application/atom+xml\" />\n"
"  <link rel=\"stylesheet\" type=\"text/css\" href=\"/css/style.css\" />\n"
"  <link rel=\"stylesheet\" type=\"text/css\" href=\"/css/syntax.css\" />\n"
"  <link rel=\"stylesheet\" href=\"/js/icons/style.css\">\n"
"  <!--[if lt IE 8]><!-->\n"
"  <link rel=\"stylesheet\" href=\"/js/icons/ie7/ie7.css\">\n"
"  <!--<![endif]-->\n"
"  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n"
"  <link rel=\"stylesheet\" id=\"font-bitter-css\" href=\"//fonts.googleapis.com/css"
"?family=Bitter:400,700\" type=\"text/css\" media=\"screen\" />\n"
"  <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"/favicon.ico\" />\n"
"  <link rel=\"search\" type=\"application/opensearchdescription+xml\" title=\"elixi"
"r-lang.org\" href=\"/opensearch.xml\" />\n"
"  <script>\n"
"  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){"
"\n"
"  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o"
"),\n"
"  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a"
",m)\n"
"  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');"
msgstr ""

msgid "</div><!-- #content -->"
msgstr ""

msgid ""
"<a class=\"cover\" href=\"http://alchemist.camp\" title=\"Alchemist Camp: Learn Eli"
"xir and Phoenix by building things\"><img src=\"/images/learning/alchemist-camp."
"png\" alt=\"Alchemist Camp cover\" width=\"190\" /></a>"
msgstr ""

msgid ""
"<a class=\"cover\" href=\"http://elixirkoans.io/\" title=\"Elixir Koans\"><img src=\""
"/images/learning/elixir-koans-logo.png\" alt=\"Elixir Koans\" width=\"190\" /></a>"
msgstr ""

msgid ""
"<a class=\"cover\" href=\"http://elixirschool.com\" title=\"Elixir School\"><img src"
"=\"/images/learning/elixir-school.jpg\" alt=\"Elixir School\" width=\"190\" /></a>"
msgstr ""

msgid ""
"<a class=\"cover\" href=\"http://elixirsips.com\" title=\"Elixir Sips: Learn Elixir"
" with Two Short Videos Each Week\n"
"– with Josh Adams\"><img src=\"/images/learning/elixir-sips.png\" alt=\"ElixirSips"
" cover\" width=\"190\" /></a>"
msgstr ""

msgid ""
"<a class=\"cover\" href=\"http://joyofelixir.com\" title=\"Joy of Elixir\"><img src="
"\"/images/learning/joy-of-elixir.jpg\" alt=\"Joy of Elixir\" width=\"190\" /></a>"
msgstr ""

msgid ""
"<a class=\"cover\" href=\"http://shop.oreilly.com/product/0636920030584.do\" title"
"=\"Introducing Elixir: Getting Started in Functional Programming\n"
"– by Simon St. Laurent, J. David Eisenberg\"><img src=\"/images/learning/introdu"
"cing-elixir.jpg\" alt=\"Introducing Elixir cover\" width=\"190\" /></a>"
msgstr ""

msgid ""
"<a class=\"cover\" href=\"http://www.erlang-in-anger.com\" title=\"Erlang in Anger "
"– by Fred Hebert\"><img src=\"/images/learning/erlang-in-anger.png\" alt=\"Erlang "
"in Anger cover\" width=\"190\" /></a>"
msgstr ""

msgid ""
"<a class=\"cover\" href=\"http://www.learnelixir.tv\" title=\"Your video guide to E"
"lixir: Learn it step by step.\">\n"
"  <img src=\"/images/learning/learn-elixir-tv.png\" alt=\"LearnElixir.tv cover\" w"
"idth=\"190\" />\n"
"</a>"
msgstr ""

msgid ""
"<a class=\"cover\" href=\"http://www.manning.com/tanweihao/\" title=\"The Little El"
"ixir and OTP Guidebook\n"
"– by Benjamin Tan Wei Hao\"><img src=\"/images/learning/the-little-elixir-and-ot"
"p-guidebook-meap.jpg\" alt=\"The Little Elixir and OTP Guidebook cover\" width=\"1"
"90\" /></a>"
msgstr ""

msgid ""
"<a class=\"cover\" href=\"https://elixircards.co.uk/\" title=\"Elixir Flashcards\"><"
"img src=\"/images/learning/flashcards_army.jpg\" alt=\"Elixir Flashcards\" width=\""
"190\" /></a>"
msgstr ""

msgid ""
"<a class=\"cover\" href=\"https://elixircasts.io\" title=\"ElixirCasts: Elixir and "
"Phoenix screencasts.\">\n"
"  <img src=\"/images/learning/elixircasts.png\" alt=\"elixircasts.io cover\" width"
"=\"190\" />\n"
"</a>"
msgstr ""

msgid ""
"<a class=\"cover\" href=\"https://goo.gl/9w33lp\" title=\"Take Off With Elixir\"><im"
"g src=\"/images/learning/take-off-with-elixir.jpg\" alt=\"Red:4\" width=\"190\" /></"
"a>"
msgstr ""

msgid ""
"<a class=\"cover\" href=\"https://pragmaticstudio.com/elixir\" title=\"Pragmatic St"
"udio's Elixir/OTP Course\"><img src=\"/images/learning/pragmaticstudio-elixir.pn"
"g\" alt=\"Pragmatic Studio's Elixir/OTP Course\" width=\"190\" /></a>"
msgstr ""

msgid ""
"<a class=\"cover\" href=\"https://pragprog.com/book/cdc-elixir/learn-functional-p"
"rogramming-with-elixir\" title=\"Learn Functional Programming With Elixir: New F"
"oundations for a New World\n"
"– by Ulisses Almeida\"><img src=\"/images/learning/learn-functional-programming-"
"with-elixir.jpg\" alt=\"Learn Functional Programming with Elixir cover\" width=\"1"
"90\" /></a>"
msgstr ""

msgid ""
"<a class=\"cover\" href=\"https://pragprog.com/book/cmelixir/metaprogramming-elix"
"ir\" title=\"Metaprogramming Elixir: Write Less Code, Get More Done and Have Fun"
"\n"
"– by Chris Mccord\"><img src=\"/images/learning/metaprogramming-elixir.jpg\" alt="
"\"Metaprogramming Elixir cover\" width=\"190\" /></a>"
msgstr ""

msgid ""
"<a class=\"cover\" href=\"https://pragprog.com/book/elixir16/programming-elixir-1"
"-6\" title=\"Programming Elixir 1.6: Functional |&gt; Concurrent |&gt; Pragmatic"
" |&gt; Fun\n"
"– by Dave Thomas\"><img src=\"/images/learning/programming-elixir-1-6.jpg\" alt=\""
"Programming Elixir cover\" width=\"190\" /></a>"
msgstr ""

msgid ""
"<a class=\"cover\" href=\"https://pragprog.com/book/tvmelixir/adopting-elixir\" ti"
"tle=\"Adopting Elixir: From Concept to Production\n"
"– by Ben Marx, José Valim, Bruce Tate\"><img src=\"/images/learning/adopting-eli"
"xir.jpg\" alt=\"Programming Elixir cover\" width=\"190\" /></a>"
msgstr ""

msgid ""
"<a class=\"cover\" href=\"https://www.manning.com/books/elixir-in-action-second-e"
"dition\" title=\"Elixir in Action\n"
"– by Saša Jurić\"><img src=\"/images/learning/elixir-in-action.jpg\" alt=\"Elixir "
"in Action cover\" width=\"190\" /></a>"
msgstr ""

msgid ""
"<a class=\"cover\" href=\"https://www.packtpub.com/application-development/elixir"
"-cookbook\" title=\"Elixir Cookbook\n"
"– by Paulo A Pereira\"><img src=\"/images/learning/elixir-cookbook.jpg\" alt=\"Eli"
"xir Cookbook cover\" width=\"190\" /></a>"
msgstr ""

msgid ""
"<a href=\"https://joyofelixir.com\">Joy of Elixir</a> is a gentle introduction t"
"o programming, aimed at people who already know some things about computers, b"
"ut who have little-to-no programming experience."
msgstr ""

msgid ""
"<body class=\"{{ page.section }}\">\n"
"  <div id=\"container\">\n"
"    <div class=\"wrap\">\n"
"    <div id=\"header\">\n"
"      <div id=\"branding\">\n"
"        <a id=\"site-title\" href=\"/\" title=\"Elixir\" rel=\"Home\">\n"
"          <img class=\"logo\" src=\"/images/logo/logo.png\" alt=\"Elixir Logo\" />\n"
"        </a>\n"
"      </div>"
msgstr ""

msgid "<div class=\"clear\"></div>"
msgstr ""

msgid ""
"<div class=\"hcat\">\n"
"  <h2>Posts by category:</h2>\n"
"  <ul>\n"
"  {% for category in site.categories %}\n"
"    <li>\n"
"      <h5 id=\"{{ category | first }}\">&raquo; {{ category | first | capitalize"
" }}</h5>\n"
"      <ul>\n"
"      {% for posts in category %}\n"
"        {% for post in posts %}\n"
"          {% if post.title %}\n"
"            <li><a href=\"{{ post.url }}\">{{ post.title }}</a> <span class=\"byl"
"ine\">&dash; {{ post.date | date: \"%B %d, %Y\" }}</span></li>\n"
"          {% endif %}\n"
"        {% endfor %}\n"
"      {% endfor %}\n"
"      </ul>\n"
"    </li>\n"
"  {% endfor %}\n"
"  </ul>\n"
"</div><!-- .hfeed -->"
msgstr ""

msgid ""
"<div class=\"hfeed\">\n"
"  <div class=\"hentry post no-border\">\n"
"    <img src=\"/images/contents/home-code.png\" alt=\"Elixir Sample\" class=\"archi"
"ve-thumbnail\" />"
msgstr ""

msgid ""
"<div class=\"hfeed\">\n"
"  <div class=\"hentry post\">\n"
"    <div class=\"post-content\">\n"
"      <div class=\"sticky-header\">\n"
"        <h1>{{ page.title }}</h1>\n"
"        {% if page.subtitle %}\n"
"        <h2>{{ page.subtitle }}</h2>\n"
"        {% endif %}\n"
"        <div class=\"byline\">{{ page.date | date: \"%B %d, %Y\" }}{% if page.auth"
"or %} · by {{ page.author}}{% endif %} . in {% for category in page.categories"
" %}<a href=\"/blog/categories.html#{{category}}\" class=\"category\">{{ category }"
"}</a>{% endfor %}</div>\n"
"      </div>"
msgstr ""

msgid ""
"<div class=\"hfeed\">\n"
"  {% for post in site.posts %}\n"
"    <div class=\"hentry post\">\n"
"      <div class=\"sticky-header\">\n"
"        <h2 class=\"entry-title\"><a class=\"spec\" href=\"{{ post.url }}\" title=\"{"
"{ post.title }}\" rel=\"bookmark\">{{ post.title }}</a></h2>\n"
"        <div class=\"byline\">{{ post.date | date: \"%B %d, %Y\" }}{% if post.auth"
"or %} · by {{ post.author}}{% endif %} . in {% for category in post.categories"
" %}<a href=\"/blog/categories.html#{{category}}\" class=\"category\">{{ category }"
"}</a>{% endfor %}</div>\n"
"      </div><!-- .sticky-header -->"
msgstr ""

msgid ""
"<div class=\"widget categories-list\">\n"
"  <h3 class=\"widget-title\">Blog Categories</h3>\n"
"  <ul>\n"
"  {% for category in site.categories %}\n"
"    <li><a class=\"spec\" href=\"/blog/categories.html#{{ category | first }}\">{{"
" category | first }}</a></li>\n"
"  {% endfor %}\n"
"  </ul>\n"
"</div>"
msgstr ""

msgid ""
"<div class=\"widget news\">\n"
"  <h3>\n"
"    News: <a href=\"/blog/2018/07/25/elixir-v1-7-0-released/\">Elixir v1.7 relea"
"sed</a>\n"
"  </h3>\n"
"</div>"
msgstr ""

msgid ""
"<div class=\"widget search\">\n"
"  <form method=\"get\" id=\"search-form\" class=\"search-form\" action=\"https://www."
"google.com/search\">\n"
"\t\t<div>\n"
"\t\t\t<input class=\"search-text\" type=\"text\" name=\"q\" placeholder=\"Search...\" id="
"\"searchfield\" aria-label=\"Search box\">\n"
"\t\t\t<input type=\"hidden\" name=\"sitesearch\" value=\"elixir-lang.org\">\n"
"\t\t\t<input class=\"search-submit button\" name=\"submit\" type=\"submit\" value=\"Sear"
"ch\" aria-label=\"Search button\">\n"
"\t\t</div>\n"
"\t</form>\n"
"</div>"
msgstr ""

msgid ""
"<div class=\"widget\">\n"
"  <a href=\"https://elixirconf.com/\" target=\"_blank\" style=\"text-decoration: no"
"ne;\">\n"
"    <img src=\"https://elixirconf.com/2017/images/resources/2017-elixirconf-log"
"o-wide.png\" width=\"190\" title=\"ElixirConf logo\" style=\"border:0; margin-left:-"
"4px\">\n"
"  </a>\n"
"  <br />\n"
"  <a href=\"https://elixirconf.com/\" target=\"_blank\">ElixirConf™ US</a> is bein"
"g held in Bellevue, WA, September 4-7, 2018.\n"
"  <a href=\"https://elixirconf.com/#registration\" target=\"_blank\">Registration<"
"/a> is now open.\n"
"</div>"
msgstr ""

msgid ""
"<div class=\"widget\">\n"
"  <h3 class=\"widget-title\">Code editor support</h3>\n"
"  <ul>\n"
"    <li><a class=\"spec\" href=\"https://github.com/elixir-lang/emacs-elixir\">Ema"
"cs Mode</a></li>\n"
"    <li><a class=\"spec\" href=\"http://www.alchemist-elixir.org/\">Alchemist (Ema"
"cs Elixir Tooling)</a></li>\n"
"    <li><a class=\"spec\" href=\"https://github.com/elixir-lang/elixir-tmbundle\">"
"TextMate / Sublime Text Bundle</a></li>\n"
"    <li><a class=\"spec\" href=\"https://github.com/vishnevskiy/ElixirSublime\">Su"
"blime Plugin</a></li>\n"
"    <li><a class=\"spec\" href=\"https://github.com/elixir-lang/vim-elixir\">Vim E"
"lixir</a></li>\n"
"    <li><a class=\"spec\" href=\"https://github.com/slashmili/alchemist.vim\">Alch"
"emist.vim (Vim Elixir Tooling)</a></li>\n"
"    <li><a class=\"spec\" href=\"https://github.com/SteffenBauer/elixir-gtksource"
"view\">GtkSourceView (gedit)</a></li>\n"
"    <li><a class=\"spec\" href=\"https://github.com/lucasmazza/language-elixir\">A"
"tom Package</a></li>\n"
"    <li><a class=\"spec\" href=\"https://github.com/KronicDeth/intellij-elixir\">I"
"ntelliJ Elixir</a></li>\n"
"    <li><a class=\"spec\" href=\"https://marketplace.visualstudio.com/items?itemN"
"ame=mjmcloug.vscode-elixir\">Visual Studio Elixir</a></li>\n"
"  </ul>\n"
"</div>"
msgstr ""

msgid ""
"<div class=\"widget\">\n"
"  <h3 class=\"widget-title\">Important links</h3>\n"
"  <ul>\n"
"    <li><a class=\"spec\" href=\"https://github.com/elixir-lang/elixir\">Source Co"
"de & Contributing</a></li>\n"
"    <li><a class=\"spec\" href=\"https://github.com/elixir-lang/elixir/issues\">Is"
"sues tracker</a></li>\n"
"    <li><a class=\"spec\" href=\"/crash-course.html\">Crash course for Erlang deve"
"lopers</a></li>\n"
"  </ul>\n"
"</div>"
msgstr ""

msgid ""
"<div class=\"widget\">\n"
"  <h3 class=\"widget-title\">Join the Community</h3>\n"
"  <ul>\n"
"    <li><a class=\"spec\" href=\"irc://irc.freenode.net/elixir-lang\">#elixir-lang"
" on freenode IRC</a></li>\n"
"    <li><a class=\"spec\" href=\"http://elixirforum.com\">Elixir Forum</a></li>\n"
"    <li><a class=\"spec\" href=\"https://elixir-slackin.herokuapp.com/\">Elixir on"
" Slack</a></li>\n"
"    <li><a class=\"spec\" href=\"https://discord.gg/elixir\">Elixir on Discord</a>"
"</li>\n"
"    <li><a class=\"spec\" href=\"https://twitter.com/elixirlang\">@elixirlang on T"
"witter</a></li>\n"
"    <li><a class=\"spec\" href=\"http://elixir.meetup.com\">Meetups around the wor"
"ld</a></li>\n"
"    <li><a class=\"spec\" href=\"https://github.com/elixir-lang/elixir/wiki\">Wiki"
" with events, resources and talks organized by the community</a></li>\n"
"  </ul>\n"
"</div>"
msgstr ""

msgid ""
"<div id=\"content\">\n"
"  <article>\n"
"    {{ content }}\n"
"  </article><!-- .hfeed -->"
msgstr ""

msgid ""
"<div id=\"content\">\n"
"  {{ content }}\n"
"</div><!-- #content -->"
msgstr ""

msgid ""
"<div id=\"distilled-by\" class=\"widget\">\n"
"  <h3 class=\"widget-title\">Created at</h3>\n"
"  <ul>\n"
"    <li class=\"image\"><a href=\"http://plataformatec.com.br\" title=\"Plataformat"
"ec\"><img src=\"/images/logo/plataformatec.png\" alt=\"Plataformatec Logo\" width=\""
"190\" height=\"74\" /></a></li>\n"
"  </ul>"
msgstr ""

msgid ""
"<div id=\"elixir-radar\" class=\"widget\">\n"
"  <h3 class=\"widget-title\">Elixir Radar Newsletter</h3>\n"
"  <p>A weekly Elixir email newsletter with content curated by Plataformatec.</"
"p>\n"
"  <div class=\"elixir-radar-cta\">\n"
"    <div class=\"cta-copy\">\n"
"      <div class=\"cta-title\">\n"
"        Elixir Radar\n"
"      </div>\n"
"      <div class=\"cta-subtitle\">\n"
"        weekly newsletter\n"
"      </div>\n"
"    </div>\n"
"    <div class=\"cta-button-container\">\n"
"      <a href=\"http://plataformatec.com.br/elixir-radar/weekly-newsletter?utm_"
"campaign=elixir_lang_cta&utm_medium=cta&utm_source=elixir_lang_website\" class="
"\"cta-button\">\n"
"        Subscribe now\n"
"      </a>\n"
"    </div>\n"
"  </div>\n"
"</div>"
msgstr ""

msgid ""
"<div id=\"mini-docu\" class=\"widget\">\n"
"  <a href=\"http://doc.honeypot.io/elixir-documentary-2018/?utm_source=elixir_h"
"ome&utm_medium=referral\">\n"
"    <div class=\"mini-docu-cta\">\n"
"      <div class=\"mini-docu-copy\">Watch the Elixir<br />mini-documentary!</div"
">\n"
"    </div>\n"
"  </a>\n"
"</div>"
msgstr ""

msgid ""
"<div id=\"post-pagination\" class=\"pagination loop-pagination\">\n"
"  {% if paginator.previous_page %}\n"
"    {% if paginator.previous_page == 1 %}\n"
"    <a class=\"prev page-numbers\" href=\"/blog\">Previous</a>\n"
"    {% else %}\n"
"    <a class=\"prev page-numbers\" href=\"/blog/page{{paginator.previous_page}}\">"
"Previous</a>\n"
"    {% endif %}\n"
"  {% endif %}"
msgstr ""

msgid ""
"<div id=\"sidebar-primary\" class=\"sidebar\">\n"
"  {% include search.html %}\n"
"  <div class=\"rss-button\">\n"
"    <a href=\"http://feeds.feedburner.com/ElixirLang\" target=\"_blank\"><img src="
"\"/images/social/RSSButton.png\" alt=\"RSS button\" /></a>\n"
"  </div>\n"
"  {% include categories-list.html %}\n"
"  {% include important-links.html %}\n"
"</div>"
msgstr ""

msgid ""
"<div id=\"sidebar-primary\" class=\"sidebar\">\n"
"  {% include search.html %}\n"
"  {% include important-links.html %}\n"
"</div>"
msgstr ""

msgid ""
"<div id=\"sidebar-primary\" class=\"sidebar\">\n"
"  {% include search.html %}\n"
"  {% include mini-docu.html %}"
msgstr ""

msgid "<div id=\"toc\" class=\"toc\"></div>"
msgstr ""

msgid "<h4 class=\"resource\">Adopting Elixir</h4>"
msgstr ""

msgid "<h4 class=\"resource\">Alchemist Camp</h4>"
msgstr ""

msgid "<h4 class=\"resource\">Elixir Cookbook</h4>"
msgstr ""

msgid "<h4 class=\"resource\">Elixir Flashcards</h4>"
msgstr ""

msgid "<h4 class=\"resource\">Elixir Koans</h4>"
msgstr ""

msgid "<h4 class=\"resource\">Elixir School</h4>"
msgstr ""

msgid "<h4 class=\"resource\">Elixir in Action</h4>"
msgstr ""

msgid "<h4 class=\"resource\">ElixirCasts.io</h4>"
msgstr ""

msgid "<h4 class=\"resource\">Erlang in Anger</h4>"
msgstr ""

msgid "<h4 class=\"resource\">Introducing Elixir</h4>"
msgstr ""

msgid "<h4 class=\"resource\">Joy of Elixir</h4>"
msgstr ""

msgid "<h4 class=\"resource\">Learn Functional Programming With Elixir</h4>"
msgstr ""

msgid "<h4 class=\"resource\">LearnElixir.tv</h4>"
msgstr ""

msgid "<h4 class=\"resource\">Metaprogramming Elixir</h4>"
msgstr ""

msgid "<h4 class=\"resource\">Pragmatic Studio's Elixir/OTP Course</h4>"
msgstr ""

msgid "<h4 class=\"resource\">Programming Elixir 1.6</h4>"
msgstr ""

msgid "<h4 class=\"resource\">Take Off With Elixir</h4>"
msgstr ""

msgid "<h4 class=\"resource\">The Little Elixir and OTP Guidebook</h4>"
msgstr ""

msgid ""
"<h4 id=\"stable\">Stable\n"
"  {% if stable.docs_zip == true %}\n"
"    <small>(<a href=\"https://github.com/elixir-lang/elixir/releases/download/v"
"{{ stable.version }}/Docs.zip\">download</a>)</small>\n"
"  {% endif %}\n"
"</h4>"
msgstr ""

msgid ""
"<h4 id=\"{{ version[1].name }}\">{{ version[1].name }}\n"
"  {% if version[1].docs_zip == true %}<small>(<a href=\"https://github.com/elix"
"ir-lang/elixir/releases/download/v{{ version[1].version }}/Docs.zip\">download<"
"/a>)</small>{% endif %}\n"
"</h4>"
msgstr ""

msgid ""
"<html>\n"
"  <head>\n"
"    <meta http-equiv=\"refresh\" content=\"0; url=/getting-started/introduction.h"
"tml\" />\n"
"  </head>\n"
"</html>"
msgstr ""

msgid ""
"<html>\n"
"  <head>\n"
"    <meta http-equiv=\"refresh\" content=\"0; url=/getting-started/meta/quote-and"
"-unquote.html\" />\n"
"  </head>\n"
"</html>"
msgstr ""

msgid ""
"<html>\n"
"  <head>\n"
"    <meta http-equiv=\"refresh\" content=\"0; url=/getting-started/mix-otp/introd"
"uction-to-mix.html\" />\n"
"  </head>\n"
"</html>"
msgstr ""

msgid ""
"<iframe src=\"https://player.vimeo.com/video/46709928\" title=\"Elixir v0.6 quick"
" tour - Mix and IEx\" class=\"video\" width=\"600\" height=\"337\" allowfullscreen></"
"iframe>\n"
"<a href=\"https://vimeo.com/46709928\">Elixir v0.6 quick tour - Mix and IEx</a> "
"from <a href=\"https://vimeo.com/user3182384\">Plataformatec</a> on <a href=\"htt"
"ps://vimeo.com\">Vimeo</a>."
msgstr ""

msgid ""
"<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/aZuY5-2lwW"
"4\" class=\"video\" allowfullscreen title=\"Elixir London June 2016 w/ José Valim\""
"></iframe>"
msgstr ""

msgid ""
"<img src=\"/images/contents/debugger-elixir.gif\" width=\"640\" alt=\"Debugger GUI "
"GIF\" />"
msgstr ""

msgid ""
"<img src=\"/images/contents/kv-observer.png\" width=\"640\" alt=\"Observer GUI scre"
"enshot\" />"
msgstr ""

msgid ""
"<p style=\"text-align: center\">\n"
"  <img src=\"/images/contents/deps-tree-phoenix.svg\" alt=\"mix deps.tree for Pho"
"enix in production\">\n"
"</p>"
msgstr ""

msgid ""
"<script async class=\"speakerdeck-embed\" data-id=\"cf4727401449013077d112313d1a8"
"2a3\" data-ratio=\"1.2994923857868\" src=\"//speakerdeck.com/assets/embed.js\"></sc"
"ript>"
msgstr ""

msgid ""
"<script type=\"text/javascript\" src=\"https://asciinema.org/a/0h3po0AmTcBAorc5GB"
"NU97nrs.js\" id=\"asciicast-0h3po0AmTcBAorc5GBNU97nrs\" async></script><noscript>"
"<p><a href=\"https://asciinema.org/a/0h3po0AmTcBAorc5GBNU97nrs\">See the example"
" in asciinema</a></p></noscript>"
msgstr ""

msgid ""
"<script type=\"text/javascript\" src=\"https://asciinema.org/a/EgQUdDe1CIz90EYYei"
"piS8jo8.js\" id=\"asciicast-EgQUdDe1CIz90EYYeipiS8jo8\" async></script><noscript>"
"<p><a href=\"https://asciinema.org/a/EgQUdDe1CIz90EYYeipiS8jo8\">See the example"
" in asciinema</a></p></noscript>"
msgstr ""

msgid ""
"<script type=\"text/javascript\" src=\"https://asciinema.org/a/NT3xvSaB8f1vv7yaTv"
"zaoJxBD.js\" id=\"asciicast-NT3xvSaB8f1vv7yaTvzaoJxBD\" async></script><noscript>"
"<p><a href=\"https://asciinema.org/a/NT3xvSaB8f1vv7yaTvzaoJxBD\">See the example"
" in asciinema</a></p></noscript>"
msgstr ""

msgid ""
"<script type=\"text/javascript\" src=\"https://asciinema.org/a/iAOk0yaZtQDsuJqn2s"
"Xa1FRQW.js\" id=\"asciicast-iAOk0yaZtQDsuJqn2sXa1FRQW\" async></script><noscript>"
"<p><a href=\"https://asciinema.org/a/iAOk0yaZtQDsuJqn2sXa1FRQW\">See the example"
" in asciinema</a></p></noscript>"
msgstr ""

msgid ""
"> * Since we want to bundle it as part of Elixir, the code should be open sour"
"ce with an appropriate license.\n"
"> * We wanted to add both data generation and property testing to Elixir. That"
"'s why the library is called stream_data instead of something named after prop"
"erty tests. The goal is to reduce the learning curve behind property testing b"
"y exposing the data generation aspect as streams, which is a known construct t"
"o most Elixir developers. We had this approach in mind for a while and the fir"
"st library we saw leveraging this in practice was [@pragdave's pollution][poll"
"ution].\n"
"> * Finally, since the core team are taking the responsibility of maintaining "
"property testing as part of Elixir for potentially the rest of our lives, we w"
"ant to have full understanding of every single line of code. This is non-negot"
"iable as it guarantees we can continue to consistently improve the code as we "
"move forward.\n"
">\n"
"> We understand rolling our own implementation has its downsides, especially s"
"ince it lacks maturity compared to alternatives, but we balance it by actively"
" seeking input from knowledgeable folks and by listening to the feedback that "
"comes from the community, which we are very thankful for."
msgstr ""

msgid ""
"> For this chapter, we will be using files instead of running code samples in "
"IEx. That's because the code samples will span multiple lines of code and typi"
"ng them all in IEx can be counter-productive. You should be able to run the co"
"de samples by saving them into a `macros.exs` file and running it with `elixir"
" macros.exs` or `iex macros.exs`."
msgstr ""

msgid ""
"> If you find any errors in the tutorial or on the website, [please report a b"
"ug or send a pull request to our issue tracker](https://github.com/elixir-lang"
"/elixir-lang.github.com)."
msgstr ""

msgid ""
"> Mix is a build tool and, as such, it is not always expected to be available "
"in production, especially if your team uses explicit build steps. Therefore, i"
"t is recommended to access `Mix.env` only in configuration files and inside `m"
"ix.exs`, never in your application code (`lib`)."
msgstr ""

msgid ""
"> Note: All modules defined in Elixir are defined inside the main `Elixir` nam"
"espace. However, for convenience, you can omit \"Elixir.\" when referencing them"
"."
msgstr ""

msgid ""
"> Note: An interesting note regarding `if/2` and `unless/2` is that they are i"
"mplemented as macros in the language; they aren't special language constructs "
"as they would be in many languages. You can check the documentation and the so"
"urce of `if/2` in [the `Kernel` module docs](https://hexdocs.pm/elixir/Kernel."
"html). The `Kernel` module is also where operators like `+/2` and functions li"
"ke `is_function/2` are defined, all automatically imported and available in yo"
"ur code by default."
msgstr ""

msgid ""
"> Note: At any moment you can type `h()` in the shell to print information on "
"how to use the shell. The `h` helper can also be used to access documentation "
"for any function. For example, typing `h is_integer/1` is going to print the d"
"ocumentation for the `is_integer/1` function. It also works with operators and"
" other constructs (try `h ==/2`)."
msgstr ""

msgid ""
"> Note: If you are an Erlang developer, `and` and `or` in Elixir actually map "
"to the `andalso` and `orelse` operators in Erlang."
msgstr ""

msgid ""
"> Note: Maps were recently introduced into the Erlang <abbr title=\"Virtual Mac"
"hine\">VM</abbr> and only from Elixir v1.2 are they capable of holding millions"
" of keys efficiently. Therefore, if you are working with previous Elixir versi"
"ons (v1.0 or v1.1) and you need to support at least hundreds of keys, you may "
"consider using [the `HashDict` module](https://hexdocs.pm/elixir/HashDict.html"
")."
msgstr ""

msgid ""
"> Note: Mix is an Elixir executable. This means that in order to run `mix`, yo"
"u need to have both `mix` and `elixir` executables in your PATH. That's what h"
"appens when you install Elixir."
msgstr ""

msgid ""
"> Note: Unlike Erlang, user defined attributes are not stored in the module by"
" default. The value exists only during compilation time. A developer can confi"
"gure an attribute to behave closer to Erlang by calling [`Module.register_attr"
"ibute/3`](https://hexdocs.pm/elixir/Module.html#register_attribute/3)."
msgstr ""

msgid ""
"> Note: if you are on Windows, you can also try `iex.bat --werl` which may pro"
"vide a better experience depending on which console you are using."
msgstr ""

msgid ""
"> Note: if you are running on Windows, there is a chance your terminal does no"
"t use UTF-8 by default. You can change the encoding of your current session by"
" running `chcp 65001` before entering IEx."
msgstr ""

msgid ""
"> Note: if you are running on Windows, there is a chance your terminal does no"
"t use UTF-8 by default. You can change the encoding of your current session by"
" running `chcp 65001` before entering `iex` (`iex.bat`)."
msgstr ""

msgid ""
"> Note: if you want to find and execute a given script in PATH so it will be l"
"oaded in `iex` use: `iex -S SCRIPTNAME`.  Later you'll learn about [Mix](/gett"
"ing-started/mix-otp/introduction-to-mix.html), Elixir's build tool, and how yo"
"u can compile and load entire applications with `iex -S mix run`. See [Supervi"
"sor and application](/getting-started/mix-otp/supervisor-and-application.html)"
" for more details."
msgstr ""

msgid ""
"> Note: we will be using two nodes in the same machine throughout this chapter"
". You are free to use two (or more) different machines on the same network but"
" you need to do some prep work. First of all, you need to ensure all machines "
"have a `~/.erlang.cookie` file with exactly the same value. Second, you need t"
"o guarantee [epmd](http://www.erlang.org/doc/man/epmd.html) is running on a po"
"rt that is not blocked (you can run `epmd -d` for debug info). Third, if you w"
"ant to learn more about distribution in general, we recommend [this great Dist"
"ribunomicon chapter from Learn You Some Erlang](http://learnyousomeerlang.com/"
"distribunomicon)."
msgstr ""

msgid ""
"> Note: you will likely get different process identifiers than the ones we are"
" getting in this guide."
msgstr ""

msgid ""
"> Now we need to go meta. We should now think of a language design as being a "
"pattern for language designs. A tool for making more tools of the same kind. ["
"...] A language design can no longer be a thing. It must be a pattern, a patte"
"rn for growth. A pattern for growing a pattern, for defining the patterns that"
" programmers can use for their real work and main goals."
msgstr ""

msgid ""
"> Sample.run #=> [3, 5, 6]\n"
"```"
msgstr ""

msgid ""
"> The Elixir guides are also available in EPUB format:\n"
">\n"
">   * [Getting started guide](https://repo.hex.pm/guides/elixir/elixir-getting"
"-started-guide.epub)\n"
">   * [Mix and OTP guide](https://repo.hex.pm/guides/elixir/mix-and-otp.epub)\n"
">   * [Meta-programming guide](https://repo.hex.pm/guides/elixir/meta-programm"
"ing-in-elixir.epub)"
msgstr ""

msgid ""
"> This chapter is part of the <i>Mix and OTP guide</i> and it depends on previ"
"ous chapters in this guide.\n"
"> For more information, <a href=\"/getting-started/mix-otp/introduction-to-mix."
"html\">read the introduction guide</a> or check out the chapter index in the si"
"debar."
msgstr ""

msgid ""
"> This guide requires Elixir v1.6.1 or later. You can check your Elixir versio"
"n with `elixir --version` and install a more recent version if required by fol"
"lowing the steps described in [the first chapter of the Getting Started guide]"
"(/install.html).\n"
">\n"
"> If you have any questions or improvements to the guide, please reach discuss"
"ion channels such as the [Elixir Forum](https://elixirforum.com) or the [issue"
"s tracker](https://github.com/elixir-lang/elixir-lang.github.com/issues). Your"
" input is really important to help us guarantee the guides are accessible and "
"up to date!\n"
">\n"
"> The final code for the application built in this guide is in [this repositor"
"y](https://github.com/josevalim/kv_umbrella) and can be used as a reference."
msgstr ""

msgid ""
"> Warning! Don't use ETS as a cache prematurely! Log and analyze your applicat"
"ion performance and identify which parts are bottlenecks, so you know *whether"
"* you should cache, and *what* you should cache. This chapter is merely an exa"
"mple of how ETS can be used, once you've determined the need."
msgstr ""

msgid ""
"> When you run `iex -S mix`, it is equivalent to running `iex -S mix run`. So "
"whenever you need to pass more options to Mix when starting IEx, it's a matter"
" of typing `iex -S mix run` and then passing any options the `run` command acc"
"epts. You can find more information about `run` by running `mix help run` in y"
"our shell."
msgstr ""

msgid ""
"@doc \"\"\"\n"
"Stops the registry.\n"
"\"\"\"\n"
"def stop(server) do\n"
"  GenServer.stop(server)\n"
"end\n"
"```"
msgstr ""

msgid ""
"@type a :: fun\n"
"# becomes\n"
"@type a :: (... -> any) or ((...) -> any) or (fun(...) -> any)"
msgstr ""

msgid ""
"@type a :: fun(do: integer)\n"
"# becomes\n"
"@type a :: (() -> integer) or (fun() -> integer)"
msgstr ""

msgid ""
"@type a :: fun(integer, do: integer)\n"
"# becomes\n"
"@type a :: (integer -> integer) or ((integer) -> integer) or (fun(integer) -> "
"integer)"
msgstr ""

msgid ""
"@type a :: fun(integer, integer, do: integer)\n"
"# becomes\n"
"@type a :: (integer, integer -> integer) or ((integer, integer) -> integer) or"
" (fun(integer, integer) -> integer)\n"
"```"
msgstr ""

msgid ""
"A GUI should pop-up containing all sorts of information about our system, from"
" general statistics to load charts as well as a list of all running processes "
"and applications."
msgstr ""

msgid ""
"A GenServer is implemented in two parts: the client API and the server callbac"
"ks. You can either combine both parts into a single module or you can separate"
" them into a client module and a server module. The client and server run in s"
"eparate processes, with the client passing messages back and forth to the serv"
"er as its functions are called. Here we'll use a single module for both the se"
"rver callbacks and the client API."
msgstr ""

msgid "A TCP server, in broad strokes, performs the following steps:"
msgstr ""

msgid ""
"A `:name` option could also be given to `Agent.start_link/2` and it would be a"
"utomatically registered. Besides agents, Elixir provides an API for building g"
"eneric servers (called `GenServer`), tasks, and more, all powered by processes"
" underneath. Those, along with supervision trees, will be explored with more d"
"etail in the ***Mix and OTP guide*** which will build a complete Elixir applic"
"ation from start to finish."
msgstr ""

msgid ""
"A bigger problem, that doesn't have a workaround, is that there's no way to\n"
"interleave two enumerables. That is, it's not possible to define a function th"
"at\n"
"for two enumerables `A` and `B` returns a list `[A1, B1, A2, B2, A3, ...]`\n"
"(where `A1` is the first element of A) without first traversing both lists and"
"\n"
"then interleaving the collected values. Interleaving is important because it's"
"\n"
"the basis of a zip function. Without interleaving you cannot implement\n"
"`Stream.zip/2`."
msgstr ""

msgid ""
"A binary is a sequence of bytes. Those bytes can be organized in any way, even"
" in a sequence that does not make them a valid string:"
msgstr ""

msgid ""
"A bitstring generator can be mixed with \"regular\" enumerable generators, and s"
"upports filters as well."
msgstr ""

msgid ""
"A charlist is nothing more than a list of code points. Char lists may be creat"
"ed with single-quoted literals:"
msgstr ""

msgid ""
"A common trick in Elixir is to concatenate the null byte `<<0>>` to a string t"
"o see its inner binary representation:"
msgstr ""

msgid ""
"A common use case of `:into` can be transforming values in a map, without touc"
"hing the keys:"
msgstr ""

msgid ""
"A complete reference about the binary / bitstring constructor `<<>>` can be fo"
"und [in the Elixir documentation](https://hexdocs.pm/elixir/Kernel.SpecialForm"
"s.html#%3C%3C%3E%3E/1). This concludes our tour of bitstrings, binaries and st"
"rings. A string is a UTF-8 encoded binary and a binary is a bitstring where th"
"e number of bits is divisible by 8. Although this shows the flexibility Elixir"
" provides for working with bits and bytes, 99% of the time you will be working"
" with binaries and using the `is_binary/1` and `byte_size/1` functions."
msgstr ""

msgid "A comprehension is made of three parts: generators, filters, and collectables."
msgstr ""

msgid ""
"A consumer that always returns `:cont` makes the producer behave exactly the\n"
"same as in the old system. A consumer may return `:halt` to have the producer\n"
"terminate earlier than it normally would."
msgstr ""

msgid ""
"A file can also be opened with `:utf8` encoding, which tells the `File` module"
" to interpret the bytes read from the file as UTF-8-encoded bytes."
msgstr ""

msgid ""
"A file named `mix.exs` was generated inside our new project folder (`kv`) and "
"its main responsibility is to configure our project. Let's take a look at it:"
msgstr ""

msgid ""
"A huge thank you to our community for sending bug reports, providing bug fixes"
" and contributing all those amazing features. And when are **you** joining us?"
" :)"
msgstr ""

msgid "A list also supports matching on its own head and tail:"
msgstr ""

msgid ""
"A map pattern will match any map that has all the keys specified in the patter"
"n. The values for the matching keys must also match. For example, `%{\"hello\" ="
"> world}` will match any map that has the key `\"hello\"` and assign the value t"
"o `world`, while `%{\"hello\" => \"world\"}` will match any map that has the key `"
"\"hello\"` with value equals to `\"world\"`. An empty map pattern (`%{}`) will mat"
"ch all maps."
msgstr ""

msgid ""
"A new semester has started, which means it is time for a new Elixir release! T"
"his release brings quality of life improvements to the documentation, to error"
" handling, to logger reporting, and to ExUnit, Elixir's testing library."
msgstr ""

msgid ""
"A pattern match will error if the sides can't be matched, for example if the t"
"uples have different sizes:"
msgstr ""

msgid ""
"A registry may have unique or duplicate keys. Every key-value pair is associat"
"ed to the process registering the key. Keys are automatically removed once the"
" owner process terminates. Starting, registering and looking up keys is quite "
"straight-forward:"
msgstr ""

msgid ""
"A room has users and since we can possibly have hundreds of them, we store the"
"m in a HashDict, with the user id as key. Finally, the user may participate fr"
"om different devices, so we need to keep a set of device codes in each user:"
msgstr ""

msgid "A runtime error can be raised any time by using `raise/1`:"
msgstr ""

msgid ""
"A simple JavaScript table of contents generator. Works well with [jekyll](http"
"s://github.com/mojombo/jekyll) static sites."
msgstr ""

msgid ""
"A special thanks to [Eric Meadows-Jonsson](https://github.com/ericmj) for impl"
"ementing this feature and to [Yurii](https://github.com/yrashk) for testing it"
" against different edge cases."
msgstr ""

msgid ""
"A special thanks to [Eric Meadows-Jonsson](https://github.com/ericmj) for impl"
"ementing this feature!"
msgstr ""

msgid ""
"A special thanks to [Yurii Rashkovskii](https://github.com/yrashk) for the dat"
"a and profiling."
msgstr ""

msgid ""
"A string is a UTF-8 encoded binary. In order to understand exactly what we mea"
"n by that, we need to understand the difference between bytes and code points."
msgstr ""

msgid ""
"A timeout of 0 can be given when you already expect the message to be in the m"
"ailbox."
msgstr ""

msgid "A variable can only be assigned on the left side of `=`:"
msgstr ""

msgid ""
"A young but awesome book about property-based testing written by Fred Hebert i"
"s also available at [propertesting.com][]. This book is a *proper* (pun intend"
"ed) guide to property-based testing and uses an Erlang library called [PropEr]"
"[]. However, the concepts and techniques perfectly apply to Elixir and stream_"
"data as well."
msgstr ""

msgid ""
"According to the failure message, we are expecting that the bucket no longer e"
"xists on the table, but it still does! This problem is the opposite of the one"
" we have just solved: while previously there was a delay between the command t"
"o create a bucket and updating the table, now there is a delay between the buc"
"ket process dying and its entry being removed from the table."
msgstr ""

msgid ""
"Add your functions to it, save it to disk, run `erl` from the same directory a"
"nd execute the `compile` command:"
msgstr ""

msgid "Adding explicit parentheses is enough to bind the block to `if`:"
msgstr ""

msgid "Adopting a behaviour is straightforward:"
msgstr ""

msgid ""
"Adoption is more than programming. Elixir is an exciting new language, but to "
"successfully get your application from start to finish, you’re going to need t"
"o know more than just the language. You need the case studies and strategies i"
"n this book."
msgstr ""

msgid ""
"After 4 months, Elixir v0.11.0 has been released with 832 commits since the pr"
"evious minor release, done by more than 40 contributors. Although we have some"
" great features in this release, the major focus in those 4 months was improvi"
"ng the common patterns used by the community and streamlining the existing wor"
"kflows."
msgstr ""

msgid ""
"After Erlang is installed, you should be able to open up the command line (or "
"command prompt) and check the Erlang version by typing `erl`. You will see som"
"e information similar to:"
msgstr ""
"Erlang のインストールが終わりましたら、コマンドラインやコマンドプロンプトを開き、 `erl` コマンドでバージョンを確認しましょう。以下のような情報"
"がいくつか表示されるはずです。"

msgid ""
"After `IO.write/2`, we can see the request sent by the `IO` module (a four-ele"
"ments tuple) printed out. Soon after that, we see that it fails since the `IO`"
" module expected some kind of result that we did not supply."
msgstr ""

msgid ""
"After compiling, you are ready to run the elixir and `iex` commands from the b"
"in directory. It is recommended that you [add Elixir's bin path to your PATH e"
"nvironment variable](#setting-path-environment-variable) to ease development."
msgstr ""
"コンパイルが完了すると `bin` ディレクトリから `iex` コマンドで Elixir の REPL を起動できます。手軽な開発の為にも [Elixir"
" を環境変数 PATH に追加](#setting-path-environment-variable) することをおすすめします。"

msgid ""
"After getting familiar with the basics of the language you may want to try wri"
"ting simple programs. This can be accomplished by putting the following Elixir"
" code into a file:"
msgstr ""

msgid ""
"After not feeling productive enough with that Elixir version, I have decided t"
"o take a break from Elixir to study old, new and emerging languages. The chall"
"enge was to not re-invent Erlang as a language, but how to provide the product"
"ivity and flexibility I expect from Elixir while staying a 100% compatible wit"
"h Erlang."
msgstr ""

msgid ""
"After running this code `n_` will be `3` (1 + 2) and `cont` will be a\n"
"function. We'll get back to `cont` in a minute but first take a look at some o"
"f\n"
"the new elements here. The initial accumulator has an instruction as well, so\n"
"you could suspend or halt a producer immediately, if you really want to. The\n"
"value passed to the consumer (`n`) does not contain the instruction. The retur"
"n\n"
"value of the producer also has a symbol in it. Like with the instructions of\n"
"consumers there are three possible values:"
msgstr ""

msgid ""
"After the child process is spawned, we invoke the `receive` macro and start wa"
"iting for messages. At this point, we are expecting two types of messages:"
msgstr ""

msgid ""
"After the parsing is done, we will update our server to dispatch the parsed co"
"mmands to the `:kv` application we built previously."
msgstr ""

msgid ""
"After the supervisor retrieves all child specifications, it proceeds to start "
"its children one by one, in the order they were defined, using the information"
" in the `:start` key in the child specification. For our current specification"
", it will call `KV.Registry.start_link([])`."
msgstr ""

msgid ""
"Alchemist Camp is aimed at people who have some web development experience and"
" want to ship real-world projects in Elixir."
msgstr ""

msgid ""
"Alchemist Camp is the largest producer of free Elixir screencasts and has doze"
"ns of hours of screencasts on YouTube. The videos are often longer-form and fo"
"cused around projects, such as building a small Phoenix clone, or an OTP worke"
"r to regularly collect statistics from multiple APIs. Content is driven by vie"
"wer request."
msgstr ""

msgid ""
"Alexei is also interested in how we can extend our tooling to the Erlang ecosy"
"stem as a whole, bringing Mix and Hex (our package manager) to more developers"
" as well as adding tasks that are specific to Erlang projects."
msgstr ""

msgid ""
"Aliases are frequently used to define shortcuts. In fact, calling `alias` with"
"out an `:as` option sets the alias automatically to the last part of the modul"
"e name, for example:"
msgstr ""

msgid ""
"Aliases expand to atoms because in the Erlang <abbr title=\"Virtual Machine\">VM"
"</abbr> (and consequently Elixir) modules are always represented by atoms. For"
" example, that's the mechanism we use to call Erlang modules:"
msgstr ""

msgid ""
"All Elixir code is executed inside light-weight processes (actors), each with "
"its own state, that exchange messages between each other. The Erlang VM multip"
"lexes those processes onto many cores, making it trivial to run code concurren"
"tly."
msgstr ""

msgid ""
"All Elixir code runs inside processes that communicate with each other. When a"
" process dies of \"natural causes\" (e.g., unhandled exceptions), it sends an `e"
"xit` signal. A process can also die by explicitly sending an exit signal:"
msgstr ""

msgid "All of the Erlang built-ins reside in the `:erlang` module."
msgstr ""

msgid ""
"All of those improvements tie nicely with our updates to the Getting Started g"
"uide, ensuring learning Elixir is more fun and efficient than ever before."
msgstr ""

msgid ""
"All the functions in the `Enum` module are eager. Many functions expect an enu"
"merable and return a list back:"
msgstr ""

msgid ""
"All this work was achieved by our very vibrant community! Over the last month,"
" 17 authors have pushed more than 500 commits, where more than 60 pull request"
"s were merged and more than 80 issues were closed."
msgstr ""

msgid ""
"All those improvements and other goodies like callbacks are implemented in Eli"
"xir source code and we recommend you take a look at both the [Elixir.ParallelC"
"ompiler](https://github.com/elixir-lang/elixir/blob/6182602f1205e2d9fc54666e07"
"21270a27226fbc/lib/elixir/parallel_compiler.ex) and [Elixir.ErrorHandler](http"
"s://github.com/elixir-lang/elixir/blob/6182602f1205e2d9fc54666e0721270a27226fb"
"c/lib/elixir/error_handler.ex) modules to see all the details firsthand."
msgstr ""

msgid ""
"Along the same lines I call the reduce function for a specific enumerable a\n"
"producer, it produces values which are given to a consumer."
msgstr ""

msgid ""
"Also note that Erlang's formatting functions require special attention to\n"
"Unicode handling."
msgstr ""

msgid ""
"Also note the `async: true` option passed to `ExUnit.Case`. This option makes "
"the test case run in parallel with other `:async` test cases by using multiple"
" cores in our machine. This is extremely useful to speed up our test suite. Ho"
"wever, `:async` must *only* be set if the test case does not rely on or change"
" any global values. For example, if the test requires writing to the filesyste"
"m or access a database, keep it synchronous (omit the `:async` option) to avoi"
"d race conditions between tests."
msgstr ""

msgid ""
"Also, if we start storing which module each process is depending on, we are ab"
"le to know whenever we have a deadlock or a dependency on an nonexistent file,"
" allowing us to get rid of the timeout."
msgstr ""

msgid ""
"Also, note that we started the documentation string using `@doc ~S\"\"\"`. The `~"
"S` prevents the `\n"
"` characters from being converted to a carriage return and line feed until the"
"y are evaluated in the test."
msgstr ""

msgid ""
"Also, remember buckets were started dynamically based on user input, and that "
"meant we should not use atom names for managing our buckets. But the registry "
"is in the opposite situation, we want to start a single registry, preferably u"
"nder a supervisor, when our application boots."
msgstr ""

msgid ""
"Also, we previously announced Elixir is going to be released frequently, every"
" 2 to 4 weeks. We have made a small detour to get v0.8.0 out of the door, but "
"we are back to our regular schedule as of today!"
msgstr ""

msgid ""
"Alternatively to pattern matching, filters can be used to select some particul"
"ar elements. For example, we can select the multiples of 3 and discard all oth"
"ers:"
msgstr ""

msgid ""
"Although most users don't need to concern with the implementation of the Enume"
"rable protocol, the side-effect is that both `Enum` and `Stream` modules have "
"been considerably extended and improved in this release, with more than 15 new"
" functions added to the `Stream` module."
msgstr ""

msgid ""
"Although our tests pass, our testing structure is getting more complex. In par"
"ticular, running tests with only `mix test` causes failures in our suite, sinc"
"e our test requires a connection to another node."
msgstr ""

msgid ""
"Although pattern matching allows us to build powerful constructs, its usage is"
" limited. For instance, you cannot make function calls on the left side of a m"
"atch. The following example is invalid:"
msgstr ""

msgid ""
"Although syntax is usually one of the first topics that comes up when Elixir i"
"s being discussed, it was never a goal to simply provide a different syntax. S"
"ince we wanted to provide a macro system, we knew that the macro system would "
"only be sane if we could represent Elixir syntax in terms of Elixir's own data"
" structures in a straight-forward fashion. With this goal in mind, we set out "
"to design the first Elixir version, which looked like this:"
msgstr ""

msgid ""
"Although the initial release was scheduled to April 2012, the feedback from su"
"ch early developers forced us to review some design and syntax decisions and w"
"ere extremely important to shape the language as it is today."
msgstr ""

msgid ""
"Although the solution above has many flaws, it has helped us ask the right que"
"stions:"
msgstr ""

msgid ""
"Although this is a subtle difference, you only need to worry about these detai"
"ls if you intend to pass lists to those functions. Binaries are already repres"
"ented by the underlying bytes and as such their representation is always \"raw\""
"."
msgstr ""

msgid ""
"Although we can pattern match on keyword lists, it is rarely done in practice "
"since pattern matching on lists requires the number of items and their order t"
"o match:"
msgstr ""

msgid ""
"Although we have overlooked some details, this is the main idea behind creatin"
"g domain-specific modules in Elixir. Macros enable us to return quoted express"
"ions that are executed in the caller, which we can then use to transform code "
"and store relevant information in the target module via module attributes. Fin"
"ally, callbacks such as `@before_compile` allow us to inject code into the mod"
"ule when its definition is complete."
msgstr ""

msgid "An Elixir equivalent to the Erlang above:"
msgstr ""

msgid ""
"An alias in Elixir is a capitalized identifier (like `String`, `Keyword`, etc)"
" which is converted to an atom during compilation. For instance, the `String` "
"alias translates by default to the atom `:\"Elixir.String\"`:"
msgstr ""

msgid ""
"An atom is a constant whose name is its own value. Some other languages call t"
"hese symbols:"
msgstr ""

msgid ""
"An easy way to do so is by sending a synchronous request to the registry: beca"
"use messages are processed in order, if the registry replies to a request sent"
" after the `Agent.stop` call, it means that the `:DOWN` message has been proce"
"ssed. Let's do so by creating a \"bogus\" bucket, which is a synchronous request"
", after `Agent.stop` in both tests:"
msgstr ""

msgid "And also when comparing different types:"
msgstr ""

msgid "And applications can be started directly from the command line as well:"
msgstr ""

msgid "And compiled from `iex`:"
msgstr ""

msgid "And execute it as:"
msgstr ""

msgid ""
"And finally we added `do/end` as convenience for the common `do: (...)` constr"
"uct:"
msgstr ""

msgid ""
"And finally, a minor but frequently asked feature has finally arrived into Eli"
"xir: variables follow the same rules as other identifiers in the language, whi"
"ch means developers can now name their variables `is_atom?`. For a general ove"
"rview, [check out the CHANGELOG](https://github.com/elixir-lang/elixir/blob/v0"
".11.0/CHANGELOG.md)."
msgstr ""

msgid "And it then returned a quoted expression as follows:"
msgstr ""

msgid ""
"And it will provide the same behaviour. You may use `do:` for one-liners but a"
"lways use `do`/`end` for functions spanning multiple lines."
msgstr ""

msgid "And it works!"
msgstr ""

msgid "And let's try to start our application again:"
msgstr ""

msgid "And much more."
msgstr ""

msgid "And now run tests with:"
msgstr ""

msgid "And play a bit with agents:"
msgstr ""

msgid "And play with those definitions:"
msgstr ""

msgid ""
"And that's all we need to have a basic version of our parallel compilation wor"
"king. Notice we start compiling only one file at a time but, as soon as we dep"
"end on other files, the number of PIDs in the stack starts to grow. If we want"
"ed, we could modify the code to make use of a head start and compile more than"
" one file since the beginning."
msgstr ""

msgid "And the highly optimized version:"
msgstr ""

msgid ""
"And this is all. Erlang on Xen is going to boot the Erlang VM and the standard"
" Erlang shell. You can access Elixir shell in a couple steps:"
msgstr ""

msgid ""
"And you can also select which headers you want to link to. By default `h1, h2,"
" h3, h4, h5, h6` are displayed, but changing the `headers` setting lets you tw"
"eak it:"
msgstr ""

msgid ""
"Anonymous functions are closures and as such they can access variables that ar"
"e in scope when the function is defined. Let's define a new anonymous function"
" that uses the `add` anonymous function we have previously defined:"
msgstr ""

msgid "Anonymous functions are defined in the following way:"
msgstr ""

msgid ""
"Anonymous functions are first-class values, so they can be passed as arguments"
" to other functions and also can serve as a return value. There is a special s"
"yntax to allow named functions be treated in the same manner."
msgstr ""

msgid ""
"Anonymous functions can be created inline and are delimited by the keywords `f"
"n` and `end`:"
msgstr ""

msgid ""
"Another addition to this release is pretty printing. The pretty printing start"
"ed as an implementation of the [Wadler paper](http://homepages.inf.ed.ac.uk/wa"
"dler/papers/prettier/prettier.pdf) by [Jonns Mostovoys](https://github.com/man"
"pages) which was then improved by [Gustavo Brunoro](https://github.com/brunoro"
") under his Google Summer of Code project as described in [Lindig's _Strictly "
"Prettier_ paper](http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.34.22"
"00)."
msgstr ""

msgid ""
"Another alternative to `@derive` is to explicitly tell the protocol to fallbac"
"k to `Any` when an implementation cannot be found. This can be achieved by set"
"ting `@fallback_to_any` to `true` in the protocol definition:"
msgstr ""

msgid ""
"Another change is that Mix now echoes the output of external tools\n"
"such as git and rebar, and handles exit status correctly. This have previously"
"\n"
"led to some less-than-perfect workflows."
msgstr ""

msgid ""
"Another example comes from [the ExUnit framework](https://hexdocs.pm/ex_unit/)"
" which uses module attributes as annotation and storage:"
msgstr ""

msgid ""
"Another interesting function is `Stream.resource/3` which can be used to wrap "
"around resources, guaranteeing they are opened right before enumeration and cl"
"osed afterwards, even in the case of failures. For example, we can use it to s"
"tream a file:"
msgstr ""

msgid ""
"Another interesting property of maps is that they provide their own syntax for"
" accessing atom keys:"
msgstr ""

msgid ""
"Another issue with the solution above is that the `Enum.flat_map/2` step will "
"build a huge list, with all the words in the file, before we effectively start"
" counting them. Again, for a large document, this means more memory usage and "
"a waste of processing time in building a list that will be traversed right aft"
"er."
msgstr ""

msgid ""
"Another scenario where GenStage can be useful today is to replace cases where "
"developers would have used [GenEvent](https://hexdocs.pm/elixir/GenEvent.html)"
" in the past. For those unfamiliar with GenEvent, it is a behaviour where even"
"ts are sent to an \"event manager\" which then proceeds to invoke \"event handler"
"s\" for each event. GenEvent, however, has one big flaw: the event manager and "
"all event handlers run in the same process. This means GenEvent handlers canno"
"t easily leverage concurrency without forcing developers to implement those me"
"chanisms themselves. Furthermore, GenEvent handlers have very awkward error se"
"mantics. Because event handlers are not separate processes, we cannot simply r"
"ely on supervisors restarting them."
msgstr ""

msgid ""
"Another simple but significant change in ExUnit was the change in the default "
"formatter to print changes as they come, instead of waiting until the suite is"
" done running:"
msgstr ""

msgid ""
"Any expression is allowed to serve as a default value, but it won't be evaluat"
"ed during the function definition. Every time the function is invoked and any "
"of its default values have to be used, the expression for that default value w"
"ill be evaluated:"
msgstr ""

msgid "Any functions may be called when defining a module attribute."
msgstr ""

msgid ""
"Around February of that year, feeling confident enough about the direction the"
" language was moving (and initial benchmarks I had made at that point), I have"
" pitched Elixir to [my company, Plataformatec](http://plataformatec.com.br/), "
"and they have accepted to sponsor Elixir. With their help, Elixir developed ev"
"en faster and that's what we are going to take a look next."
msgstr ""

msgid ""
"As a project grows, it is recommended to break it apart into smaller, isolated"
" applications and bundle them together. The issue so far was that Elixir did n"
"ot provide good support for working with many applications at once, and compil"
"ing and managing those applications became rather a tedious work."
msgstr ""

msgid ""
"As a quick example, let's write a simple pipeline that will produce events as "
"increasing numbers, multiply those numbers by two, and then print them to the "
"terminal. We will do so by implementing three stages, the `:producer`, the `:p"
"roducer_consumer` and the `:consumer`, which we will call `A`, `B` and `C` res"
"pectively. We will go back to the word counting example at the end of this pos"
"t."
msgstr ""

msgid ""
"As a rule of thumb, use `and`, `or` and `not` when you are expecting booleans."
" If any of the arguments are non-boolean, use `&&`, `||` and `!`."
msgstr ""

msgid ""
"As an alternative to `Enum`, Elixir provides [the `Stream` module](https://hex"
"docs.pm/elixir/Stream.html) which supports lazy operations:"
msgstr ""

msgid ""
"As discussed in the previous section, we want to extend the error handler to a"
"ctually stop the currently running process whenever a module is not found and "
"resume the process only after we ensure the module is compiled. To do that, we"
" can simply define our own error handler and ask Erlang to use it. Our custom "
"error handler is defined as follows:"
msgstr ""

msgid ""
"As hinted at the beginning of this chapter, sigils in Elixir are extensible. I"
"n fact, using the sigil `~r/foo/i` is equivalent to calling `sigil_r` with a b"
"inary and a char list as the argument:"
msgstr ""

msgid ""
"As in previous Elixir versions, there is also support for a bitstring generato"
"r. In the example below, we receive a stream of RGB pixels as a binary and bre"
"ak it down into triplets:"
msgstr ""

msgid ""
"As per this release, Elixir AST nodes can contain metadata. This metadata is c"
"ompilation time only but may allow macros to annotate important information in"
" AST nodes, like line numbers, file and other library specific information. If"
" you quote an Elixir expression, we can see the metadata slot:"
msgstr ""

msgid ""
"As seen earlier, today we allow developers to transform eager code into lazy b"
"y introducing streams."
msgstr ""

msgid ""
"As seen in this announcement, this release dictates many of the developments t"
"hat will happen in Elixir and its community in the following weeks. All projec"
"ts are recommended to start moving from records to structs, paving the way for"
" the deprecation of records before 1.0."
msgstr ""

msgid ""
"As shown above, a map matches as long as the keys in the pattern exist in the "
"given map. Therefore, an empty map matches all maps."
msgstr ""

msgid ""
"As soon as we started working on Logger, we realized we could go further than "
"simply translating Erlang messages and provide a fully featured logger library"
". At this moment, Logger also supports:"
msgstr ""

msgid ""
"As soon as we subscribe the stages, we should see items being printed to the t"
"erminal. Notice that, even though we have introduced a sleep command to the co"
"nsumer, the producers will never overflow the consumer with data. That's becau"
"se the communication between stages is demand-driven. The producer can only se"
"nd items to consumers after the consumers have sent demand upstream. The produ"
"cer must never send more items than the consumer has specified."
msgstr ""

msgid ""
"As soon as you upgrade to Elixir v0.10.0 and start IEx, you will get pretty pr"
"inting for all data structures provided by Elixir. We have also added document"
"ation to the `Inspect` module about [adding pretty printing to your own struct"
"ures](https://hexdocs.pm/elixir/Inspect.html) as well as [using the document a"
"lgebra for any other kind of formatting](https://hexdocs.pm/elixir/Inspect.Alg"
"ebra.html)."
msgstr ""

msgid ""
"As the name says, doctest is documentation first and a test later. Their goal "
"is not to replace tests but to provide up to date documentation. You can read "
"more about doctests in [the `ExUnit.DocTest` docs](https://hexdocs.pm/ex_unit/"
"ExUnit.DocTest.html)."
msgstr ""

msgid ""
"As usual, we've passed a two-element tuple as a child specification, which in "
"turn will invoke `Task.start_link/1`."
msgstr ""

msgid ""
"As we add more applications in the future, we can continue controlling our dep"
"loy with the same level of granularity, cherry-picking which applications with"
" which configuration are going to production."
msgstr ""

msgid ""
"As we are now able to parse commands, we can finally start implementing the lo"
"gic that runs the commands. Let's add a stub definition for this function for "
"now:"
msgstr ""

msgid ""
"As we said in the previous section, the implementation of `Size` for `Any` is "
"not one that can apply to any data type. That's one of the reasons why `@fallb"
"ack_to_any` is an opt-in behaviour. For the majority of protocols, raising an "
"error when a protocol is not implemented is the proper behaviour. That said, a"
"ssuming we have implemented `Any` as in the previous section:"
msgstr ""

msgid ""
"As we saw at the beginning of this chapter, only some values are valid quoted "
"expressions in Elixir. For example, a map is not a valid quoted expression. Ne"
"ither is a tuple with four elements. However, such values *can* be expressed a"
"s a quoted expression:"
msgstr ""

msgid ""
"As we will see in later chapters, aliases also play a crucial role in macros, "
"to guarantee they are hygienic."
msgstr ""

msgid ""
"As we will see, this functionality becomes very useful when working with struc"
"ts."
msgstr ""

msgid ""
"As you can see `IO.inspect/2` makes it possible to \"spy\" on values almost anyw"
"here in your code without altering the result, making it very helpful inside o"
"f a pipeline like in the above case."
msgstr ""

msgid ""
"As you can see above, Elixir supports a special syntax for defining such lists"
": `[key: value]`. Underneath it maps to the same list of tuples as above. Sinc"
"e keyword lists are lists, we can use all operations available to lists. For e"
"xample, we can use `++` to add new values to a keyword list:"
msgstr ""

msgid ""
"As you can see in the example, tuples are a compound type and each tuple is id"
"entified by the types inside it. To understand why `String.t` is not written a"
"s `string`, have another look at the [notes in the typespecs docs](https://hex"
"docs.pm/elixir/typespecs.html#notes)."
msgstr ""

msgid ""
"As you can see, we can filter generated data (`list != []`) directly in the `c"
"heck all` macro. We can also do simple assignments. The example above uses the"
" `check all` macro inside a regular `test`. If you want that your properties a"
"re reported as \"property\" at the end of an ExUnit test run, you can use the `p"
"roperty` macro instead:"
msgstr ""

msgid ""
"As you grow more proficient in Elixir, you may want to explore the Erlang\n"
"[STDLIB Reference Manual](http://erlang.org/doc/apps/stdlib/index.html) in mor"
"e\n"
"detail."
msgstr ""

msgid ""
"As you may have heard in the upcoming 0.12.0 release Elixir's enumerators gain"
"ed\n"
"some new features. In this blog post I'll explain what's new, what it enables\n"
"and how it works."
msgstr ""

msgid ""
"Assuming we defined `TestCase` in a file named `tests.exs`, we can open it up "
"by running `iex tests.exs` and define our first tests:"
msgstr ""

msgid ""
"Async or not, our new test should obviously fail, as none of the functionality"
" is implemented in the module being tested:"
msgstr ""

msgid ""
"At CodeMeshIO José Valim and Jessica Kerr sat down and discussed this problem."
"\n"
"They came up with a solution inspired by a [Monad.Reader\n"
"article](http://themonadreader.files.wordpress.com/2010/05/issue16.pdf) (third"
"\n"
"article). It's an elegant extension of the old system, based on a simple idea."
"\n"
"Instead of returning only an accumulator at every step (for every produced\n"
"value) the consumer returns a combination of an accumulator and an instruction"
"\n"
"to the producer. Three instructions are available:"
msgstr ""

msgid ""
"At first, the process map has no keys, so sending a `:get` message and then fl"
"ushing the current process inbox returns `nil`. Let's send a `:put` message an"
"d try it again:"
msgstr ""

msgid ""
"At that time, Elixir attempted to be a considerable departure from Erlang and "
"that revealed very fast to a bad design decision because, in order to use any "
"Erlang module, we first would have to provide an Elixir wrapper for it. Any ne"
"w function or module in new Erlang releases would have to be wrapped first in "
"Elixir, which means we would always play catch up with Erlang."
msgstr ""

msgid ""
"At the beginning of this summer, [Chris Hyndman](https://github.com/chyndman) "
"joined us as a Google Summer of Code student to help us improve the Elixir sto"
"ry on Windows. Chris has been essential in:"
msgstr ""

msgid ""
"At the end of the day, it is up to you and your team to figure out the best te"
"sting strategy for your applications. You need to balance code quality, confid"
"ence, and test suite runtime. For example, we may start with testing the serve"
"r only with integration tests, but if the server continues to grow in future r"
"eleases, or it becomes a part of the application with frequent bugs, it is imp"
"ortant to consider breaking it apart and writing more intensive unit tests tha"
"t don't have the weight of an integration test."
msgstr ""

msgid ""
"At the end of the day, it's up to your application to decide if an error while"
" opening a file is exceptional or not. That's why Elixir doesn't impose except"
"ions on `File.read/1` and many other functions. Instead, it leaves it up to th"
"e developer to choose the best way to proceed."
msgstr ""

msgid ""
"At the end of the day, tools like Observer is one of the reasons you want to a"
"lways start processes inside supervision trees, even if they are temporary, to"
" ensure they are always reachable and introspectable."
msgstr ""

msgid ""
"At the end of the run, ExUnit will also report it as a property, including bot"
"h the amount of tests and properties:"
msgstr ""

msgid ""
"At the same time, [we were working on pygments support](https://bitbucket.org/"
"birkenfeld/pygments-main/pull-request/57/add-elixir-and-elixir-console-lexers)"
", a [documentation generation tool](https://github.com/elixir-lang/ex_doc) and"
" many others. Soon, Github was able to syntax highlight Elixir code and [our A"
"PI documentation was online](/)."
msgstr ""

msgid ""
"At the same time, people started to gather around #elixir-lang channel on irc."
"freenode.net and [play with Elixir](https://github.com/elixir-lang/elixir/tree"
"/master/lib/mix), [start their](https://github.com/guedes/exdate) [own project"
"s](https://github.com/yrashk/validatex) and [tutorials](https://github.com/alc"
"o/elixir/wiki/Erlang-Syntax:-A-Crash-Course)."
msgstr ""

msgid ""
"At this point, we have learned four control structures: `case`, `cond`, `if`, "
"and `unless`, and they were all wrapped in `do/end` blocks. It happens we coul"
"d also write `if` as follows:"
msgstr ""

msgid ""
"At this point, you may be wondering: what exactly is an Elixir alias and how i"
"s it represented?"
msgstr ""

msgid ""
"Back to the continuation. A continuation is a function that given an accumulat"
"or\n"
"returns a new producer result. In other words it's a way to swap out the\n"
"accumulator but keep the same producer in the same state."
msgstr ""

msgid ""
"Because processes are linked, we now see a message saying the parent process, "
"which is the shell process, has received an EXIT signal from another process c"
"ausing the shell to terminate. IEx detects this situation and starts a new she"
"ll session."
msgstr ""

msgid ""
"Because we have assigned the value of 1 to the variable x, this last example c"
"ould also have been written as:"
msgstr ""

msgid ""
"Because we passed the `--sup` flag, Mix automatically added `mod: {KVServer.Ap"
"plication, []}`, specifying that `KVServer.Application` is our application cal"
"lback module. `KVServer.Application` will start our application supervision tr"
"ee."
msgstr ""

msgid ""
"Before creating our new application, we must discuss how Mix handles dependenc"
"ies. In practice, there are two kinds of dependencies we usually work with: in"
"ternal and external dependencies. Mix supports mechanisms to work with both of"
" them."
msgstr ""

msgid ""
"Before moving on and adding more features to `KV.Bucket`, let's talk about ExU"
"nit callbacks. As you may expect, all `KV.Bucket` tests will require a bucket "
"agent to be up and running. Luckily, ExUnit supports callbacks that allow us t"
"o skip such repetitive tasks."
msgstr ""

msgid "Before we go into the changes, let's briefly talk about ElixirConf!"
msgstr ""

msgid ""
"Before we implement this function, let's change our server to start using our "
"new `parse/1` and `run/1` functions. Remember, our `read_line/1` function was "
"also crashing when the client closed the socket, so let's take the opportunity"
" to fix it, too. Open up `lib/kv_server.ex` and replace the existing server de"
"finition:"
msgstr ""

msgid ""
"Before we move on to the next chapter, let's discuss the client/server dichoto"
"my in agents. Let's expand the `delete/2` function we have just implemented:"
msgstr ""

msgid ""
"Behaviours are frequently used with dynamic dispatching. For example, we could"
" add a `parse!` function to the `Parser` module that dispatches to the given i"
"mplementation and returns the `:ok` result or raises in cases of `:error`:"
msgstr ""

msgid "Behaviours provide a way to:"
msgstr ""

msgid ""
"Behind the scenes, `use` requires the given module and then calls the `__using"
"__/1` callback on it allowing the module to inject some code into the current "
"context. Generally speaking, the following module:"
msgstr ""

msgid ""
"Besides `@before_compile`, there are other useful module attributes like `@on_"
"definition` and `@after_compile`, which you can read more about in [the docs f"
"or the `Module` module](https://hexdocs.pm/elixir/Module.html). You can also f"
"ind useful information about macros and the compilation environment in the doc"
"umentation for the [`Macro` module](https://hexdocs.pm/elixir/Macro.html) and "
"[`Macro.Env`](https://hexdocs.pm/elixir/Macro.Env.html)."
msgstr ""

msgid ""
"Besides `case` and `cond`, Elixir also provides the macros `if/2` and `unless/"
"2` which are useful when you need to check for only one condition:"
msgstr ""

msgid ""
"Besides `xref`, Elixir v1.3 provides better module tracking generally. For exa"
"mple, in previous versions, if you changed a `:path` dependency, Elixir would "
"always fully recompile the current project. In this release, we have improved "
"the tracking algorithms such that, if you change a `:path` dependency, only th"
"e files that depend on such dependency are recompiled."
msgstr ""

msgid ""
"Besides functions for opening, reading and writing files, the `File` module ha"
"s many functions to work with the file system. Those functions are named after"
" their UNIX equivalents. For example, `File.rm/1` can be used to remove files,"
" `File.mkdir/1` to create directories, `File.mkdir_p/1` to create directories "
"and all their parent chain. There are even `File.cp_r/2` and `File.rm_rf/1` to"
" respectively copy and remove files and directories recursively (i.e., copying"
" and removing the contents of the directories too)."
msgstr ""

msgid ""
"Besides getting a value and updating the agent state, agents allow us to get a"
" value and update the agent state in one function call via `Agent.get_and_upda"
"te/2`. Let's implement a `KV.Bucket.delete/2` function that deletes a key from"
" the bucket, returning its current value:"
msgstr ""

msgid ""
"Besides lowercase sigils, Elixir supports uppercase sigils to deal with escapi"
"ng characters and interpolation. While both `~s` and `~S` will return strings,"
" the former allows escape codes and interpolation while the latter does not:"
msgstr ""

msgid "Besides regular expressions, Elixir ships with three other sigils."
msgstr ""

msgid ""
"Besides the tuple defined above, there are five Elixir literals that, when quo"
"ted, return themselves (and not a tuple). They are:"
msgstr ""

msgid ""
"Besides these boolean operators, Elixir also provides `||`, `&&` and `!` which"
" accept arguments of any type. For these operators, all values except `false` "
"and `nil` will evaluate to true:"
msgstr ""

msgid "Between `use ExUnit.Case` and setup, add the following call:"
msgstr ""

msgid ""
"Bitstring generators are also supported and are very useful when you need to c"
"omprehend over bitstring streams. The example below receives a list of pixels "
"from a binary with their respective red, green and blue values and converts th"
"em into tuples of three elements each:"
msgstr ""

msgid ""
"Both access and update syntax above expect the given keys to exist. Trying to "
"access or update a key that does not exist raises an error:"
msgstr ""

msgid ""
"Broadly speaking, the Registry is a local, decentralized and scalable key-valu"
"e process storage. Let's break this in parts:"
msgstr ""

msgid ""
"Build the JavaScript in `js` into a bundled file using [webpack] for each\n"
"format."
msgstr ""

msgid "Build the [less] files in `less` into a bundled CSS file for each format."
msgstr ""

msgid ""
"But let's also try something different. Let's write integration tests that rel"
"y on the global server names to exercise the whole stack from the TCP server t"
"o the bucket. Our integration tests will rely on global state and must be sync"
"hronous. With integration tests, we get coverage on how the components in our "
"application work together at the cost of test performance. They are typically "
"used to test the main flows in your application. For example, we should avoid "
"using integration tests to test an edge case in our command parsing implementa"
"tion."
msgstr ""

msgid "But such a call would fail for the User struct:"
msgstr ""

msgid ""
"By building on top of a small core, most of the constructs in the language can"
" be replaced and extended as required by developers to target specific domains"
". However, there is a particular domain that Elixir is inherently good at, whi"
"ch is building concurrent, distributed applications, thanks to OTP and the Erl"
"ang VM."
msgstr ""

msgid ""
"By default, Elixir (and Erlang) code is autoloaded. This means that, if we inv"
"oke `List.delete` and the module `List` was not loaded yet, the Erlang VM is g"
"oing to look into the `ebin` directory (the directory where we put compiled fi"
"les) and try to load it. This process is controlled by the [`error_handler` mo"
"dule in Erlang](http://www.erlang.org/doc/man/error_handler.html) via two call"
"back functions: `undefined_function` and `undefined_lambda`."
msgstr ""

msgid ""
"By default, Elixir provides some basic types, such as `integer` or `pid`, as w"
"ell as more complex types: for example, the `round/1` function, which rounds a"
" float to its nearest integer, takes a `number` as an argument (an `integer` o"
"r a `float`) and returns an `integer`. As you can see [in its documentation](h"
"ttps://hexdocs.pm/elixir/Kernel.html#round/1), `round/1`'s typed signature is "
"written as:"
msgstr ""

msgid ""
"By default, `quote` does not annotate line numbers, but we can pass it as an o"
"ption:"
msgstr ""

msgid ""
"By default, a comprehension returns a list as a result. However the result of "
"a comprehension can be inserted into different data structures by passing the "
"`:into` option. For example, we can use bitstring generators with the `:into` "
"option to easily remove all spaces in a string:"
msgstr ""

msgid ""
"By default, functions in the `IO` module read from the standard input and writ"
"e to the standard output. We can change that by passing, for example, `:stderr"
"` as an argument (in order to write to the standard error device):"
msgstr ""

msgid "By default, the code above will log the following message to your console:"
msgstr ""

msgid ""
"By doing this your properties will also be tagged with the `:property` tag, wh"
"ich means you will be able to do things like:"
msgstr ""

msgid ""
"By implementing the event manager as a producer, we can configure all sorts of"
" behaviours that are simply not possible with `GenEvent`, such as how much dat"
"a we want to queue (or for how long) and if events should be buffered or not w"
"hen there are no consumers (via the `handle_subscribe/4` and `handle_cancel/3`"
" callbacks)."
msgstr ""

msgid ""
"By modeling IO devices with processes, the Erlang <abbr title=\"Virtual Machine"
"\">VM</abbr> allows different nodes in the same network to exchange file proces"
"ses in order to read/write files in between nodes. Of all IO devices, there is"
" one that is special to each process: the **group leader**."
msgstr ""

msgid ""
"By restricting hierarchies in favor of named setups, it is straight-forward fo"
"r the developer to glance at each describe block and know exactly the setup st"
"eps involved."
msgstr ""

msgid ""
"By simply starting multiple consumers, the stage `B` will now receive demand f"
"rom multiple stages and dispatch events to those stages which are now running "
"concurrently, always picking the stage that is able to process more items. We "
"can also leverage concurrency from the opposite direction: if the producer is "
"the slow stage in a pipeline, you can start multiple producers and have each c"
"onsumer subscribe to them."
msgstr ""

msgid "By starting a new IEx session, we can now define our tests and run them:"
msgstr ""

msgid ""
"By the way, since we are now returning `{:error, :not_found}`, we should amend"
" the `write_line/2` function in `KVServer` to print such error as well:"
msgstr ""

msgid ""
"By using `File.stream!` and `Stream.flat_map`, we build a lazy computation tha"
"t will emit a single line, break that line into words, and emit such words one"
" by one without building huge lists in memory when enumerated. The functions i"
"n the [Stream module](https://hexdocs.pm/elixir/Stream.html) just express the "
"computation we want to perform. The computation itself, like traversing the fi"
"le or breaking into words in `flat_map`, only happens when we call a function "
"in the `Enum` module. We have covered [the foundation for Enum and Streams](ht"
"tp://blog.plataformatec.com.br/2015/05/introducing-reducees/) in another artic"
"le."
msgstr ""

msgid "By using `~S`, this problem can be avoided altogether:"
msgstr ""

msgid ""
"By using the `alias/2` directive, we are changing the atom the alias expands t"
"o."
msgstr ""

msgid "Change the assertion in `test/kv_test.exs` to the following:"
msgstr ""

msgid ""
"Check [the Install section](/install.html) to get Elixir installed and read ou"
"r [Getting Started guide](http://elixir-lang.org/getting-started/introduction."
"html) to learn more."
msgstr ""

msgid ""
"Check out our [home page](/) and the [getting started guide](/getting-started/"
"introduction.html) for more information. Welcome aboard and grab a cup of Elix"
"ir, because you are certainly going to enjoy the ride!"
msgstr ""

msgid ""
"Check out the [`Regex` module](https://hexdocs.pm/elixir/Regex.html) for more "
"information on other modifiers and the supported operations with regular expre"
"ssions."
msgstr ""

msgid "Choose which version you want documentation for."
msgstr ""

msgid ""
"Chris has also built an [Elixir Web Installer for Windows](https://github.com/"
"elixir-lang/elixir-windows-setup). The web installer checks all available Elix"
"ir versions and allows you to pick which one to install. It will also fetch an"
"d install Erlang in your machine in case it has not been installed yet."
msgstr ""

msgid "Clauses also allow extra conditions to be specified via guards:"
msgstr ""

msgid "Clean all content in the build folder `dist` for each format."
msgstr ""

msgid ""
"Combined with books, tutorials and screencasts, using flashcards is the killer"
" combination to master Elixir."
msgstr ""

msgid "Compared to keyword lists, we can already see two differences:"
msgstr ""

msgid ""
"Comprehensions discard all elements for which the filter expression returns `f"
"alse` or `nil`; all other values are selected."
msgstr ""

msgid ""
"Comprehensions generally provide a much more concise representation than using"
" the equivalent functions from the `Enum` and `Stream` modules. Furthermore, c"
"omprehensions also allow multiple generators and filters to be given. Here is "
"an example that receives a list of directories and gets the size of each file "
"in those directories:"
msgstr ""

msgid ""
"Constructs such as `unless/2`, `defmacro/2`, `def/2`, `defprotocol/2`, and man"
"y others used throughout this getting started guide are implemented in pure El"
"ixir, often as a macro. This means that the constructs being used to build the"
" language can be used by developers to extend the language to the domains they"
" are working on."
msgstr ""

msgid ""
"Consult [the full documentation for guards](https://hexdocs.pm/elixir/guards.h"
"tml) for more information about guards, how they are used, and what expression"
"s are allowed in them."
msgstr ""

msgid "Create a file at `lib/kv/router.ex` with the following contents:"
msgstr ""

msgid "Create a new file at `lib/kv/registry.ex` with the following contents:"
msgstr ""

msgid ""
"Creating a supervisor is not much different from creating a GenServer. We are "
"going to define a module named `KV.Supervisor`, which will use the [Supervisor"
"](https://hexdocs.pm/elixir/Supervisor.html) behaviour, inside the `lib/kv/sup"
"ervisor.ex` file:"
msgstr ""

msgid ""
"Currently Hex only integrates with Mix and contributions to extend it to other"
" tools and other languages in the Erlang VM are welcome!"
msgstr ""

msgid ""
"Currently, there is a lack of machine learning tools and frameworks for Elixir"
". With the number of programmers learning/using machine learning only set to g"
"row, supporting machine learning capabilities is essential for any programming"
" language. Moreover, there are discussions on [ElixirForum][elixirforum] regar"
"ding this and recent talks given at ElixirConf that reflect the need for Elixi"
"r to provide machine learning capabilities."
msgstr ""

msgid ""
"Custom types defined through `@type` are exported and available outside the mo"
"dule they're defined in:"
msgstr ""

msgid ""
"Customization per environment can be done by accessing [the `Mix.env` function"
"](https://hexdocs.pm/mix/Mix.html#env/0) in your `mix.exs` file, which returns"
" the current environment as an atom. That's what we have used in the `:start_p"
"ermanent` options:"
msgstr ""

msgid ""
"DELETE shopping eggs\n"
"OK\n"
"```"
msgstr ""

msgid ""
"Defining custom Mix tasks is useful for projects and libraries that want to be"
"tter integrate with the standard development workflow for Elixir. However, it "
"is a bit verbose for creating one-off tasks or tasks to be used only locally i"
"n a given project."
msgstr ""

msgid ""
"Defining function specs this way works, but it quickly becomes annoying since "
"we're repeating the type `{number, String.t}` over and over. We can use the `@"
"type` directive in order to declare our own custom type."
msgstr ""

msgid ""
"Dependencies between applications in an umbrella project must still be explici"
"tly defined and Mix makes easy to do so. Open up `apps/kv_server/mix.exs` and "
"change the `deps/0` function to the following:"
msgstr ""

msgid ""
"Dependencies now are also automatically compiled before you run a command. For"
" example, `mix compile` will automatically compile pending dependencies for th"
"e current environment. `mix test` will do the same for test dependencies and s"
"o on, interrupting less the developer workflow."
msgstr ""

msgid ""
"Developers are not supposed to create generators from scratch, but use the pro"
"vided generators and the provided combinator functions to compose them. An exa"
"mple of a generator is the one returned by `StreamData.integer()`: this functi"
"on returns a generator that generates integers. Generators are infinite stream"
"s of terms that implement the `Enumerable` protocol. This means we can do oper"
"ations such as taking terms out of a generator through functions from `Enum` a"
"nd `Stream`:"
msgstr ""

msgid ""
"Developers can use the functions in the [`Map` module](https://hexdocs.pm/elix"
"ir/Map.html) to work with maps. For more information on maps and how they comp"
"are to other associative data structures in the language, please check the [Ma"
"ps chapter in our new Getting Started guide](/getting-started/keywords-and-map"
"s.html). Elixir Sips has also released two episodes that cover maps ([part 1]("
"http://elixirsips.com/episodes/054_maps_part_1.html) and [part 2](http://elixi"
"rsips.com/episodes/055_maps_part_2.html))."
msgstr ""

msgid ""
"Developers may also use umbrella projects to break large business domains apar"
"t. The caution here is to make sure the domains don't depend on each other (al"
"so known as cyclic dependencies). If you run into such situations, it means th"
"ose applications are not as isolated from each other as you originally thought"
", and you have architectural and design issues to solve."
msgstr ""

msgid ""
"Developers who maintain libraries that integrate with external data sources, b"
"e it a RabbitMQ, Redis or Apacha Kafka, can explore GenStage as an abstraction"
" for consuming data from those sources. Library developers must implement prod"
"ucers and leave it up for their users to configure the consumer stages."
msgstr ""

msgid ""
"Developing in Elixir does not make your code free of race conditions. However,"
" Elixir's abstractions where nothing is shared by default make it easier to sp"
"ot a race condition's root cause."
msgstr ""

msgid ""
"Dialyzer is a discrepancy analyzer that ships as part of Erlang/OTP. Currently"
", there are two projects that add Dialyzer support to Elixir applications: [di"
"alyxir][] and [dialyzex][]. The goal of this project is to bring ideas from bo"
"th projects into Elixir itself in order to make using Dialyzer in Elixir proje"
"cts easier. The task we aim to add to Elixir will focus on two main features: "
"better user experience (in particular, better error messages and formatting) a"
"nd the ability to analyze projects incrementally."
msgstr ""

msgid ""
"Distributed tasks are exactly the same as supervised tasks. The only differenc"
"e is that we pass the node name when spawning the task on the supervisor. Open"
" up `lib/kv/supervisor.ex` from the `:kv` application. Let's add a task superv"
"isor as the last child of the tree:"
msgstr ""

msgid "Do you need a random number generator? We got your back:"
msgstr ""

msgid ""
"Doctests are specified by an indentation of four spaces followed by the `iex>`"
" prompt in a documentation string. If a command spans multiple lines, you can "
"use `...>`, as in IEx. The expected result should start at the next line after"
" `iex>` or `...>` line(s) and is terminated either by a newline or a new `iex>"
"` prefix."
msgstr ""

msgid ""
"Don't forget that you can also check the [source code of Elixir itself](https:"
"//github.com/elixir-lang/elixir), which is mostly written in Elixir (mainly th"
"e `lib` directory), or [explore Elixir's documentation](/docs.html)."
msgstr ""

msgid "Don't forget to bring the code back to normal before resuming this tutorial!"
msgstr ""

msgid ""
"Don't forget to check [the Install section](/install.html) to get Elixir insta"
"lled and our [Getting Started guide](http://elixir-lang.org/getting-started/in"
"troduction.html) to learn more."
msgstr ""

msgid ""
"Due to immutability, loops in Elixir (as in any functional programming languag"
"e) are written differently from imperative languages. For example, in an imper"
"ative language like C, one would write:"
msgstr ""

msgid ""
"During my ElixirConf 2015 keynote, [I discussed one of the most immediate solu"
"tions to this problem](http://confreaks.tv/videos/elixirconf2015-keynote) whic"
"h was to convert parts of your pipeline to separate processes:"
msgstr ""

msgid ""
"During the Elixir London Meetup, I have live-coded a short example that shows "
"how to use `GenStage` to concurrently process data stored in a PostgreSQL data"
"base as a queue:"
msgstr ""

msgid ""
"During the last year, we have spoken at many conferences spreading the word ab"
"out Elixir. We [usually started with introducing the Erlang VM](https://vimeo."
"com/53221562), then went on to talk about Elixir goals, saving some time at th"
"e end to do a live demo, showing some goodies like exchanging information betw"
"een remote nodes and even hot code swapping."
msgstr ""

msgid ""
"During this time traveling around, we have spoken at many conferences, as [Str"
"ange Loop](http://thestrangeloop.com/), [Øredev](http://oredev.org/), [QCon SP"
"](http://qconsp.com/) and [Rupy](http://rupy.eu/) as well as at different comp"
"anies. Developers from different backgrounds have shown interest in Elixir, [w"
"ritten about it](http://spin.atomicobject.com/2012/10/31/elixir-erlang-and-the"
"-dining-philosophers/), joined us at #elixir-lang on freenode and contributed "
"to the language. As of today, Elixir is powered by 51 different contributors!"
msgstr ""

msgid ""
"ETS allows us to store any Elixir term in an in-memory table. Working with ETS"
" tables is done via [Erlang's `:ets` module](http://www.erlang.org/doc/man/ets"
".html):"
msgstr ""

msgid ""
"ETS lets you create a table containing tuples. By default, ETS tables\n"
"are protected, which means only the owner process may write to the table\n"
"but any other process can read. ETS has some functionality to be used as\n"
"a simple database, a key-value store or as a cache mechanism."
msgstr ""

msgid "ETS tables can also be named, allowing us to access them by a given name:"
msgstr ""

msgid "Each Erlang module lives in its own file which has the following structure:"
msgstr ""

msgid ""
"Each application has an environment that stores the application's specific con"
"figuration by key. For example, we could store the routing table in the `:kv` "
"application environment, giving it a default value and allowing other applicat"
"ions to change the table as needed."
msgstr ""

msgid ""
"Each number given to a binary is meant to represent a byte and therefore must "
"go up to 255. Binaries allow modifiers to be given to store numbers bigger tha"
"n 255 or to convert a code point to its UTF-8 representation:"
msgstr ""

msgid "Eager to learn more? Keep reading!"
msgstr ""

msgid ""
"Elixir Sips is a screencast series that provides 2 short videos - typically fr"
"om 2 to 7 minutes, but occasionally much longer - each week.  The videos consi"
"st of various topics, ranging from exploring a module in the standard library "
"to trying out a new project to building a web-based Tetris game from scratch."
msgstr ""

msgid ""
"Elixir allows us to derive a protocol implementation based on the `Any` implem"
"entation. Let's first implement `Any` as follows:"
msgstr ""

msgid ""
"Elixir allows you to assign to a variable more than once. If you want to match"
" against the value of a previously assigned variable, you should use `^`:"
msgstr ""

msgid ""
"Elixir already provides mechanisms to write your everyday code in a simple and"
" readable fashion by using its data structures and functions. Macros should on"
"ly be used as a last resort. Remember that **explicit is better than implicit*"
"*. **Clear code is better than concise code.**"
msgstr ""

msgid "Elixir also provides `++` and `--` to manipulate lists:"
msgstr ""

msgid ""
"Elixir also provides `==`, `!=`, `===`, `!==`, `<=`, `>=`, `<`, and `>` as com"
"parison operators:"
msgstr ""

msgid ""
"Elixir also provides `Port`, `Reference`, and `PID` as data types (usually use"
"d in process communication), and we will take a quick look at them when talkin"
"g about processes. For now, let's take a look at some of the basic operators t"
"hat go with our basic types."
msgstr ""

msgid ""
"Elixir also provides a [Getting Started guide][6] and has [documentation avail"
"able online][7]."
msgstr ""

msgid ""
"Elixir also provides an `if` function that resembles more imperative languages"
" and is useful when you need to check if one clause is true or false:"
msgstr ""

msgid "Elixir also provides ranges:"
msgstr ""

msgid ""
"Elixir also provides three boolean operators: `or`, `and` and `not`. These ope"
"rators are strict in the sense that they expect a boolean (`true` or `false`) "
"as their first argument:"
msgstr ""

msgid ""
"Elixir also relies on a vibrant community to support its growth. The community"
" is behind the meetups, events, learning resources, open source projects, and "
"more. See the sidebar, the [Learning Resources](/learning.html) and [the Hex P"
"ackage Manager website](https://hex.pm/) for some examples and more informatio"
"n."
msgstr ""

msgid "Elixir also supports multiline strings (also called *heredocs*):"
msgstr ""

msgid ""
"Elixir also supports private macros via `defmacrop`. As private functions, the"
"se macros are only available inside the module that defines them, and only at "
"compilation time."
msgstr ""

msgid ""
"Elixir also supports shortcut notations for entering binary, octal, and hexade"
"cimal numbers:"
msgstr ""

msgid "Elixir also supports string interpolation:"
msgstr ""

msgid ""
"Elixir binaries are guaranteed to be backwards compatible within the same bran"
"ch. Code compiled with v1.0 shall work with Elixir v1.0.1 runtime but code com"
"piled with Elixir v1.0 should be recompiled to work with Elixir v1.1.0 onwards"
"."
msgstr ""

msgid "Elixir brings the concept of module attributes from Erlang. For example:"
msgstr ""

msgid ""
"Elixir compiles into BEAM byte code (via Erlang Abstract Format). This means t"
"hat Elixir code can be called from Erlang and vice versa, without the need to "
"write any bindings. All Elixir modules start with the `Elixir.` prefix followe"
"d by the regular Elixir name. For example, here is how to use the UTF-8 aware "
"`String` downcase from Elixir in Erlang:"
msgstr ""

msgid "Elixir complements this domain by providing a standard library with:"
msgstr ""

msgid ""
"Elixir developers typically prefer to use the `map.field` syntax and pattern m"
"atching instead of the functions in the `Map` module when working with maps be"
"cause they lead to an assertive style of programming. [This blog post](http://"
"blog.plataformatec.com.br/2014/09/writing-assertive-code-with-elixir/) provide"
"s insight and examples on how you get more concise and faster software by writ"
"ing assertive code in Elixir."
msgstr ""

msgid "Elixir developers will often use module attributes as constants:"
msgstr ""

msgid ""
"Elixir does not contain a function similar to `printf` found in C and other\n"
"languages. Luckily, the Erlang standard library functions `:io.format/2` and\n"
"`:io_lib.format/2` may be used. The first formats to terminal output, while\n"
"the second formats to an iolist. The format specifiers differ from `printf`,\n"
"[refer to the Erlang documentation for details](http://erlang.org/doc/man/io.h"
"tml#format-1)."
msgstr ""

msgid ""
"Elixir doesn't require punctuation to separate clauses, but they must be group"
"ed together."
msgstr ""

msgid ""
"Elixir favors the use of UTF-8 binaries since its first release. In the latest"
" releases, we took it up a notch by adding Unicode support, built upon the Uni"
"code Standard 6.2.0. Elixir v0.8 takes this even further, adding more convenie"
"nce functions and better support to named sequences:"
msgstr ""

msgid ""
"Elixir flashcards are a set of beautifully crafted, professionally printed, po"
"ker sized flashcards to help you master the Elixir language."
msgstr ""

msgid ""
"Elixir follows the recommendations in [Unicode Annex #31](http://unicode.org/r"
"eports/tr31/) to make Elixir more accessible to other languages and communitie"
"s. Identifiers must still be a sequence of letters, followed by digits and com"
"bining marks. This means symbols, such as mathematical notations and emoji, ar"
"e not allowed in identifiers."
msgstr ""

msgid ""
"Elixir has a handful of reserved attributes. Here are a few of them, the most "
"commonly used ones:"
msgstr ""

msgid "Elixir has a shortcut syntax for binaries:"
msgstr ""

msgid ""
"Elixir has three error mechanisms: errors, throws, and exits. In this chapter,"
" we will explore each of them and include remarks about when each should be us"
"ed."
msgstr ""

msgid ""
"Elixir in Action is a tutorial book that aims to bring developers new to Elixi"
"r and Erlang to the point where they can develop complex systems on their own."
" No knowledge about Elixir, Erlang, or functional programming is required, but"
" it is assumed that a reader has a few years of production experience using ma"
"instream OO languages, for example C#, Java, Python, or Ruby."
msgstr ""

msgid ""
"Elixir is a dynamic, functional language designed for building scalable and ma"
"intainable applications."
msgstr ""

msgid ""
"Elixir is a dynamically typed language, so all types in Elixir are inferred by"
" the runtime. Nonetheless, Elixir comes with **typespecs**, which are a notati"
"on used for:"
msgstr ""

msgid ""
"Elixir is an excellent language if you want to learn about functional programm"
"ing, and with this hands-on introduction, you’ll discover just how powerful an"
"d fun Elixir can be. This language combines the robust functional programming "
"of Erlang with a syntax similar to Ruby, and includes powerful features for me"
"taprogramming."
msgstr ""

msgid ""
"Elixir is an extensible and very customizable programming language thanks to i"
"ts meta-programming support. Most meta-programming in Elixir is done through m"
"acros, which are very useful in several situations, especially for writing DSL"
"s. We have written a short guide that explains the basic mechanisms behind mac"
"ros, shows how to write macros, and how to use macros to create DSLs:"
msgstr ""

msgid ""
"Elixir is an immutable language where nothing is shared by default. If we want"
" to provide buckets, which can be read and modified from multiple places, we h"
"ave two main options in Elixir:"
msgstr ""

msgid ""
"Elixir is composed of 6 applications, all under the same versioning constraint"
"s:"
msgstr ""

msgid ""
"Elixir is meant to be compatible with the Erlang VM and the existing ecosystem"
". When we talk about Erlang, we can break it into three parts:"
msgstr ""

msgid ""
"Elixir is structured similar to Erlang's OTP. It is divided into applications "
"that are placed inside the `lib` directory, as seen in its [source code reposi"
"tory](https://github.com/elixir-lang/elixir). Since rebar does not recognize s"
"uch structure, we need to explicitly add to our `rebar.config` which Elixir ap"
"ps we want to use, for example:"
msgstr ""

msgid ""
"Elixir koans is a fun, easy way to get started with the Elixir programming lan"
"guage. It is an idiomatic tour of the language."
msgstr ""

msgid ""
"Elixir leverages the Erlang VM, known for running low-latency, distributed and"
" fault-tolerant systems, while also being successfully used in web development"
" and the embedded software domain."
msgstr ""

msgid ""
"Elixir macros have late resolution. This guarantees that a variable defined in"
"side a quote won't conflict with a variable defined in the context where that "
"macro is expanded. For example:"
msgstr ""

msgid ""
"Elixir now ships with a new application called logger. This application provid"
"es [the Logger module](https://hexdocs.pm/logger/Logger.html), which is the ma"
"in API developers will use for logging:"
msgstr ""

msgid ""
"Elixir offers a literal syntax for creating a list of two-item tuples where th"
"e first item in the tuple is an atom and calls them keyword lists:"
msgstr ""

msgid ""
"Elixir on Xen runs on top of the Xen Hypervisor (via the LING VM) but with no "
"traditional OS underneath it, taking away numerous administrative, scalability"
", and performance issues. This  limits options of a malicious attacker, making"
" it an excellent choice for high-security applications, and reduces startup la"
"tency, allowing developers to spawn new VMs in less than 100 miliseconds."
msgstr ""

msgid "Elixir projects are usually organized into three directories:"
msgstr ""

msgid ""
"Elixir promotes the use of Markdown with heredocs to write readable documentat"
"ion. Heredocs are multi-line strings, they start and end with triple double-qu"
"otes, keeping the formatting of the inner text. We can access the documentatio"
"n of any compiled module directly from IEx:"
msgstr ""

msgid ""
"Elixir provides Perl-compatible regular expressions (regexes), as implemented "
"by the [PCRE](http://www.pcre.org/) library. Regexes also support modifiers. F"
"or example, the `i` modifier makes a regular expression case insensitive:"
msgstr ""

msgid ""
"Elixir provides a bunch of predicate functions to check for a value type. For "
"example, the `is_boolean/1` function can be used to check if a value is a bool"
"ean or not:"
msgstr ""

msgid ""
"Elixir provides a precompiled package for every release. First [install Erlang"
"](/install.html#installing-erlang) and then download and unzip the [Precompile"
"d.zip file for the latest release](https://github.com/elixir-lang/elixir/relea"
"ses/download/v{{ stable.version }}/Precompiled.zip)."
msgstr ""
"Elixir はリリースごとにプリコンパイル済みパッケージをご用意しています。まずはじめに [Erlangをインストール](/install.html#in"
"stalling-erlang) します。次に [最新の Precopiled.zip ファイル](https://github.com/elixir-la"
"ng/elixir/releases/download/v{{ stable.version }}/Precompiled.zip)をダウンロード後、解凍し"
"てください。."

msgid ""
"Elixir provides excellent interoperability with Erlang libraries. In fact,\n"
"Elixir discourages simply wrapping Erlang libraries in favor of directly\n"
"interfacing with Erlang code. In this section, we will present some of the\n"
"most common and useful Erlang functionality that is not found in Elixir."
msgstr ""

msgid ""
"Elixir provides macros as a mechanism for meta-programming (writing code that "
"generates code). Macros are expanded at compile time."
msgstr ""

msgid ""
"Elixir provides similar mechanisms for imports and aliases too. This guarantee"
"s that a macro will behave as specified by its source module rather than confl"
"icting with the target module where the macro is expanded. Hygiene can be bypa"
"ssed under specific situations by using macros like `var!/2` and `alias!/2`, a"
"lthough one must be careful when using those as they directly change the user "
"environment."
msgstr ""

msgid ""
"Elixir provides the concept of enumerables and [the `Enum` module](https://hex"
"docs.pm/elixir/Enum.html) to work with them. We have already learned two enume"
"rables: lists and maps."
msgstr ""

msgid ""
"Elixir provides the concepts of guards: expressions used alongside pattern mat"
"ching to select a matching clause. Let's see an example straight from [Elixir'"
"s home page](https://elixir-lang.org):"
msgstr ""

msgid ""
"Elixir runs in the same virtual machine and is compatible with OTP. Not only t"
"hat, all the tools and libraries available in the Erlang ecosystem are also av"
"ailable in Elixir, simply because there is no conversion cost from calling Erl"
"ang from Elixir and vice-versa."
msgstr ""

msgid ""
"Elixir runs on the Erlang Virtual Machine and, sooner or later, an Elixir deve"
"loper will want to interface with existing Erlang libraries. Here's a list of "
"online resources that cover Erlang's fundamentals and its more advanced featur"
"es:"
msgstr ""

msgid ""
"Elixir runs on top of the Erlang Virtual Machine, which provides a scalable an"
"d fault-tolerant foundation. Elixir was designed to leverage this foundation w"
"ithout performance costs and aims to contribute to the wider ecosystem wheneve"
"r possible."
msgstr ""

msgid ""
"Elixir ships with facilities to connect nodes and exchange information between"
" them. In fact, we use the same concepts of processes, message passing and rec"
"eiving messages when working in a distributed environment because Elixir proce"
"sses are *location transparent*. This means that when sending a message, it do"
"esn't matter if the recipient process is on the same node or on another node, "
"the <abbr title=\"Virtual Machine\">VM</abbr> will be able to deliver the messag"
"e in both cases."
msgstr ""

msgid ""
"Elixir ships with some built-in protocols. In previous chapters, we have discu"
"ssed the `Enum` module which provides many functions that work with any data s"
"tructure that implements the `Enumerable` protocol:"
msgstr ""

msgid ""
"Elixir spawned a process on another node and returned its pid. The code then e"
"xecuted on the other node where the `Hello.world/0` function exists and invoke"
"d that function. Note that the result of \"hello world\" was printed on the curr"
"ent node `bar` and not on `foo`. In other words, the message to be printed was"
" sent back from `foo` to `bar`. This happens because the process spawned on th"
"e other node (`foo`) still has the group leader of the current node (`bar`). W"
"e have briefly talked about group leaders in the [IO chapter](/getting-started"
"/io-and-the-file-system.html#processes-and-group-leaders)."
msgstr ""

msgid "Elixir supports `true` and `false` as booleans:"
msgstr ""

msgid ""
"Elixir supports a literal syntax for regular expressions. Such syntax allows r"
"egexes to be compiled at compilation time instead of runtime and does not requ"
"ire you to double escape special regex characters:"
msgstr ""

msgid ""
"Elixir supports compound types as well. For example, a list of integers has ty"
"pe `[integer]`. You can see all the built-in types provided by Elixir [in the "
"typespecs docs](https://hexdocs.pm/elixir/typespecs.html)."
msgstr ""

msgid ""
"Elixir supports partial application of functions which can be used to define a"
"nonymous functions in a concise way:"
msgstr ""

msgid ""
"Elixir too has an interactive shell called `iex`. Compiling Elixir code can be"
" done with `elixirc` (which is similar to Erlang's `erlc`). Elixir also provid"
"es an executable named `elixir` to run Elixir code. The module defined above c"
"an be written in Elixir as:"
msgstr ""

msgid ""
"Elixir uses Erlang underneath, all the way down. Thanks to this, an Elixir pro"
"ject can run on the recently revealed “OS-less” Erlang VM called LING VM. LING"
" VM is the core technology of [Erlang on Xen](http://erlangonxen.org)."
msgstr ""

msgid ""
"Elixir uses curly brackets to define tuples. Like lists, tuples can hold any v"
"alue:"
msgstr ""

msgid ""
"Elixir uses square brackets to specify a list of values. Values can be of any "
"type:"
msgstr ""

msgid ""
"Elixir v0.10.0 is released with support for streams, sets and many improvement"
"s to the Mix and ExUnit applications."
msgstr ""

msgid ""
"Elixir v0.12.0 has been released with improved enumerables, build patterns and"
" welcoming a new member to our team."
msgstr ""

msgid ""
"Elixir v0.13.0 has been released. It contains changes that will effectively sh"
"ape how developers will write Elixir code from now on, making it an important "
"milestone towards v1.0! On this post we are going to cover some of those chang"
"es, the road to Elixir v1.0, as well as the announcement of [hex.pm](https://h"
"ex.pm)."
msgstr ""

msgid ""
"Elixir v0.14.0 solves this issue by introducing `@derive` which allows us to d"
"ynamically derive implementations for structs based on the implementation for "
"maps:"
msgstr ""

msgid ""
"Elixir v0.7.0 was released with bug fixes and many improvements, like a `Strin"
"g` module to handle UTF-8 binaries and support to environments and nested depe"
"ndencies in Mix."
msgstr ""

msgid ""
"Elixir v0.7.1 was released this weekend to celebrate the end of a two months j"
"ourney traveling around Europe, United States and Brazil talking about and exp"
"osing Elixir to new developers."
msgstr ""

msgid ""
"Elixir v0.8 contains a bit of house cleaning too. We have created [the Path mo"
"dule](https://hexdocs.pm/elixir/Path.html) to accommodate functions used to ma"
"nipulate filesystem paths and have also added functions like [`System.tmp_dir`"
" and `System.user_home`](https://hexdocs.pm/elixir/System.html) which are mean"
"t to work accross different operating systems and are very handy when scriptin"
"g."
msgstr ""

msgid ""
"Elixir v0.8 ensures that the `unless` macro above will expand to the same `if`"
" macro available when quoted, guaranteeing different libraries can integrate e"
"asily without imposing hidden requirements."
msgstr ""

msgid ""
"Elixir v0.8.2 takes this to the next level by adding support to doctests. Give"
"n the example above, you can configure Elixir to automatically run the code sa"
"mples in your documentation by including a call to the `doctest` macro in your"
" test suite:"
msgstr ""

msgid ""
"Elixir v0.9.0 also removes support for Erlang R15 and earlier versions. In cas"
"e you still need to run Elixir software on R15, we have also released Elixir v"
"0.8.3, which contains many of the enhancements in v0.9.0. Check the [CHANGELOG"
" for more details for both releases](https://github.com/elixir-lang/elixir/blo"
"b/v0.9.0/CHANGELOG.md)."
msgstr ""

msgid ""
"Elixir v0.9.0 changes its main abstraction for enumeration from iterators to r"
"educers. Before Elixir v0.9.0, when you invoked:"
msgstr ""

msgid ""
"Elixir v0.9.0 now supports umbrella projects which can work with many applicat"
"ions at the same time. You can create a new umbrella project with:"
msgstr ""

msgid ""
"Elixir v1.0 was released in September 2014 and a new minor version is released"
" every 6 months, around January and July of every year. New Elixir versions ar"
"e [announced on our official blog](https://elixir-lang.org/blog/) with a summa"
"ry of the main changes and a link to the complete CHANGELOG. Our [compatibilit"
"y and deprecation policies](https://hexdocs.pm/elixir/compatibility-and-deprec"
"ations.html#content) are documented."
msgstr ""

msgid ""
"Elixir v1.1 has been released and it brings enhancements, bug fixes, performan"
"ce improvements and more into Elixir."
msgstr ""

msgid ""
"Elixir v1.1 supports both Erlang 17 and Erlang 18. This is, however, the last "
"release supporting Erlang 17, so upgrading to Erlang 18 is advised. Elixir v1."
"2 will introduce features that are Erlang 18 only."
msgstr ""

msgid ""
"Elixir v1.2 also introduces the `i/1` helper in IEx, which allows developers t"
"o retrieve information about any data type. This will help newcomers explore t"
"he language values while providing experienced developers with crucial informa"
"tion about the value they are introspecting. For example, giving a PID to `i/1"
"` will show if it has a registered name, linked processes and more. Giving it "
"a module, like `i(String)`, shows compile-time information and others."
msgstr ""

msgid "Elixir v1.3 also introduces 3 new sigils related to the types above:"
msgstr ""

msgid ""
"Elixir v1.3 brings many improvements to the language, the compiler and its too"
"ling, specially Mix (Elixir's build tool) and ExUnit (Elixir's test framework)"
". The most notable additions are the new Calendar types, the new cross-referen"
"ce checker in Mix, and the assertion diffing in ExUnit. We will explore all of"
" them and a couple more enhancements below."
msgstr ""

msgid ""
"Elixir v1.3 includes improvements to the option parser, including `OptionParse"
"r.parse!/2` and `OptionParser.parse_head!/2` functions that will raise in case"
" of invalid or unknown switches. Mix builds on top of this functionality to pr"
"ovide automatic error reporting solving a common complaint where invalid optio"
"ns were not reported by Mix tasks."
msgstr ""

msgid "Elixir v1.3 introduces the `Calendar` module as well as 4 new calendar types:"
msgstr ""

msgid ""
"Elixir v1.4 adds `Task.async_stream/3` and `Task.async_stream/5` which brings "
"some of the lessons we learned from [the GenStage project](/blog/2016/07/14/an"
"nouncing-genstage/) directly into Elixir:"
msgstr ""

msgid ""
"Elixir v1.4 brings new features, enhancements and bug fixes. The most notable "
"changes are the addition of the `Registry` module, the `Task.async_stream/3` a"
"nd `Task.async_stream/5` function which aid developers in writing concurrent s"
"oftware, and the new application inference and commands added to Mix."
msgstr ""

msgid ""
"Elixir v1.4 introduces the ability to syntax color inspected data structures a"
"nd IEx automatically relies on this feature to provide syntax coloring for eva"
"luated shell results:"
msgstr ""

msgid ""
"Elixir v1.5 includes new features, enhancements, and bug fixes. While [Elixir "
"v1.4](/blog/2017/01/05/elixir-v1-4-0-released/) focused on tools for concurren"
"cy and scalability, Elixir v1.5 brings many improvements to the developer expe"
"rience and quality of life. As we will see, many of those are powered by the l"
"atest Erlang/OTP 20. This is also the last Elixir release that supports Erlang"
"/OTP 18."
msgstr ""

msgid ""
"Elixir v1.5 introduces the `@impl` attribute, which allows us to mark that cer"
"tain functions are implementation of callbacks:"
msgstr ""

msgid ""
"Elixir v1.5 streamlines how supervisors are defined and used in Elixir. Elixir"
" now allows child specifications, which specify how a child process is supervi"
"sed, to be defined in modules. In previous versions, a project using Phoenix w"
"ould write:"
msgstr ""

msgid ""
"Elixir v1.5 supports non-quoted atoms and variables to be in UTF-8 when using "
"Erlang/OTP 20. For example:"
msgstr ""

msgid ""
"Elixir v1.6 addresses this issue by introducing [a new `DynamicSupervisor` mod"
"ule](https://hexdocs.pm/elixir/DynamicSupervisor.html), which encapsulates the"
" old `:simple_one_for_one` strategy and APIs in a proper module while allowing"
" the documentation and API of the `Supervisor` module to focus on its main use"
" cases. Having a separate `DynamicSupervisor` module also makes it simpler to "
"add new features to the dynamic supervisor, such as the new `:max_children` op"
"tion that limits the maximum number of children supervised dynamically."
msgstr ""

msgid ""
"Elixir v1.6 includes new features, enhancements, and bug fixes. The main featu"
"re in this release is a code formatter. Important improvements can also be fou"
"nd in the standard library and in the Mix build tool."
msgstr ""

msgid ""
"Elixir v1.7 implements [EEP 48](http://erlang.org/eep/eeps/eep-0048.html). EEP"
" 48 aims to bring documentation interoperability across all languages running "
"on the Erlang VM."
msgstr ""

msgid ""
"Elixir will automatically wrap the function body in a `try` whenever one of `a"
"fter`, `rescue` or `catch` is specified."
msgstr ""

msgid ""
"Elixir will follow [semantic versioning](http://semver.org), which means code "
"written for Elixir v1.0 will continue to compile and run correctly for all ver"
"sions under the v1 branch (e.g. v1.0.1, v1.1.0, v1.2.0)."
msgstr ""

msgid ""
"Elixir will now warn if constructs like `if`, `case` and friends assign to a v"
"ariable that is accessed in an outer scope. As an example, imagine a function "
"called `format` that receives a message and some options and it must return a "
"path alongside the message:"
msgstr ""

msgid "Elixir's interactive shell, IEx, has also been updated to print metadata:"
msgstr ""

msgid ""
"Elixir's processes should not be confused with operating system processes. Pro"
"cesses in Elixir are extremely lightweight in terms of memory and CPU (unlike "
"threads in many other programming languages). Because of this, it is not uncom"
"mon to have tens or even hundreds of thousands of processes running simultaneo"
"usly."
msgstr ""

msgid ""
"Elixir's source code is under the [Apache 2 License](https://github.com/elixir"
"-lang/elixir/blob/master/LICENSE) and is maintained by the Elixir Core team, c"
"omposed of six members: Aleksei Magusev, Andrea Leopardi, Eric Meadows-Jönsson"
", James Fish, José Valim, and Michał Muskała. The Elixir team works towards an"
" even understanding of the Elixir codebase across all members so it never depe"
"nds on a single person. The source code and information for contributors can b"
"e found on [the language repository](https://github.com/elixir-lang/elixir)."
msgstr ""

msgid ""
"Elixir-School is an open and community driven effort inspired by Twitter’s Sca"
"la School. The site’s content consists of peer-reviewed lessons on various Eli"
"xir topics that range in difficulty. The lessons are currently available in ov"
"er 10 languages to help make programming Elixir more accessible to non-English"
" speakers."
msgstr ""

msgid ""
"ElixirBench aims to be a service to monitor performance of Elixir projects. Th"
"e goal of the GSoC project is to bring ElixirBench up and have it run nightly "
"performance monitoring of significant Elixir projects (including Elixir itself"
"). The end goal is to have a platform that, given a project from GitHub, will "
"monitor the performance of new releases of that project and look for performan"
"ce regressions. The benchmarking process will be controlled through a configur"
"ation file that will specify the benchmark scripts to run."
msgstr ""

msgid ""
"ElixirCasts is a collection of simple screencasts that cover a wide range of E"
"lixir and Phoenix topics. Each episode tackles a specific problem or explores "
"a new library, demystifying it in a language that's easy to understand."
msgstr ""

msgid ""
"Elixir’s straightforward syntax and this guided tour give you a clean, simple "
"path to learn modern functional programming techniques. No previous functional"
" programming experience required! This book walks you through the right concep"
"ts at the right pace, as you explore immutable values and explicit data transf"
"ormation, functions, modules, recursive functions, pattern matching, high-orde"
"r functions, polymorphism, and failure handling, all while avoiding side effec"
"ts. Don’t board the Elixir train with an imperative mindset! To get the most o"
"ut of functional languages, you need to think functionally. This book will get"
" you there."
msgstr ""

msgid ""
"Enum.each %User{name: \"jose\"}, fn {k, v} ->\n"
"  IO.puts \"Got #{k}: #{v}\"\n"
"end\n"
"#=> Got __struct__: Elixir.User\n"
"#=> Got name: jose\n"
"#=> Got age: 0\n"
"```"
msgstr ""

msgid ""
"Enum.map [1, 2, 3], &Math.square/1\n"
"#=> [1, 4, 9]\n"
"```"
msgstr ""

msgid ""
"Enum.take(keywords_generator, 2)\n"
"#=> [[_: [true]], [tm: 2, h: %{}]]\n"
"```"
msgstr ""

msgid ""
"Enumerators are great, but they have their limitations. One issue is that it's"
"\n"
"not possible to define a function that only returns at most 3 elements without"
"\n"
"traversing all elements or using ugly tricks such as `throw` (with a\n"
"`try...catch` construct in the outer function). The `throw` trick is used in\n"
"`Enum` and `Stream` to implement functions such as `Enum.take/2` and\n"
"`Stream.take_while/2`. It works, but it's not what I'd call stylish."
msgstr ""

msgid ""
"Episodes range from beginner focused to more moderate and advanced topics. Com"
"e build your knowledge of Elixir with us, one episode at a time."
msgstr ""

msgid ""
"Eric is also maintainer of both [Ecto](https://github.com/elixir-lang/ecto) an"
"d [Postgrex](https://github.com/ericmj/postgrex) projects. Which are proving t"
"o be very useful to the Elixir community too!"
msgstr ""

msgid ""
"Erlang R17 also introduced recursion to anonymous functions. This feature, whi"
"le still not available from Elixir, allows Elixir to provide a more flexible a"
"nd extensible comprehension syntax."
msgstr ""

msgid ""
"Erlang R17 introduced maps, a key-value store, with no ordering. Keys and valu"
"es can be any term. Creating, updating and matching maps in both languages is "
"shown below:"
msgstr ""

msgid ""
"Erlang and Elixir have the same data types for the most part, but there are a "
"number of differences."
msgstr ""

msgid ""
"Erlang expressions are terminated with a dot `.` and comma `,` is used to eval"
"uate multiple expressions within one context (in a function definition, for in"
"stance). In Elixir, expressions are delimited by a line break or a semicolon `"
";`."
msgstr ""

msgid ""
"Erlang on Xen (and consequently Elixir on Xen) is still in active development,"
" so don't forget to read more about its concepts, use cases and limitations on"
" [Erlang on Xen website](http://erlangonxen.org/)."
msgstr ""

msgid ""
"Erlang's official documentation site has a nice [collection][4] of programming"
" examples. It can be a good exercise to translate them into Elixir."
msgstr ""

msgid ""
"Erlang/OTP 21 includes a new `:logger` module. Elixir v1.7 fully integrates wi"
"th the new `:logger` and leverages its metadata system. The `Logger.Translator"
"` mechanism has also been improved to export metadata, allowing custom Logger "
"backends to leverage information such as:"
msgstr ""

msgid ""
"Erlang/OTP 21.0 introduces a new way to retrieve the stacktrace that is lexica"
"lly scoped and no longer relies on side-effects like `System.stacktrace/0` doe"
"s. Before one would write:"
msgstr ""

msgid ""
"Errors (or *exceptions*) are used when exceptional things happen in the code. "
"A sample error can be retrieved by trying to add a number into an atom:"
msgstr ""

msgid "Errors can be **rescued** using the `try/rescue` construct:"
msgstr ""

msgid ""
"Escripts will be installed at `~/.mix/escripts` which must be added to your [`"
"PATH` environment variable](https://en.wikipedia.org/wiki/PATH_(variable))."
msgstr ""

msgid "Even a map is represented as a call to `%{}`:"
msgstr ""

msgid ""
"Even if we have type-specific functions for getting the size built into Elixir"
" (such as `tuple_size/1`), we could implement a generic `Size` protocol that a"
"ll data structures for which size is pre-computed would implement."
msgstr ""

msgid ""
"Even though Elixir attempts its best to provide a safe environment for macros,"
" the major responsibility of writing clean code with macros falls on developer"
"s. Macros are harder to write than ordinary Elixir functions and it's consider"
"ed to be bad style to use them when they're not necessary. So write macros res"
"ponsibly."
msgstr ""

msgid ""
"Even with all those improvements, Elixir v0.13.0 is backwards compatible with "
"Elixir v0.12.5 and upgrading should be a clean process."
msgstr ""

msgid ""
"Even with such guarantees, the developer plays a big role when writing macros "
"responsibly. If you are confident you need to resort to macros, remember that "
"macros are not your API. Keep your macro definitions short, including their qu"
"oted contents. For example, instead of writing a macro like this:"
msgstr ""

msgid ""
"Every function clause dispatches the appropriate command to the `KV.Registry` "
"server that we registered during the `:kv` application startup. Since our `:kv"
"_server` depends on the `:kv` application, it is completely fine to depend on "
"the services it provides."
msgstr ""

msgid ""
"Every test inside a describe block will be tagged with the describe block name"
". This allows developers to run tests that belong to particular blocks, be the"
"m in the same file or across many files:"
msgstr ""

msgid ""
"Every time an attribute is read inside a function, a snapshot of its current v"
"alue is taken. In other words, the value is read at compilation time and not a"
"t runtime. As we are going to see, this also makes attributes useful to be use"
"d as storage during module compilation."
msgstr ""

msgid ""
"Every time we need to look up a bucket, we need to send a message to the regis"
"try. In case our registry is being accessed concurrently by multiple processes"
", the registry may become a bottleneck!"
msgstr ""

msgid ""
"Every time you add a new child to a supervisor, it is important to evaluate if"
" the supervisor strategy is correct as well as the order of child processes. I"
"n this case, we are using `:one_for_one` and the `KV.Registry` is started befo"
"re `KV.BucketSupervisor`."
msgstr ""

msgid ""
"Everything that is inside the function we passed to the agent happens in the a"
"gent process. In this case, since the agent process is the one receiving and r"
"esponding to our messages, we say the agent process is the server. Everything "
"outside the function is happening in the client."
msgstr ""

msgid ""
"ExUnit builds on top of `mix xref` to provide the `mix test --stale` functiona"
"lity. When the `--stale` flag is given, `mix` will only run the tests that may"
" have changed since the last time you ran `mix test --stale`. For example:"
msgstr ""

msgid ""
"ExUnit packs many improvements on the tooling side, better integration with ex"
"ternal tools, as well as mechanisms to improve the readability of your tests."
msgstr ""

msgid ""
"ExUnit v1.3 includes the ability to register different test types. This means "
"libraries like QuickCheck can now provide functionality such as:"
msgstr ""

msgid ""
"ExUnit will now include diff-ing output every time a developer asserts `assert"
" left == right` in their tests. For example, the assertion:"
msgstr ""

msgid ""
"ExUnit.start(exclude: exclude)\n"
"```"
msgstr ""

msgid "Excellent!"
msgstr ""

msgid ""
"Exceptions in the `else` block are not caught. If no pattern inside the `else`"
" block matches, an exception will be raised; this exception is not caught by t"
"he current `try/catch/rescue/after` block."
msgstr ""

msgid ""
"External dependencies are the ones not tied to your business domain. For examp"
"le, if you need an HTTP API for your distributed KV application, you can use t"
"he [Plug](https://github.com/elixir-lang/plug) project as an external dependen"
"cy."
msgstr ""

msgid ""
"F([]).\n"
"%=> \"Empty\""
msgstr ""

msgid ""
"F({a, b}).\n"
"%=> \"All your {a, b} are belong to us\"\n"
"```"
msgstr ""

msgid ""
"Feel free to go ahead and do the changes above and write some unit tests. The "
"idea is that your tests will start an instance of the `KV.Registry` and pass i"
"t as an argument to `run/2` instead of relying on the global `KV.Registry`. Th"
"is has the advantage of keeping our tests asynchronous as there is no shared s"
"tate."
msgstr ""

msgid ""
"File.stream!(\"path/to/some/file\", read_ahead: 100_000) # NEW!\n"
"|> Flow.from_enumerable()\n"
"|> Flow.flat_map(fn line ->\n"
"    for word <- String.split(empty_space), do: {word, 1}\n"
"   end)\n"
"|> Flow.partition_with(storage: :ets) # NEW!\n"
"|> Flow.reduce_by_key(& &1 + &2)\n"
"|> Enum.to_list()\n"
"```"
msgstr ""

msgid ""
"Finally remember you can also get a mini-overview of the runtime info by calli"
"ng `runtime_info/0` directly in IEx."
msgstr ""

msgid ""
"Finally, Elixir has a construct called aliases which we will explore later. Al"
"iases start in upper case and are also atoms:"
msgstr ""

msgid ""
"Finally, Elixir has always given special attention to documentation. You can e"
"asily document functions with the `@doc` attribute:"
msgstr ""

msgid ""
"Finally, Elixir v1.2 introduces the `with` special form that allows developers"
" to match on multiple expressions concisely. Previously, one would write"
msgstr ""

msgid ""
"Finally, ExUnit v1.3 includes the ability to organize tests together in descri"
"be blocks:"
msgstr ""

msgid ""
"Finally, IEx also features a breakpoint system for code debugging when running"
" on Erlang/OTP 20. The following functions have been added to aid debugging:"
msgstr ""

msgid ""
"Finally, Mix will now consolidate protocols by default as we are now able to c"
"onsolidate in parallel and cache the consolidation results, providing the best"
" performance across all environments without affecting compilation times."
msgstr ""

msgid "Finally, attributes can also be read inside functions:"
msgstr ""

msgid ""
"Finally, by popular demand, we have [released some Elixir stickers](http://www"
".stickermule.com/user/1070631438/stickers), which are available with a discoun"
"ted price to celebrate v1.0!"
msgstr ""

msgid "Finally, call the `.toc()` function when the DOM is ready:"
msgstr ""

msgid ""
"Finally, child specifications are now provided as maps (data-structures) inste"
"ad of the previous `Supervisor.Spec.worker/3` and `Supervisor.Spec.supervisor/"
"3` APIs. This behaviour also aligns with how supervisors are configured in Erl"
"ang/OTP 18+. See the updated [`Supervisor`](https://hexdocs.pm/elixir/1.5/Supe"
"rvisor.html) docs for more information, as well as the new `Supervisor.init/2`"
" and `Supervisor.child_spec/2` functions."
msgstr ""

msgid ""
"Finally, copy the `kv` application we have built so far to the `apps` director"
"y in our new umbrella project. The final directory structure should match the "
"structure we mentioned earlier:"
msgstr ""

msgid ""
"Finally, different from the other callbacks, we have defined a \"catch-all\" cla"
"use for `handle_info/2` that discards any unknown message. To understand why, "
"let's move on to the next section."
msgstr ""

msgid ""
"Finally, don't forget [ElixirConf US](https://elixirconf.com/) is coming soon,"
" in Bellevue, WA, September 4-7. Last year my keynote focused on the last 5 ye"
"ars with Elixir. This year we are ready to look into the 5 years ahead."
msgstr ""

msgid ""
"Finally, given `HashDict` starts with a compact representation, it also takes "
"less memory. Compared to the `dict` implementation, an empty `HashDict` takes "
"only 5 words, while `dict` takes 47."
msgstr ""

msgid ""
"Finally, huge thanks to [Bram Verburg](https://twitter.com/voltonez) who has p"
"erformed [extensive benchmarks](https://docs.google.com/spreadsheets/d/1MByRZJ"
"MCnZ1wPiLhBEnSRRSuy1QXp8kr27PIOXO3qqg/edit#gid=0) on the registry to show it s"
"cales linearly with the number of cores by increasing the number of partitions"
"."
msgstr ""

msgid ""
"Finally, if there is a dependency you don't want to include in the application"
" runtime list, you can do so by specifying the `runtime: false` option:"
msgstr ""

msgid ""
"Finally, keep in mind that applications in an umbrella project all share the s"
"ame configurations and dependencies. If two applications in your umbrella need"
" to configure the same dependency in drastically different ways or even use di"
"fferent versions, you have probably outgrown the benefits brought by umbrellas"
". Remember you can break the umbrella and still leverage the benefits behind \""
"mono-repos\"."
msgstr ""

msgid ""
"Finally, keep in mind that variable assignments inside the comprehension, be i"
"t in generators, filters or inside the block, are not reflected outside of the"
" comprehension."
msgstr ""

msgid "Finally, note `cond` considers any value besides `nil` and `false` to be true:"
msgstr ""

msgid ""
"Finally, structs are still in active development and new features, like `@deri"
"ve`, should land in upcoming Elixir releases. For those interested, the [origi"
"nal maps and structs proposal is still availble](https://gist.github.com/josev"
"alim/b30c881df36801611d13)."
msgstr ""

msgid ""
"Finally, the Erlang VM was designed to build systems that run forever, self-he"
"al and scale. Joe Armstrong, one of Erlang's creators, has recently given an e"
"xcellent talk [about the design decisions behind OTP and the VM](http://www.in"
"foq.com/presentations/self-heal-scalable-system)."
msgstr ""

msgid ""
"Finally, the breakpoint functionality added [in Elixir v1.5](https://elixir-la"
"ng.org/blog/2017/07/25/elixir-v1-5-0-released/) has been improved to support p"
"attern matching and guards. For example, to pattern match on a function call w"
"hen the first argument is the atom `:foo`, you may do:"
msgstr ""

msgid ""
"Finally, the stacktrace relates to the failure itself, giving information abou"
"t the test and often the place the failure was generated from within the sourc"
"e files."
msgstr ""

msgid ""
"Finally, we have learned some new things in this chapter, and they could be ap"
"plied to the `:kv_server` application as well. We are going to leave the next "
"steps as an exercise:"
msgstr ""

msgid ""
"Finally, we want to thank the [akka-streams and reactive-streams projects](htt"
"p://reactive-streams.io) which provided us guidance in implementing the demand"
"-driven exchange between stages as well as the [Apache Spark](http://spark.apa"
"che.org/) and [Apache Beam](http://beam.incubator.apache.org/) initiatives tha"
"t inspire the work behind `GenStage.Flow`."
msgstr ""

msgid ""
"Finally, we will continue improving the Standard Library. Although Elixir's go"
"al is to rely on Erlang the most as possible, we also want to provide a small "
"Standard Library which makes better use of Elixir semantics. For the next week"
"s, we will focus on improving the IO and File manipulation modules. New data t"
"ypes may also appear, for example, ranges come to my mind."
msgstr ""

msgid ""
"Finally, you may have observed that each doctest corresponds to a different te"
"st in our suite, which now reports a total of 7 doctests. That is because ExUn"
"it considers the following to define two different doctests:"
msgstr ""

msgid ""
"Find more about the pipe operator [by reading its documentation](https://hexdo"
"cs.pm/elixir/Kernel.html#%7C%3E/2)."
msgstr ""

msgid ""
"Finished in 0.04 seconds (0.04s on load, 0.00s on tests)\n"
"1 tests, 0 failures\n"
"{% endhighlight %}"
msgstr ""

msgid ""
"Finished in 0.05 seconds\n"
"1 doctest, 1 test, 1 failure\n"
"```"
msgstr ""

msgid ""
"Finished in 0.1 seconds (0.1s on load, 0.01s on tests)\n"
"7 tests, 0 failures, 1 skipped\n"
"```"
msgstr ""

msgid ""
"First of all, now is the moment for the community to step in and try GenStage "
"out. If you have used GenEvent in the past, can it be replaced by a GenStage? "
"Similarly, if you were planning to implement an event handling system, give Ge"
"nStage a try."
msgstr ""

msgid ""
"First of all, since we generated this project inside `kv_umbrella/apps`, Mix a"
"utomatically detected the umbrella structure and added four lines to the proje"
"ct definition:"
msgstr ""

msgid ""
"First of all, the autocompletion system is now capable of autocompleting varia"
"bles and user imports:"
msgstr ""

msgid ""
"First of all, we want to avoid moving data between processes as much as possib"
"le. Instead, we want to start multiple processes that perform the same computa"
"tion in parallel. Not only that, if we are requiring developers to place `Stre"
"am.async` manually, it may lead to inefficient and error prone solutions."
msgstr ""

msgid ""
"Flashcards are a great way to highlight knowledge gaps, identify misconception"
"s or false beliefs, and help you memorise key concepts.\n"
"When used in groups or teams, flashcards can help spark interesting discussion"
"s, and help bring people together to learn in a fun way by playing games."
msgstr ""

msgid ""
"Float numbers require a dot followed by at least one digit and also support `e"
"` for scientific notation:"
msgstr ""

msgid "Floats in Elixir are 64-bit double precision."
msgstr ""

msgid ""
"Flow will look at the computations we want to perform and start a series of st"
"ages to execute our code while keeping the amount of data being transfered bet"
"ween processes to a minimum. If you are interested in `GenStage.Flow` and how "
"the computations above are spread across multiple stages, [we have written som"
"e documentation based on the prototypes we have built so far](https://hexdocs."
"pm/gen_stage/Experimental.Flow.html). The code itself is coming in future GenS"
"tage releases. We will also have to consider how the `GenStage.Flow` API mirro"
"rs the functions in `Enum` and `Stream` to make the path from eager to concurr"
"ent clearer."
msgstr ""

msgid ""
"For Elixir, we decided to have a single dictionary implementation that would s"
"cale as needed. It would start as a compact representation for a handful of it"
"ems and expand and rehash accordingly as new items are added or removed, provi"
"ding fast access and modification times on all ranges. We are glad to say our "
"goals were reached and a new `HashDict` implementation ships with Elixir v0.8."
msgstr ""

msgid ""
"For Windows developers, we recommend the precompiled packages. Those on a Unix"
" platform can probably get Erlang installed via one of the many package distri"
"bution tools."
msgstr ""
"Windows をご利用されている開発者にはプリコンパイル済みのパッケージをおすすめします。Unix 系ディストリビューションでは、大抵それぞれに用意された"
"ツールを用いて Erlang をインストールできます。"

msgid ""
"For `call/2` requests, we  implement a `handle_call/3` callback that receives "
"the `request`, the process from which we received the request (`_from`), and t"
"he current server state (`names`). The `handle_call/3` callback returns a tupl"
"e in the format `{:reply, reply, new_state}`. The first element of the tuple, "
"`:reply`,  indicates that server should send a reply back to the client. The s"
"econd element, `reply`, is what will be sent to the client while the third, `n"
"ew_state` is the new server state."
msgstr ""

msgid ""
"For `cast/2` requests, we implement a `handle_cast/2` callback that receives t"
"he `request` and the current server state (`names`). The `handle_cast/2` callb"
"ack returns a tuple in the format `{:noreply, new_state}`. Note that in a real"
" application we would have probably implemented the callback for `:create` wit"
"h a synchronous call instead of an asynchronous cast. We are doing it this way"
" to illustrate how to implement a cast callback."
msgstr ""

msgid ""
"For a complete reference on Elixir syntax, see the [Syntax Reference](https://"
"hexdocs.pm/elixir/1.5/syntax-reference.html). For technical details on Unicode"
" support, see [Unicode Syntax](https://hexdocs.pm/elixir/1.5/unicode-syntax.ht"
"ml)."
msgstr ""

msgid ""
"For an experiment, try reimplementing `KV.Registry.create/2` to use `GenServer"
".call/3` instead, and momentarily disable the application callback. Run the co"
"de above on the console again, and you will see the creation step fails straig"
"ht away."
msgstr ""

msgid ""
"For companies and teams, we recommend developers to run `mix format --check-fo"
"rmatted` on their continuous integration servers, ensuring all current and fut"
"ure code follows the standard."
msgstr ""

msgid ""
"For debugging complex systems, jumping at the code is not enough. It is necess"
"ary to have an understanding of the whole virtual machine, processes, applicat"
"ions, as well as set up tracing mechanisms. Luckily this can be achieved in Er"
"lang with `:observer`. In your application:"
msgstr ""

msgid ""
"For each failure, ExUnit prints a detailed report, containing the test name wi"
"th the test case, the code that failed and the values for the left side and ri"
"ght side (rhs) of the `==` operator."
msgstr ""

msgid ""
"For each number of keys, we have measured and normalized those values against "
"`HashDict` results. This way it is easy to see which implementation takes more"
" or less time compared to Elixir's implementation."
msgstr ""

msgid "For example here's how you can count the total length of strings in a list."
msgstr ""

msgid ""
"For example, [the Ecto library](https://github.com/elixir-lang/ecto) makes use"
" of these features to provide an elegant DSL for writing database queries:"
msgstr ""

msgid ""
"For example, a bitstring generator can be used with the `:into` option in orde"
"r to easily remove all spaces in a string:"
msgstr ""

msgid ""
"For example, if you push the `kv` project to a Git repository, you'll need to "
"list it in your deps code in order to use it:"
msgstr ""

msgid ""
"For example, imagine we want to implement a Validator module which provides a "
"data validation domain-specific language. We could implement it using data str"
"uctures, functions or macros. Let's see what those different DSLs would look l"
"ike:"
msgstr ""

msgid ""
"For example, imagine you have a variable `number` which contains the number yo"
"u want to inject inside a quoted expression."
msgstr ""

msgid ""
"For example, in order to write tests using the ExUnit framework, a developer s"
"hould use the `ExUnit.Case` module:"
msgstr ""

msgid ""
"For example, invoking `mix test --unknown` in earlier Elixir versions would si"
"lently discard the `--unknown` option. Now `mix test` correctly reports such e"
"rrors:"
msgstr ""

msgid ""
"For example, the `IO` module provides streams, that are both `Enumerable` and "
"`Collectable`. You can implement an echo terminal that returns whatever is typ"
"ed into the shell, but in upcase, using comprehensions:"
msgstr ""

msgid "For example, we can map a list of integers into their squared values:"
msgstr ""

msgid ""
"For example, we have used 4 counting functions so far: `byte_size/1` (for the "
"number of bytes in a string), `tuple_size/1` (for tuple size), `length/1` (for"
" list length) and `String.length/1` (for the number of graphemes in a string)."
" We use `byte_size` to get the number of bytes in a string -- a cheap operatio"
"n. Retrieving the number of Unicode characters, on the other hand, uses `Strin"
"g.length`, and may be expensive as it relies on a traversal of the entire stri"
"ng."
msgstr ""

msgid "For instance, we can create a file called `math.exs`:"
msgstr ""

msgid ""
"For last but not least, Elixir ships with a [new HashDict implementation](http"
"s://github.com/elixir-lang/elixir/blob/master/lib/elixir/lib/hash_dict.ex). In"
" Erlang, there are different key-value store implementations and often you nee"
"d to pick which one is the best for you based on the average size of the dicti"
"onary. Generally speaking, [orddicts](http://www.erlang.org/doc/man/orddict.ht"
"ml) are efficient and fast when you want to hold a handful of items, otherwise"
" you should consider [gb_trees](http://www.erlang.org/doc/man/gb_trees.html) u"
"nless you want to hold thousands of items, when then [dict](http://www.erlang."
"org/doc/man/dict.html) becomes your best option. The fact those implementation"
"s do not provide the same API, makes it harder to change your code when you re"
"alize another implementation would be better fit."
msgstr ""

msgid ""
"For more information on structs, check out the [Structs chapter in the getting"
" started guide](/getting-started/structs.html) (you may also want to read the "
"new [Protocols chapter](/getting-started/protocols.html) after it)."
msgstr ""

msgid ""
"For more information, read out the [CHANGELOG](https://github.com/elixir-lang/"
"elixir/blob/v0.7.0/CHANGELOG.md)."
msgstr ""

msgid ""
"For more information, see [`IEx.break!/4`](https://hexdocs.pm/iex/IEx.html#bre"
"ak!/4)."
msgstr ""

msgid "For now, let's move on and explore the world of I/O in Elixir."
msgstr ""

msgid ""
"For now, let's start by running `iex` (or `iex.bat` if you are on Windows) whi"
"ch stands for Interactive Elixir. In interactive mode, we can type any Elixir "
"expression and get its result. Let's warm up with some basic expressions."
msgstr ""

msgid "For now, let's write some tests to guarantee our GenServer works as expected."
msgstr ""

msgid ""
"For now, there is a more important bug we need to fix: what happens if our TCP"
" acceptor crashes? Since there is no supervision, the server dies and we won't"
" be able to serve more requests, because it won't be restarted. That's why we "
"must move our server to a supervision tree."
msgstr ""

msgid ""
"For now, we don't have a mechanism to run tests, but we know that a function n"
"amed \"test hello\" was defined behind the scenes. When we invoke it, it should "
"fail:"
msgstr ""

msgid ""
"For our routing layer, we are going to use tasks, but feel free to explore the"
" other alternatives too."
msgstr ""

msgid ""
"For reference information about operators (and ordering), check the [reference"
" page on operators](https://hexdocs.pm/elixir/operators.html)."
msgstr ""

msgid ""
"For the cases where you do expect a file to exist (and the lack of that file i"
"s truly an *error*) you may use `File.read!/1`:"
msgstr ""

msgid ""
"For the word counting problem with a fixed data, early experiments show a line"
"ar increase in performance with a fixed overhead of 20%. In other words, a dat"
"aset that takes 60s with a single core, takes 36s on a machine with 2 cores an"
"d 18s in one with 4 cores. All of those gains by simply moving your computatio"
"ns from streams to Flow. We plan to benchmark on machines with over 40 cores s"
"oon."
msgstr ""

msgid ""
"For this reason, Mix supports \"umbrella projects\". Umbrella projects are used "
"to build applications that run together in a single repository. That is exactl"
"y the style we are going to explore in the next sections."
msgstr ""

msgid ""
"For this reason, we have opted for a small language core. For example, while s"
"ome languages have `if`, `case`, `try` and so on as language keywords, each wi"
"th its own rules in the parser, **in Elixir they are just macros**. This allow"
"s us to implement most of Elixir in Elixir and also allows developers to exten"
"d the language using the same tools we used to build the language itself, ofte"
"n extending the language to the specific domains they are working on."
msgstr ""

msgid ""
"For those familiar with Erlang's OTP, this is similar to the structure used by"
" OTP when releasing your software. So this new structure makes our software on"
"e step close to production and guarantee it is designed correctly since day 1."
msgstr ""

msgid ""
"For those of you who use the development version of Elixir these changes are\n"
"already available. For the exact differences in code you can look at the\n"
"[relevant pull request](https://github.com/elixir-lang/elixir/pull/1922)."
msgstr ""

msgid ""
"For those who enjoy breakpoints but are rather interested in a visual debugger"
", Erlang/OTP ships with a graphical debugger conveniently named `:debugger`. L"
"et's define a module:"
msgstr ""

msgid ""
"From Elixir v1.2, it is possible to alias, import or require multiple modules "
"at once. This is particularly useful once we start nesting modules, which is v"
"ery common when building Elixir applications. For example, imagine you have an"
" application where all modules are nested under `MyApp`, you can alias the mod"
"ules `MyApp.Foo`, `MyApp.Bar` and `MyApp.Baz` at once as follows:"
msgstr ""

msgid ""
"From Elixir v1.2, protocol consolidation happens automatically for all project"
"s. We will build our own project in the ***Mix and OTP guide***."
msgstr ""

msgid ""
"From inside `bar@computer-name`, we can now spawn a task directly on the other"
" node via the supervisor:"
msgstr ""

msgid ""
"From our quick exploration, we could conclude that we should use `Node.spawn_l"
"ink/2` to spawn processes on a remote node every time we need to do a distribu"
"ted computation. However, we have learned throughout this guide that spawning "
"processes outside of supervision trees should be avoided if possible, so we ne"
"ed to look for other options."
msgstr ""

msgid ""
"From the printed information, we can see far fewer files are generated. The ge"
"nerated `mix.exs` file is different too. Let's take a look (comments have been"
" removed):"
msgstr ""

msgid ""
"From this list, it's not easy to see why the test is failing (well, we know wh"
"y because we wrote a doctored test that's supposed to fail). When running the "
"property though, the failure that will be reported will look like this:"
msgstr ""

msgid ""
"Function declarations also support guards and multiple clauses. If a function "
"has several clauses, Elixir will try each clause until it finds one that match"
"es. Here is an implementation of a function that checks if the given number is"
" zero or not:"
msgstr ""

msgid ""
"Functions are \"first class citizens\" in Elixir meaning they can be passed as a"
"rguments to other functions in the same way as integers and strings. In the ex"
"ample, we have passed the function in the variable `add` to the `is_function/1"
"` function which correctly returned `true`. We can also check the arity of the"
" function by calling `is_function/2`."
msgstr ""

msgid ""
"Functions in Elixir are identified by both their name and their arity. The ari"
"ty of a function describes the number of arguments that the function takes. Fr"
"om this point on we will use both the function name and its arity to describe "
"functions throughout the documentation. `round/1` identifies the function whic"
"h is named `round` and takes 1 argument, whereas `round/2` identifies a differ"
"ent (nonexistent) function with the same name but with an arity of `2`."
msgstr ""

msgid ""
"Furthermore, EEP 48 introduces the ability to annotate documentation with meta"
"data, which we have made possible to leverage from Elixir:"
msgstr ""

msgid ""
"Furthermore, every struct has a `__struct__` field which contains the struct n"
"ame:"
msgstr ""

msgid ""
"Furthermore, so far Mix did not allow developers to extend existing tasks. For"
" example, imagine you want to perform some extra work when `mix clean` is invo"
"ked. Up to this release, it was not possible."
msgstr ""

msgid "Furthermore, they are composable because we can pipe many stream operations:"
msgstr ""

msgid ""
"Furthermore, variables can also be used on pattern matching along-side the pin"
" operator:"
msgstr ""

msgid ""
"Furthermore, you can see that ExUnit prints a dot for each successful test and"
" automatically randomizes tests too. Let's make the test fail on purpose and s"
"ee what happens."
msgstr ""

msgid ""
"GET shopping milk\n"
"1\n"
"OK"
msgstr ""

msgid ""
"GET shopping milk\n"
"1\n"
"OK\n"
"```"
msgstr ""

msgid ""
"GenStage is a new Elixir behaviour for exchanging events with back-pressure be"
"tween Elixir processes. Developers who use GenStage only need to worry about h"
"ow the data is produced, manipulated and consumed. The act of dispatching the "
"data and providing back-pressure is completely abstracted away from the develo"
"pers."
msgstr ""

msgid ""
"GenStage solves those problems by having a producer as the event manager. The "
"producer itself should be configured to use [`GenStage.BroadcastDispatcher`](h"
"ttps://hexdocs.pm/gen_stage/Experimental.GenStage.BroadcastDispatcher.html) as"
" its dispatcher. The broadcast dispatcher will guarantee events are dispatched"
" to all consumers in a way that does not exceed the demand of any of the consu"
"mers. This allows us to leverage concurrency and having the \"event manager\" as"
" a producer gives us much more flexibility in terms of buffering and reacting "
"to failures."
msgstr ""

msgid ""
"GenStage.sync_subscribe(c, to: b)\n"
"GenStage.sync_subscribe(b, to: a)"
msgstr ""

msgid ""
"GenStage.sync_subscribe(c1, to: b)\n"
"GenStage.sync_subscribe(c2, to: b)\n"
"GenStage.sync_subscribe(c3, to: b)\n"
"GenStage.sync_subscribe(c4, to: b)\n"
"GenStage.sync_subscribe(b, to: a)"
msgstr ""

msgid "Generate EPUB documents for Elixir guides:"
msgstr ""

msgid ""
"Generator expressions also support pattern matching on their left-hand side; a"
"ll non-matching patterns are *ignored*. Imagine that, instead of a range, we h"
"ave a keyword list where the key is the atom `:good` or `:bad` and we only wan"
"t to compute the square of the `:good` values:"
msgstr ""

msgid "Getting the head or the tail of an empty list throws an error:"
msgstr ""

msgid ""
"Give Elixir a try! You can start with our [getting started guide](/getting-sta"
"rted/introduction.html), or [check this 30 minute video from PragProg](https:/"
"/www.youtube.com/watch?v=a-off4Vznjs&feature=youtu.be) or buy the beta version"
" of [Programming Elixir](https://pragprog.com/book/elixir/programming-elixir)."
msgstr ""

msgid ""
"Give Elixir a try! You can start with our [getting started guide](/getting-sta"
"rted/introduction.html), or check out our sidebar for other learning resources"
"."
msgstr ""

msgid ""
"Given my previous background in Ruby, it is natural that some of the construct"
"s added were borrowed from Ruby. However, those additions were a by-product, a"
"nd not a language goal."
msgstr ""

msgid "Given three vertices, find the shortest path from the first to the last."
msgstr ""

msgid "Giving an argument that does not match any of the clauses raises an error."
msgstr ""

msgid ""
"Guard expressions provide a concise way to define functions that accept a limi"
"ted set of values based on some condition."
msgstr ""

msgid "Happy coding!"
msgstr ""

msgid "Hello everyone!"
msgstr ""

msgid "Hello folks!"
msgstr ""

msgid ""
"HelloModule.Utils.priv\n"
"#=> ** (UndefinedFunctionError) undefined function: HelloModule.Utils.priv/0\n"
"```"
msgstr ""

msgid ""
"HelloModule.Utils.util\n"
"#=> \"Utilize\""
msgstr ""

msgid ""
"HelloModule.dummy\n"
"#=> :ok"
msgstr ""

msgid "Here is a quick example from [Plug](https://github.com/elixir-lang/plug):"
msgstr ""

msgid ""
"Here is an example of how someone would implement `unless`, which is a keyword"
" in many languages, in Elixir:"
msgstr ""

msgid "Here is how we implement the `Enumerable` protocol for lists:"
msgstr ""

msgid "Here is the full echo server implementation:"
msgstr ""

msgid "Here is the updated code for the `TestCase` module:"
msgstr ""

msgid ""
"Here we create a module named ``hello_module``. In it we define three function"
"s, the first two are made available for other modules to call via the ``export"
"`` directive at the top. It contains a list of functions, each of which is wri"
"tten in the format ``<function name>/<arity>``. Arity stands for the number of"
" arguments."
msgstr ""

msgid ""
"Here we have used recursion to traverse a list, doubling each element and retu"
"rning a new list. The process of taking a list and _mapping_ over it is known "
"as a _map algorithm_."
msgstr ""

msgid "Here's the gist:"
msgstr ""

msgid ""
"Hot out of the oven! We just released Elixir v0.7.2 with a number of delicious"
" improvements."
msgstr ""

msgid "How can this line fail if we just created the bucket in the previous line?"
msgstr ""

msgid ""
"How do we know this is working? After all, we are creating the bucket and then"
" looking it up; of course it should work, right? Well, remember that `KV.Regis"
"try.create/2` uses `GenServer.cast/2`, and therefore will return `:ok` regardl"
"ess of whether the message finds its target or not. At that point, we don't kn"
"ow whether the supervisor and the server are up, and if the bucket was created"
". However, `KV.Registry.lookup/2` uses `GenServer.call/3`, and will block and "
"wait for a response from the server. We do get a positive response, so we know"
" all is up and running."
msgstr ""

msgid ""
"However notice that in Elixir you don't need to create a file only to create a"
" new module, Elixir modules can be defined directly in the shell:"
msgstr ""

msgid "However, a quoted variable is represented as:"
msgstr ""

msgid ""
"However, after our project is compiled using a tool like Mix, we know all modu"
"les that have been defined, including protocols and their implementations. Thi"
"s way, the protocol can be consolidated into a very simple and fast dispatch m"
"odule."
msgstr ""

msgid ""
"However, if you expect the file to be there, the bang variation is more useful"
" as it raises a meaningful error message. Avoid writing:"
msgstr ""

msgid ""
"However, if you push every application as a separate project to a Git reposito"
"ry, your projects may become very hard to maintain as you will spend a lot of "
"time managing those Git repositories rather than writing your code."
msgstr ""

msgid ""
"However, in many situations, we may want to enumerate the keys and values in a"
" struct. Before this release, it would require us to manually implement the `E"
"numerable` protocol for every struct."
msgstr ""

msgid ""
"However, instead of adding more code to the `kv` application, we are going to "
"build the TCP server as another application that is a client of the `kv` appli"
"cation. Since the whole runtime and Elixir ecosystem are geared towards applic"
"ations, it makes sense to break our projects into smaller applications that wo"
"rk together rather than building a big, monolithic app."
msgstr ""

msgid ""
"However, naming dynamic processes with atoms is a terrible idea! If we use ato"
"ms, we would need to convert the bucket name (often received from an external "
"client) to atoms, and **we should never convert user input to atoms**. This is"
" because atoms are not garbage collected. Once an atom is created, it is never"
" reclaimed. Generating atoms from user input would mean the user can inject en"
"ough different names to exhaust our system memory!"
msgstr ""

msgid ""
"However, records came with their own issues. First of all, since records were "
"made of data (the underlying tuple) and a module (functions/behaviour), they w"
"ere frequently misused as an attempt to bundle data and behaviour together in "
"Elixir, for example:"
msgstr ""

msgid ""
"However, should we be fine with the implementation for `Any`, in order to use "
"such implementation we would need to tell our struct to explicitly derive the "
"`Size` protocol:"
msgstr ""

msgid ""
"However, since `KV.Registry.create/2` is a cast operation, the command will re"
"turn before we actually write to the table! In other words, this is happening:"
msgstr ""

msgid ""
"However, since structs are just maps, they work with the functions from the `M"
"ap` module:"
msgstr ""

msgid ""
"However, sometimes the children of a supervisor are not known upfront and are "
"rather started dynamically. For example, if you are building a web server, you"
" have each request being handled by a separate supervised process. Those cases"
" were handled in the Supervisor module under a special strategy called `:simpl"
"e_one_for_one`."
msgstr ""

msgid ""
"However, sometimes we need to write assertions such as `assert some_function(e"
"xpr1, var2)`. When such assertion fails, we usually have to re-run the tests, "
"now debugging or printing the values of `expr1` and `var2`. In Elixir v1.7, wh"
"en a \"bare\" assertion fails, we will print the value of each argument individu"
"ally. For a simple example such as `assert some_vars(1 + 2, 3 + 4)`, we get th"
"is report:"
msgstr ""

msgid ""
"However, strings are just part of the story. If a string is a binary, and we h"
"ave used the `is_binary/1` function, Elixir must have an underlying type empow"
"ering strings. And it does! Let's talk about binaries."
msgstr ""

msgid ""
"However, the snippet above will spawn and run concurrently as many tasks as th"
"ere are items in the collection. While this may be fine in many occasions, inc"
"luding small collections, sometimes it is necessary to restrict amount of task"
"s running concurrently, specially when shared resources are involved."
msgstr ""

msgid ""
"However, there is still one concern left, which are the restart strategies. Ta"
"sks, by default, have the `:restart` value set to `:temporary`, which means th"
"ey are not restarted. This is an excellent default for the connections started"
" via the `Task.Supervisor`, as it makes no sense to restart a failed connectio"
"n, but it is a bad choice for the acceptor. If the acceptor crashes, we want t"
"o bring the acceptor up and running again."
msgstr ""

msgid ""
"However, using lists in IO operations requires some attention. A list may repr"
"esent either a bunch of bytes or a bunch of characters and which one to use de"
"pends on the encoding of the IO device. If the file is opened without encoding"
", the file is expected to be in raw mode, and the functions in the `IO` module"
" starting with `bin*` must be used. Those functions expect an `iodata` as an a"
"rgument; i.e., they expect a list of integers representing bytes and binaries "
"to be given."
msgstr ""

msgid "However, we are far from done!"
msgstr ""

msgid ""
"However, we can spawn a new process on `foo@computer-name` from `bar@computer-"
"name`! Let's give it a try (where `@computer-name` is the one you see locally)"
":"
msgstr ""

msgid ""
"However, when the supervisor restarts the new bucket, the registry does not kn"
"ow about it. So we will have an empty bucket in the supervisor that nobody can"
" access! To solve this, we want to say that buckets are actually temporary. If"
" they crash, regardless of the reason, they should not be restarted."
msgstr ""

msgid ""
"HygieneTest.go\n"
"# => 1\n"
"```"
msgstr ""

msgid ""
"HygieneTest.go\n"
"# => 13\n"
"```"
msgstr ""

msgid ""
"I have started working in Elixir at the beginning of 2011. Around April that y"
"ear, I had released the version v0.3.0 that was stable enough for me to start "
"using in my own projects. However, after using it in a couple projects quickly"
" reviewed that I was not happy with some of the design decisions taken early o"
"n."
msgstr ""

msgid ""
"IEx also got its share of improvements. The new code formatter allows us to pr"
"etty print code snippets, types and specifications, improving the overall expe"
"rience when exploring code through the terminal."
msgstr ""

msgid ""
"IEx also got new functions, such as `exports/1`, for listing all functions and"
" macros in a module, and the new `runtime_info/0`:"
msgstr ""

msgid "IEx got many enhancements to the developer experience."
msgstr ""

msgid ""
"IO.puts \"Running MyPlug with Cowboy on http://localhost:4000\"\n"
"Plug.Adapters.Cowboy.http MyPlug, []\n"
"```"
msgstr ""

msgid ""
"IO.puts Concat.join(\"Hello\", \"world\")      #=> Hello world\n"
"IO.puts Concat.join(\"Hello\", \"world\", \"_\") #=> Hello_world\n"
"IO.puts Concat.join(\"Hello\")               #=> Hello\n"
"```"
msgstr ""

msgid ""
"IO.puts Concat.join(\"Hello\", \"world\")      #=> Hello world\n"
"IO.puts Concat.join(\"Hello\", \"world\", \"_\") #=> Hello_world\n"
"```"
msgstr ""

msgid ""
"IO.puts Math.sum(1, 2)\n"
"```"
msgstr ""

msgid ""
"IO.puts Math.sum(1, 2)    #=> 3\n"
"IO.puts Math.do_sum(1, 2) #=> ** (UndefinedFunctionError)\n"
"```"
msgstr ""

msgid ""
"IO.puts Math.sum_list([1, 2, 3], 0) #=> 6\n"
"```"
msgstr ""

msgid ""
"IO.puts Math.zero?(0)         #=> true\n"
"IO.puts Math.zero?(1)         #=> false\n"
"IO.puts Math.zero?([1, 2, 3]) #=> ** (FunctionClauseError)\n"
"IO.puts Math.zero?(0.0)       #=> ** (FunctionClauseError)\n"
"```"
msgstr ""

msgid "If a byte has 8 bits, what happens if we pass a size of 1 bit?"
msgstr ""

msgid ""
"If a function with default values has multiple clauses, it is required to crea"
"te a function head (without an actual body) for declaring defaults:"
msgstr ""

msgid ""
"If a module adopting a given behaviour doesn't implement one of the callbacks "
"required by that behaviour, a compile-time warning will be generated."
msgstr ""

msgid ""
"If a variable is mentioned more than once in a pattern, all references should "
"bind to the same pattern:"
msgstr ""

msgid ""
"If an `else` block is present, it will match on the results of the `try` block"
" whenever the `try` block finishes without a throw or an error."
msgstr ""

msgid ""
"If desired, you could come up with your own semantics for the size of your str"
"uct. Not only that, you could use structs to build more robust data types, lik"
"e queues, and implement all relevant protocols, such as `Enumerable` and possi"
"bly `Size`, for this data type."
msgstr ""

msgid ""
"If it is necessary to configure any of the children, such can be done by passi"
"ng a tuple instead of an atom:"
msgstr ""

msgid "If necessary, replace \"stretch\" with the name of your Raspbian release."
msgstr "以下は Stretch の場合ですが、必要であれば \"stretch\" の部分をあなたの Raspbian に置き換えてください。"

msgid "If none of the clauses match, an error is raised:"
msgstr ""

msgid ""
"If none of the conditions return true, an error (`CondClauseError`) is raised."
" For this reason, it may be necessary to add a final condition, equal to `true"
"`, which will always match:"
msgstr ""

msgid ""
"If the condition given to `if/2` returns `false` or `nil`, the body given betw"
"een `do/end` is not executed and instead it returns `nil`. The opposite happen"
"s with `unless/2`."
msgstr ""

msgid ""
"If the keys are all atoms, Elixir allows developers to use `key: 0` for defini"
"ng the map as well as using `.key` for accessing fields:"
msgstr ""

msgid ""
"If the matching entry points to the node evaluating the request, then we've fi"
"nished routing, and this node will perform the requested operation. If the mat"
"ching entry points to a different node, we'll pass the request to this node, w"
"hich will look at its own routing table (which may be different from the one i"
"n the first node) and act accordingly. If no entry matches, an error will be r"
"aised."
msgstr ""

msgid ""
"If the path given to `File.read/1` exists, it returns a tuple with the atom `:"
"ok` as the first element and the file contents as the second. Otherwise, it re"
"turns a tuple with `:error` and the error description."
msgstr ""

msgid ""
"If the repository is private though, you may need to specify the private URL `"
"git@github.com:YOUR_ACCOUNT/kv.git`. In any case, Mix will be able to fetch it"
" for you as long as you have the proper credentials."
msgstr ""

msgid ""
"If the tests pass, you are ready to go. Otherwise, feel free to open an issue "
"[in the issues tracker on Github](https://github.com/elixir-lang/elixir)."
msgstr ""
"問題なければいいのですが、もし何か気づいたことがありましたら、いつでも気軽に Issue をください！\n"
"[in the issues tracker on Github](https://github.com/elixir-lang/elixir)"

msgid ""
"If the user signs out from one device, we can delete the code from that partic"
"ular device:"
msgstr ""

msgid ""
"If there is a need to stop a `GenServer` as part of the application logic, one"
" can use the `GenServer.stop/1` function:"
msgstr ""

msgid ""
"If there is no message in the mailbox matching any of the patterns, the curren"
"t process will wait until a matching message arrives. A timeout can also be sp"
"ecified:"
msgstr ""

msgid ""
"If we save the code above in a file named \"concat.ex\" and compile it, Elixir w"
"ill emit the following warning:"
msgstr ""

msgid ""
"If we start our server, we can now send commands to it. For now, we will get t"
"wo different responses: \"OK\" when the command is known and \"UNKNOWN COMMAND\" o"
"therwise:"
msgstr ""

msgid ""
"If you are familiar with Docker you can use the official Docker image to get s"
"tarted quickly with Elixir."
msgstr "もしあなたが Docker に親しみ慣れているのなら、公式 Docker イメージを使えばとても簡単です。"

msgid ""
"If you are interested in the specific details for this release, [please check "
"our CHANGELOG](https://github.com/elixir-lang/elixir/blob/v0.15.0/CHANGELOG.md"
"). In this post, we will focus on three new features in this release: Logger, "
"Mix aliases, the fresh Elixir Web Installer for Windows, and share some exciti"
"ng news at the end!"
msgstr ""

msgid ""
"If you are looking for a distributed key-value store to use in production, you"
" should definitely look into [Riak](http://basho.com/products/riak-kv/), which"
" also runs in the Erlang <abbr title=\"Virtual Machine\">VM</abbr>. In Riak, the"
" buckets are replicated, to avoid data loss, and instead of a router, they use"
" [consistent hashing](https://en.wikipedia.org/wiki/Consistent_hashing) to map"
" a bucket to a node. A consistent hashing algorithm helps reduce the amount of"
" data that needs to be migrated when new nodes to store buckets are added to y"
"our infrastructure."
msgstr ""

msgid ""
"If you are new to Elixir, [it's easy to get started with](/getting-started/int"
"roduction.html)!"
msgstr ""

msgid ""
"If you are not using rebar, the easiest approach to use Elixir in your existin"
"g Erlang software is to install Elixir using one of the different ways specifi"
"ed in the [Getting Started guide](/getting-started/introduction.html) and add "
"the `lib` directory in your checkout to `ERL_LIBS`."
msgstr ""

msgid ""
"If you are planning to write your first library for other developers to use, d"
"on't forget to read our [Library Guidelines](https://hexdocs.pm/elixir/library"
"-guidelines.html)."
msgstr ""

msgid ""
"If you are using rebar, you should be able to include Elixir git repository as"
" a dependency:"
msgstr ""

msgid ""
"If you don't care about any of these, you can go straight to our [Getting Star"
"ted guide](/getting-started/introduction.html). If you do, keep on reading!"
msgstr ""

msgid "If you don't have any use for the error, you don't have to provide it:"
msgstr ""

msgid ""
"If you don't specify a default key value when defining a struct, `nil` will be"
" assumed:"
msgstr ""

msgid "If you don't want this feature, add this setting:"
msgstr ""

msgid ""
"If you find yourself in a position where you want to use different configurati"
"ons in each application for the same dependency or use different dependency ve"
"rsions, then it is likely your codebase has grown beyond what umbrellas can pr"
"ovide."
msgstr ""

msgid ""
"If you have an internal dependency, Mix supports two methods to work with them"
": Git repositories or umbrella projects."
msgstr ""

msgid ""
"If you have another computer on the same network with both Erlang and Elixir i"
"nstalled, you can start another shell on it. If you don't, you can start anoth"
"er IEx session in another terminal. In either case, give it the short name of "
"`bar`:"
msgstr ""

msgid ""
"If you have skipped the Getting Started guide or read it long ago, be sure to "
"re-read the [Processes](/getting-started/processes.html) chapter. We will use "
"it as a starting point."
msgstr ""

msgid ""
"If you have to, you can think of behaviours like interfaces in object oriented"
" languages like Java: a set of function signatures that a module has to implem"
"ent."
msgstr ""

msgid ""
"If you haven't yet installed Elixir, visit our [installation page](/install.ht"
"ml). Once you are done, you can run `elixir --version` to get the current Elix"
"ir version."
msgstr ""

msgid ""
"If you need to programmatically fetch the list of Elixir precompiled packages "
"alongside their checksums, access [https://elixir-lang.org/elixir.csv](https:/"
"/elixir-lang.org/elixir.csv)."
msgstr ""
"プリコンパイル済みパッケージのリストが必要でしたら、こちらからどうぞ。[https://elixir-lang.org/elixir.csv](https:"
"//elixir-lang.org/elixir.csv)."

msgid ""
"If you run [gulp] without any option by default you will lint all JavaScript\n"
"files using [ESLint] and then the `build` task."
msgstr ""

msgid ""
"If you use rdiscount, enable the following option in order to generate the TOC"
":\n"
"```yaml\n"
"markdown: rdiscount\n"
"rdiscount:\n"
"    extensions:\n"
"      - generate_toc\n"
"```"
msgstr ""

msgid ""
"If you use redcarpet, you need to have the option `with_toc_data` in order to "
"add HTML anchors to each header:\n"
"```yaml\n"
"markdown: redcarpet\n"
"redcarpet:\n"
"    extensions: [with_toc_data]\n"
"```"
msgstr ""

msgid ""
"If you want to capture a function from a module, you can do `&Module.function("
")`:"
msgstr ""

msgid ""
"If you want to give Elixir and the Web Installer a try, you can [download the "
"current version here](https://repo.hex.pm/elixir-websetup.exe). And, if [Choco"
"latey](https://chocolatey.org/) is your thing, remember you can also install E"
"lixir on Windows by running `cinst elixir`."
msgstr ""

msgid ""
"If you want to hear more about Elixir at a conference or an event, please let "
"us know. Thank you and don't forget to [give Elixir a try](/getting-started/in"
"troduction.html)!"
msgstr ""

msgid ""
"If you want to keep a custom type private, you can use the `@typep` directive "
"instead of `@type`."
msgstr ""

msgid ""
"If you want to pattern match against an existing variable, you need to use the"
" `^` operator:"
msgstr ""

msgid ""
"If you're new to Elixir, you'll get step-by-step guidance in an engaging forma"
"t you won't find anywhere else. If you have experience with Elixir, you'll gai"
"n a deeper understanding of things you've been taking for granted and fill in "
"any knowledge gaps."
msgstr ""

msgid ""
"If your distribution contains an old Elixir/Erlang version, see the sections b"
"elow for installing Elixir/Erlang from version managers or from source."
msgstr ""
"以前に一度 Elixir/Erlang をインストールしたことがあるのでしたら、 \"Compiling with version managers\" や \""
" Compiling form source (Unix and MinGW) \" を参照してください。"

msgid ""
"If, later, the `Bar` module is moved outside the `Foo` module definition, it m"
"ust be referenced by its full name (`Foo.Bar`) or an alias must be set using t"
"he `alias` directive discussed above."
msgstr ""

msgid ""
"Im_a_var.\n"
"X = 10.\n"
"```"
msgstr ""

msgid ""
"Imagine a module uses a specialized list implemented in `Math.List`. The `alia"
"s` directive allows referring to `Math.List` just as `List` within the module "
"definition:"
msgstr ""

msgid ""
"Imagine that we have two files, `a.ex` and `b.ex`, with the following contents"
":"
msgstr ""

msgid "Imagine you have the following structure:"
msgstr ""

msgid ""
"Imagine you manually implemented `unless` as a macro, that does the opposite o"
"f `if`:"
msgstr ""

msgid ""
"Implementing event handlers is as straightforward as writing any other consume"
"r. We could in fact use the `C` consumer implemented earlier. However, given e"
"vent managers are often defined before the handlers, it is recommended for han"
"dlers to subscribe to managers when they start:"
msgstr ""

msgid ""
"In \"Basic types\", we learned about strings and used the `is_binary/1` function"
" for checks:"
msgstr ""

msgid ""
"In Elixir v0.13, `mix deps.get` only fetches dependencies and it does so accro"
"ss all environments (unless an `--only` flag is specified). To support this ne"
"w behaviour, dependencies now support the `:only` option:"
msgstr ""

msgid "In Elixir v1.5, one might do:"
msgstr ""

msgid "In Elixir v1.7, this can be written as:"
msgstr ""

msgid ""
"In Elixir we group several functions into modules. We've already used many dif"
"ferent modules in the previous chapters such as [the `String` module](https://"
"hexdocs.pm/elixir/String.html):"
msgstr ""

msgid ""
"In Elixir, `Integer.is_odd/1` is defined as a macro so that it can be used as "
"a guard. This means that, in order to invoke `Integer.is_odd/1`, we need to fi"
"rst require the `Integer` module."
msgstr ""

msgid ""
"In Elixir, a value can be thrown and later be caught. `throw` and `catch` are "
"reserved for situations where it is not possible to retrieve a value unless by"
" using `throw` and `catch`."
msgstr ""

msgid ""
"In Elixir, all code runs inside processes. Processes are isolated from each ot"
"her, run concurrent to one another and communicate via message passing. Proces"
"ses are not only the basis for concurrency in Elixir, but they also provide th"
"e means for building distributed and fault-tolerant programs."
msgstr ""

msgid ""
"In Elixir, an application denotes a component implementing some specific funct"
"ionality, that can be started and stopped as a unit, and which can be re-used "
"in other systems as well."
msgstr ""

msgid ""
"In Elixir, however, `assert` is a macro and as such it can look into the code "
"being asserted and infer that a comparison is being made. This code is then tr"
"ansformed to provide a detailed error report when the test runs:"
msgstr ""

msgid ""
"In Elixir, it is also possible to have multiple modules in one file, as well a"
"s nested modules:"
msgstr ""

msgid ""
"In Elixir, it is common to loop over an Enumerable, often filtering out some r"
"esults and mapping values into another list. Comprehensions are syntactic suga"
"r for such constructs: they group those common tasks into the `for` special fo"
"rm."
msgstr ""

msgid ""
"In Elixir, the `=` operator is actually called *the match operator*. Let's see"
" why:"
msgstr ""

msgid ""
"In Elixir, the word **string** means a UTF-8 binary and there is a `String` mo"
"dule that works on such data. Elixir also expects your source files to be UTF-"
"8 encoded. On the other hand, **string** in Erlang refers to char lists and th"
"ere is a `:string` module, that's not UTF-8 aware and works mostly with char l"
"ists."
msgstr ""

msgid ""
"In Elixir, we avoid using `try/rescue` because **we don't use errors for contr"
"ol flow**. We take errors literally: they are reserved for unexpected and/or e"
"xceptional situations. In case you actually need flow control constructs, *thr"
"ows* should be used. That's what we are going to see next."
msgstr ""

msgid "In Elixir, we can compare two different data types:"
msgstr ""

msgid "In Elixir, we could write this code as follows:"
msgstr ""

msgid ""
"In Elixir, we have two idioms for checking how many items there are in a data "
"structure: `length` and `size`. `length` means the information must be compute"
"d. For example, `length(list)` needs to traverse the whole list to calculate i"
"ts length. On the other hand, `tuple_size(tuple)` and `byte_size(binary)` do n"
"ot depend on the tuple and binary size as the size information is pre-computed"
" in the data structure."
msgstr ""

msgid ""
"In Elixir, we have two main associative data structures: keyword lists and map"
"s. It's time to learn more about them!"
msgstr ""

msgid "In Elixir, you can define a binary using `<<>>`:"
msgstr ""

msgid ""
"In Elixir, your code runs in many processes that talk to each other and the El"
"ixir shell is no different. `IEx.pry` allows another process to take over the "
"shell, allowing the developer to inspect the binding and halt the execution of"
" the process being \"pried\" (i.e. the one that invoked `IEx.pry`). We called th"
"is feature `pry` as a gentle reminder that you can only inspect existing infor"
"mation, you cannot change the binding over a pried process. For more informati"
"on, check the docs for [`IEx.pry/1`](https://hexdocs.pm/iex/IEx.html#pry/1)."
msgstr ""

msgid ""
"In Erlang, an `atom` is any identifier that starts with a lowercase letter, e."
"g. `ok`, `tuple`, `donut`. Identifiers that start with a capital letter are al"
"ways treated as variable names. Elixir, on the other hand, uses the former for"
" naming variables, and the latter are treated as atom aliases. Atoms in Elixir"
" always start with a colon `:`."
msgstr ""

msgid "In [chapter 7](/getting-started/keywords-and-maps.html) we learned about maps:"
msgstr ""

msgid ""
"In a nutshell, Streams are composable, lazy enumerables. Streams are also usef"
"ul when doing IO or expressing infinite computations. We can retrieve a file a"
"s a stream:"
msgstr ""

msgid "In a nutshell, here is what new:"
msgstr ""

msgid ""
"In addition to the Elixir file extension `.ex`, Elixir also supports `.exs` fi"
"les for scripting. Elixir treats both files exactly the same way, the only dif"
"ference is in intention. `.ex` files are meant to be compiled while `.exs` fil"
"es are used for scripting. When executed, both extensions compile and load the"
"ir modules into memory, although only `.ex` files write their bytecode to disk"
" in the format of `.beam` files."
msgstr ""

msgid ""
"In addition to those, a double quote inside a double-quoted string needs to be"
" escaped as `\\\"`, and, analogously, a single quote inside a single-quoted char"
" list needs to be escaped as `\\'`. Nevertheless, it is better style to change "
"delimiters as seen above than to escape them."
msgstr ""

msgid ""
"In addition, Elixir allows for default values for arguments, whereas Erlang do"
"es not."
msgstr ""

msgid ""
"In all of the examples above, we used binaries when writing to files. In the c"
"hapter [\"Binaries, strings and char lists\"](/getting-started/binaries-strings-"
"and-char-lists.html), we mentioned how strings are made of bytes while char li"
"sts are lists with Unicode codepoints."
msgstr ""

msgid ""
"In any case, let's see how Mix starts the application for us. Let's start a pr"
"oject console with `iex -S mix` and try:"
msgstr ""

msgid ""
"In any case, the previous behaviour can be brought back with the `--verbose` f"
"lag and the compilation threshold for files that are taking long can be set vi"
"a the `--long-compilation-threshold` option."
msgstr ""

msgid ""
"In both Erlang and Elixir, a function is not identified only by its name, but "
"by its name and arity. In both examples below, we are defining four different "
"functions (all named `sum`, but with different arity):"
msgstr ""

msgid ""
"In case a file is taking too long to compile, Mix will announce such, for exam"
"ple:"
msgstr ""

msgid "In case the test crashes, you will see a report as follows:"
msgstr ""

msgid ""
"In case you are feeling a bit more adventurous, you can also compile from mast"
"er:"
msgstr "好奇心旺盛な方なら master ブランチから開発途中の Elixir もコンパイルしてお試しいただけます！"

msgid ""
"In case you missed any of those conferences, [the talk I presented at Øredev i"
"s available and you can watch it now](https://vimeo.com/53221562). The slides "
"are also available below."
msgstr ""

msgid ""
"In contrast to keyword lists, maps are very useful with pattern matching. When"
" a map is used in a pattern, it will always match on a subset of the given val"
"ue:"
msgstr ""

msgid ""
"In fact if you compile any Elixir code, including the Elixir source, you will "
"see all cores on your machine being used out of the box. With [technologies li"
"ke Parallella](http://www.parallella.org/board/) becoming more accessible and "
"affordable, it is hard to ignore the power you can get out of the Erlang VM."
msgstr ""

msgid "In fact, let's open up `lib/kv_server/application.ex`:"
msgstr ""

msgid "In general, the tuples above are structured according to the following format:"
msgstr ""

msgid ""
"In general, when the keyword list is the last argument of a function, the squa"
"re brackets are optional."
msgstr ""

msgid ""
"In light of this observation, we should consider moving to another supervision"
" strategy. The two other candidates are `:one_for_all` and `:rest_for_one`. A "
"supervisor using the `:rest_for_one` will kill and restart child processes whi"
"ch were started *after* the crashed child. In this case, we would want `KV.Buc"
"ketSupervisor` to terminate if `KV.Registry` terminates. This would require th"
"e bucket supervisor to be placed after the registry. Which violates the orderi"
"ng constraints we have established two paragraphs above."
msgstr ""

msgid ""
"In many cases, it would be useful to be able to generate such random data star"
"ting from already existing or user-defined types. For example, Elixir already "
"provides a built-in `keyword/0` type for keyword lists defined roughly as:"
msgstr ""

msgid ""
"In many functional programming languages, it is common to use a list of 2-item"
" tuples as the representation of a key-value data structure. In Elixir, when w"
"e have a list of tuples and the first item of the tuple (i.e. the key) is an a"
"tom, we call it a keyword list:"
msgstr ""

msgid ""
"In order for the cache mechanism to work, the created ETS table needs to have "
"access `:protected` (the default), so all clients can read from it, while only"
" the `KV.Registry` process writes to it. We have also set `read_concurrency: t"
"rue` when starting the table, optimizing the table for the common scenario of "
"concurrent read operations."
msgstr ""

msgid ""
"In order to better understand how macros work, let's create a new module where"
" we are going to implement `unless`, which does the opposite of `if`, as a mac"
"ro and as a function:"
msgstr ""

msgid ""
"In order to build our key-value application, we are going to use three main to"
"ols:"
msgstr ""

msgid ""
"In order to compile `A`, we need to ensure that `B` is already compiled and lo"
"aded so we can invoke the `define` macro. This means the file `a.ex` depends o"
"n the file `b.ex`. When compiling files in parallel, we want to be able to det"
"ect such cases and automatically handle them."
msgstr ""

msgid ""
"In order to create our own modules in Elixir, we use the `defmodule` macro. We"
" use the `def` macro to define functions in that module:"
msgstr ""

msgid ""
"In order to customize this process, we are going to take a look at Erlang's er"
"ror handler."
msgstr ""

msgid ""
"In order to facilitate software reuse, Elixir provides three directives (`alia"
"s`, `require` and `import`) plus a macro called `use` summarized below:"
msgstr ""

msgid ""
"In order to finish our `TestCase` implementation, we need to be able to access"
" all defined test cases. One way of doing this is by retrieving the tests at r"
"untime via `__MODULE__.__info__(:functions)`, which returns a list of all func"
"tions in a given module. However, considering that we may want to store more i"
"nformation about each test besides the test name, a more flexible approach is "
"required."
msgstr ""

msgid ""
"In order to fix the failing test, let's create a file at `lib/kv/bucket.ex` wi"
"th the contents below. Feel free to give a try at implementing the `KV.Bucket`"
" module yourself using agents before peeking at the implementation below."
msgstr ""

msgid ""
"In order to fix this bug, we need the registry to monitor every bucket it spaw"
"ns. Once we set up a monitor, the registry will receive a notification every t"
"ime a bucket process exits, allowing us to clean the registry up."
msgstr ""

msgid ""
"In order to get your first project started, Elixir ships with a build tool cal"
"led Mix. You can get your new project started by running:"
msgstr ""

msgid ""
"In order to know which consumer should receive a particular event, producer st"
"ages depend on a behaviour called [`GenStage.Dispatcher`](https://hexdocs.pm/g"
"en_stage/Experimental.GenStage.Dispatcher.html). The default dispatcher is the"
" `GenStage.DemandDispatcher` we have briefly described above: it will collect "
"the demand from different consumers and dispatch to the one with highest deman"
"d. This means if one consumer is slow, maybe because we increased its sleeping"
" time to 10 seconds, it will receive less items."
msgstr ""

msgid ""
"In order to make our server handle simultaneous connections, we need to have o"
"ne process working as an acceptor that spawns other processes to serve request"
"s. One solution would be to change:"
msgstr ""

msgid ""
"In order to manipulate keyword lists, Elixir provides [the `Keyword` module](h"
"ttps://hexdocs.pm/elixir/Keyword.html). Remember, though, keyword lists are si"
"mply lists, and as such they provide the same linear performance characteristi"
"cs as lists. The longer the list, the longer it will take to find a key, to co"
"unt the number of items, and so on. For this reason, keyword lists are used in"
" Elixir mainly for passing optional values. If you need to store many items or"
" guarantee one-key associates with at maximum one-value, you should use maps i"
"nstead."
msgstr ""

msgid ""
"In order to run Elixir on the LING VM, you need to produce a Xen image of your"
" Elixir project. This can be done with the help of the [lingex project](https:"
"//github.com/maximk/lingex), created by the LING VM team."
msgstr ""

msgid ""
"In order to run distributed code, we need to start the <abbr title=\"Virtual Ma"
"chine\">VM</abbr> with a name. The name can be short (when in the same network)"
" or long (requires the full computer address). Let's start a new IEx session:"
msgstr ""

msgid ""
"In order to run the first test, we need to have two nodes running. Move into `"
"apps/kv` and let's restart the node named `bar` which is going to be used by t"
"ests."
msgstr ""

msgid ""
"In order to understand the underlying code, we'd need macros, so we will revis"
"it this pattern in the meta-programming guide. However, the focus here is on h"
"ow using module attributes as storage allows developers to create DSLs."
msgstr ""

msgid ""
"In order to use the application environment in our code, we need to replace `K"
"V.Router.table/0` with the definition below:"
msgstr ""

msgid "In other words, aliases can be three different structures:"
msgstr ""

msgid ""
"In other words, it is important to make a distinction between a regular Elixir"
" value (like a list, a map, a process, a reference, etc) and a quoted expressi"
"on. Some values, such as integers, atoms, and strings, have a quoted expressio"
"n equal to the value itself. Other values, like maps, need to be explicitly co"
"nverted. Finally, values like functions and references cannot be converted to "
"a quoted expression at all."
msgstr ""

msgid ""
"In other words, we converted each expression given to `case/2` as a step in `w"
"ith`. As soon as any of the steps return something that does not match `{:ok, "
"x}`, `with` aborts, and returns the non-matching value."
msgstr ""

msgid ""
"In other words, we want the registry to keep on running even if a bucket crash"
"es. Let's write a new registry test:"
msgstr ""

msgid "In other words, when invoked as:"
msgstr ""

msgid "In other words:"
msgstr ""

msgid ""
"In parallel, we will improve our [documentation generation tool](https://githu"
"b.com/elixir-lang/ex_doc) and [build tool](https://github.com/elixir-lang/elix"
"ir/tree/master/lib/mix) which will likely be merged into core when they are so"
"lid enough."
msgstr ""

msgid ""
"In practice, charlists are used mostly when interfacing with Erlang, in partic"
"ular old libraries that do not accept binaries as arguments. You can convert a"
" charlist to a string and back by using the `to_string/1` and `to_charlist/1` "
"functions:"
msgstr ""

msgid ""
"In practice, however, Elixir developers rarely use the `try/rescue` construct."
" For example, many languages would force you to rescue an error when a file ca"
"nnot be opened successfully. Elixir instead provides a `File.read/1` function "
"which returns a tuple containing information about whether the file was opened"
" successfully:"
msgstr ""

msgid ""
"In practice, if you find yourself in a position where you need a process regis"
"try for dynamic processes, you should use [the `Registry` module](https://hexd"
"ocs.pm/elixir/Registry.html) provided as part of Elixir. It provides functiona"
"lity similar to the one we have built using a GenServer + `:ets` while also be"
"ing able to perform both writes and reads concurrently. [It has been benchmark"
"ed to scale across all cores even on machines with 40 cores](https://elixir-la"
"ng.org/blog/2017/01/05/elixir-v1-4-0-released/)."
msgstr ""

msgid ""
"In practice, it is more likely you will reach the Erlang <abbr title=\"Virtual "
"Machine\">VM</abbr> limit for the maximum number of atoms before you run out of"
" memory, which will bring your system down regardless."
msgstr ""

msgid ""
"In practice, we rarely start the application supervisor manually. Instead, it "
"is started as part of the application callback."
msgstr ""

msgid ""
"In previous Mix versions, most of your dependencies had to be added both to yo"
"ur dependencies list and applications list. Here is how a `mix.exs` would look"
" like:"
msgstr ""

msgid ""
"In previous releases, Mix was used to download and compile dependencies per en"
"vironment. That meant the usual workflow was less than ideal: every time a dep"
"endency was updated, developers had to explicitly fetch and compile the depend"
"encies for each environment. The workflow would be something like:"
msgstr ""

msgid ""
"In previous versions, the Enumerable protocol was based on reduce/fold, and wh"
"ile it is very efficient for operations like `map`, `reduce` and `filter`, it "
"was sub-optimal for operations that need to halt, like `take` and `take_while`"
", and it made it impossible for operations like `zip` to be implemented."
msgstr ""

msgid ""
"In some cases, it may be necessary to inject many values inside a list. For ex"
"ample, imagine you have a list containing `[1, 2, 6]` and we want to inject `["
"3, 4, 5]` into it. Using `unquote` won't yield the desired result:"
msgstr ""

msgid ""
"In some cases, you don't care about a particular value in a pattern. It is a c"
"ommon practice to bind those values to the underscore, `_`. For example, if on"
"ly the head of the list matters to us, we can assign the tail to underscore:"
msgstr ""

msgid ""
"In some cases, you may need to inject such *values* into *quoted expressions*."
" To do that, we need to first escape those values into quoted expressions with"
" the help of `Macro.escape/1`:"
msgstr ""

msgid ""
"In the Applications tab, you will see all applications currently running in yo"
"ur system along side their supervision tree. You can select the `kv` applicati"
"on to explore it further:"
msgstr ""

msgid ""
"In the [previous chapter](/getting-started/basic-types.html), we saw Elixir pr"
"ovides `+`, `-`, `*`, `/` as arithmetic operators, plus the functions `div/2` "
"and `rem/2` for integer division and remainder."
msgstr ""

msgid ""
"In the [previous chapter](/getting-started/mix-otp/agent.html), we used agents"
" to represent our buckets. In the first chapter, we specified we would like to"
" name each bucket so we can do the following:"
msgstr ""

msgid ""
"In the [previous chapter](/getting-started/structs.html), we have learned that"
" although structs are maps, they do not share protocol implementations with ma"
"ps. For example, [`MapSet`](https://hexdocs.pm/elixir/MapSet.html)s (sets base"
"d on maps) are implemented as structs. Let's try to use the `Size` protocol wi"
"th a `MapSet`:"
msgstr ""

msgid ""
"In the `__using__/1` implementation, we will initialize a module attribute nam"
"ed `@tests` to an empty list, then store the name of each defined test in this"
" attribute so the tests can be invoked from the `run` function."
msgstr ""

msgid ""
"In the example above, `1..100_000 |> Stream.map(&(&1 * 3))` returns a data typ"
"e, an actual stream, that represents the `map` computation over the range `1.."
"100_000`:"
msgstr ""

msgid ""
"In the example above, an argument that did not match or guard that did not eva"
"luate to true are shown between in red. If the terminal does not support ANSI "
"coloring, they are wrapped in `-` instead of shown in red."
msgstr ""

msgid ""
"In the example above, by using `TestCase`, we can write tests using the `test`"
" macro, which defines a function named `run` to automatically run all tests fo"
"r us. Our prototype will rely on the match operator (`=`) as a mechanism to do"
" assertions."
msgstr ""

msgid ""
"In the example above, even though the macro injects `a = 1`, it does not affec"
"t the variable `a` defined by the `go` function. If a macro wants to explicitl"
"y affect the context, it can use `var!`:"
msgstr ""

msgid ""
"In the example above, pattern matching works because underneath structs are ba"
"re maps with a fixed set of fields. As maps, structs store a \"special\" field n"
"amed `__struct__` that holds the name of the struct:"
msgstr ""

msgid ""
"In the example above, since we are invoking `alias` inside the function `plus/"
"2`, the alias will be valid only inside the function `plus/2`. `minus/2` won't"
" be affected at all."
msgstr ""

msgid ""
"In the example above, the imported `List.duplicate/2` is only visible within t"
"hat specific function. `duplicate/2` won't be available in any other function "
"in that module (or any other module for that matter)."
msgstr ""

msgid ""
"In the example above, the linked process died by sending an `exit` signal with"
" a value of 1. The Elixir shell automatically handles those messages and print"
"s them to the terminal."
msgstr ""

msgid ""
"In the example above, we are explicitly setting the version attribute for that"
" module. `@vsn` is used by the code reloading mechanism in the Erlang <abbr ti"
"tle=\"Virtual Machine\">VM</abbr> to check if a module has been updated or not. "
"If no version is specified, the version is set to the MD5 checksum of the modu"
"le functions."
msgstr ""

msgid ""
"In the example above, we are mutating both the array and the variable `i`. Mut"
"ating is not possible in Elixir. Instead, functional languages rely on recursi"
"on: a function is called recursively until a condition is reached that stops t"
"he recursive action from continuing. No data is mutated in this process. Consi"
"der the example below that prints a string an arbitrary number of times:"
msgstr ""

msgid ""
"In the example above, we can see the AST representation of the expression `hel"
"lo(\"world\")`. It is made of a tuple of three elements, the first one is the fu"
"nction name represented by the atom `:hello`, the second one is a keyword list"
" containing metadata (in this case, no metadata is available) and the third is"
" a list of arguments, containing the string \"world\"."
msgstr ""

msgid ""
"In the example above, we enumerate the items in list once, taking all elements"
" that are less than 3, and then we enumerate the remaining elements again, mul"
"tiplying them by two. In order to retrieve the final result, we have created o"
"ne intermediate list. As we add more operations, more intermediate lists will "
"be generated."
msgstr ""

msgid ""
"In the example above, we got a stream that will enumerate the lines in the fil"
"e one by one when enumerated. We could further extend the stream above, for ex"
"ample, by rejecting blank lines, and the file will be opened just when its res"
"ults are actually needed."
msgstr ""

msgid ""
"In the example above, we have used the `plug/1` macro to connect functions tha"
"t will be invoked when there is a web request. Internally, every time you call"
" `plug/1`, the Plug library stores the given argument in a `@plugs` attribute."
" Just before the module is compiled, Plug runs a callback that defines a funct"
"ion (`call/2`) which handles HTTP requests. This function will run all plugs i"
"nside `@plugs` in order."
msgstr ""

msgid ""
"In the example above, when we called `Enum.each/2`, it invoked the `Enumerable"
"` protocol internally, which then checks if there is an implementation availab"
"le for the `User` struct. This means that dispatching a protocol incurs some o"
"verhead to check if the implementation is available or not."
msgstr ""

msgid ""
"In the examples above, all the comprehensions returned lists as their result. "
"However, the result of a comprehension can be inserted into different data str"
"uctures by passing the `:into` option to the comprehension."
msgstr ""

msgid ""
"In the expression above, `n <- [1, 2, 3, 4]` is the **generator**. It is liter"
"ally generating values to be used in the comprehension. Any enumerable can be "
"passed on the right-hand side of the generator expression:"
msgstr ""

msgid ""
"In the first line, we define a function named `spawn_compilers` that receives "
"two arguments, the first is a list of files to compile and the second is a str"
"ing telling us where to write the compiled file. The first argument is represe"
"nted as a list with head and tail (`[current | files]`) where the top of the l"
"ist is assigned to `current` and the remaining items to `files`. If the list i"
"s empty, the first clause of `spawn_compilers` is not going to match, the clau"
"se `spawn_compilers([], _output)` defined at the end will instead."
msgstr ""

msgid ""
"In the following sections, our examples are going to get longer in size, and i"
"t can be tricky to type them all in the shell. It's about time for us to learn"
" how to compile Elixir code and also how to run Elixir scripts."
msgstr ""

msgid ""
"In the next chapter, we are going to discuss pattern matching through the use "
"of `=`, the match operator."
msgstr ""

msgid ""
"In the next chapter, we will explore GenServers, where the segregation between"
" clients and servers is made more apparent."
msgstr ""

msgid ""
"In the next chapter, we will finally make our system distributed by adding a b"
"ucket routing mechanism. We'll also learn about application configuration."
msgstr ""

msgid ""
"In the next chapter, we will start parsing the client requests and sending res"
"ponses, finishing our server."
msgstr ""

msgid ""
"In the next chapters, we'll explore structs and protocols before moving to exc"
"eption handling and other constructs like sigils and comprehensions."
msgstr ""

msgid ""
"In the optimization front, we have pushed the first iteration of a [feature ca"
"lled Protocol consolidation](https://groups.google.com/forum/#!topic/elixir-la"
"ng-core/RoXAUtoyjk4), which speeds up the polymorphic dispatch done by protoco"
"ls, sometimes reducing the dispatching time to 10% of the original time. We wi"
"ll continue working in upcoming releases to integrate protocol consolidation a"
"s a regular part of the developer workflow."
msgstr ""

msgid ""
"In the past releases we have improved this process to only compile files that "
"changed and their dependencies. For v0.11.0, we have improved this process to "
"be faster and less conservative than the previous version."
msgstr ""

msgid ""
"In the previous chapter, we have used `start_supervised!` to start the registr"
"y during our tests. Internally, the `start_supervised!` function starts the re"
"gistry under a supervisor defined by the ExUnit framework. By defining our own"
" supervisor, we provide more structure on how we initialize, shutdown and supe"
"rvise registries in your applications, aligning our production code and tests "
"best practices."
msgstr ""

msgid "In the project above, we have defined three aliases:"
msgstr ""

msgid ""
"In the second line of the failure, right below the test name, there is the loc"
"ation where the test was defined. If you copy the test location in full, inclu"
"ding the file and line number, and append it to `mix test`, Mix will load and "
"run just that particular test:"
msgstr ""

msgid ""
"In the second part of the GSoC project, the aim is to be able to property-test"
" functions with specs automatically."
msgstr ""

msgid "In the session above we interacted with the \"shopping\" bucket."
msgstr ""

msgid ""
"In the snippet above we set a breakpoint in the `URI.decode_query/2` function,"
" which is then triggered when invoked the function. We used `whereami/1` to ge"
"t more information about the surrounded code and we were also able to access t"
"he variables at place of debugging. From there, we can either set more breakpo"
"ints, remove existing breakpoints and continue execution. The session ended by"
" calling `open`, which will open your editor at the file and line under debugg"
"ing. `open/1` can also be invoked by passing any module or function, and IEx w"
"ill open your editor at that place."
msgstr ""

msgid ""
"In the snippet above, we represent everything, except variables, as a function"
" or a macro call. Notice keyword arguments like `do:` have been present since "
"the first version. To this, we slowly added new syntax, making some common pat"
"terns more elegant while keeping the same underlying data representation. We s"
"oon added infix notation for operators:"
msgstr ""

msgid ""
"In this blog post we will cover the background that led us to GenStage, some e"
"xample use cases, and what we are exploring for future releases. If instead yo"
"u are looking for a quick reference, [check the project source code](https://g"
"ithub.com/elixir-lang/gen_stage) and [access its documentation](https://hexdoc"
"s.pm/gen_stage/Experimental.GenStage.html)."
msgstr ""

msgid ""
"In this blog post, we'll talk about property-based testing and sample data gen"
"eration. We'll cover what these are, why we want them in Elixir, and what are "
"are plans for the future. If you want to use the features discussed here or yo"
"u want to read more formal documentation, head over to [stream_data][], which "
"is a library that currently provides both features (albeit in beta form) and w"
"hich is where we are focusing our efforts."
msgstr ""

msgid ""
"In this case, the answer is yes: if the acceptor crashes, there is no need to "
"crash the existing connections. On the other hand, if the task supervisor cras"
"hes, there is no need to crash the acceptor too."
msgstr ""

msgid ""
"In this case, we are importing only the function `duplicate` (with arity 2) fr"
"om `List`. Although `:only` is optional, its usage is recommended in order to "
"avoid importing all the functions of a given module inside the namespace. `:ex"
"cept` could also be given as an option in order to import everything in a modu"
"le *except* a list of functions."
msgstr ""

msgid ""
"In this chapter we will learn more about Elixir basic types: integers, floats,"
" booleans, atoms, strings, lists and tuples. Some basic types are:"
msgstr ""

msgid ""
"In this chapter, we are going to explore sigils, which are one of the mechanis"
"ms provided by the language for working with textual representations. Sigils s"
"tart with the tilde (`~`) character which is followed by a letter (which ident"
"ifies the sigil) and then a delimiter; optionally, modifiers can be added afte"
"r the final delimiter."
msgstr ""

msgid ""
"In this chapter, we are going to learn about supervisors and also about applic"
"ations. We are going to create not one, but two supervisors, and use them to s"
"upervise our processes."
msgstr ""

msgid ""
"In this chapter, we are going to learn how to use [Erlang's `:gen_tcp` module]"
"(http://www.erlang.org/doc/man/gen_tcp.html) to serve requests. This provides "
"a great opportunity to explore Elixir's `Task` module. In future chapters, we "
"will expand our server so it can actually serve the commands."
msgstr ""

msgid ""
"In this chapter, we have built a simple router as a way to explore the distrib"
"uted features of Elixir and the Erlang <abbr title=\"Virtual Machine\">VM</abbr>"
", and learned how to configure its routing table. This is the last chapter in "
"our Mix and  <abbr title=\"Open Telecom Platform\">OTP</abbr> guide."
msgstr ""

msgid ""
"In this chapter, we have learned more about Mix dependencies and umbrella proj"
"ects. While we may run `kv` without a server, our `kv_server` depends directly"
" on `kv`. By breaking them into separate applications, we gain more control in"
" how they are developed and tested."
msgstr ""

msgid ""
"In this chapter, we will create a module named `KV.Bucket`. This module will b"
"e responsible for storing our key-value entries in a way that allows them to b"
"e read and modified by other processes."
msgstr ""

msgid ""
"In this chapter, we will create our first project using Mix and explore differ"
"ent features in  <abbr title=\"Open Telecom Platform\">OTP</abbr>, Mix and ExUni"
"t as we go."
msgstr ""

msgid "In this chapter, we will discuss how to manage dependencies in Mix."
msgstr ""

msgid ""
"In this chapter, we will implement the code that parses the commands we descri"
"bed in the first chapter:"
msgstr ""

msgid ""
"In this chapter, we will learn about ETS (Erlang Term Storage) and how to use "
"it as a cache mechanism."
msgstr ""

msgid ""
"In this chapter, we will learn about the `case`, `cond`, and `if` control flow"
" structures."
msgstr ""

msgid ""
"In this chapter, we will learn about the basic constructs for spawning new pro"
"cesses, as well as sending and receiving messages between processes."
msgstr ""

msgid ""
"In this chapter, we will show how the `=` operator in Elixir is actually a mat"
"ch operator and how to use it to pattern match inside data structures. Finally"
", we will learn about the pin operator `^` used to access previously bound val"
"ues."
msgstr ""

msgid ""
"In this chapter, we will understand what binaries are, how they associate with"
" strings, and what a single-quoted value, `'like this'`, means in Elixir."
msgstr ""

msgid ""
"In this directory live all assets for `ElixirLangGuide`. The ready to\n"
"use built versions are found in `priv`. To change any of them read please\n"
"read the following instructions:"
msgstr ""

msgid ""
"In this guide, we will learn how to build a complete Elixir application, with "
"its own supervision tree, configuration, tests and more."
msgstr ""

msgid ""
"In this introduction, we have laid the groundwork to finally write our first m"
"acro, so let's move to the next chapter."
msgstr ""

msgid ""
"In this last chapter, we will go back to the `:kv` application and add a routi"
"ng layer that will allow us to distribute requests between nodes based on the "
"bucket name."
msgstr ""

msgid ""
"In this new release, IEx also supports a very simple debugging mechanism calle"
"d `IEx.pry`. Let's see an screenshot of it in action:"
msgstr ""

msgid ""
"In this post we will cover the main additions. The complete [release notes](ht"
"tps://github.com/elixir-lang/elixir/releases/tag/v1.4.0) are also available."
msgstr ""

msgid "In this section we outline the language's past and future development."
msgstr ""

msgid ""
"In this section, we will implement the parsing functionality, document it and "
"make sure our documentation is up to date with doctests. This helps us provide"
" documentation with accurate code samples."
msgstr ""

msgid ""
"In this tutorial, we are going to teach you about Elixir fundamentals - the la"
"nguage syntax, how to define modules, how to manipulate the characteristics of"
" common data structures, and more. This chapter will focus on ensuring that El"
"ixir is installed and that you can successfully run Elixir's Interactive Shell"
", called IEx."
msgstr ""

msgid ""
"In v0.12.0, Elixir's Enumerable protocol has been extended to allow suspension"
" and halting mechanisms, making operations like `take` simpler and operations "
"that require interleaving, like `zip`, possible."
msgstr ""

msgid ""
"In v0.14.0, Elixir closely integrates with OTP by providing modules for buildi"
"ng [servers](https://hexdocs.pm/elixir/GenServer.html), [supervisors](https://"
"hexdocs.pm/elixir/Supervisor.html) and [applications](https://hexdocs.pm/elixi"
"r/Application.html)."
msgstr ""

msgid ""
"Insert these changes in your code and now you may start your application using"
" the following command `PORT=4040 mix run --no-halt`, notice how we are passin"
"g the port as a variable."
msgstr ""

msgid ""
"Inside `spawn_compilers`, we first retrieve the PID of the current process wit"
"h `Process.self` (remember we are talking about Erlang processes/actors and no"
"t OS processes) and then proceed to spawn a new process to execute the given f"
"unction in parallel. Spawning a new process is done with the `spawn_link` func"
"tion."
msgstr ""

msgid ""
"Inside a module, we can define functions with `def/2` and private functions wi"
"th `defp/2`. A function defined with `def/2` can be invoked from other modules"
" while a private function can only be invoked locally."
msgstr ""

msgid ""
"Installing external dependencies is simple. Most commonly, we use the [Hex Pac"
"kage Manager](https://hex.pm), by listing the dependency inside the deps funct"
"ion in our `mix.exs` file:"
msgstr ""

msgid ""
"Instead of `spawn/1` and `spawn_link/1`, we use `Task.start/1` and `Task.start"
"_link/1` which return `{:ok, pid}` rather than just the PID. This is what enab"
"les tasks to be used in supervision trees. Furthermore, `Task` provides conven"
"ience functions, like `Task.async/1` and `Task.await/1`, and functionality to "
"ease distribution."
msgstr ""

msgid ""
"Instead of abusing the built-in name facility, we will create our own *process"
" registry* that associates the bucket name to the bucket process."
msgstr ""

msgid ""
"Instead of generating intermediate lists, streams build a series of computatio"
"ns that are invoked only when we pass the underlying stream to the `Enum` modu"
"le. Streams are useful when working with large, *possibly infinite*, collectio"
"ns."
msgstr ""

msgid ""
"Instead of sharing protocol implementation with maps, structs require their ow"
"n protocol implementation. Since a `MapSet` has its size precomputed and acces"
"sible through `MapSet.size/1`, we can define a `Size` implementation for it:"
msgstr ""

msgid "Instead, you can store the value of the `try` expression:"
msgstr ""

msgid ""
"Interactive Elixir (1.4.0) - press Ctrl+C to exit (type h() ENTER for help)\n"
"iex(1)> 40 + 2\n"
"42\n"
"iex(2)> \"hello\" <> \" world\"\n"
"\"hello world\"\n"
"```"
msgstr ""

msgid ""
"Interleave.interleave([1, 2], [:a, :b, :c, :d])\n"
"#=> [1, :a, 2, :b, :c, :d]\n"
"```"
msgstr ""

msgid ""
"Internal dependencies are the ones that are specific to your project. They usu"
"ally don't make sense outside the scope of your project/company/organization. "
"Most of the time, you want to keep them private, whether due to technical, eco"
"nomic or business reasons."
msgstr ""

msgid "Internally, this record is represented as the following tuple:"
msgstr ""

msgid ""
"Invoking a function from a module uses different syntax. In Erlang, you would "
"write"
msgstr ""

msgid "Is the same as:"
msgstr ""

msgid ""
"It asked the `Enum.Iterator` protocol for instructions on how to iterate the l"
"ist `[1, 2, 3]`. This iteration happened by retrieving each item in the list, "
"one by one, until there were no items left."
msgstr ""

msgid ""
"It depends. It is ok to rely on shared state as long as we depend only on a no"
"n-shared partition of this state. Although multiple registries may start bucke"
"ts on the shared bucket supervisor, those buckets and registries are isolated "
"from each other. We would only run into concurrency issues if we used a functi"
"on like `Supervisor.count_children(KV.BucketSupervisor)` which would count all"
" buckets from all registries, potentially giving different results when tests "
"run concurrently."
msgstr ""

msgid ""
"It doesn't seem to work at all. That's because we are serving requests in the "
"same process that are accepting connections. When one client is connected, we "
"can't accept another client."
msgstr ""

msgid "It happens we can also use this same syntax for updating the value:"
msgstr ""

msgid ""
"It is also possible to create atoms that start with a character other than a l"
"owercase letter. The syntax is different between the two languages:"
msgstr ""

msgid ""
"It is also possible to install escripts and archives by providing a Git/GitHub"
" repo. See `mix help escript.install` and `mix help archive.install` for more "
"details."
msgstr ""

msgid ""
"It is also possible to put an element at a particular index in a tuple with `p"
"ut_elem/3`:"
msgstr ""

msgid ""
"It is also possible to register the `pid`, giving it a name, and allowing ever"
"yone that knows the name to send it messages:"
msgstr ""

msgid ""
"It is also very common to use `IO.inspect/2` with [`binding()`](https://hexdoc"
"s.pm/elixir/Kernel.html#binding/0), which returns all variable names and their"
" values:"
msgstr ""

msgid ""
"It is exactly this supervision system that makes constructs like `try/catch` a"
"nd `try/rescue` so uncommon in Elixir. Instead of rescuing an error, we'd rath"
"er \"fail fast\" since the supervision tree will guarantee our application will "
"go back to a known initial state after the error."
msgstr ""

msgid ""
"It is highly recommended to add Elixir's bin path to your PATH environment var"
"iable to ease development."
msgstr "効率的な開発の為にも、Elixir コマンドのパスを環境変数 PATH に設定しておくことを強くおすすめします。"

msgid ""
"It is important that a macro is defined before its usage. Failing to define a "
"macro before its invocation will raise an error at runtime, since the macro wo"
"n't be expanded and will be translated to a function call:"
msgstr ""

msgid ""
"It is important to bear in mind that variables defined inside `try/catch/rescu"
"e/after` blocks do not leak to the outer context. This is because the `try` bl"
"ock may fail and as such the variables may never be bound in the first place. "
"In other words, this code is invalid:"
msgstr ""

msgid "It is important to note a couple things:"
msgstr ""

msgid ""
"It is important to notice that this code has room for improvements. First, eve"
"ry time a new module is compiled, we notify all child process that new modules"
" are available. This is a waste of resource if we consider that the child modu"
"les tells us explicitly on which modules they are waiting on. Therefore, the c"
"ode could be modified to store a mapping from each child process to the module"
" it is waiting for so that when a new module is compiled, only the children th"
"at depend on it are notified."
msgstr ""

msgid ""
"It is interesting to note that structs solve both drawbacks we have earlier me"
"ntioned regarding records. Structs are purely data and polymorphic dispatch is"
" now faster and more robust as it happens only for explicitly tagged structs."
msgstr ""

msgid "It is possible to use pattern matching when defining anonymous functions, too."
msgstr ""

msgid ""
"It merely logged an error but the parent process is still running. That's beca"
"use processes are isolated. If we want the failure in one process to propagate"
" to another one, we should link them. This can be done with `spawn_link/1`:"
msgstr ""

msgid ""
"It seems we are ready to go! We will use the interactive shell quite a lot in "
"the next chapters to get a bit more familiar with the language constructs and "
"basic types, starting in the next chapter."
msgstr ""

msgid ""
"It was around October 2011, during a short stay in San Francisco, that I came "
"up with what would be [the foundation of Elixir's current version](https://git"
"hub.com/josevalim/lego-lang) with the help of Yehuda Katz. Development of the "
"new Elixir version started a few days before 2012 and continued steady when th"
"e new year came in."
msgstr ""

msgid ""
"It would be pretty boring to update this file manually every time we add a new"
" module to our application. That's why Mix generates and maintains it for us."
msgstr ""

msgid ""
"It's intended to help beginners get familiar with all of Elixir's features by "
"building their knowledge incrementally. Experienced Elixir developers might al"
"so learn a trick or two."
msgstr ""

msgid "It's possible to implement protocols for all Elixir data types:"
msgstr ""

msgid ""
"Keep in mind a variable assigned inside a function does not affect its surroun"
"ding environment:"
msgstr ""

msgid "Keep in mind errors in guards do not leak but simply make the guard fail:"
msgstr ""

msgid ""
"Keep in mind single-quoted and double-quoted representations are not equivalen"
"t in Elixir as they are represented by different types:"
msgstr ""

msgid ""
"Keep in mind that each Elixir version supports specific Erlang/OTP versions. ["
"Check the compatibility table](https://hexdocs.pm/elixir/compatibility-and-dep"
"recations.html#compatibility-between-elixir-and-erlang-otp) if you have questi"
"ons or run into issues."
msgstr ""

msgid ""
"Keep in mind that you can always invoke the help task to list all available ta"
"sks:"
msgstr ""

msgid ""
"Keep in mind that, by convention, whenever the inspected value starts with `#`"
", it is representing a data structure in non-valid Elixir syntax. This means t"
"he inspect protocol is not reversible as information may be lost along the way"
":"
msgstr ""

msgid "Keyword lists are important because they have three special characteristics:"
msgstr ""

msgid ""
"Keyword lists play an important role in the language and are quite common in m"
"any functions and macros. We will explore them a bit more in a future chapter."
" Now it is time to talk about \"Binaries, strings, and char lists\"."
msgstr ""

msgid ""
"Lastly, but not least importantly, I'd like to mention that we're very excited"
" about how the community around Elixir is building up. Thank you all for being"
" around and supporting us!"
msgstr ""

msgid ""
"Later on we will learn how to compile Elixir code (in [Chapter 8](/getting-sta"
"rted/modules-and-functions.html)) and how to use the Mix build tool (in the [M"
"ix & OTP guide](/getting-started/mix-otp/introduction-to-mix.html)). For now, "
"let's move on to [Chapter 2](/getting-started/basic-types.html)."
msgstr ""

msgid ""
"Learn more about [Unicode support with the String module](https://hexdocs.pm/e"
"lixir/String.html)."
msgstr ""

msgid ""
"Learn the best practices for the whole life of your application, from design a"
"nd team-building, to managing stakeholders, to deployment and monitoring. Go b"
"eyond the syntax and the tools to learn the techniques you need to develop you"
"r Elixir application from concept to production."
msgstr ""

msgid ""
"LearnElixir.tv is a screencast series which provides in-depth, step-by-step vi"
"deos about Elixir's main features. Videos range from 7 to 15 minutes in length"
", and are posted weekly."
msgstr ""

msgid ""
"Let's also add a test to `test/kv/bucket_test.exs` that guarantees the bucket "
"is temporary:"
msgstr ""

msgid "Let's change `start/2` once again, to add a supervisor to our tree:"
msgstr ""

msgid ""
"Let's change the `KV.Registry` to use ETS tables. The first change is to modif"
"y our registry to require a name argument, we will use it to name the ETS tabl"
"e and the registry process itself. ETS names and process names are stored in d"
"ifferent locations, so there is no chance of conflicts."
msgstr ""

msgid "Let's check each case, one by one."
msgstr ""

msgid ""
"Let's create a new Mix project. We are going to creatively name it `kv_umbrell"
"a`, and this new project will have both the existing `kv` application and the "
"new `kv_server` application inside. The directory structure will look like thi"
"s:"
msgstr ""

msgid ""
"Let's create our command parser at `lib/kv_server/command.ex` and start with t"
"he doctest:"
msgstr ""

msgid ""
"Let's create our first project by invoking `mix new` from the command line. We"
"'ll pass the project name as the argument (`kv`, in this case), and tell Mix t"
"hat our main module should be the all-uppercase `KV`, instead of the default, "
"which would have been `Kv`:"
msgstr ""

msgid ""
"Let's define a DynamicSupervisor and give it a name of `KV.BucketSupervisor` i"
"n `lib/kv/supervisor.ex` as follows:"
msgstr ""

msgid "Let's define a module named `Hello` in this shell:"
msgstr ""

msgid ""
"Let's discuss a simple but actual example: word counting. The idea of word cou"
"nting is to receive one file and count how many times each word appears in the"
" document. Using the `Enum` module it could be implemented as follows:"
msgstr ""

msgid "Let's first play with monitors by starting a new console with `iex -S mix`:"
msgstr ""

msgid "Let's get started!"
msgstr ""

msgid "Let's give it a try by running `iex kv.exs`:"
msgstr ""

msgid ""
"Let's give it a try. Open up `lib/kv_server/application.ex`, and let's change "
"the supervisor in the `start/2` function to the following:"
msgstr ""

msgid "Let's give this all a try inside `iex -S mix`:"
msgstr ""

msgid ""
"Let's go back to the `Math` module defined in the previous chapters, add some "
"documentation and save it to the `math.ex` file:"
msgstr ""

msgid ""
"Let's implement our `KV.Bucket` using agents. But before starting the implemen"
"tation, let's first write some tests. Create a file at `test/kv/bucket_test.ex"
"s` (remember the `.exs` extension) with the following:"
msgstr ""

msgid ""
"Let's implement the integration test in `test/kv_server_test.exs` as shown bel"
"ow:"
msgstr ""

msgid ""
"Let's implement those steps. Move to the `apps/kv_server` application, open up"
" `lib/kv_server.ex`, and add the following functions:"
msgstr ""

msgid ""
"Let's make another example using streams. Since the `IO` module provides strea"
"ms (that are both `Enumerable`s and `Collectable`s), an echo terminal that ech"
"oes back the upcased version of whatever is typed can be implemented using com"
"prehensions:"
msgstr ""

msgid ""
"Let's move inside the apps directory and start building `kv_server`. This time"
", we are going to pass the `--sup` flag, which will tell Mix to generate a sup"
"ervision tree automatically for us, instead of building one manually as we did"
" in previous chapters:"
msgstr ""

msgid "Let's now see how we can use the power of recursion to sum a list of numbers:"
msgstr ""

msgid "Let's put it all together and send messages between processes:"
msgstr ""

msgid ""
"Let's reimplement the server callbacks to fix the bug and make the test pass. "
"First, we will modify the GenServer state to two dictionaries: one that contai"
"ns `name -> pid` and another that holds `ref -> name`. Then we need to monitor"
" the buckets on `handle_cast/2` as well as implement a `handle_info/2` callbac"
"k to handle the monitoring messages. The full server callbacks implementation "
"is shown below:"
msgstr ""

msgid "Let's rewrite the test case to use callbacks:"
msgstr ""

msgid ""
"Let's run the tests once again. This time though, we will pass the `--trace` o"
"ption:"
msgstr ""

msgid "Let's see an example of building an event manager as a producer:"
msgstr ""

msgid "Let's see an example:"
msgstr ""

msgid "Let's start `iex` with the module above:"
msgstr ""

msgid ""
"Let's start a new project using `mix new`. This new project will be named `kv_"
"umbrella` and we need to pass the `--umbrella` option when creating it. Do not"
" create this new project inside the existing `kv` project!"
msgstr ""

msgid ""
"Let's start by creating a module that defines and imports the `test` macro whe"
"n used:"
msgstr ""

msgid ""
"Let's start our project console once again with `iex -S mix`. We will see a pr"
"ocess named `KV.Registry` is already running:"
msgstr ""

msgid ""
"Let's start with the producer that we will call `A`. Since `A` is a producer, "
"its main responsibility is to receive demand, which is the number of events th"
"e consumer is willing to handle, and generate events. Those events may be in m"
"emory or an external data source. For now let's implement a simple counter sta"
"rting from a given value of `counter` received on `init/1`:"
msgstr ""

msgid "Let's take a brief look at those generated files."
msgstr ""

msgid ""
"Let's take a deeper look at `Enumerable`s and, while we're at it, their lazy c"
"ounterpart, `Stream`s."
msgstr ""

msgid "Let's take a look at some benchmarks:"
msgstr ""

msgid "Let's talk about the goodies!"
msgstr ""

msgid ""
"Let's write a test to verify our router works. Create a file named `test/kv/ro"
"uter_test.exs` containing:"
msgstr ""

msgid "Let's write some code!"
msgstr ""

msgid ""
"Lets go through this step by step. The main `interleave` function first\n"
"partially applies `Enumerable.reduce/3` to get function values that work just\n"
"like the continuations. This makes things easier for `do_interleave`."
msgstr ""

msgid ""
"Like previous years, the Elixir community is happy to participate in [Google S"
"ummer of Code][gsoc] 2018. We are currently working on four different projects"
". Let's have a look at them."
msgstr ""

msgid ""
"Linking can also be done manually by calling `Process.link/1`. We recommend th"
"at you take a look at [the `Process` module](https://hexdocs.pm/elixir/Process"
".html) for other functionality provided by processes."
msgstr ""

msgid ""
"Links are bi-directional. If you link two processes and one of them crashes, t"
"he other side will crash too (unless it is trapping exits). A monitor is uni-d"
"irectional: only the monitoring process will receive notifications about the m"
"onitored one. In other words: use links when you want linked crashes, and moni"
"tors when you just want to be informed of crashes, exits, and so on."
msgstr ""

msgid ""
"Links are bidirectional, which implies that a crash in a bucket will crash the"
" registry. Although we now have the supervisor, which guarantees the registry "
"will be back up and running, crashing the registry still means we lose all dat"
"a associating bucket names to their respective processes."
msgstr ""

msgid "Lint all JavaScript files in `js` using [ESLint]."
msgstr ""

msgid ""
"List operators never modify the existing list. Concatenating to or removing el"
"ements from a list returns a new list. We say that Elixir data structures are "
"*immutable*. One advantage of immutability is that it leads to clearer code. Y"
"ou can freely pass the data around with the guarantee no one will change it - "
"only transform it."
msgstr ""

msgid ""
"List.foldl [1, 2, 3, 4], 0, &(&1 + &2)\n"
"#=> 10\n"
"```"
msgstr ""

msgid ""
"Lists are stored in memory as linked lists, meaning that each element in a lis"
"t holds its value and points to the following element until the end of the lis"
"t is reached. This means accessing the length of a list is a linear operation:"
" we need to traverse the whole list in order to figure out its size."
msgstr ""

msgid ""
"Local or imported functions, like `is_function/1`, can be captured without the"
" module:"
msgstr ""

msgid ""
"Logger provides multiple backends to where messages are logged. For now Elixir"
" ships only with a console backend but there are developers already working on"
" file (with support to external log rotation) and [syslog](https://en.wikipedi"
"a.org/wiki/Syslog) backends."
msgstr ""

msgid ""
"Luckily, Elixir provides a solution to this problem (and has provided it for q"
"uite some time): streams. One of the advantage of streams is they are lazy, al"
"lowing us to traverse collections item by item, in this case, line by line, in"
"stead of loading the whole data set into memory. Let's rewrite the example abo"
"ve to use streams:"
msgstr ""

msgid ""
"Luckily, ExUnit ships with a facility to tag tests, allowing us to run specifi"
"c callbacks or even filter tests altogether based on those tags. We have alrea"
"dy used the `:capture_log` tag in the previous chapter, which has its semantic"
"s specified by ExUnit itself."
msgstr ""

msgid ""
"Macros are a powerful construct and Elixir provides many mechanisms to ensure "
"they are used responsibly."
msgstr ""

msgid ""
"Macros are also the base construct for meta-programming in Elixir: the ability"
" to write code that generates code. Meta-programming allows developers to easi"
"ly get rid of boilerplate and create powerful tools. A common example mentione"
"d in talks is how our test framework uses macros for expressiveness. Let's see"
" an example:"
msgstr ""

msgid "Macros in Elixir are defined via `defmacro/2`."
msgstr ""

msgid ""
"Macros receive quoted expressions and must return quoted expressions. However,"
" sometimes during the execution of a macro, you may need to work with values a"
"nd making a distinction between values and quoted expressions will be required"
"."
msgstr ""

msgid ""
"Manually implementing protocols for all types can quickly become repetitive an"
"d tedious. In such cases, Elixir provides two options: we can explicitly deriv"
"e the protocol implementation for our types or automatically implement the pro"
"tocol for all types. In both cases, we need to implement the protocol for `Any"
"`."
msgstr ""

msgid ""
"Many functions in the `Stream` module accept any enumerable as an argument and"
" return a stream as a result. It also provides functions for creating streams."
" For example, `Stream.cycle/1` can be used to create a stream that cycles a gi"
"ven enumerable infinitely. Be careful to not call a function like `Enum.map/2`"
" on such streams, as they would cycle forever:"
msgstr ""

msgid ""
"Many functions in the standard library follow the pattern of having a counterp"
"art that raises an exception instead of returning tuples to match against. The"
" convention is to create a function (`foo`) which returns `{:ok, result}` or `"
"{:error, reason}` tuples and another function (`foo!`, same name but with a tr"
"ailing `!`) that takes the same arguments as `foo` but which raises an excepti"
"on if there's an error. `foo!` should return the result (not wrapped in a tupl"
"e) if everything goes fine. The [`File` module](https://hexdocs.pm/elixir/File"
".html) is a good example of this convention."
msgstr ""

msgid ""
"Many language constructs are also inspired by their Erlang counter-parts, like"
" some of the control-flow macros, operators and containers. Notice how some El"
"ixir code:"
msgstr ""

msgid ""
"Many modules share the same public API. Take a look at [Plug](https://github.c"
"om/elixir-lang/plug), which, as its description states, is a **specification**"
" for composable modules in web applications. Each *plug* is a module which **h"
"as to** implement at least two public functions: `init/1` and `call/2`."
msgstr ""

msgid ""
"Many of the functions in the `Macro` module expect an environment. You can rea"
"d more about these functions in [the docs for the `Macro` module](https://hexd"
"ocs.pm/elixir/Macro.html) and learn more about the compilation environment in "
"the [docs for `Macro.Env`](https://hexdocs.pm/elixir/Macro.Env.html)."
msgstr ""

msgid ""
"Maps also provide special syntax for creating, accessing and updating maps wit"
"h atom keys:"
msgstr ""

msgid "Maps are Elixir's new associative data structure:"
msgstr ""

msgid "Maps are key-value data structures:"
msgstr ""

msgid "Maps can be pattern matched on:"
msgstr ""

msgid "Maps do not have a explicit ordering and keys and values can be any term."
msgstr ""

msgid "Maps have the following syntax for updating a key's value:"
msgstr ""

msgid ""
"Maps naturally solve issues `1.` and `2.` above. In particular, maps that have"
" same keys share the same key-space in memory. That's why the update operation"
" `%{map | ...}` we have seen above is relevant: if we know we are updating an "
"existing key, the new map created as result of the update operation can share "
"the same key space as the old map without extra checks. For more details on wh"
"y Maps are efficient, I would recommend [reading Joe's blog post on the matter"
"](http://joearms.github.io/2014/02/01/big-changes-to-erlang.html)."
msgstr ""

msgid ""
"Meet Elixir, a modern, functional, concurrent language built on the rock-solid"
" Erlang VM. Elixir’s pragmatic syntax and built-in support for metaprogramming"
" will make you productive and keep you interested for the long haul. Maybe the"
" time is right for the Next Big Thing. Maybe it’s Elixir."
msgstr ""

msgid "Metadata can be given to `@moduledoc`, `@typedoc` and `@doc`."
msgstr ""

msgid ""
"Mix aliases solve both problems by providing a simple API for defining and ove"
"rriding aliases. All projects that use Mix contain a `mix.exs` file with the p"
"roject configuration. In order to define an alias, you just need to add a new "
"key to your project configuration:"
msgstr ""

msgid ""
"Mix also generated a file named `test/test_helper.exs` which is responsible fo"
"r setting up the test framework:"
msgstr ""

msgid ""
"Mix also generated the appropriate structure for running our project tests. Mi"
"x projects usually follow the convention of having a `<filename>_test.exs` fil"
"e in the `test` directory for each file in the `lib` directory. For this reaso"
"n, we can already find a `test/kv_test.exs` corresponding to our `lib/kv.ex` f"
"ile. It doesn't do much at this point:"
msgstr ""

msgid ""
"Mix also generates a file at `lib/kv.ex` with a module containing exactly one "
"function, called `hello`:"
msgstr ""

msgid ""
"Mix also includes `mix escript.install` and `mix escript.uninstall` tasks for "
"managing escripts. The tasks was designed in a way to mimic the existing `mix "
"archive` functionality except that:"
msgstr ""

msgid ""
"Mix also includes both `mix app.tree` and `mix deps.tree`. The first will list"
" all applications your current project needs to start in order to boot (i.e. t"
"he ones listed in `application/0` in your `mix.exs`) while the second will lis"
"ts all of your dependencies and so on recursively."
msgstr ""

msgid ""
"Mix also provides faster re-compilation times. Every time you compile your Eli"
"xir code, Mix generates a graph of the dependencies between source files. For "
"example, if `a.ex` depends on `b.ex`, every time `b.ex` changes, `a.ex` must b"
"e recompiled. Elixir v1.1 improves this tracking by separating compile-time de"
"pendencies from runtime ones, recompiling a file only if a compile-time depend"
"ency changed. In projects that have a main dispatch entity, like a web-app rou"
"ter, we have seen `mix compile` go from recompiling the whole project to one o"
"r two files per run."
msgstr ""

msgid ""
"Mix has also added support to optional dependencies and improved common patter"
"ns, like the usage of umbrella apps."
msgstr ""

msgid ""
"Mix has also improved support for umbrella projects, which are projects that c"
"ontain multiple OTP applications, essential for building large projects. The c"
"urrent release allows sharing of dependencies between projects and faster and "
"dependency resolution times."
msgstr ""

msgid ""
"Mix includes new tasks to improve your everyday workflow. Some of those tasks "
"relies on many compiler improvements to know more about your code, providing s"
"tatic analysis to find possible bugs in your code and faster compilation cycle"
"s."
msgstr ""

msgid ""
"Mix is Elixir's build tool. Mix knows how to manage your dependencies, compile"
" & test your projects and much more. We have designed Mix, since day one, to b"
"e extensible. Developers were always able to define new tasks by simply defini"
"ng a module:"
msgstr ""

msgid ""
"Mix makes a distinction between projects and applications. Based on the conten"
"ts of our `mix.exs` file, we would say we have a Mix project that defines the "
"`:kv` application. As we will see in later chapters, there are projects that d"
"on't define any application."
msgstr ""

msgid ""
"Mix no longer announces every file it compiles. Instead it outputs how many fi"
"les there is to compile per compilers. Here is the output for a project like ["
"`gettext`](https://github.com/elixir-lang/gettext):"
msgstr ""

msgid ""
"Mix provides many tasks for working with dependencies, which can be seen in `m"
"ix help`:"
msgstr ""

msgid ""
"Mix ships with a [`mix profile.fprof`](/docs/v1.1/mix/Mix.Tasks.Profile.Fprof."
"html), useful for profiling your application code. The [`mix app.start`](/docs"
"/v1.1/mix/Mix.Tasks.App.Start.html) has also been publicly documented. Althoug"
"h you likely won't invoke it directly through the command line, it is useful w"
"hen writing your own tasks that require the current application to be up and r"
"unning."
msgstr ""

msgid ""
"Mix supports the concept of \"environments\". They allow a developer to customiz"
"e compilation and other options for specific scenarios. By default, Mix unders"
"tands three environments:"
msgstr ""

msgid ""
"Mix v1.4 can now install escripts and archives from both Git and Hex, providin"
"g you with even more options for distributing Elixir code."
msgstr ""

msgid ""
"Mix v1.4 now automatically infers your applications list as long as you leave "
"the `:applications` key empty. The `mix.exs` above can be rewritten to:"
msgstr ""

msgid "Mix will create a directory named `kv` with a few files in it:"
msgstr ""

msgid ""
"Mix will default to the `:dev` environment, except for the `test` task that wi"
"ll default to the `:test` environment. The environment can be changed via the "
"`MIX_ENV` environment variable:"
msgstr ""

msgid ""
"Module  # this is called an atom alias; it expands to :'Elixir.Module'\n"
"```"
msgstr ""

msgid "Module attributes in Elixir serve three purposes:"
msgstr ""

msgid ""
"Modules adopting the `Parser` behaviour will have to implement all the functio"
"ns defined with the `@callback` directive. As you can see, `@callback` expects"
" a function name but also a function specification like the ones used with the"
" `@spec` directive we saw above. Also note that the `term` type is used to rep"
"resent the parsed value. In Elixir, the `term` type is a shortcut to represent"
" any type."
msgstr ""

msgid ""
"More interestingly, we can match on specific values. The example below asserts"
" that the left side will only match the right side when the right side is a tu"
"ple that starts with the atom `:ok`:"
msgstr ""

msgid ""
"Most Elixir code has a straight-forward translation to its underlying quoted e"
"xpression. We recommend you try out different code samples and see what the re"
"sults are. For example, what does `String.upcase(\"foo\")` expand to? We have al"
"so learned that `if(true, do: :this, else: :that)` is the same as `if true do "
":this else :that end`. How does this affirmation hold with quoted expressions?"
msgstr ""

msgid ""
"Most editors provide built-in integration with the formatter, allowing a file "
"to be formatted on save or via a chosen keybinding. If you are learning Elixir"
", editor integration gives you useful and quick feedback when learning the Eli"
"xir syntax."
msgstr ""

msgid ""
"Most of the features above provide their own extensibility mechanisms, too. Fo"
"r example, take the `Enum` module. The `Enum` module allow us to enumerate the"
" built-in ranges, lists, sets, etc:"
msgstr ""

msgid ""
"Most of the time it is convenient to write modules into files so they can be c"
"ompiled and reused. Let's assume we have a file named `math.ex` with the follo"
"wing contents:"
msgstr ""

msgid ""
"Most of the time, Elixir is going to guide you to do the right thing. For exam"
"ple, there is an `elem/2` function to access a tuple item but there is no buil"
"t-in equivalent for lists:"
msgstr ""

msgid ""
"Much better! `with` will retrieve the value returned by the right-side of `<-`"
" and match it against the pattern on the left side. If the value matches the p"
"attern, `with` moves on to the next expression. In case there is no match, the"
" non-matching value is returned."
msgstr ""

msgid ""
"Multiple generators can also be used to calculate the cartesian product of two"
" lists:"
msgstr ""

msgid ""
"My computer is named `jv`, so I see `foo@jv` in the example above, but you wil"
"l get a different result. We will use `foo@computer-name` in the following exa"
"mples and you should update them accordingly when trying out the code."
msgstr ""

msgid ""
"My particular telnet client can be exited by typing `ctrl + ]`, typing `quit`,"
" and pressing `<Enter>`, but your client may require different steps."
msgstr ""

msgid ""
"MyServer.first_data #=> 14\n"
"MyServer.second_data #=> 13\n"
"```"
msgstr ""

msgid ""
"MyTest.run\n"
"```"
msgstr ""

msgid ""
"MyValidator.validate(user)\n"
"```"
msgstr ""

msgid "Named functions in Elixir also support default arguments:"
msgstr ""

msgid ""
"Next let's learn about one special type of supervisor that is designed to star"
"t and shut down children dynamically, called dynamic supervisors."
msgstr ""

msgid ""
"Next we define a test case and we do an assertion with the `assert` macro. Sim"
"ply calling `assert` would be a bad practice in many languages as it would pro"
"vide a poor error report. In such languages, functions/methods like `assertEqu"
"al` or `assert_equal` would be the recommended way of performing such assertio"
"n."
msgstr ""

msgid ""
"Next you should download source code ([.zip](https://github.com/elixir-lang/el"
"ixir/archive/v{{ stable.version }}.zip), [.tar.gz](https://github.com/elixir-l"
"ang/elixir/archive/v{{ stable.version }}.tar.gz)) of the [latest release](http"
"s://github.com/elixir-lang/elixir/releases/tag/v{{ stable.version }}), unpack "
"it and then run `make` inside the unpacked directory (note: if you are running"
" on Windows, [read this page on setting up your environment for compiling Elix"
"ir](https://github.com/elixir-lang/elixir/wiki/Windows))."
msgstr ""
"そうしましたら次は [最新バージョン](https://github.com/elixir-lang/elixir/releases/tag/v{{ sta"
"ble.version }}) の Elixir のソースコード ([.zip](https://github.com/elixir-lang/elixir"
"/archive/v{{ stable.version }}.zip), [.tar.gz](https://github.com/elixir-lang/"
"elixir/archive/v{{ stable.version }}.tar.gz)) をダウンロードしましょう。ファイルを解凍してディレクトリに移動し"
"、 `make` コマンドを実行します。(note: Windows をお使いの方は [Windows 環境に Elixir をコンパイルする方法](htt"
"ps://github.com/elixir-lang/elixir/wiki/Windows))を参照してください。)"

msgid ""
"Next, let's discuss external and internal dependencies and how Mix helps us ma"
"nage large codebases."
msgstr ""

msgid ""
"Next, we'll look at a feature central to Elixir, Processes, which allows us to"
" write concurrent, parallel and distributed programs in an easy and understand"
"able way."
msgstr ""

msgid ""
"Not only that, any developer can **extend** the `Enum` module to work with any"
" data type as long as the data type implements [the `Enumerable` protocol](htt"
"ps://hexdocs.pm/elixir/Enumerable.html) (protocols in Elixir are based on Cloj"
"ure's protocol). This is extremely convenient because the developer needs to k"
"now only the `Enum` API for enumeration, instead of memorizing specific APIs f"
"or sets, lists, dicts, etc."
msgstr ""

msgid ""
"Not only that, as you create new buckets on the terminal, you should see new p"
"rocesses spawned in the supervision tree shown in Observer:"
msgstr ""

msgid ""
"Not only that, records were often slow in protocol dispatches because every tu"
"ple can potentially be a record, sometimes leading to expensive checks at runt"
"ime."
msgstr ""

msgid ""
"Note \"Mix and OTP\" is our most advanced guide so far and it expects you to hav"
"e read our introductory guide. In case you haven't yet, you can [get started h"
"ere](/getting-started/introduction.html)."
msgstr ""

msgid ""
"Note `Process.monitor(pid)` returns a unique reference that allows us to match"
" upcoming messages to that monitoring reference. After we stop the agent, we c"
"an `flush/0` all messages and notice a `:DOWN` message arrived, with the exact"
" reference returned by monitor, notifying that the bucket process exited with "
"reason `:normal`."
msgstr ""

msgid "Note anonymous functions can also have multiple clauses and guards:"
msgstr ""

msgid ""
"Note describe blocks cannot be nested. Instead of relying on hierarchy for com"
"position, we want developers to build on top of named setups. For example:"
msgstr ""

msgid ""
"Note each entry in the binary pattern is expected to match exactly 8 bits. If "
"we want to match on a binary of unknown size, it is possible by using the bina"
"ry modifier at the end of the pattern:"
msgstr ""

msgid ""
"Note not all tasks have been updated to use strict option parsing. Some tasks,"
" like `mix compile`, are actually a front-end to many other tasks, and as such"
", it cannot effectively assert which options are valid."
msgstr ""

msgid ""
"Note that Elixir {{ stable.name }} requires Erlang {{ stable.minimum_otp }} or"
" later. Many of the instructions below will automatically install Erlang for y"
"ou. In case they do not, read the \"Installing Erlang\" section below."
msgstr ""
"Note > Elixir {{ stable.name }} の使用には Erlang {{ stable.minimum_otp }} 以降が必要ですが"
"、大抵は自動でインストールされます。もしインストールされないようでしたら、\"Installing Erlang\" を参照してください。"

msgid ""
"Note that `acc` is sometimes used to mean a tuple like `{ :cont, x }` and\n"
"sometimes the accumulator value proper. It's a bit confusing, yes."
msgstr ""

msgid ""
"Note that `alias` is **lexically scoped**, which allows you to set aliases ins"
"ide specific functions:"
msgstr ""

msgid ""
"Note that `import` is **lexically scoped** too. This means that we can import "
"specific macros or functions inside function definitions:"
msgstr ""

msgid "Note that `import`ing a module automatically `require`s it."
msgstr ""

msgid ""
"Note that `serve/1` is an infinite loop called sequentially inside `loop_accep"
"tor/1`, so the tail call to `loop_acceptor/1` is never reached and could be av"
"oided. However, as we shall see, we will need to execute `serve/1` in a separa"
"te process, so we will need that tail call soon."
msgstr ""

msgid ""
"Note that a dot (`.`) between the variable and parentheses is required to invo"
"ke an anonymous function. The dot ensures there is no ambiguity between callin"
"g an anonymous function named `add` and a named function `add/2`. In this sens"
"e, Elixir makes a clear distinction between anonymous functions and named func"
"tions. We will explore those differences in [Chapter 8](/getting-started/modul"
"es-and-functions.html)."
msgstr ""

msgid ""
"Note that in our macro implementation, the sentence was not printed, although "
"it was printed in our function implementation. That's because the arguments to"
" a function call are evaluated before calling the function. However, macros do"
" not evaluate their arguments. Instead, they receive the arguments as quoted e"
"xpressions which are then transformed into other quoted expressions. In this c"
"ase, we have rewritten our `unless` macro to become an `if` behind the scenes."
msgstr ""

msgid "Note that inside this new IEx session, we cannot access `Hello.world/0`:"
msgstr ""

msgid ""
"Note that like the `alias` directive, `require` is also lexically scoped. We w"
"ill talk more about macros in a later chapter."
msgstr ""

msgid ""
"Note that the `start_link` function starts a new process that runs the `loop/1"
"` function, starting with an empty map. The `loop/1` function then waits for m"
"essages and performs the appropriate action for each message. In the case of a"
" `:get` message, it sends a message back to the caller and calls `loop/1` agai"
"n, to wait for a new message. While the `:put` message actually invokes `loop/"
"1` with a new version of the map, with the given `key` and `value` stored."
msgstr ""

msgid ""
"Note that the functions in `:digraph` alter the graph structure in-place, this"
"\n"
"is possible because they are implemented as ETS tables, explained next."
msgstr ""

msgid ""
"Note that this applies only to the tuple itself, not its contents. For instanc"
"e, when you update a tuple, all entries are shared between the old and the new"
" tuple, except for the entry that has been replaced. In other words, tuples an"
"d lists in Elixir are capable of sharing their contents. This reduces the amou"
"nt of memory allocation the language needs to perform and is only possible tha"
"nks to the immutable semantics of the language."
msgstr ""

msgid ""
"Note that those functions are polymorphic. They not only convert charlists to "
"strings, but also integers to strings, atoms to strings, and so on."
msgstr ""

msgid "Note that values added to the front are the ones fetched on lookup:"
msgstr ""

msgid ""
"Note that we have also defined a private function named `lookup/2` to help wit"
"h the common functionality of looking up a bucket and returning its `pid` if i"
"t exists, `{:error, :not_found}` otherwise."
msgstr ""

msgid ""
"Note that we need a mechanism to pass the `bucket` pid from the callback to th"
"e test. We do so by using the *test context*. When we return `%{bucket: bucket"
"}` from the callback, ExUnit will merge this map into the test context. Since "
"the test context is a map itself, we can pattern match the bucket out of it, p"
"roviding access to the bucket inside the test:"
msgstr ""

msgid ""
"Note the BEAM Community serves as a mentoring organization for many other proj"
"ects\n"
"that run on the Erlang VM, including Elixir. To see the full list, [visit the "
"website](http://beamcommunity.github.io)."
msgstr ""

msgid "Note the capture syntax can also be used as a shortcut for creating functions:"
msgstr ""

msgid ""
"Note this time we didn't have to define a separate module that invokes `use Dy"
"namicSupervisor`. Instead we directly started it in our supervision tree. This"
" is straight-forward to do with the `DynamicSupervisor` because it doesn't req"
"uire any child to be given during initialization."
msgstr ""

msgid ""
"Note those attributes are not yet available to tools that generate documentati"
"on. Such functionality will be added in Elixir v1.7 once [Elixir adopts EEP-48"
"](https://github.com/elixir-lang/elixir/issues/7198). We still recommend devel"
"opers to start annotating their APIs so the information is already available w"
"hen the tooling is updated."
msgstr ""

msgid ""
"Note though only Elixir records are being deprecated. Erlang records, which ar"
"e basically syntax sugar around tuples, will remain in the language for the ra"
"re cases Elixir developers need to interact with Erlang libraries that provide"
" records. In particular, the [Record](https://hexdocs.pm/elixir/Record.html) h"
"as been updated to provide the new Record API (while keeping the old one for b"
"ackwards compatibility)."
msgstr ""

msgid ""
"Note you don't need to define a behaviour in order to dynamically dispatch on "
"a module, but those features often go hand in hand."
msgstr ""

msgid ""
"Note: all of the modules in the `GenStage` project are prefixed with the `Expe"
"rimental` namespace. That's why the examples below and your code should `alias"
" Experimental.GenStage` at the top of your files."
msgstr ""

msgid ""
"Note: the Debugger snippet above was retrieved from [\"Debugging techniques in "
"Elixir\" by Plataformatec](http://blog.plataformatec.com.br/2016/04/debugging-t"
"echniques-in-elixir-lang/)."
msgstr ""

msgid ""
"Note: this announcement contains [asciinema](https://asciinema.org) snippets. "
"You may need to enable 3rd-party JavaScript on this site in order to see them."
" If JavaScript is disabled, noscript tags with the proper links will be shown."
msgstr ""

msgid ""
"Nothing really exciting happens but it shows how we can control our applicatio"
"n."
msgstr ""

msgid ""
"Nothing that we are describing here is particularly new. Open source projects "
"like CouchDB, Riak, RabbitMQ, Chef11 and companies like Ericsson, Heroku, Bash"
"o, Klarna and Wooga are already enjoying the benefits provided by the Erlang V"
"M, some of them for quite a long time."
msgstr ""

msgid ""
"Notice `spawn/1` returns a PID (process identifier). At this point, the proces"
"s you spawned is very likely dead. The spawned process will execute the given "
"function and exit after the function is done:"
msgstr ""

msgid ""
"Notice how the example above has a comma between `true` and `do:`, that's beca"
"use it is using Elixir's regular syntax where each argument is separated by a "
"comma. We say this syntax is using *keyword lists*. We can pass `else` using k"
"eywords too:"
msgstr ""

msgid ""
"Notice how the process is keeping a state and we can get and update this state"
" by sending the process messages. In fact, any process that knows the `pid` ab"
"ove will be able to send it messages and manipulate the state."
msgstr ""

msgid ""
"Notice how we were able to elegantly parse the commands without adding a bunch"
" of `if/else` clauses that check the command name and number of arguments!"
msgstr ""

msgid ""
"Notice that Elixir allows you to drop the parentheses when invoking named func"
"tions. This feature gives a cleaner syntax when writing declarations and contr"
"ol-flow constructs."
msgstr ""

msgid ""
"Notice that `1 = x` is a valid expression, and it matched because both the lef"
"t and right side are equal to 1. When the sides do not match, a `MatchError` i"
"s raised."
msgstr ""

msgid ""
"Notice that `10 / 2` returned a float `5.0` instead of an integer `5`. This is"
" expected. In Elixir, the operator `/` always returns a float. If you want to "
"do integer division or get the division remainder, you can invoke the `div` an"
"d `rem` functions:"
msgstr ""

msgid ""
"Notice that `put_elem/3` returned a new tuple. The original tuple stored in th"
"e `tuple` variable was not modified. Like lists, tuples are also immutable. Ev"
"ery operation on a tuple returns a new tuple, it never changes the given one."
msgstr ""

msgid ""
"Notice that before our changes `KV.Registry.lookup/2` sent requests to the ser"
"ver, but now it reads directly from the ETS table, which is shared across all "
"processes. That's the main idea behind the cache mechanism we are implementing"
"."
msgstr ""

msgid ""
"Notice that by running `mix test`, Mix has compiled the source files and gener"
"ated the application manifest once again. This happens because Mix supports mu"
"ltiple environments, which we will explore in the next section."
msgstr ""

msgid ""
"Notice that depending on how you installed Erlang, Erlang binaries might not b"
"e available in your PATH. Be sure to have Erlang binaries in your [PATH](https"
"://en.wikipedia.org/wiki/Environment_variable), otherwise Elixir won't work!"
msgstr ""
"Erlang のインストールの仕方によっては、環境変数 PATH からコマンドを利用できないことがあるかも知れません。その場合は PATH を適切に設定して"
"ください。そうでなければ、 Elixir を正常に利用できません。PATH (環境変数) という用語については [PATH](https://ja.wiki"
"pedia.org/wiki/環境変数) を参照してください。"

msgid ""
"Notice that it defines the application callback function, `start/2`, and inste"
"ad of defining a supervisor named `KVServer.Supervisor` that uses the `Supervi"
"sor` module, it conveniently defined the supervisor inline! You can read more "
"about such supervisors by reading [the Supervisor module documentation](https:"
"//hexdocs.pm/elixir/Supervisor.html)."
msgstr ""

msgid "Notice that string interpolation in Elixir calls the `to_string` function:"
msgstr ""

msgid "Notice that the `IO.puts/1` function returns the atom `:ok` after printing."
msgstr ""

msgid ""
"Notice that the number of bytes in that string is 6, even though it has 5 char"
"acters. That's because the character \"ö\" takes 2 bytes to be represented in UT"
"F-8. We can get the actual length of the string, based on the number of charac"
"ters, by using the `String.length/1` function:"
msgstr ""

msgid ""
"Notice that the third element in the quoted variable is the atom `Sample`, ins"
"tead of `nil`, which marks the variable as coming from the `Sample` module. Th"
"erefore, Elixir considers these two variables as coming from different context"
"s and handles them accordingly."
msgstr ""

msgid ""
"Notice that the version with `!` returns the contents of the file instead of a"
" tuple, and if anything goes wrong the function raises an error."
msgstr ""

msgid ""
"Notice that we have two small additions. First we store the `:elixir_parent_co"
"mpiler` PID in the process dictionary so we are able to read it from the error"
" handler and then we proceed to configure a flag in our process so our new err"
"or handler is invoked whenever a module or function cannot be found."
msgstr ""

msgid ""
"Notice that we referred to structs as **bare** maps because none of the protoc"
"ols implemented for maps are available for structs. For example, you can neith"
"er enumerate nor access a struct:"
msgstr ""

msgid ""
"Notice we added an extra clause to `spawn_compilers` so we can properly handle"
" the case where we don't have more files to spawn but we are still waiting for"
" processes in the stack. We have also moved our `receive` logic to a new priva"
"te function called `wait_for_messages`, implemented as follows:"
msgstr ""

msgid ""
"Now a `User` struct can be created without a need to explicitly list all neces"
"sary fields:"
msgstr ""

msgid ""
"Now all data types (including structs) that have not implemented the `Size` pr"
"otocol will be considered to have a size of `0`."
msgstr ""

msgid "Now it can be written in one line by using the new multi syntax:"
msgstr ""

msgid ""
"Now it is your turn to write a test for the functionality above! Also, be sure"
" to explore [the documentation for the `Agent` module](https://hexdocs.pm/elix"
"ir/Agent.html) to learn more about them."
msgstr ""

msgid "Now let's make the doctest pass. Let's implement the `parse/1` function:"
msgstr ""

msgid "Now many gulp tasks are available via the `gulp` command line."
msgstr ""

msgid "Now run `mix test` again (notice this time there will be no compilation):"
msgstr ""

msgid "Now run tests with `mix test`:"
msgstr ""

msgid ""
"Now that our buckets are properly linked and supervised, let's see how we can "
"speed things up."
msgstr ""

msgid ""
"Now that the `KV.Bucket` module has been defined, our test should pass! You ca"
"n try it yourself by running: `mix test`."
msgstr ""

msgid ""
"Now that the server is part of the supervision tree, it should start automatic"
"ally when we run the application. Start your server, now passing the port, and"
" once again use the `telnet` client to make sure that everything still works:"
msgstr ""

msgid ""
"Now that we have defined our supervision tree, it is a great opportunity to in"
"troduce the Observer tool that ships with Erlang. Start your application with "
"`iex -S mix` and key this in:"
msgstr ""

msgid ""
"Now that we have specified `KV` as the module callback, we need to change the "
"`KV` module, defined in `lib/kv.ex`:"
msgstr ""

msgid ""
"Now that we have talked about aliases, we can talk about nesting and how it wo"
"rks in Elixir. Consider the following example:"
msgstr ""

msgid ""
"Now type any string into the terminal and you will see that the same value wil"
"l be printed in upper-case. Unfortunately, this example also got your IEx shel"
"l stuck in the comprehension, so you will need to hit `Ctrl+C` twice to get ou"
"t of it. :)"
msgstr ""

msgid "Now we can start our debugger:"
msgstr ""

msgid ""
"Now we get an error because an application that `:kv` depends on (`:logger` in"
" this case) isn't started. We need to either start each application manually i"
"n the correct order or call `Application.ensure_all_started` as follows:"
msgstr ""

msgid ""
"Now we need to change `loop_acceptor/1` to use `Task.Supervisor` to serve each"
" request:"
msgstr ""

msgid ""
"Now with the protocol defined and implementations in hand, we can start using "
"it:"
msgstr ""

msgid ""
"Now you can run tests for both projects from the umbrella root with `mix test`"
". Sweet!"
msgstr ""

msgid ""
"Now, inside the `apps` directory, you can create as many applications as you w"
"ant and running `mix compile` inside the umbrella project will automatically c"
"ompile all applications. The [original discussion for this feature](https://gi"
"thub.com/elixir-lang/elixir/issues/667) contains more details about how it all"
" works."
msgstr ""

msgid ""
"Now, instead of getting the result back, we got a Stream. The list elements ar"
"e yet to be enumerated! We can realize the stream  by calling any of the Enum "
"functions, like `Enum.to_list/1`. By doing so the list will be iterated just o"
"nce avoiding the intermediary representations."
msgstr ""

msgid "Now, let's start two named nodes again, but inside the `:kv` application:"
msgstr ""

msgid ""
"Now, we can see the metadata spot being used to annotate the line number. This"
" change allowed us to take our macros one step further..."
msgstr ""

msgid "Now, with Logger, we get this report:"
msgstr ""

msgid ""
"OTP is a set of libraries that ships with Erlang. Erlang developers use OTP to"
" build robust, fault-tolerant applications."
msgstr ""

msgid ""
"Observe that we were able to considerably change the server implementation wit"
"hout changing any of the client API. That's one of the benefits of explicitly "
"segregating the server and the client."
msgstr ""

msgid ""
"Of all the approaches above, the first is definitely the most flexible. If our"
" domain rules can be encoded with data structures, they are by far the easiest"
" to compose and implement, as Elixir's standard library is filled with functio"
"ns for manipulating different data types."
msgstr ""

msgid ""
"Often the actual call to `Enumerable.reduce/3` is hidden inside another\n"
"function.  Say that we want to define a `sum` function. The usual way is to\n"
"write it like this:"
msgstr ""

msgid ""
"Often we will have maps inside maps, or even keywords lists inside maps, and s"
"o forth. Elixir provides conveniences for manipulating nested data structures "
"via the `put_in/2`, `update_in/2` and other macros giving the same convenience"
"s you would find in imperative languages while keeping the immutable propertie"
"s of the language."
msgstr ""

msgid ""
"On **Unix systems**, you need to [find your shell profile file](https://unix.s"
"tackexchange.com/a/117470/101951), and then add to the end of this file the fo"
"llowing line reflecting the path to your Elixir installation:"
msgstr ""
"**Unix 系ご利用の方** : Elixir のインストールを終えましたら、コマンドを探索する為に [ログインプロファイル](https://unix."
"stackexchange.com/a/117470/101951)(英語) を作成し、エディタで開いたのちに以下の一行を入力して保存します。設定ファイルが"
"すでに存在する場合は一番最後の行に書き加えてください。"

msgid ""
"On **Windows**, there are [instructions for different versions](http://www.com"
"puterhope.com/issues/ch000549.htm) explaining the process."
msgstr ""
"**Windows をご利用の方** : 環境変数 PATH の設定が OS のバージョンによって異なります。 [各バージョンごとの取扱](http://w"
"ww.computerhope.com/issues/ch000549.htm)(英語) で手順の説明をご用意していますので参考にしてください。"

msgid ""
"On the `mix test` side of things, there is a new `--failed` flag that runs all"
" tests that failed the last time they ran. Finally, coverage reports generated"
" with `mix test --cover` include a summary out of the box:"
msgstr ""

msgid ""
"On the language homepage, we mention that Elixir makes documentation a first-c"
"lass citizen in the language. We have explored this concept many times through"
"out this guide, be it via `mix help` or by typing `h Enum` or another module i"
"n an IEx console."
msgstr ""

msgid ""
"On the last 9th January, we celebrated [two years since Elixir's first commit]"
"(https://github.com/elixir-lang/elixir/commit/337c3f2d569a42ebd5fcab6fef18c5e0"
"12f9be5b) and to celebrate this occasion we have prepared a big release. Elixi"
"r v0.8 is out, with documentation, optimizations, bug fixes and shiny new feat"
"ures. Let's take a look at them!"
msgstr ""

msgid ""
"On the other hand, `:stdio` and files opened with `:utf8` encoding work with t"
"he remaining functions in the `IO` module. Those functions expect a `char_data"
"` as an argument, that is, a list of characters or strings."
msgstr ""

msgid ""
"On the other hand, `Stream.unfold/2` can be used to generate values from a giv"
"en initial value:"
msgstr ""

msgid ""
"On the standard library side, about 40 new functions have been added to Elixir"
" public APIs. For example, [`Enum`](/docs/v1.1/elixir/Enum.html) got [`dedup/1"
"`](/docs/v1.1/elixir/Enum.html#dedup/1), [`random/1`](/docs/v1.1/elixir/Enum.h"
"tml#random/1), and a couple more. The [`String`](/docs/v1.1/elixir/String.html"
") module can now [calculate the distance between strings](/docs/v1.1/elixir/St"
"ring.html#jaro_distance/2). We use this feature to provide suggestions wheneve"
"r an unknown task name is given when using Mix. You can also [yield to](/docs/"
"v1.1/elixir/Task.html#yield/2) and [shutdown](/docs/v1.1/elixir/Task.html#shut"
"down/2) tasks in the [`Task`](/docs/v1.1/elixir/Task.html) module."
msgstr ""

msgid ""
"Once the code above is executed inside an `iex` session, IEx will ask if we wa"
"nt to pry into the current code. If accepted, we will be able to access all va"
"riables, as well as imports and aliases from the code, directly From IEx. Whil"
"e pry is running, the code execution stops, until `continue` is called. Rememb"
"er you can always run `iex` in the context of a project with `iex -S mix TASK`"
"."
msgstr ""

msgid ""
"Once the project is compiled, you can start an `iex` session inside the projec"
"t by running:"
msgstr ""

msgid ""
"Once the release is unpacked, you are ready to run the `elixir` and `iex` comm"
"ands from the `bin` directory, but we recommend you to [add Elixir's bin path "
"to your PATH environment variable](#setting-path-environment-variable) to ease"
" development."
msgstr ""
"一度ファイルを解凍すると 'bin' ディレクトリから 'elixir' や 'iex' コマンドを使用できますが、Elixir へのパスを環境変数 PAT"
"H に追加した方が効率的でしょう。\n"
"詳しくは [環境変数にパスを追加する](#setting-path-environment-variable) を参照してください。"

msgid ""
"Once the supervisor starts, it will traverse the list of children and it will "
"invoke the `child_spec/1` function on each module."
msgstr ""

msgid ""
"Once we change `setup`, some tests will continue to fail. You may even notice "
"tests pass and fail inconsistently between runs. For example, the \"spawns buck"
"ets\" test:"
msgstr ""

msgid ""
"Once we get enough feedback, `GenStage` will be included in some shape as part"
" of the standard library. The goal is to introduce `GenStage` and phase `GenEv"
"ent` out in the long term."
msgstr ""

msgid ""
"Once you exit the telnet client, you will likely see an error in the IEx sessi"
"on:"
msgstr ""

msgid ""
"Once you have Elixir installed, you can check its version by running `elixir -"
"-version`."
msgstr "一度 Elixir のインストールを終わらせると、 `elixir --version` と入力すればバージョンを確認できます。"

msgid ""
"One consequence of this design decision is that parallelizing stateless stages"
" like the consumer above is really straightforward:"
msgstr ""

msgid ""
"One flaw that shows up right away is the ordering issue. Since `KV.Registry` i"
"nvokes `KV.BucketSupervisor`, then the `KV.BucketSupervisor` must be started b"
"efore `KV.Registry`. Otherwise, it may happen that the registry attempts to re"
"ach the bucket supervisor before it has started."
msgstr ""

msgid ""
"One of Elixir goals is to build upon the abstractions provided by Erlang/OTP a"
"nd make them more productive by focusing on the tooling aspect."
msgstr ""

msgid ""
"One of Elixir's goals is extensibility: developers should be able to extend th"
"e language to fit any particular domain. Computer science has become such a wi"
"de field that it is impossible for a language to tackle many fields as part of"
" its core. Rather, our best bet is to make the language extensible, so develop"
"ers, companies, and communities can extend the language to their relevant doma"
"ins."
msgstr ""

msgid ""
"One of such additions is the `--include-siblings` option that can be given to "
"all `xref` commands inside umbrella projects. For example, to find all of the "
"callers of a given module or function of an application in an umbrella:"
msgstr ""

msgid ""
"One of such efforts resulted in \"Umbrella Projects\", which allows developers t"
"o build multiple applications side-by-side, but still run and test them in iso"
"lation when desired. Because each application contains its own configuration, "
"supervision tree and initialization cycle, this gives developers the proper me"
"chanisms to break monolithic applications apart without introducing the comple"
"xity of managing multiple, different repositories."
msgstr ""

msgid ""
"One of the files generated by `mix new` is the `.formatter.exs`. Elixir ships "
"with a code formatter that is capable of automatically formatting our codebase"
" according to consistent style. The formatter is triggered with the `mix forma"
"t` task. The generated `.formatter.exs` file configures which files should be "
"formatted when `mix format` runs."
msgstr ""

msgid ""
"One of the goals for the v0.8 release was better integration with OTP applicat"
"ions. By passing the `--sup` option to Mix, you can start a new OTP Applicatio"
"n containing application callbacks and a supervisor:"
msgstr ""

msgid ""
"One of the goals we have set was to have a good website and documentation befo"
"re the next official release. With the help of the Plataformatec team, we crea"
"ted a logo for Elixir and put this website live."
msgstr ""

msgid ""
"One of the most important changes in this minor release is a partial rehaul of"
"\n"
"the type specification syntax."
msgstr ""

msgid ""
"One of the original motivations for [creating and designing Elixir was to intr"
"oduce better abstractions for working with collections](https://www.youtube.co"
"m/watch?v=Lqo9-pQuRKE). Not only that, we want to provide developers intereste"
"d in manipulating collections with a path to take their code from eager to laz"
"y, to concurrent and then distributed."
msgstr ""

msgid ""
"One of the projects in the Elixir organization is [the `Plug` project](https:/"
"/github.com/elixir-lang/plug), which is meant to be a common foundation for bu"
"ilding web libraries and frameworks in Elixir."
msgstr ""

msgid ""
"One of the tools that most received improvements in this release was our inter"
"active shell. Such improvements come as no surprise as Elixir developers spend"
" a good amount of time in the shell, which is great for development, allowing "
"you to quickly try and load code, to production, where IEx can connect to remo"
"te nodes to inspect production information."
msgstr ""

msgid ""
"One of the use cases for GenStage is to consume data from third-party systems."
" The demand system with back-pressure guarantees we won't import more data tha"
"n we can effectively handle. The demand dispatcher allows us to easily leverag"
"e concurrency when processing the data by simply adding more consumers."
msgstr ""

msgid ""
"One thing to keep in mind when using `do/end` blocks is they are always bound "
"to the outermost function call. For example, the following expression:"
msgstr ""

msgid ""
"Oops, it's already started. Mix normally starts the whole hierarchy of applica"
"tions defined in our project's `mix.exs` file and it does the same for all dep"
"endencies if they depend on other applications."
msgstr ""

msgid ""
"Open up `apps/kv/mix.exs` and change the `application/0` function to return th"
"e following:"
msgstr ""

msgid "Open up `iex` and type the following expressions:"
msgstr ""

msgid ""
"Open up `lib/kv/registry.ex`, and let's change its implementation. We've added"
" comments to the source code to highlight the changes we've made:"
msgstr ""

msgid "Operators are also represented as such tuples:"
msgstr ""

msgid "Or on Windows:"
msgstr ""

msgid "Or to import all functions, you could write:"
msgstr ""

msgid "Or, using the capture syntax:"
msgstr ""

msgid "Or:"
msgstr ""

msgid ""
"Other errors can be raised with `raise/2` passing the error name and a list of"
" keyword arguments:"
msgstr ""

msgid ""
"Other improvements in Mix include [better compiler diagnostics](https://hexdoc"
"s.pm/mix/Mix.Task.Compiler.html) for editor integration, support for [the `--s"
"lowest N` flag in `mix test`](https://hexdocs.pm/mix/Mix.Tasks.Test.html) that"
" shows the slowest tests in your suite, and a new [`mix profile.eprof` task](h"
"ttps://hexdocs.pm/mix/Mix.Tasks.Eprof.html) that provides time based profiling"
", complementing the existing [`mix profile.cprof` (count based)](https://hexdo"
"cs.pm/mix/Mix.Tasks.Profile.Cprof.html) and [`mix profile.fprof` (flame based)"
"](https://hexdocs.pm/mix/Mix.Tasks.Profile.Fprof.html)."
msgstr ""

msgid "Other notable improvements are:"
msgstr ""

msgid ""
"Other parts of the exception system have also been improved. For example, more"
" information is provided in certain occurrences of `ArgumentError`, `Arithmeti"
"cError` and `KeyError` messages."
msgstr ""

msgid "Otherwise, to deactivate the effect, set it up like this:"
msgstr ""

msgid ""
"Otherwise, you can use the stylesheet below to have the icon and the header al"
"igned nicely:"
msgstr ""

msgid ""
"Our `kv` application is complete, so it's time to implement the server that wi"
"ll handle the requests we defined in the first chapter:"
msgstr ""

msgid "Our `macro_unless` macro received the following:"
msgstr ""

msgid ""
"Our `mix.exs` defines two public functions: `project`, which returns project c"
"onfiguration like the project name and version, and `application`, which is us"
"ed to generate an application file."
msgstr ""

msgid ""
"Our `msg` is printed and `print_multiple_times/2` is called again, this time w"
"ith the second argument set to `1`.\n"
"Because `n` is now set to `1`, the guard in our first definition of `print_mul"
"tiple_times/2` evaluates to true, and we execute this particular definition. T"
"he `msg` is printed, and there is nothing left to execute."
msgstr ""

msgid ""
"Our error handler defines two public functions. Both those functions are callb"
"acks required to be implemented by the error handler. They simply call `ensure"
"_loaded(module)` and then delegate the remaining logic to Erlang's original `e"
"rror_handler`."
msgstr ""

msgid ""
"Our estimated date for the first release candidate for Elixir v1.0 is August 3"
"0th. This means there is no better time to learn Elixir than now! If you haven"
"'t started yet, you can get started with Elixir by reading [our Getting Starte"
"d guide](/getting-started/introduction.html) or by checking one of the many \"L"
"earning Resources\" on the sidebar."
msgstr ""

msgid ""
"Our first distributed task retrieves the name of the node the task is running "
"on. Notice we have given an anonymous function to `Task.Supervisor.async/2` bu"
"t, in distributed cases, it is preferable to give the module, function, and ar"
"guments explicitly:"
msgstr ""

msgid ""
"Our first test starts a new `KV.Bucket` by calling the `start_link/1` and pass"
"ing an empty list of options. Then we perform some `get/2` and `put/3` operati"
"ons on it, asserting the result."
msgstr ""

msgid ""
"Our implementation splits the line on whitespace and then matches the command "
"against a list. Using `String.split/1` means our commands will be whitespace-i"
"nsensitive. Leading and trailing whitespace won't matter, nor will consecutive"
" spaces between words. Let's add some new doctests to test this behaviour alon"
"g with the other commands:"
msgstr ""

msgid ""
"Our integration test checks all server interaction, including unknown commands"
" and not found errors. It is worth noting that, as with <abbr title=\"Erlang Te"
"rm Storage\">ETS</abbr> tables and linked processes, there is no need to close "
"the socket. Once the test process exits, the socket is automatically closed."
msgstr ""

msgid ""
"Our integration test will use a TCP client that sends commands to our server a"
"nd assert we are getting the desired responses."
msgstr ""

msgid ""
"Our interactive shell (IEx) also had many improvements, thanks to the Elixir d"
"eveloper community. We now have easy access to documentation, remote shells, a"
"utocomplete and much more. In order to show you a bit of what you can do in th"
"is release, we have prepared a short (~6 min) screencast:"
msgstr ""

msgid ""
"Our previous release, [v0.13.0](/blog/2014/04/21/elixir-v0-13-0-released/), br"
"ought important changes to the language. Back then we have introduced a new as"
"sociative data structure, called maps, and presented the concept of structs to"
" replace Elixir records."
msgstr ""

msgid ""
"Our registry is almost complete. The only remaining issue is that the registry"
" may become stale if a bucket stops or crashes. Let's add a test to `KV.Regist"
"ryTest` that exposes this bug:"
msgstr ""

msgid "Our requirements are:"
msgstr ""

msgid ""
"Our server functionality is almost complete. Only tests are missing. This time"
", we have left tests for last because there are some important considerations "
"to be made."
msgstr ""

msgid ""
"Our supervisor has a single child so far: `KV.Registry`. After we define a lis"
"t of children, we call `Supervisor.init/2`, passing the children and the super"
"vision strategy."
msgstr ""

msgid "Our test should pass right out of the box!"
msgstr ""

msgid ""
"Our test uses the `Supervisor.child_spec/2` function to retrieve the child spe"
"cification out of a module and then assert its restart value is `:temporary`. "
"At this point, you may be wondering why use a supervisor if it never restarts "
"its children. It happens that supervisors provide more than restarts, they are"
" also responsible to guarantee proper startup and shutdown, especially in case"
" of crashes in a supervision tree."
msgstr ""

msgid "Our tests should now (always) pass!"
msgstr ""

msgid ""
"Our website provides a [Getting Started guide](/getting-started/introduction.h"
"tml) to learn more about Elixir's foundation and explore how to build projects"
" with [Mix and OTP](getting-started/mix-otp/introduction-to-mix.html)."
msgstr ""

msgid ""
"Overall, the built-in ability to configure applications and the fact that we h"
"ave built our software as an umbrella application gives us plenty of options w"
"hen deploying the software. We can:"
msgstr ""

msgid "Overall, using `@impl` has the following advantages:"
msgstr ""

msgid ""
"PUT shopping eggs 3\n"
"OK"
msgstr ""

msgid ""
"PUT shopping milk 1\n"
"OK"
msgstr ""

msgid "Passing a data type that doesn't implement the protocol raises an error:"
msgstr ""

msgid ""
"Pattern matching allows developers to easily destructure data types such as tu"
"ples and lists. As we will see in the following chapters, it is one of the fou"
"ndations of recursion in Elixir and applies to other types as well, like maps "
"and binaries."
msgstr ""

msgid ""
"Pattern matching in Elixir is based on Erlang's implementation and in general "
"is very similar:"
msgstr ""

msgid ""
"Pattern matching works because the record meta-data is stored in the User modu"
"le which can be accessed when building patterns."
msgstr ""

msgid ""
"Percentage | Module\n"
"-----------|--------------------------\n"
"   100.00% | Plug.Exception.Any\n"
"   100.00% | Plug.Adapters.Cowboy2.Stream\n"
"   100.00% | Collectable.Plug.Conn\n"
"   100.00% | Plug.Crypto.KeyGenerator\n"
"   100.00% | Plug.Parsers\n"
"   100.00% | Plug.Head\n"
"   100.00% | Plug.Router.Utils\n"
"   100.00% | Plug.RequestId\n"
"       ... | ...\n"
"-----------|--------------------------\n"
"    77.19% | Total\n"
"```"
msgstr ""

msgid "Pid ! {hello}."
msgstr ""

msgid ""
"Please note that some details like version numbers may differ a bit in your se"
"ssion; that's not important. From now on `iex` sessions will be stripped down "
"to focus on the code. To exit `iex` press `Ctrl+C` twice."
msgstr ""

msgid ""
"Please see [IO.inspect/2](https://hexdocs.pm/elixir/IO.html#inspect/2) to read"
" more about other ways in which one could use this function. Also, in order to"
" find a full list of other formatting options that one can use alongside `IO.i"
"nspect/2`, see [Inspect.Opts](https://hexdocs.pm/elixir/Inspect.Opts.html)."
msgstr ""

msgid ""
"Previously, Logger macros such as `debug`, `info`, and so on would always eval"
"uate their arguments, even when nothing would be logged. From Elixir v1.7 the "
"arguments are only evaluated when the message is logged."
msgstr ""

msgid "Prints:"
msgstr ""

msgid ""
"Prior to this release, Elixir had limited expansion of imports and aliases. We"
" decided this would be an important issue to tackle in this release, as people"
" are building more and more projects on top of Elixir."
msgstr ""

msgid ""
"Processes and links play an important role when building fault-tolerant system"
"s. Elixir processes are isolated and don't share anything by default. Therefor"
"e, a failure in a process will never crash or corrupt the state of another pro"
"cess. Links, however, allow processes to establish a relationship in a case of"
" failures. We often link our processes to supervisors which will detect when a"
" process dies and start a new process in its place."
msgstr ""

msgid ""
"Processes are the most common answer to this question. We can write processes "
"that loop infinitely, maintain state, and send and receive messages. As an exa"
"mple, let's write a module that starts new processes that work as a key-value "
"store in a file named `kv.exs`:"
msgstr ""

msgid ""
"Processes get much more interesting when we are able to send and receive messa"
"ges."
msgstr ""

msgid ""
"Producing an Elixir image using the free Erlang on Xen Build Service requires "
"just a few steps:"
msgstr ""

msgid ""
"Productivity is, in general, a hard goal to measure. A language productive for"
" creating desktop applications may not be productive for mathematical computin"
"g. Productivity depends directly on the field in which you intend to use the l"
"anguage, the available tools in the ecosystem and how easy it is to create and"
" extend those tools."
msgstr ""

msgid ""
"Property-based testing however can also have a more powerful impact on the way"
" you design software. When you start writing property-based tests, you will st"
"art thinking about what guarantees your code provides and what properties it s"
"atisfies. If you write properties before writing code, this can easily influen"
"ce the way you write that code."
msgstr ""

msgid ""
"Property-based testing is an intuitive way to fix some of the problems mention"
"ed above."
msgstr ""

msgid ""
"Property-based testing is not something specific to Elixir. While having its r"
"oots in Haskell (check out the [original QuickCheck paper][quickcheck-paper] i"
"f you're interested), nowadays many languages have stable and usable implement"
"ations of it: Clojure has [test.check][], Python has [Hypothesis][], and many "
"more. One of the most famous and complete tools for property-based testing exi"
"sts for Erlang itself: [QuickCheck][] by Quviq is a complete commercial soluti"
"on for property-based testing in Erlang of both stateless as well as stateful "
"systems, and Quviq even provides a custom Erlang scheduler to test race condit"
"ions in your concurrent programs."
msgstr ""

msgid ""
"Protocol consolidation checks all code paths in your project, looking for all "
"protocols and all implementions. When all implementations are found it will re"
"compile all protocols to have quick dispatch rules."
msgstr ""

msgid ""
"Protocols are a mechanism to achieve polymorphism in Elixir. Dispatching on a "
"protocol is available to any data type as long as it implements the protocol. "
"Let's see an example."
msgstr ""

msgid "Providing a non-boolean will raise an exception:"
msgstr ""

msgid ""
"Public functions in modules are globally available, but in order to use macros"
", you need to opt-in by requiring the module they are defined in."
msgstr ""

msgid ""
"Put Elixir and OTP into action as you build a concurrent, fault-tolerant appli"
"cation from scratch in this 6-hour video course from The Pragmatic Studio. By "
"developing a real app with real code, you'll gain practical experience putting"
" all the pieces together to craft applications the Elixir/OTP way."
msgstr ""

msgid ""
"Quote is about retrieving the inner representation of some particular chunk of"
" code. However, sometimes it may be necessary to inject some other particular "
"chunk of code inside the representation we want to retrieve."
msgstr ""

msgid ""
"Records are a good scenario because they are implemented in Elixir, using Elix"
"ir macros, and they also define a module underneath, which exercises the Erlan"
"g VM compilation stack."
msgstr ""

msgid "Records can also be created and pattern matched on:"
msgstr ""

msgid ""
"Recursion and [tail call](https://en.wikipedia.org/wiki/Tail_call) optimizatio"
"n are an important part of Elixir and are commonly used to create loops. Howev"
"er, when programming in Elixir you will rarely use recursion as above to manip"
"ulate lists."
msgstr ""

msgid ""
"Recursion.print_multiple_times(\"Hello!\", 3)\n"
"# Hello!\n"
"# Hello!\n"
"# Hello!\n"
"```"
msgstr ""

msgid ""
"Red:4 is a fictional aerospace startup that needs your help! Through a book, a"
" video, or both you can learn Elixir the fun way by immersing yourself in an o"
"n-the-job style set of problems. For instance, you will set up a project to ca"
"lculate escape velocity for each of the planets in our solar system, learning "
"pattern matching and language basics along the way. You'll move on to orbital "
"mechanics while learning how to debug and refactor your code for clarity and m"
"eaning. You'll learn list basics and data storage techniques as you build a so"
"lar flare tracking system. Finally, you'll dive into OTP using Ecto and Postgr"
"eSQL - all in an effort to overwhelm our internal systems with the power of El"
"ixir!"
msgstr ""

msgid ""
"Reducers also opens up room for lazy and parallel enumeration, as [the Clojure"
" community has already proven](http://clojure.com/blog/2012/05/08/reducers-a-l"
"ibrary-and-model-for-collection-processing.html) and something we are looking "
"forward to explore on upcoming releases."
msgstr ""

msgid ""
"Reducers solve all of those problems by using a more functional approach. Inst"
"ead of asking a list to spill its elements out one by one and then working on "
"each element, we now generate a recipe of computations and pass it down to the"
" list which applies those computations on itself."
msgstr ""

msgid ""
"Regexes are also supported in heredocs, which is convenient when defining mult"
"iline regexes:"
msgstr ""

msgid ""
"Remember Elixir makes a distinction between anonymous functions and named func"
"tions, where the former must be invoked with a dot (`.`) between the variable "
"name and parentheses. The capture operator bridges this gap by allowing named "
"functions to be assigned to variables and passed as arguments in the same way "
"we assign, invoke and pass anonymous functions."
msgstr ""

msgid ""
"Remember however that our `KV.Registry` is both linking (via `start_link`) and"
" monitoring (via `monitor`) bucket processes in the `handle_cast/2` callback:"
msgstr ""

msgid "Restart the nodes and run distributed tests again. Now they should all pass."
msgstr ""

msgid ""
"Returning to our `handle_cast/2` implementation, you can see the registry is b"
"oth linking and monitoring the buckets:"
msgstr ""

msgid ""
"Returns the current value of `key`, if `key` exists.\n"
"\"\"\"\n"
"def delete(bucket, key) do\n"
"  Agent.get_and_update(bucket, &Map.pop(&1, key))\n"
"end\n"
"```"
msgstr ""

msgid "Run `iex -S mix` so we can give our dynamic supervisor a try:"
msgstr ""

msgid "Run the test suite and the doctest should fail:"
msgstr ""

msgid ""
"Running Elixir on Xen opens up many possibilities to Elixir developers. We are"
" very thankful for the work done by [Erlang on Xen team](http://erlangonxen.or"
"g), who added support for Elixir and the `lingex` build tool."
msgstr ""

msgid ""
"Sample.quoted #=> {:x, [line: 3], Sample}\n"
"```"
msgstr ""

msgid "Save it as `simple.exs` and execute it with `elixir`:"
msgstr ""

msgid ""
"Say we have a `LousyCalculator` module, which performs the usual arithmetic op"
"erations (sum, product, and so on) but, instead of returning numbers, it retur"
"ns tuples with the result of an operation as the first element and a random re"
"mark as the second element."
msgstr ""

msgid ""
"Say we want to implement a bunch of parsers, each parsing structured data: for"
" example, a JSON parser and a MessagePack parser. Each of these two parsers wi"
"ll *behave* the same way: both will provide a `parse/1` function and an `exten"
"sions/0` function. The `parse/1` function will return an Elixir representation"
" of the structured data, while the `extensions/0` function will return a list "
"of file extensions that can be used for each type of data (e.g., `.json` for J"
"SON files)."
msgstr ""

msgid ""
"Second, our main process can now receive a new `{ :waiting, child, module }` m"
"essage, so we need to extend it to account for those messages. Not only that, "
"we need to control which PIDs we have spawned so we can notify them whenever a"
" new module is compiled, forcing us to add a new argument to the `spawn_compil"
"ers` function. `spawn_compilers` would then be rewritten as follows:"
msgstr ""

msgid ""
"See LICENSE.txt for further details. But basically, do what you like with this"
"."
msgstr ""

msgid ""
"Sets, maps and other dictionaries can also be given with the `:into` option. I"
"n general, the `:into` accepts any structure as long as it implements the [`Co"
"llectable` protocol](https://hexdocs.pm/elixir/Collectable.html)."
msgstr ""

msgid ""
"Sets, maps, and other dictionaries can also be given to the `:into` option. In"
" general, `:into` accepts any structure that implements the `Collectable` prot"
"ocol."
msgstr ""

msgid ""
"Sigils also support heredocs, that is, triple double- or single-quotes as sepa"
"rators:"
msgstr ""

msgid ""
"Sigils can also be used to do compile-time work with the help of macros. For e"
"xample, regular expressions in Elixir are compiled into an efficient represent"
"ation during compilation of the source code, therefore skipping this step at r"
"untime. If you're interested in the subject, we recommend you learn more about"
" macros and check out how sigils are implemented in the `Kernel` module (where"
" the `sigil_*` functions are defined)."
msgstr ""

msgid "Similar results can be achieved with the string concatenation operator `<>`:"
msgstr ""

msgid ""
"Similar to `IEx.pry/0`, once a breakpoint is reached code execution stops unti"
"l `continue` is invoked. However, note `break!/2` does not have access to alia"
"ses and imports from the debugged code as it works on the compiled artifact ra"
"ther than on source."
msgstr ""

msgid ""
"Similar to `case`, a function may have many clauses. A particular clause is ex"
"ecuted when the arguments passed to the function match the clause's argument p"
"atterns and its guard evaluates to `true`."
msgstr ""

msgid ""
"Similar to constructs like `if`, named functions support both `do:` and `do`/`"
"end` block syntax, as [we learned `do`/`end` is a convenient syntax for the ke"
"yword list format](/getting-started/case-cond-and-if.html#doend-blocks). For e"
"xample, we can edit `math.exs` to look like this:"
msgstr ""

msgid ""
"Similar to the `hd/1` and `tl/1` functions, we can't match an empty list with "
"a head and tail pattern:"
msgstr ""

msgid ""
"Similarly, the performance of list concatenation depends on the length of the "
"left-hand list:"
msgstr ""

msgid "Simply running:"
msgstr ""

msgid ""
"Since Elixir v1.2, all umbrella applications share their configurations, thank"
"s to this line in `config/config.exs` in the umbrella root that loads the conf"
"iguration of all children:"
msgstr ""

msgid ""
"Since `Enum` *does* provide a proper API, in practice `Enum.find/2` is the way"
" to go:"
msgstr ""

msgid ""
"Since a macro receives the code representation as arguments, we can simply con"
"vert an `unless` into an `if` at compile time."
msgstr ""

msgid ""
"Since agents are processes, each bucket has a process identifier (pid), but bu"
"ckets do not have a name. Back [in the Process chapter](/getting-started/proce"
"sses.html), we have learned that we can register processes in Elixir by giving"
" them atom names:"
msgstr ""

msgid ""
"Since any message, including the ones sent via `send/2`, go to `handle_info/2`"
", there is a chance unexpected messages will arrive to the server. Therefore, "
"if we don't define the catch-all clause, those messages could cause our regist"
"ry to crash, because no clause would match. We don't need to worry about such "
"cases for `handle_call/3` and `handle_cast/2` though. Calls and casts are only"
" done via the `GenServer` API, so an unknown message is quite likely a develop"
"er mistake."
msgstr ""

msgid ""
"Since blaming an exception can be expensive, `Exception.blame/3` must be used "
"exclusively in debugging situations. It is not advised to apply it to producti"
"on components such as a Logger. This feature has been integrated into the comp"
"iler, the command line, ExUnit and IEx."
msgstr ""

msgid ""
"Since each test has a unique name, we use the test name to name our registries"
". This way, we no longer need to pass the registry PID around, instead we iden"
"tify it by the test name. Also note we assigned the result of `start_supervise"
"d!` to underscore (`_`). This idiom is often used to signal that we are not in"
"terested in the result of `start_supervised!`."
msgstr ""

msgid ""
"Since maps are meant to replace many cases of records in Erlang, we saw with t"
"he introduction of maps the perfect opportunity to revisit Elixir records as w"
"ell. In order to understand the reasoning behind structs, let's list the featu"
"res we got from Elixir records:"
msgstr ""

msgid ""
"Since only a handful of constructs are [allowed in guards](https://hexdocs.pm/"
"elixir/guards.html#content), if you were in a situation where you had to check"
" the age to be more than or equal to 16 in multiple places, extracting the gua"
"rd to a separate function would be [less than obvious and error prone](https:/"
"/github.com/elixir-lang/elixir/issues/2469). To address those issues, [this re"
"lease introduces `defguard/1` and `defguardp/1`](https://hexdocs.pm/elixir/Ker"
"nel.html#defguard/1):"
msgstr ""

msgid ""
"Since our routing table is now empty, our distributed test should fail. Restar"
"t the apps and re-run tests to see the failure:"
msgstr ""

msgid ""
"Since such checks can discover possible bugs in your codebase, a new compiler "
"called `xref` has been added to `Mix.compilers/0`, so it runs by default every"
" time you compile your code. [PragTob has written an article exploring how thi"
"s new compiler has found bugs in existing projects](https://pragtob.wordpress."
"com/2016/06/02/elixir-1-3s-mix-xref-working-its-magic-in-a-real-world-example/"
")."
msgstr ""

msgid ""
"Since the bucket terminated, the registry went away with it, and our test fail"
"s when trying to `GenServer.call/3` it:"
msgstr ""

msgid ""
"Since the early days, Elixir took ahold of the compilation process in order to"
" provide a seamless compilation experience. [Elixir's ParallelCompiler](/blog/"
"2012/04/24/a-peek-inside-elixir-s-parallel-compiler/) was introduced even befo"
"re the first official release, allowing developers to harness all the cores in"
" their computer to compile Elixir code. However, once the first release came o"
"ut, every time you changed any file, the whole project had to be recompiled."
msgstr ""

msgid ""
"Since there is no variable `unknown` previously defined, Elixir imagined you w"
"ere trying to call a function named `unknown/0`, but such a function does not "
"exist."
msgstr ""

msgid ""
"Since v1.0, the language development has become more focused. We believe there"
" is a limited amount of features a language can provide without hindering its "
"learning and without causing fragmentation in the community. Therefore the Eli"
"xir team focuses on language features that:"
msgstr ""

msgid ""
"Since we have changed the supervisor specification, we need to ask: is our sup"
"ervision strategy still correct?"
msgstr ""

msgid ""
"Since we have characters like `ł` assigned to the code point `322`, we actuall"
"y need more than one byte to represent them. That's why we see a difference wh"
"en we calculate the `byte_size/1` of a string compared to its `String.length/1"
"`:"
msgstr ""

msgid ""
"Since we have now changed our registry to use `KV.BucketSupervisor`, which is "
"registered globally, our tests are now relying on this shared supervisor even "
"though each test has its own registry. The question is: should we?"
msgstr ""

msgid ""
"Since we have relied only on a non-shared partition of the bucket supervisor s"
"o far, we don't need to worry about concurrency issues in our test suite. In c"
"ase it ever becomes a problem, we can start a supervisor per test and pass it "
"as an argument to the registry `start_link` function."
msgstr ""

msgid ""
"Since we spent all this time talking about how applications are started and st"
"opped, there must be a way to do something useful when the application starts."
" And indeed, there is!"
msgstr ""

msgid ""
"Since we want `kv_server` to eventually use the functionality we defined in `k"
"v`, we need to add `kv` as a dependency to our application."
msgstr ""

msgid ""
"Since we're generating lots of random inputs to test, inputs that cause failur"
"es are often complex and convoluted. Take this trivial example of a property:"
msgstr ""

msgid ""
"Single quotes are charlists, double quotes are strings. We will talk more abou"
"t them in the [\"Binaries, strings and charlists\"](/getting-started/binaries-st"
"rings-and-char-lists.html) chapter."
msgstr ""

msgid ""
"So far `start_link/1` has always received an empty list of options. It is time"
" we change that."
msgstr ""

msgid ""
"So far our application has a registry that may monitor dozens, if not hundreds"
", of buckets. While we think our implementation so far is quite good, no softw"
"are is bug-free, and failures are definitely going to happen."
msgstr ""

msgid ""
"So far we have been starting one registry per test to ensure they are isolated"
":"
msgstr ""

msgid ""
"So far we have explored tasks that are started and run in isolation, with no r"
"egard for their return value. However, sometimes it is useful to run a task to"
" compute a value and read its result later on. For this, tasks also provide th"
"e `async/await` pattern:"
msgstr ""

msgid ""
"So far we have hardcoded the routing table into the `KV.Router` module. Howeve"
"r, we would like to make the table dynamic. This allows us not only to configu"
"re development/test/production, but also to allow different nodes to run with "
"different entries in the routing table. There is a feature of  <abbr title=\"Op"
"en Telecom Platform\">OTP</abbr> that does exactly that: the application enviro"
"nment."
msgstr ""

msgid ""
"So far we have only written unit tests, typically testing a single module dire"
"ctly. However, in order to make `KVServer.Command.run/1` testable as a unit we"
" would need to change its implementation to not send commands directly to the "
"`KV.Registry` process but instead pass a server as an argument. For example, w"
"e would need to change `run`'s signature to `def run(command, pid)` and then c"
"hange all clauses accordingly:"
msgstr ""

msgid ""
"So far we have used three callbacks: `handle_call/3`, `handle_cast/2` and `han"
"dle_info/2`. Here is what we should consider when deciding when to use each:"
msgstr ""

msgid ""
"So far we haven't discussed any associative data structures, i.e. data structu"
"res that are able to associate a certain value (or multiple values) to a key. "
"Different languages call these different names like dictionaries, hashes, asso"
"ciative arrays, etc."
msgstr ""

msgid ""
"So far, all examples have used `/` to delimit a regular expression. However, s"
"igils support 8 different delimiters:"
msgstr ""

msgid ""
"So let's do that. Let's slightly change our children definition to be a list o"
"f tuples instead of a list of atoms:"
msgstr ""

msgid "So let's get started!"
msgstr ""

msgid ""
"So our last option is to go all in and pick the `:one_for_all` strategy: the s"
"upervisor will kill and restart all of its children processes whenever any one"
" of them dies. This is a completely reasonable approach for our application, s"
"ince the registry can't work without the bucket supervisor, and the bucket sup"
"ervisor should terminate without the registry. Let's reimplement `init/1` in `"
"KV.Supervisor` to encode those properties:"
msgstr ""

msgid "Some operators are spelled differently."
msgstr ""

msgid ""
"Sometimes it's necessary to ensure that a resource is cleaned up after some ac"
"tion that could potentially raise an error. The `try/after` construct allows y"
"ou to do that. For example, we can open a file and use an `after` clause to cl"
"ose it--even if something goes wrong:"
msgstr ""

msgid ""
"Sometimes variable names might be dynamically created. In such cases, `Macro.v"
"ar/2` can be used to define new variables:"
msgstr ""

msgid ""
"Sometimes when working with quoted expressions, it may be useful to get the te"
"xtual code representation back. This can be done with `Macro.to_string/1`:"
msgstr ""

msgid ""
"Sometimes you may want to wrap the entire body of a function in a `try` constr"
"uct, often to guarantee some code will be executed afterwards. In such cases, "
"Elixir allows you to omit the `try` line:"
msgstr ""

msgid ""
"Sometimes you will create a list and it will return a value in single quotes. "
"For example:"
msgstr ""

msgid ""
"Speaking about warnings, Mix v1.3 includes a new task called `xref` that perfo"
"rms cross reference checks in your code. One of such checks is the ability to "
"find calls to modules and functions that do not exist. For example, if in your"
" library code you call `ThisModuleDoesNotExist.foo(1, 2, 3)`, `mix xref unreac"
"hable` will be able to find such code and let you know about it."
msgstr ""

msgid ""
"Square = fun(X) -> X * X end.\n"
"lists:map(Square, [1, 2, 3, 4]).\n"
"%=> [1, 4, 9, 16]\n"
"```"
msgstr ""

msgid "Start IEx with `iex -S mix` and you can see that the IEx prompt has changed."
msgstr ""

msgid ""
"Start a new server with `PORT=4040 mix run --no-halt` and we can now open up m"
"any concurrent telnet clients. You will also notice that quitting a client doe"
"s not bring the acceptor down. Excellent!"
msgstr ""

msgid ""
"Start an IEx session inside the `kv_server` application with `iex -S mix`. Ins"
"ide IEx, run:"
msgstr ""

msgid "Streams are lazy, composable enumerables."
msgstr ""

msgid ""
"String (binary) concatenation uses the `<>` operator but charlists use the lis"
"ts concatenation operator `++`:"
msgstr ""

msgid "String concatenation is done with `<>`:"
msgstr ""

msgid ""
"Strings can have line breaks in them. You can introduce them using escape sequ"
"ences:"
msgstr ""

msgid ""
"Strings in Elixir are delimited by double quotes, and they are encoded in UTF-"
"8:"
msgstr ""

msgid ""
"Strings in Elixir are represented internally by binaries which are sequences o"
"f bytes:"
msgstr ""

msgid ""
"Structs allow us to provide default values for a map fields. Structs also vali"
"date, at compilation time, that all fields given during the struct constructio"
"n are valid fields. The following, for example, would fail:"
msgstr ""

msgid ""
"Structs alongside protocols provide one of the most important features for Eli"
"xir developers: data polymorphism. That's what we will explore in the next cha"
"pter."
msgstr ""

msgid ""
"Structs are extensions built on top of maps that provide compile-time checks a"
"nd default values."
msgstr ""

msgid ""
"Structs are meant to replace Elixir records. Records in Elixir are simply tupl"
"es supported by modules which store record metadata:"
msgstr ""

msgid ""
"Structs can also be used in pattern matching, both for matching on the value o"
"f specific keys as well as for ensuring that the matching value is a struct of"
" the same type as the matched value."
msgstr ""

msgid ""
"Structs provide *compile-time* guarantees that only the fields (and *all* of t"
"hem) defined through `defstruct` will be allowed to exist in a struct:"
msgstr ""

msgid ""
"Structs take the name of the module they're defined in. In the example above, "
"we defined a struct named `User`."
msgstr ""

msgid ""
"Structs were added to address features `3.` and `4.`. A struct needs to be exp"
"licitly defined via `defstruct`:"
msgstr ""

msgid ""
"Such guarantees that, if a supervised `EventHandler` crashes, the supervisor w"
"ill start a new event handler which will promptly subscribe to the same manage"
"r, solving the awkward error handling semantics we have seen with `GenEvent`."
msgstr ""

msgid ""
"Such improvements do not only make compilation faster but they also make worki"
"ng with umbrella applications much more productive. Previously, changing a sib"
"ling application triggered a full project recompilation, now Elixir can track "
"between sibling applications and recompile only what is needed."
msgstr ""

msgid ""
"Supervisor.start_link(children, strategy: :one_for_one)\n"
"```"
msgstr ""

msgid ""
"Supervisor.start_link(children, strategy: :one_for_one)\n"
"{% endhighlight %}\n"
"    </div>\n"
"  </div>"
msgstr ""

msgid ""
"Supervisors in Elixir are responsible for starting, shutting down, and restart"
"ing child processes when things go wrong. Most of the interaction with supervi"
"sors happens through [the `Supervisor` module](https://hexdocs.pm/elixir/Super"
"visor.html) and it provides three main strategies: `:one_for_one`, `:rest_for_"
"one` and `:one_for_all`."
msgstr ""

msgid ""
"Tags in ExUnit are used to annotate tests. Tags can be later used to filter te"
"sts. For example, you can avoid running external tests on your machine because"
" they are slow and dependent on other services, while they can still be enable"
"d in your build system."
msgstr ""

msgid ""
"Take note of the second argument to `Macro.var/2`. This is the context being u"
"sed and will determine hygiene as described in the next section."
msgstr ""

msgid ""
"Tasks build on top of the spawn functions to provide better error reports and "
"introspection:"
msgstr ""

msgid ""
"Test_fun(-2).\n"
"%=> zero_or_negative"
msgstr ""

msgid ""
"Test_fun(10).\n"
"%=> exactly_ten\n"
"```"
msgstr ""

msgid ""
"Test_fun(11).\n"
"%=> greater_than_ten"
msgstr ""

msgid ""
"Testing a GenServer is not much different from testing an agent. We will spawn"
" the server on a setup callback and use it throughout our tests. Create a file"
" at `test/kv/registry_test.exs` with the following:"
msgstr ""

msgid ""
"Thank you and don't forget to [give Elixir a try](/getting-started/introductio"
"n.html)!"
msgstr ""

msgid ""
"Thankfully, Elixir v1.2 introduced the `with` construct, which allows you to s"
"implify code like the above, replacing nested `case` calls with a chain of mat"
"ching clauses. Let's rewrite the `serve/1` function to use `with`:"
msgstr ""

msgid ""
"That happens because the `IO` module actually works with processes (see [chapt"
"er 11](/getting-started/processes.html)). When you write `IO.write(pid, binary"
")`, the `IO` module will send a message to the process identified by `pid` wit"
"h the desired operation. Let's see what happens if we use our own process:"
msgstr ""

msgid ""
"That said, Elixir does not import the default `element` and `setelement` funct"
"ions, but instead provides `elem` and `put_elem`:"
msgstr ""

msgid "That said, how could we leverage concurrency in the example above?"
msgstr ""

msgid "That said, in the next months we plan to:"
msgstr ""

msgid ""
"That said, there are still cases where using macros and modules to build domai"
"n-specific languages is useful. Since we have explored data structures and fun"
"ction definitions in the Getting Started guide, this chapter will explore how "
"to use macros and module attributes to tackle more complex DSLs."
msgstr ""

msgid ""
"That's all for now! Elixir developers can see [a summary of all changes in v0."
"14.0 in the release notes](https://github.com/elixir-lang/elixir/releases/tag/"
"v0.14.0). In case you are new around here, you can get started with Elixir by "
"reading [our Getting Started guide](/getting-started/introduction.html)."
msgstr ""

msgid ""
"That's because we were expecting data from `:gen_tcp.recv/2` but the client cl"
"osed the connection. We need to handle such cases better in future revisions o"
"f our server."
msgstr ""

msgid ""
"That's enough for our tests to pass but there is a resource leakage in our app"
"lication. When a bucket terminates, the supervisor will start a new bucket in "
"its place. After all, that's the role of the supervisor!"
msgstr ""

msgid ""
"That's it for the client API. On the server side, we can implement a variety o"
"f callbacks to guarantee the server initialization, termination, and handling "
"of requests. Those callbacks are optional and for now, we have only implemente"
"d the ones we care about."
msgstr ""

msgid ""
"That's it. For the next months, we will continue improving Elixir (you can see"
" some ideas floating around in the [issues tracker](https://github.com/elixir-"
"lang/elixir/issues)) but we will start to focus on other tools and libraries f"
"or the community."
msgstr ""

msgid ""
"That's not what we wanted, since the value of the `number` variable has not be"
"en injected and `number` has been quoted in the expression. In order to inject"
" the *value* of the `number` variable, `unquote` has to be used inside the quo"
"ted representation:"
msgstr ""

msgid ""
"That's what macros are all about. They are about receiving quoted expressions "
"and transforming them into something else. In fact, `unless/2` in Elixir is im"
"plemented as a macro:"
msgstr ""

msgid "That's when `unquote_splicing` becomes handy:"
msgstr ""

msgid ""
"The Dungeon can have many rooms and we keep them in a map, with the room id as"
" key, and the Room struct as value:"
msgstr ""

msgid ""
"The Elixir Community has also produced plenty of resources to explore Elixir f"
"rom different backgrounds and other perspectives. We are sure you will find a "
"resource that follows your pace and interests."
msgstr ""

msgid ""
"The Elixir codebase itself [has already been fully formatted](https://github.c"
"om/elixir-lang/elixir/issues/6643) and all further contributions are expected "
"to contain formatted code. We recommend existing codebases to be formatted in "
"steps. While the formatter will correctly handle long lines and complex expres"
"sions, refactoring the code by breaking those into variables or smaller functi"
"ons as you format them will lead to overall cleaner and more readable codebase"
"s."
msgstr ""

msgid ""
"The IEx helper `h`, responsible for showing documentation for existing modules"
" and functions, has now been improved to rely on ANSI codes and nicely format "
"the documentation. let's take a look at the docs for the String module:"
msgstr ""

msgid ""
"The Little Elixir & OTP Guidebook gets you started programming applications wi"
"th Elixir and OTP. You begin with a quick overview of the Elixir language synt"
"ax, along with just enough functional programming to use it effectively. Then,"
" you'll dive straight into OTP and learn how it helps you build scalable, faul"
"t-tolerant and distributed applications through several fun examples. Come red"
"iscover the joy of programming with Elixir and remember how it feels like to b"
"e a beginner again."
msgstr ""

msgid ""
"The Logger configuration system also accepts a new option called `:compile_tim"
"e_purge_matching` that allows you to remove log calls with specific compile-ti"
"me metadata. For example, to remove all logger calls from application `:foo` w"
"ith level lower than `:info`, as well as remove all logger calls from `Bar.foo"
"/3`, you can use the following configuration:"
msgstr ""

msgid ""
"The Plug library also allows developers to define their own plugs which can be"
" run in a web server:"
msgstr ""

msgid ""
"The Unicode standard assigns code points to many of the characters we know. Fo"
"r example, the letter `a` has code point `97` while the letter `ł` has code po"
"int `322`. When writing the string `\"hełło\"` to disk, we need to convert this "
"sequence of characters to bytes. If we adopted a rule that said one byte repre"
"sents one code point, we wouldn't be able to write `\"hełło\"`, because it uses "
"the code point `322` for `ł`, and one byte can only represent a number from `0"
"` to `255`. But of course, given you can actually read `\"hełło\"` on your scree"
"n, it must be represented *somehow*. That's where encodings come in."
msgstr ""

msgid ""
"The [String module](https://hexdocs.pm/elixir/String.html) contains a bunch of"
" functions that operate on strings as defined in the Unicode standard:"
msgstr ""

msgid ""
"The [`Enum` module](https://hexdocs.pm/elixir/Enum.html), which we're going to"
" see in the next chapter, already provides many conveniences for working with "
"lists. For instance, the examples above could be written as:"
msgstr ""

msgid ""
"The [`File`](https://hexdocs.pm/elixir/File.html) module contains functions th"
"at allow us to open files as IO devices. By default, files are opened in binar"
"y mode, which requires developers to use the specific `IO.binread/2` and `IO.b"
"inwrite/2` functions from the `IO` module:"
msgstr ""

msgid ""
"The [`IO`](https://hexdocs.pm/elixir/IO.html) module is the main mechanism in "
"Elixir for reading and writing to standard input/output (`:stdio`), standard e"
"rror (`:stderr`), files, and other IO devices. Usage of the module is pretty s"
"traightforward:"
msgstr ""

msgid ""
"The [`Registry`](https://hexdocs.pm/elixir/Registry.html) is a new module in E"
"lixir's standard library that allows Elixir developers to implement patterns s"
"uch as name lookups, code dispatching or even a pubsub system in a simple and "
"scalable way."
msgstr ""

msgid ""
"The [`StringIO`](https://hexdocs.pm/elixir/StringIO.html) module provides an i"
"mplementation of the `IO` device messages on top of strings:"
msgstr ""

msgid ""
"The [`queue` is a data structure](http://erlang.org/doc/man/queue.html)\n"
"that implements (double-ended) FIFO (first-in first-out) queues efficiently:"
msgstr ""

msgid ""
"The `&1` represents the first argument passed into the function. `&(&1+1)` abo"
"ve is exactly the same as `fn x -> x + 1 end`. The syntax above is useful for "
"short function definitions."
msgstr ""

msgid ""
"The `--format dot` option can also be given to generate graph files to be open"
"ed by [GraphViz](http://www.graphviz.org). For example, here is the output of "
"running `mix deps.tree --format dot --only prod` in the [Phoenix web framework"
"](http://phoenixframework.org):"
msgstr ""

msgid ""
"The `--trace` option is useful when your tests are deadlocking or there are ra"
"ce conditions, as it runs all tests synchronously (`async: true` has no effect"
") and shows detailed information about each test. This time we should be down "
"to one or two intermittent failures:"
msgstr ""

msgid ""
"The `:crypto` module is not part of the Erlang standard library, but is\n"
"included with the Erlang distribution. This means you must list `:crypto`\n"
"in your project's applications list whenever you use it. To do this,\n"
"edit your `mix.exs` file to include:"
msgstr ""

msgid ""
"The `:mod` option specifies the \"application callback module\", followed by the"
" arguments to be passed on application start. The application callback module "
"can be any module that implements the [Application](https://hexdocs.pm/elixir/"
"Application.html) behaviour."
msgstr ""

msgid ""
"The `@typedoc` directive, similarly to the `@doc` and `@moduledoc` directives,"
" is used to document custom types."
msgstr ""

msgid ""
"The `Enum.map/2` we have used above is now implemented in terms of this reduci"
"ng function:"
msgstr ""

msgid "The `Enum` module performs eager evaluation. Consider the following example:"
msgstr ""

msgid ""
"The `Enum` module provides a huge range of functions to transform, sort, group"
", filter and retrieve items from enumerables. It is one of the modules develop"
"ers use frequently in their Elixir code."
msgstr ""

msgid ""
"The `EventManager` works as a buffer. If there is demand but not events to be "
"sent, we store such demand. If there are events but no demand, we store such e"
"vents in a queue. If a client tries to broadcast an event, the `sync_notify` c"
"all will block until the event is effectively broadcasted. The bulk of the log"
"ic is in the `dispatch_events/3` function that takes events from the queue whi"
"le there is demand."
msgstr ""

msgid ""
"The `Inspect` protocol is the protocol used to transform any data structure in"
"to a readable textual representation. This is what tools like IEx use to print"
" results:"
msgstr ""

msgid ""
"The `Size` protocol expects a function called `size` that receives one argumen"
"t (the data structure we want to know the size of) to be implemented. We can n"
"ow implement this protocol for the data structures that would have a compliant"
" implementation:"
msgstr ""

msgid ""
"The `Task.async_stream` functions are also lazy, allowing developers to partia"
"lly consume the stream until a condition is reached. Furthermore, `Task.Superv"
"isor.async_stream/4` and `Task.Supervisor.async_stream/6` can be used to ensur"
"e the concurrent tasks are spawned under a given supervisor."
msgstr ""

msgid ""
"The `[head | tail]` format is not only used on pattern matching but also for p"
"repending items to a list:"
msgstr ""

msgid ""
"The `__struct__` field is also used for polymorphic dispatch in protocols, add"
"ressing issue `4.`."
msgstr ""

msgid "The ``case`` construct provides control flow based purely on pattern matching."
msgstr ""

msgid ""
"The `after` clause will be executed regardless of whether or not the tried blo"
"ck succeeds. Note, however, that if a linked process exits,\n"
"this process will exit and the `after` clause will not get run. Thus `after` p"
"rovides only a soft guarantee. Luckily, files in Elixir are also linked to the"
" current processes and therefore they will always get closed if the current pr"
"ocess crashes, independent of the\n"
"`after` clause. You will find the same to be true for other resources like ETS"
" tables, sockets, ports and more."
msgstr ""

msgid ""
"The `assert` macro is able to look at the code, extract the current file, the "
"line, extract the operands and show a diff between the data structures alongsi"
"de the stacktrace when the assertion fails."
msgstr ""

msgid ""
"The `child_spec/1` function returns the child specification which describes ho"
"w to start the process, if the process is a worker or a supervisor, if the pro"
"cess is temporary, transient or permanent and so on. The `child_spec/1` functi"
"on is automatically defined when we `use Agent`, `use GenServer`, `use Supervi"
"sor`, etc. Let's give it a try in the terminal with `iex -S mix`:"
msgstr ""

msgid ""
"The `do:` and `else:` pairs are keyword lists! In fact, the call above is equi"
"valent to:"
msgstr ""

msgid ""
"The `do_interleave` function first calls `a` (`af` from `interleave`) with the"
"\n"
"`step` function so that the available element of `a` gets added to the\n"
"accumulator and `a` immediately suspends afterwards. Then the same is done for"
"\n"
"`b`. If either producer is done all the remaining elements of the other get\n"
"added to the accumulator list."
msgstr ""

msgid ""
"The `graph` command in `mix xref` now can also output general statistics about"
" the graph. In [the hexpm project](https://github.com/hexpm/hexpm), you would "
"get:"
msgstr ""

msgid ""
"The `if` block above is implicitly changing the value in `message`. Now imagin"
"e we want to move the `if` block to its own function to clean up the implement"
"ation:"
msgstr ""

msgid ""
"The `inspect/1` function is used to convert a data structure's internal repres"
"entation into a string, typically for printing. Notice that when the `receive`"
" block gets executed the sender process we have spawned may already be dead, a"
"s its only instruction was to send a message."
msgstr ""

msgid ""
"The `lib/kv.ex` file was compiled, an application manifest named `kv.app` was "
"generated and [all protocols were consolidated as described in the Getting Sta"
"rted guide](/getting-started/protocols.html#protocol-consolidation). All compi"
"lation artifacts are placed inside the `_build` directory using the options de"
"fined in the `mix.exs` file."
msgstr ""

msgid ""
"The `mix run` command also accepts a `--config` flag, which allows configurati"
"on files to be given on demand. This could be used to start different nodes, e"
"ach with its own specific configuration (for example, different routing tables"
")."
msgstr ""

msgid ""
"The `mix test` command also allows us to dynamically include and exclude tags."
" For example, we can run `$ mix test --include distributed` to run distributed"
" tests regardless of the value set in `test/test_helper.exs`. We could also pa"
"ss `--exclude` to exclude a particular tag from the command line. Finally, `--"
"only` can be used to run only tests with a particular tag:"
msgstr ""

msgid ""
"The `mix xref` task was also updated to warn if your project calls deprecated "
"code. So if a definition is marked as `@deprecated` and a module invokes it, a"
" warning will be emitted during compilation. This effectively provides librari"
"es and frameworks a mechanism to deprecate code without causing multiple warni"
"ngs to be printed in runtime and without impacting performance."
msgstr ""

msgid ""
"The `read_line/1` implementation receives data from the socket using `:gen_tcp"
".recv/2` and `write_line/2` writes to the socket using `:gen_tcp.send/2`."
msgstr ""

msgid ""
"The `spawn_link` function starts a new process and automatically links the cur"
"rent (parent) process with the spawned (child) one, returning the child PID. B"
"y linking the process we ensure that, if the child process dies, a message wil"
"l be sent to the parent process which then can act on it."
msgstr ""

msgid ""
"The `start_supervised!` function will do the job of starting the `KV.Registry`"
" process by calling `start_link/1`. The advantage of using `start_supervised!`"
" is that ExUnit will guarantee that the registry process will be shutdown befo"
"re the next test starts. In other words, it helps guarantee the state of one t"
"est is not going to interfere with the next one in case they depend on shared "
"resources."
msgstr ""

msgid ""
"The `update_in/2` macro is similar but allows us to pass a function that contr"
"ols how the value changes. For example, let's remove \"Clojure\" from Mary's lis"
"t of languages:"
msgstr ""

msgid ""
"The `use` macro is frequently used by developers to bring external functionali"
"ty into the current lexical scope, often modules."
msgstr ""

msgid ""
"The `|>` symbol used in the snippet above is the **pipe operator**: it takes t"
"he output from the expression on its left side and passes it as the first argu"
"ment to the function call on its right side. It's similar to the Unix `|` oper"
"ator.  Its purpose is to highlight the data being transformed by a series of f"
"unctions. To see how it can make the code cleaner, have a look at the example "
"above rewritten without using the `|>` operator:"
msgstr ""

msgid "The `~c` sigil is useful for generating char lists that contain single quotes:"
msgstr ""

msgid ""
"The `~s` sigil is used to generate strings, like double quotes are. The `~s` s"
"igil is useful when a string contains double quotes:"
msgstr ""

msgid ""
"The `~w` sigil also accepts the `c`, `s` and `a` modifiers (for char lists, st"
"rings, and atoms, respectively), which specify the data type of the elements o"
"f the resulting list:"
msgstr ""

msgid ""
"The `~w` sigil is used to generate lists of words (*words* are just regular st"
"rings). Inside the `~w` sigil, words are separated by whitespace."
msgstr ""

msgid ""
"The above example shows the difference; the `String` module returns Unicode\n"
"codepoints, while `:binary` deals with raw data bytes."
msgstr ""

msgid ""
"The above will open another Graphical User Interface that provides many panes "
"to fully understand and navigate the runtime and your project:"
msgstr ""

msgid "The above works by calling the `child_spec/1` function on the given modules."
msgstr ""

msgid "The above would be equivalent to Erlang's `fun math:square/1`."
msgstr ""

msgid ""
"The aim of the current implementation of the Calendar modules and its types is"
" to provide a base for interoperatibility in the ecosystem instead of full-fea"
"tured datetime API. This release includes basic functionality for building new"
" types and converting them from and back strings."
msgstr ""

msgid ""
"The amount of functionality in the [`Enum`](https://hexdocs.pm/elixir/Enum.htm"
"l) and [`Stream`](https://hexdocs.pm/elixir/Stream.html) modules can be daunti"
"ng at first, but you will get familiar with them case by case. In particular, "
"focus on the `Enum` module first and only move to `Stream` for the particular "
"scenarios where laziness is required, to either deal with slow resources or la"
"rge, possibly infinite, collections."
msgstr ""

msgid ""
"The answer to the first question is that we believe providing such a tool in t"
"he standard library will encourage developers to use property-based testing an"
"d ultimately improve their software and the way they write it. At the same tim"
"e, we want to be able to use property-based testing to test the Elixir codebas"
"e itself (which already turned out great [in the past][quickcheck-pr])."
msgstr ""

msgid ""
"The application works as a distributed key-value store. We are going to organi"
"ze key-value pairs into buckets and distribute those buckets across multiple n"
"odes. We will also build a simple client that allows us to connect to any of t"
"hose nodes and send requests such as:"
msgstr ""

msgid ""
"The applications that ship with Elixir also has seen improvements and bug fixe"
"s. [ExUnit](/docs/v1.1/ex_unit/ExUnit.html), Elixir's test framework, now has "
"support for skipping tests via tags `@tag :skip`, as well as the ability to ca"
"pture logs via `@tag :capture_log`, ensuring that all log messages during the "
"tests are captured. Even better, in case of failures, all captured log message"
"s are printed along-side the test error report."
msgstr ""

msgid ""
"The autocomplete mechanism also got smarter, being able to provide context aut"
"ocompletion. For example, typing `t Enum.` and hitting TAB will autocomplete o"
"nly the types in Enum (in contrast to all functions). Typing `b GenServer.` an"
"d hitting TAB will autocomplete only the behaviour callbacks."
msgstr ""

msgid ""
"The basic idea of enumerators is that you traverse some data structure or\n"
"resource (lines from a file) by putting the thing that is traversed in control"
".\n"
"That is if you're reading from a file you have a loop that reads lines from a\n"
"file and for each line calls a function. Just calling a function isn't all tha"
"t\n"
"useful for most tasks as there'd be no way to remember previous lines (ugly\n"
"hacks aside), so some accumulator value is passed to the function and a new\n"
"accumulator is returned by it."
msgstr ""

msgid ""
"The basic mechanism for spawning new processes is the auto-imported `spawn/1` "
"function:"
msgstr ""

msgid ""
"The best way to support the language is by getting involved in its community a"
"nd contributing to the ecosystem."
msgstr ""

msgid ""
"The big feature in Elixir v1.6 is the addition of [a code formatter](https://h"
"exdocs.pm/elixir/Code.html#format_string!/2) and an accompanying `mix format` "
"task that adds automatic formatting to your projects."
msgstr ""

msgid ""
"The book starts with a basic introduction to the Elixir language and functiona"
"l programming idioms. The central part of the book deals with Erlang VM and OT"
"P, discussing topics such as concurrent programming, fault-tolerance, and dist"
"ributed systems. Finally, you'll learn how to package your code into component"
"s, create a standalone deployable release, and troubleshoot the running system"
". The theory is demonstrated through a simplistic example that is gradually ex"
"panded throughout the book into a fully standalone releasable system."
msgstr ""

msgid "The booleans `true` and `false` are, in fact, atoms:"
msgstr ""

msgid ""
"The building block of an Elixir program is a tuple with three elements. For ex"
"ample, the function call `sum(1, 2, 3)` is represented internally as:"
msgstr ""

msgid ""
"The built-in Elixir String module handles binaries that are UTF-8 encoded.\n"
"[The binary module](http://erlang.org/doc/man/binary.html) is useful when\n"
"you are dealing with binary data that is not necessarily UTF-8 encoded."
msgstr ""

msgid ""
"The changes we have performed above have broken our tests because the registry"
" requires the `:name` option when starting up. Furthermore, some registry oper"
"ations such as `lookup/2` require the name to be given as an argument, instead"
" of a PID, so we can do the ETS table lookup. Let's change the setup function "
"in `test/kv/registry_test.exs` to fix both issues:"
msgstr ""

msgid ""
"The code above will also start the same `SomeMod.function(element)` task for e"
"very element in the collection except it will also guarantee we have at most 8"
" tasks being processed at the same time. You can use `System.schedulers_online"
"` to retrieve the number of cores and balance the processing based on the amou"
"nt of cores available."
msgstr ""

msgid ""
"The code above would have the same flaw: if we link the `serve(client)` task t"
"o the acceptor, a crash when serving a request would bring the acceptor, and c"
"onsequently all other connections, down."
msgstr ""

msgid ""
"The community has also created their own tools, often to aid in production, ot"
"her times in development:"
msgstr ""

msgid ""
"The community has expressed some concern regarding two main things: why do we "
"want to include a property-based testing tool in Elixir's standard library? An"
"d why write such a tool from scratch instead of using one of the existing Erla"
"ng or Elixir solutions?"
msgstr ""

msgid ""
"The compiler is telling us that invoking the `join` function with two argument"
"s will always choose the first definition of `join` whereas the second one wil"
"l only be invoked when three arguments are passed:"
msgstr ""

msgid ""
"The constructs `if` and `case` are actually expressions in both Erlang and Eli"
"xir, but may be used for control flow as in imperative languages."
msgstr ""

msgid ""
"The core of property-based testing in stream_data is the `check all` macro. In"
" this macro, you list a bunch of generators and filters (very similarly to how"
" you would in `for` comprehensions) and then pass a body where you can verify "
"that a property holds for the generated data."
msgstr ""

msgid ""
"The core of the [stream_data][] library is `StreamData`: this module provides "
"all the functionalities related to generating sample data of many kinds. It in"
"cludes both data generators for data types (like integers or booleans) as well"
" as tools to combine other generators (such as `one_of(list_of_generators)`)."
msgstr ""

msgid ""
"The data-generation side of StreamData provides tools to generate random data "
"through composable generators. For example, you could generate keyword lists l"
"ike this:"
msgstr ""

msgid ""
"The debugging functions improve the experience both within IEx and during test"
"ing. For example, if you are debugging a Phoenix application, you can start `I"
"Ex` while running your test suite with `iex -S mix test --trace` and then call"
" `IEx.break!(MyAppWeb.UserController.index/2)` to debug the `index` action of "
"the `UserController`. Note we gave the `--trace` flag to `mix test`, which ens"
"ures only one test runs at a time and removes any timeouts from the suite."
msgstr ""

msgid ""
"The default mechanism for working with collections in Elixir is the `Enum` mod"
"ule. With it, you can map over ranges, lists, sets, dictionaries and any other"
" structure as long as it implements the `Enumerable` protocol:"
msgstr ""

msgid ""
"The deriving functionality can be customized by implementing `PROTOCOL.Map.__d"
"eriving__/3`. For example, a JSON protocol could define a `JSON.Map.__deriving"
"__/3` function that derives specific implementations for every struct. Such im"
"plementations could access the struct fields and generate a JSON template at c"
"ompilation time, avoiding work at runtime."
msgstr ""

msgid ""
"The difference between `==` and `===` is that the latter is more strict when c"
"omparing integers and floats:"
msgstr ""

msgid ""
"The difference is that anonymous functions require the target node to have exa"
"ctly the same code version as the caller. Using module, function, and argument"
"s is more robust because you only need to find a function with matching arity "
"in the given module."
msgstr ""

msgid ""
"The difference now is that, instead of calling `KV.Registry.start_link([])`, t"
"he Supervisor will call `KV.Registry.start_link([name: KV.Registry])`. If you "
"revisit `KV.Registry.start_link/1` implementation, you will remember it simply"
" passes the options to GenServer"
msgstr ""

msgid ""
"The documentation above is embedded into the module and can be easily retrieve"
"d at runtime. For example, by typing `h Math.add/2` into Interactive Elixir, w"
"e can access the documentation for that module."
msgstr ""

msgid ""
"The environment applies only to the current project. As we will see later on, "
"any dependency you add to your project will by default run in the `:prod` envi"
"ronment."
msgstr ""

msgid ""
"The example above contains a string with only two codepoints, [the codepoint ﬁ"
"](http://www.fileformat.info/info/unicode/char/FB01/index.htm) and [the codepo"
"int n](http://www.fileformat.info/info/unicode/char/006E/index.htm). Look how "
"Elixir properly capitalizes the string, returning a new string made of three c"
"odepoints (all ascii letters)."
msgstr ""

msgid ""
"The example above has a pipeline of operations. We start with a range and then"
" multiply each element in the range by 3. This first operation will now create"
" and return a list with `100_000` items. Then we keep all odd elements from th"
"e list, generating a new list, now with `50_000` items, and then we sum all en"
"tries."
msgstr ""

msgid ""
"The example above rescues the runtime error and returns the error itself which"
" is then printed in the `iex` session."
msgstr ""

msgid ""
"The example above will define two modules: `Foo` and `Foo.Bar`. The second can"
" be accessed as `Bar` inside `Foo` as long as they are in the same lexical sco"
"pe. The code above is exactly the same as:"
msgstr ""

msgid ""
"The example above will fetch the first 10 lines of the file you have selected."
" This means streams can be very useful for handling large files or even slow r"
"esources like network resources."
msgstr ""

msgid ""
"The fastest way to run some code is to launch the Erlang shell -- `erl`. Many "
"code snippets on this page can be pasted directly into the shell. However, whe"
"n you want to define a named function, Erlang expects it to be inside of a mod"
"ule, and modules have to be compiled. Here's a skeleton for a module:"
msgstr ""

msgid ""
"The file will be compiled in memory and executed, printing \"3\" as the result. "
"No bytecode file will be created. In the following examples, we recommend you "
"write your code into script files and execute them as shown above."
msgstr ""

msgid "The first clause above will only match when `x` is positive."
msgstr ""

msgid ""
"The first clause has a guard which says \"use this definition if and only if `n"
"` is less than or equal to `1`\". Since this is not the case, Elixir proceeds t"
"o the next clause's definition."
msgstr ""

msgid ""
"The first element is the function name, the second is a keyword list containin"
"g metadata and the third is the arguments list."
msgstr ""

msgid ""
"The first function is `start_link/1`, which starts a new GenServer passing thr"
"ee arguments:"
msgstr ""

msgid ""
"The first half of the course focuses on core Elixir facets, principles, and te"
"chniques. In the second half, we go beyond the basics and focus on what sets E"
"lixir/OTP apart: concurrent processes, the actor model, OTP behaviors, and fau"
"lt recovery."
msgstr ""

msgid ""
"The first is the `init/1` callback, that receives the second argument given to"
" `GenServer.start_link/3` and returns `{:ok, state}`, where state is a new map"
". We can already notice how the `GenServer` API makes the client/server segreg"
"ation more apparent. `start_link/3` happens in the client, while `init/1` is t"
"he respective callback that runs on the server."
msgstr ""

msgid ""
"The first of them was the addition of multi aliases/imports/require. Often dev"
"elopers would write:"
msgstr ""

msgid ""
"The first one is with [`IEx.pry/0`](https://hexdocs.pm/iex/IEx.html#pry/0) whi"
"ch we can use instead of `IO.inspect binding()`:"
msgstr ""

msgid ""
"The first part of the project focuses on generating data from types, so we kno"
"w how to generate function arguments. The missing piece is **validating** that"
" a given term *belongs to* a given type. For example, in the snippet above, we"
" want to be able to check if a term is a `boolean()`. Once we're able to do th"
"is, automatic spec validation will be straightforward: it will be a matter of "
"generating random arguments for the given function, calling the function with "
"those arguments, and asserting that the returned value belongs to the return t"
"ype defined in the spec."
msgstr ""

msgid "The first step in our implementation is to call `use Agent`."
msgstr ""

msgid ""
"The first test invokes `Kernel.node/0`, which returns the name of the current "
"node, based on the bucket names \"hello\" and \"world\". According to our routing "
"table so far, we should get `foo@computer-name` and `bar@computer-name` as res"
"ponses, respectively."
msgstr ""

msgid ""
"The first thing to notice is the `async: true` option. When your tests do not "
"have any side-effects, you can run them concurrently by passing the `async: tr"
"ue` option."
msgstr ""

msgid "The following escape codes can be used in strings and char lists:"
msgstr ""

msgid ""
"The formatter also helps new developers to learn the language by giving immedi"
"ate feedback on code structure, and eases code reviews by allowing teams to fo"
"cus on business rules and code quality rather than code style."
msgstr ""

msgid ""
"The full list of changes is available in our [release notes](https://github.co"
"m/elixir-lang/elixir/releases/tag/v1.1.0). Don't forget to check [the Install "
"section](/install.html) to get Elixir installed."
msgstr ""

msgid ""
"The full list of changes is available in our [release notes](https://github.co"
"m/elixir-lang/elixir/releases/tag/v1.2.0). Don't forget to check [the Install "
"section](/install.html) to get Elixir installed and our [Getting Started guide"
"](http://elixir-lang.org/getting-started/introduction.html) to learn more."
msgstr ""

msgid ""
"The full list of changes is available in our [release notes](https://github.co"
"m/elixir-lang/elixir/releases/tag/v1.3.0). Don't forget to check [the Install "
"section](/install.html) to get Elixir installed and our [Getting Started guide"
"](http://elixir-lang.org/getting-started/introduction.html) to learn more."
msgstr ""

msgid ""
"The full list of changes is available in our [release notes](https://github.co"
"m/elixir-lang/elixir/releases/tag/v1.4.0). Don't forget to check [the Install "
"section](/install.html) to get Elixir installed and our [Getting Started guide"
"](http://elixir-lang.org/getting-started/introduction.html) to learn more."
msgstr ""

msgid ""
"The full list of changes is available in our [release notes](https://github.co"
"m/elixir-lang/elixir/releases/tag/v1.5.0). There are many other exciting chang"
"es, such as compiler enhancements that reduces compilation times by 10%-15% on"
" averages. When taken into account with the compiler improvements in Erlang/OT"
"P 20 itself, some applications have seen gains up to 30% in compilation times."
msgstr ""

msgid ""
"The full list of changes is available in our [release notes](https://github.co"
"m/elixir-lang/elixir/releases/tag/v1.6.0). There are many other exciting chang"
"es, such as compiler enhancements to better track dependencies, leading to les"
"s files being recompiled whenever there are changes in project, and overall fa"
"ster compilation."
msgstr ""

msgid ""
"The function given to `spawn_link` is quite straight-forward. It simply invoke"
"s an Erlang function as `:elixir_compiler.file_to_path` and then proceeds to s"
"end a message to the parent process notifying that compilation finished."
msgstr ""

msgid ""
"The function receives the arguments and passes them to `if`. However, as we le"
"arned in the [previous chapter](/getting-started/meta/quote-and-unquote.html),"
" the macro will receive quoted expressions, inject them into the quote, and fi"
"nally return another quoted expression."
msgstr ""

msgid ""
"The functions in `IO` and `File` also allow lists to be given as arguments. No"
"t only that, they also allow a mixed list of lists, integers, and binaries to "
"be given:"
msgstr ""

msgid ""
"The functions in the Enum module are limited to, as the name says, enumerating"
" values in data structures. For specific operations, like inserting and updati"
"ng particular elements, you may need to reach for modules specific to the data"
" type. For example, if you want to insert an element at a given position in a "
"list, you should use the `List.insert_at/3` function from [the `List` module]("
"https://hexdocs.pm/elixir/List.html), as it would make little sense to insert "
"a value into, for example, a range."
msgstr ""

msgid ""
"The functions in the `ets` module will modify the state of the table as a\n"
"side-effect."
msgstr ""

msgid "The general pattern is this:"
msgstr ""

msgid ""
"The generated files are similar to the ones we first generated for `kv`, with "
"a few differences. Let's open up `mix.exs`:"
msgstr ""

msgid "The generated project will have the following structure:"
msgstr ""

msgid ""
"The goal in this chapter is to build a module named `TestCase` that allows us "
"to write the following:"
msgstr ""

msgid ""
"The goal of the first part of this GSoC project is to provide StreamData with "
"the ability to create data generators from type definitions. The API is not ye"
"t defined, but in this case, it could look something like the following:"
msgstr ""

msgid ""
"The goal of the formatter is to automate the styling of codebases into a uniqu"
"e and consistent layout used across teams and the whole community. Code is now"
" easier to write, as you no longer need to concern yourself with formatting ru"
"les. Code is also easier to read, as you no longer need to convert the styles "
"of other developers in your mind."
msgstr ""

msgid ""
"The goal of these changes is to put an increased focus on the \"warnings\" emitt"
"ed by the compiler."
msgstr ""

msgid ""
"The goal of this post was to sumarize the language goals: compatibility, produ"
"ctivity and extensibility. By being compatibile with the Erlang VM, we are pro"
"viding developers another toolset for building concurrent, distributed and fau"
"lt-tolerant systems."
msgstr ""

msgid ""
"The good news is that breaking an umbrella apart is quite straightforward, as "
"you simply need to move applications outside of the umbrella project's `apps/`"
" directory. In the worst case scenario, you can discard the umbrella project a"
"nd all related configuration (`build_path`, `config_path`, `deps_path` and `lo"
"ckfile`) and still leverage the \"mono-repo\" pattern by keeping all application"
"s together in the same repository. Each application will have its own dependen"
"cies and configuration. Dependencies between those applications can still be e"
"xplicitly listed by using the `:path` option (in contrast to `:git`)."
msgstr ""

msgid ""
"The group leader can be configured per process and is used in different situat"
"ions. For example, when executing code in a remote terminal, it guarantees mes"
"sages in a remote node are redirected and printed in the terminal that trigger"
"ed the request."
msgstr ""

msgid ""
"The idea is that `Stream.async` would run the previous computations in a separ"
"ate process that would stream its messages to the process that called `Enum.re"
"duce`. Unfortunately, the solution above is less than ideal."
msgstr ""

msgid ""
"The idea of the parallel compiler is very simple: for each file we want to com"
"pile, we will spawn a new process that will be responsible for its compilation"
". When compilation finishes, the process is going to send a message to the mai"
"n process (the one responsible for coordinating compilation) that compilation "
"finished so a new file can be compiled."
msgstr ""

msgid ""
"The implementation above is arguably not a reasonable one. For example, it mak"
"es no sense to say that the size of a `PID` or an `Integer` is `0`."
msgstr ""

msgid ""
"The implementation above works as a simple `reduce` function (also called `fol"
"d`, `inject` or `foldl` in other languages). Here is how it works:"
msgstr ""

msgid "The implementation for `wait_for_messages` is now broken into 4 clauses:"
msgstr ""

msgid ""
"The intended audience ranges from someone entirely new to the Elixir language,"
" to experienced developers that want to get a broad range of topics to think a"
"bout from time to time."
msgstr ""

msgid ""
"The interesting thing about the application environment is that it can be conf"
"igured not only for the current application, but for all applications. Such co"
"nfiguration is done by the `config/config.exs` file. For example, we can confi"
"gure IEx default prompt to another value. Just open `apps/kv/config/config.exs"
"` and add the following to the end:"
msgstr ""

msgid ""
"The interesting thing about this approach is that Mix has many conveniences fo"
"r working with such projects, such as the ability to compile and test all appl"
"ications inside `apps` with a single command. However, even though they are al"
"l listed together inside `apps`, they are still decoupled from each other, so "
"you can build, test and deploy each application in isolation if you want to."
msgstr ""

msgid ""
"The keyword list used with `defstruct` defines what fields the struct will hav"
"e along with their default values."
msgstr ""

msgid ""
"The language development is open, both in terms of source code and of collabor"
"ations. All features and bug fixes planned for the next releases can be found "
"[in the issues tracker](https://github.com/elixir-lang/elixir/issues). Feature"
"s that may cause a larger impact on the language are first proposed to the com"
"munity in [the Elixir mailing list](https://groups.google.com/group/elixir-lan"
"g-core) as well as in [the \"Elixir News\" section in the Elixir Forum](https://"
"elixirforum.com/c/elixir-news)."
msgstr ""

msgid ""
"The language has been improved semantically and includes new types and APIs. L"
"et's see the three major features."
msgstr ""

msgid ""
"The last big change we want to discuss in this release are the improvements do"
"ne to Mix, Elixir's build tool. Mix is an essential tool to Elixir developers "
"and helps developers to compile their projects, manage their dependencies, run"
" tests and so on."
msgstr ""

msgid "The last step is to change the registry to use the dynamic supervisor:"
msgstr ""

msgid ""
"The last step is to implement `KVServer.Command.run/1`, to run the parsed comm"
"ands against the `:kv` application. Its implementation is shown below:"
msgstr ""

msgid ""
"The line above makes `:kv` available as a dependency inside `:kv_server` and a"
"utomatically starts the `:kv` application before the server starts."
msgstr ""

msgid ""
"The macro system also caused a huge impact on the syntax, which we will discus"
"s briefly before moving to the last goal."
msgstr ""

msgid ""
"The majority of the functions in the `File` module expect paths as arguments. "
"Most commonly, those paths will be regular binaries. The [`Path`](https://hexd"
"ocs.pm/elixir/Path.html) module provides facilities for working with such path"
"s:"
msgstr ""

msgid ""
"The majority of times we spawn processes in Elixir, we spawn them as linked pr"
"ocesses. Before we show an example with `spawn_link/1`, let's see what happens"
" when a process started with `spawn/1` fails:"
msgstr ""

msgid ""
"The match operator is not only used to match against simple values, but it is "
"also useful for destructuring more complex data types. For example, we can pat"
"tern match on tuples:"
msgstr ""

msgid ""
"The modules [`ets`](http://erlang.org/doc/man/ets.html) and\n"
"[`dets`](http://erlang.org/doc/man/dets.html) handle storage of large\n"
"data structures in memory or on disk respectively."
msgstr ""

msgid ""
"The modules `Agent`, `Registry`, `Task`, and `Task.Supervisor` have been updat"
"ed to include a `child_spec/1` function, allowing them to be used directly in "
"a supervision tree similar to the examples above. `use Agent`, `use GenServer`"
", `use Supervisor`, and `use Task` have also been updated to automatically def"
"ine an overridable `child_spec/1` function."
msgstr ""

msgid ""
"The most common sigil in Elixir is `~r`, which is used to create [regular expr"
"essions](https://en.wikipedia.org/wiki/Regular_Expressions):"
msgstr ""

msgid ""
"The most common tasks are `mix deps.get` and `mix deps.update`. Once fetched, "
"dependencies are automatically compiled for you. You can read more about deps "
"by typing `mix help deps`, and in the [documentation for the Mix.Tasks.Deps mo"
"dule](https://hexdocs.pm/mix/Mix.Tasks.Deps.html)."
msgstr ""

msgid ""
"The most common use case for heredoc sigils is when writing documentation. For"
" example, writing escape characters in the documentation would soon become err"
"or prone because of the need to double-escape some characters:"
msgstr ""

msgid ""
"The most common use case of a comprehension are [list comprehensions](https://"
"en.wikipedia.org/wiki/List_comprehension). For example, we can get all the squ"
"are values of elements in a list as follows:"
msgstr ""

msgid ""
"The nested access functionality that ships with Elixir allows us to quickly ac"
"cess or update a nested value. For example, given a dungeon named `dungeon`, w"
"e can access all the device codes for a given user as follow:"
msgstr ""

msgid ""
"The new system of enumerators certainly makes things a bit more complicated bu"
"t\n"
"also adds power. I suspect many interesting and \"interesting\" functions can be"
"\n"
"built on top of it."
msgstr ""

msgid ""
"The next months will also focus on integrating Elixir more tightly to OTP. Dur"
"ing the keynote at Erlang Factory, [Catalyse Change](https://www.youtube.com/w"
"atch?v=Djv4C9H9yz4), Dave Thomas and I argued that there are many useful patte"
"rns, re-implemented everyday by developers, that could make development more p"
"roductive within the Erlang VM if exposed accordingly."
msgstr ""

msgid "The next step was to make parentheses optional:"
msgstr ""

msgid ""
"The next two functions, `lookup/2` and `create/2` are responsible for sending "
"these requests to the server.  In this case, we have used `{:lookup, name}` an"
"d `{:create, name}` respectively.  Requests are often specified as tuples, lik"
"e this, in order to provide more than one \"argument\" in that first argument sl"
"ot. It's common to specify the action being requested as the first element of "
"a tuple, and arguments for that action in the remaining elements. Note that th"
"e requests must match the first argument to `handle_call/3` or `handle_cast/2`"
"."
msgstr ""

msgid ""
"The number of arguments in each anonymous function clause needs to be the same"
", otherwise an error is raised."
msgstr ""

msgid ""
"The only prerequisite for Elixir is Erlang, version {{ stable.minimum_otp }} o"
"r later, which can be easily installed with [Precompiled packages](https://www"
".erlang-solutions.com/resources/download.html). In case you want to install it"
" directly from source, it can be found on [the Erlang website](http://www.erla"
"ng.org/download.html) or by following the excellent tutorial available in the "
"[Riak documentation](https://docs.basho.com/riak/latest/ops/building/installin"
"g/erlang/)."
msgstr ""
"Elixir に必要な要件は、 {{ stable.minimum_otp }} 以降の Erlang だけです。 [パッケージをプリコンパイル](http"
"s://www.erlang-solutions.com/resources/download.html)(英語) して簡単にインストールできます。ソースフ"
"ァイルからある特定のディレクトリにインストールしたい場合は、[Erlang 公式 Web サイト](http://www.erlang.org/downlo"
"ad.html)(英語) をお探しいただくか、 [Riak ドキュメント (Installing Erlang)](https://docs.basho.c"
"om/riak/latest/ops/building/installing/erlang/)(英語) がとても参考になるはずです。"

msgid ""
"The options above have different properties. Both `:rpc` and using a GenServer"
" would serialize your requests on a single server, while tasks are effectively"
" running asynchronously on the remote node, with the only serialization point "
"being the spawning done by the supervisor."
msgstr ""

msgid ""
"The original `List` can still be accessed within `Stats` by the fully-qualifie"
"d name `Elixir.List`."
msgstr ""

msgid ""
"The outer function is the function to which the enumerable is passed.\n"
"Syntactically it looks like this is the consumer, but it's really a function\n"
"that combines the producer and the consumer. For simple consumers (say `fn x,\n"
"acc -> length(x) + acc end`) the consumer will often be written directly in th"
"e\n"
"source text of the outer function, but let's try to keep those concepts\n"
"distinguished."
msgstr ""

msgid ""
"The past week we have released Elixir v0.8.2. It contains many bug fixes and b"
"etter support for Erlang R16, including [the new built-in functions `insert_el"
"em/3` and `delete_elem/2`](https://github.com/elixir-lang/elixir/commit/0fad18"
"83df9da541628e8485d28372fd4b977b89)."
msgstr ""

msgid ""
"The pattern of keeping multiple applications in the same repository is known a"
"s \"mono-repo\". Umbrella projects maximize this pattern by providing convenienc"
"es to compile, test and run multiple applications at once."
msgstr ""

msgid ""
"The power of Elixir's extensibility comes when protocols and structs are used "
"together."
msgstr ""

msgid ""
"The preferred option for installing Elixir. Choose your operating system and t"
"ool."
msgstr "お好きなオプションをお選びいただけます。あなたのシステムに Elixir をインストールしましょう！"

msgid ""
"The previous implementation used pipelines which made the logic straightforwar"
"d to follow. However, now that we need to handle different error codes along t"
"he way, our server logic is nested inside many `case` calls."
msgstr ""

msgid ""
"The private `ensure_loaded` function calls `Code.ensure_loaded(module)` which "
"checks if the given module is loaded and, if not, tries to load it. In case it"
" succeeds, it returns `{ :module, _ }`, which means the module is available an"
"d we don't need to stop the current process. However, if it returns `{ :error,"
" _ }`, it means the module cannot be found and we need to wait until it is com"
"piled. For that, we invoke `Process.get(:elixir_parent_compiler)` to get the P"
"ID of the main process so we can notify it that we are waiting on a given modu"
"le. Then we invoke the macro `receive` as a way to stop the current process un"
"til we receive a message from the parent saying new modules are available, sta"
"rting the flow again."
msgstr ""

msgid ""
"The problem with the approach above is that, once more and more functions are "
"added to the `MyApp` module, it becomes increasingly harder to know the purpos"
"es of the `init/1` and `call/2` functions. For example, for a developer unfami"
"liar with Plug, are those functions part of the `MyApp` API or are they implem"
"entations of a given callback?"
msgstr ""

msgid ""
"The process of taking a list and _reducing_ it down to one value is known as a"
" _reduce algorithm_ and is central to functional programming."
msgstr ""

msgid ""
"The process that sends the message does not block on `send/2`, it puts the mes"
"sage in the recipient's mailbox and continues. In particular, a process can se"
"nd messages to itself."
msgstr ""

msgid "The protocol definition would look like this:"
msgstr ""

msgid ""
"The quickest way to install Elixir is through a distribution or using one of t"
"he available installers. If not available, then we recommend the precompiled p"
"ackages or compiling it."
msgstr ""
"目次の Distributions からご自分の環境を選んでください。簡単にインストールできます！それ以外には、パッケージをプリプロセス(プリコンパイル)し"
"てコンパイルする方法がありますので、そちらを利用してください。"

msgid ""
"The real magic is in `:suspend` though. It tells a producer to return the\n"
"accumulator and a continuation function."
msgstr ""

msgid ""
"The reason behind supporting different delimiters is to provide a way to write"
" literals without escaped delimiters. For example, a regular expression with f"
"orward slashes like `~r(^https?://)` reads arguably better than `~r/^https?:\\/"
"\\//`. Similarly, if the regular expression has forward slashes and capturing g"
"roups (that use `()`), you may then choose double quotes instead of parenthese"
"s."
msgstr ""

msgid ""
"The reason those failures are happening is because, for didactic purposes, we "
"have made two mistakes:"
msgstr ""

msgid ""
"The reason we can compare different data types is pragmatism. Sorting algorith"
"ms don't need to worry about different data types in order to sort. The overal"
"l sorting order is defined below:"
msgstr ""

msgid ""
"The reasons for writing a new property-based testing library from scratch are "
"best explained by José in [this ElixirForum post][elixirforum-post]:"
msgstr ""

msgid ""
"The refactored version is broken because the `if` block was actually returning"
" two values, the relative path *and* the new message. Elixir v1.3 will warn on"
" such cases, forcing both variables to be explicitly returned from `if`, `case"
"` and other constructs. Furthermore, this change gives us the opportunity to u"
"nify the language scoping rules in future releases."
msgstr ""

msgid ""
"The registration is also open and we hope you will join us on this exciting ev"
"ent. We welcome Elixir developers and enthusiasts that are looking forward to "
"be part of our thrilling community!"
msgstr ""

msgid ""
"The registry needs to guarantee that it is always up to date. For example, if "
"one of the bucket processes crashes due to a bug, the registry must notice thi"
"s change and avoid serving stale entries. In Elixir, we say the registry needs"
" to *monitor* each bucket."
msgstr ""

msgid ""
"The router will check the first byte of the bucket name against the table and "
"dispatch to the appropriate node based on that. For example, a bucket starting"
" with the letter \"a\" (`?a` represents the Unicode codepoint of the letter \"a\")"
" will be dispatched to node `foo@computer-name`."
msgstr ""

msgid "The routing layer will receive a routing table of the following format:"
msgstr ""

msgid ""
"The rules require students to be enrolled in college full or part-time, and to"
" be\n"
"at least 18 years by May 27, 2013. You can find more information on\n"
"[Google Summer of Code 2013 website](http://www.google-melange.com/gsoc/homepa"
"ge/google/gsoc2013)."
msgstr ""

msgid ""
"The script requires jQuery. First, reference `toc.js` in templates where you w"
"ould like to add the table of content.\n"
"Then, create an HTML element wherever you want your table of contents to appea"
"r:"
msgstr ""

msgid ""
"The script works by looking for headers (h1, h2, h3, h4, h5, h6) which have an"
" `id`.\n"
"An id is added automatically if you're using Jekyll and [Markdown](http://dari"
"ngfireball.net/projects/markdown/syntax#header)."
msgstr ""

msgid ""
"The second approach uses function calls which better suits more complex APIs ("
"for example, if you need to pass many options) and reads nicely in Elixir than"
"ks to the pipe operator."
msgstr ""

msgid "The second change is in the `application` function inside `mix.exs`:"
msgstr ""

msgid ""
"The second definition matches the pattern and has no guard so it will be execu"
"ted. It first prints our `msg` and then calls itself passing `n - 1` (`2`) as "
"the second argument."
msgstr ""

msgid ""
"The second flaw is related to the supervision strategy. If `KV.Registry` dies,"
" all information linking `KV.Bucket` names to bucket processes is lost. Theref"
"ore the `KV.BucketSupervisor` and all children must terminate too - otherwise "
"we will have orphan processes."
msgstr ""

msgid "The second test checks that the code raises for unknown entries."
msgstr ""

msgid ""
"The server is now running, and you will even notice the console is blocked. Le"
"t's use [a `telnet` client](https://en.wikipedia.org/wiki/Telnet) to access ou"
"r server. There are clients available on most operating systems, and their com"
"mand lines are generally similar:"
msgstr ""

msgid ""
"The snippet above only works because numbers implement the `String.Chars` prot"
"ocol. Passing a tuple, for example, will lead to an error:"
msgstr ""

msgid ""
"The snippet above will spawn a new task by invoking `SomeMod.function(element)"
"` for every element in the collection and then await for the task results."
msgstr ""

msgid ""
"The solution above allows us to work with large datasets without loading them "
"all into memory. For large files, it is going to provide much better performan"
"ce than the eager version. However, the solution above still does not leverage"
" concurrency. For a machine with more than one core, which is the huge majorit"
"y of machines we have available today, it is a suboptimal solution."
msgstr ""

msgid ""
"The string concatenation operation is actually a binary concatenation operator"
":"
msgstr ""

msgid ""
"The supervision strategy dictates what happens when one of the children crashe"
"s. `:one_for_one` means that if a child dies, it will be the only one restarte"
"d. Since we have only one child now, that's all we need. The `Supervisor` beha"
"viour supports many different strategies and we will discuss them in this chap"
"ter."
msgstr ""

msgid ""
"The syntax above requires the given key to exist. It cannot be used to add new"
" keys. For example, using it with the `:c` key failed because there is no `:c`"
" in the map."
msgstr ""

msgid ""
"The syntax for sending and receiving differs only slightly between Erlang and "
"Elixir."
msgstr ""

msgid ""
"The syntax for tuples is the same in both languages, but the APIs are differen"
"t. Elixir attempts to normalize Erlang libraries in a way that:"
msgstr ""

msgid ""
"The table of contents automatically handles nesting of headers. For example, t"
"his Markdown post:"
msgstr ""

msgid "The task above can now be invoked as `mix hello`."
msgstr ""

msgid ""
"The test above will fail on the last assertion as the bucket name remains in t"
"he registry even after we stop the bucket process."
msgstr ""

msgid ""
"The test is similar to \"removes bucket on exit\" except that we are being a bit"
" more harsh by sending `:shutdown` as the exit reason instead of `:normal`. If"
" a process terminates with a reason different than `:normal`, all linked proce"
"sses receive an EXIT signal, causing the linked process to also terminate unle"
"ss they are trapping exits."
msgstr ""

msgid "The test should pass."
msgstr ""

msgid ""
"The third approach uses macros, and is by far the most complex. It will take m"
"ore lines of code to implement, it is hard and expensive to test (compared to "
"testing simple functions), and it limits how the user may use the library sinc"
"e all validations need to be defined inside a module."
msgstr ""

msgid ""
"The tool that received most improvements in this release was Mix. The biggest "
"change is that Mix no longer compiles projects in place but to the `_build` di"
"rectory. For example, take the [Ecto project](https://github.com/elixir-lang/e"
"cto) that [depends on `postgrex` and `poolboy`](https://github.com/elixir-lang"
"/ecto/blob/master/mix.exs#L24-L25). When compiled, all the artifacts will be p"
"laced in the `_build` directory like this:"
msgstr ""

msgid ""
"The underlying problem, in both cases, is that the producer is fully in contro"
"l.\n"
"The producer simply pushes out as many elements to the consumer as it wants an"
"d\n"
"then says \"I'm done\". There's no way aside from `throw/raise` for a consumer\n"
"to tell a producer \"stop producing\". There is definitely no way to tell a\n"
"producer \"stop for now but be prepared to continue where you left off later\"."
msgstr ""

msgid ""
"The v0.3.0 release also includes the [`GenStage.stream`](https://hexdocs.pm/ge"
"n_stage/Experimental.GenStage.html#stream/1) function, which allows us to cons"
"ume data from a GenStage as a stream, and [`GenStage.from_enumerable`](https:/"
"/hexdocs.pm/gen_stage/Experimental.GenStage.html#from_enumerable/2) which allo"
"ws us to use an enumerable or a stream, like `File.stream!`, as a producer. Cl"
"osing the gap between stages and streams."
msgstr ""

msgid ""
"The value is no longer a binary, but a bitstring -- a bunch of bits! So a bina"
"ry is a bitstring where the number of bits is divisible by 8."
msgstr ""

msgid ""
"The variable `_` is special in that it can never be read from. Trying to read "
"from it gives a compile error:"
msgstr ""

msgid ""
"The version without `!` is preferred when you want to handle different outcome"
"s using pattern matching:"
msgstr ""

msgid ""
"The way we are going to handle this is by pausing compilation every time a mod"
"ule that was not yet defined is invoked. In this case, when compiling the file"
" `a.ex` and `B.define` is invoked, the process responsible for compiling `a.ex"
"` is going to pause and notify our main process. The main process will then st"
"art the compilation of other files. Whenever the module `B` is compiled, the m"
"ain process is going to tell the process responsible for `a.ex` to resume comp"
"ilation since its dependency `B` is now available."
msgstr ""

msgid ""
"Then we define a `start_link/1` function, which will effectively start the age"
"nt. It is a convention to define a `start_link/1` function that always accepts"
" a list of options. We don't plan on using any option right now, but we might "
"later on. We then proceed to call `Agent.start_link/1`, which receives an anon"
"ymous function that returns the Agent initial state."
msgstr ""

msgid ""
"Then, we add the head of the list to the accumulator `head + accumulator` and "
"call `sum_list` again, recursively, passing the tail of the list as its first "
"argument. The tail will once again match `[head | tail]` until the list is emp"
"ty, as seen below:"
msgstr ""

msgid ""
"There are a number of ways one can debug their code in Elixir. In this chapter"
" we will cover some of the more common ways of doing so."
msgstr ""

msgid ""
"There are also improvements to typespecs, error messages, many bug fixes and s"
"ome backwards incompatible changes. We have posted a detailed [upgrade instruc"
"tions on the mailing list](https://groups.google.com/forum/?fromgroups#!topic/"
"elixir-lang-talk/ksrefrgK1eY). For a general overview, [check out the CHANGELO"
"G](https://github.com/elixir-lang/elixir/blob/v0.10.0/CHANGELOG.md)."
msgstr ""

msgid ""
"There are also no more planned deprecations nor backward incompatible changes "
"which means it is extremely likely that code that runs on v0.15.0 will run exa"
"ctly the same on Elixir v1.0."
msgstr ""

msgid ""
"There are many other protocols exposed by the language, like [the `Inspect` pr"
"otocol](https://hexdocs.pm/elixir/Inspect.html) for pretty printing data struc"
"tures and [the `Access` protocol](https://hexdocs.pm/elixir/Access.html) for a"
"ccessing key-value data by key. By being extensible, Elixir ensures developers"
" can work **with** the language, instead of **against** the language."
msgstr ""

msgid ""
"There are many tools that allow developers to install and manage multiple Erla"
"ng and Elixir versions. They are useful if you can't install Erlang or Elixir "
"as mentioned above or if your package manager is simply outdated. Here are som"
"e of those tools:"
msgstr "それぞれバージョンの異なる Erlang や Elixir をインストールして、それらを管理できるようにするツールというのはいくつかあります。"

msgid "There are other protocols in Elixir but this covers the most common ones."
msgstr ""

msgid ""
"There are other tuple formats both `handle_call/3` and `handle_cast/2` callbac"
"ks may return. There are also other callbacks like `terminate/2` and `code_cha"
"nge/3` that we could implement. You are welcome to explore the [full GenServer"
" documentation](https://hexdocs.pm/elixir/GenServer.html) to learn more about "
"those."
msgstr ""

msgid "There are probably many more to come too!"
msgstr ""

msgid ""
"There are still many, many things to do! In the next months, we will continue "
"working on growing our community, talks and other documentation material. A hu"
"ge thanks to [Alexei Sholik](https://twitter.com/true_droid) who is moving thi"
"s area forward."
msgstr ""

msgid ""
"There are three better alternatives to `Node.spawn_link/2` that we could use i"
"n our implementation:"
msgstr ""

msgid "There are two important differences between Elixir's `cond` and Erlang's `if`:"
msgstr ""

msgid "There are two topics left before we move on to the next chapter."
msgstr ""

msgid ""
"There are two types of requests you can send to a GenServer: calls and casts. "
"Calls are synchronous and the server **must** send a response back to such req"
"uests. Casts are asynchronous and the server won't send a response back."
msgstr ""

msgid ""
"There is also a private function named `deps`, which is invoked from the `proj"
"ect` function, that defines our project dependencies. Defining `deps` as a sep"
"arate function is not required, but it helps keep the project configuration ti"
"dy."
msgstr ""

msgid ""
"There is more to learn about `put_in/2` and `update_in/2`, including the `get_"
"and_update_in/2` that allows us to extract a value and update the data structu"
"re at once. There are also `put_in/3`, `update_in/3` and `get_and_update_in/3`"
" which allow dynamic access into the data structure. [Check their respective d"
"ocumentation in the `Kernel` module for more information](https://hexdocs.pm/e"
"lixir/Kernel.html)."
msgstr ""

msgid ""
"There is much more to Mix, and we will continue to explore it as we build our "
"project. A [general overview is available on the Mix documentation](https://he"
"xdocs.pm/mix/). Read [the Mix source code here](https://github.com/elixir-lang"
"/elixir/tree/master/lib/mix)."
msgstr ""

msgid ""
"There is no `try/rescue` here. In case you want to handle multiple outcomes of"
" opening a file, you can use pattern matching within the `case` construct:"
msgstr ""

msgid ""
"There is one important difference between the `setup` block we wrote for `KV.R"
"egistry` and the one we wrote for `KV.Bucket`. Instead of starting the registr"
"y by hand by calling `KV.Registry.start_link/1`, we instead called [the `start"
"_supervised!/1` function](https://hexdocs.pm/ex_unit/ExUnit.Callbacks.html#sta"
"rt_supervised/2), passing the `KV.Registry` module."
msgstr ""

msgid ""
"There were other small changes, like additions to the `Float` module and impro"
"vements the to the typespec syntax. To see the full list, please [see the CHAN"
"GELOG](https://github.com/elixir-lang/elixir/blob/v0.12.0/CHANGELOG.md)."
msgstr ""

msgid ""
"There's not much more to the mechanics of stream_data. Most of the work you wi"
"ll have to do revolves around finding good properties to test for your code an"
"d writing good generators for the data over which you want to test. Head over "
"to [stream_data][]'s documentation for detailed documentation."
msgstr ""

msgid ""
"There, `byte_size/1` counts the underlying raw bytes, and `String.length/1` co"
"unts characters."
msgstr ""

msgid ""
"Therefore, if you don't want to handle the error outcomes, prefer using `File."
"read!/1`."
msgstr ""

msgid ""
"These are great additions on top of the faster compilation times we have achie"
"ved when migrating to Erlang 18."
msgstr ""

msgid ""
"These characteristics are what prompted keyword lists to be the default mechan"
"ism for passing options to functions in Elixir. In chapter 5, when we discusse"
"d the `if/2` macro, we mentioned the following syntax is supported:"
msgstr ""

msgid ""
"These expectations also apply to future releases under the v1 branch, except f"
"or experimental features, which will be explicitly marked as such and not prov"
"ide any compatibility guarantee until they are stabilized."
msgstr ""

msgid "These improvements aim to make the language more consistent and expressive."
msgstr ""

msgid "They also support `else` blocks:"
msgstr ""

msgid ""
"This approach comes with the `:build_per_environment` option which, when set t"
"o true, creates a different build per environment (`dev`, `test`, `production`"
" or more). Extremely useful when a project compile different artifacts dependi"
"ng on the compilation environment."
msgstr ""

msgid ""
"This approach is simple and efficient for the majority of the cases but, when "
"working with large collections, we can generate many, possibly large, intermed"
"iate lists affecting performance. That's one of the problems Streams solve. Le"
"t's rewrite the example above using Streams:"
msgstr ""

msgid "This approach posed many problems:"
msgstr ""

msgid "This approach solves all the problems above:"
msgstr ""

msgid "This behaviour can be configured via the `:syntax_colors` coloring option:"
msgstr ""

msgid ""
"This book intends to be a little guide about how to be the Erlang medic in a t"
"ime of war. It is first and foremost a collection of tips and tricks to help u"
"nderstand where failures come from, and a dictionary of different code snippet"
"s and practices that helped developers debug production systems that were buil"
"t in Erlang."
msgstr ""

msgid ""
"This book is a set of recipes grouped by topic that acts as a reference to get"
" ideas from or to quickly search for a solution to a problem. You will begin b"
"y launching an IEx session and using it to test some ideas. Next, you will per"
"form various operations like loading and compiling modules, inspecting your sy"
"stem, generating a supervised app, and so on. Furthermore, you will be introdu"
"ced to immutability, working with data structures, performing pattern matching"
", and using stream modules to generate infinite data sequences. You will learn"
" about everything from joining strings to determining the word frequency in te"
"xt. With respect to modules and functions, you will also discover how to load "
"code from other modules and use guards and pattern matching in functions."
msgstr ""

msgid ""
"This book is the introduction to Elixir for experienced programmers, completel"
"y updated for Elixir 1.6 and beyond. Explore functional programming without th"
"e academic overtones (tell me about monads just one more time). Create concurr"
"ent applications, but get them right without all the locking and consistency h"
"eadaches."
msgstr ""

msgid ""
"This book shows you how to write simple Elixir programs by teaching one skill "
"at a time. Once you pick up pattern matching, process-oriented programming, an"
"d other concepts, you’ll understand why Elixir makes it easier to build concur"
"rent and resilient programs that scale up and down with ease."
msgstr ""

msgid ""
"This book will teach you the core concepts of the Elixir programming language "
"in a fun and enjoyable way. If you're completely new to programming and you wa"
"nt to learn how to make a computer do things using the power of programming an"
"d you want to experience some joy while doing it, then read this book!"
msgstr ""

msgid "This change allows developer to get faster feedback from their test suites."
msgstr ""

msgid ""
"This change goes in line with Elixir's goal of providing first-class documenta"
"tion, which makes documentation easily accessible at runtime, support to docte"
"sts and more."
msgstr ""

msgid ""
"This change may also yield performance improvements in the future, since the l"
"exical scope allows us to track precisely when a stacktrace is used and we no "
"longer need to keep references to stacktrace entries after the `try` construct"
" finishes."
msgstr ""

msgid ""
"This chapter is a quick introduction to input/output mechanisms and file-syste"
"m-related tasks, as well as to related modules like [`IO`](https://hexdocs.pm/"
"elixir/IO.html), [`File`](https://hexdocs.pm/elixir/File.html) and [`Path`](ht"
"tps://hexdocs.pm/elixir/Path.html)."
msgstr ""

msgid "This code counts the number of files in a ZIP file:"
msgstr ""

msgid ""
"This concludes our introduction to associative data structures in Elixir. You "
"will find out that, given keyword lists and maps, you will always have the rig"
"ht tool to tackle problems that require associative data structures in Elixir."
msgstr ""

msgid ""
"This concludes our optimization chapter. We have used ETS as a cache mechanism"
" where reads can happen from any processes but writes are still serialized thr"
"ough a single process. More importantly, we have also learned that once data c"
"an be read asynchronously, we need to be aware of the race conditions it might"
" introduce."
msgstr ""

msgid ""
"This could get called as `Enum.map(1..10, &(&1 * &1)) |> sum()` to get the sum"
" of\n"
"squares. Desugaring this means `sum(Enum.map(1..10, &(&1 * &1)))`."
msgstr ""

msgid ""
"This dependency refers to the latest version of Plug in the 1.x.x version seri"
"es that has been pushed to Hex. This is indicated by the `~>` preceding the ve"
"rsion number. For more information on specifying version requirements, see the"
" [documentation for the Version module](https://hexdocs.pm/elixir/Version.html"
")."
msgstr ""

msgid ""
"This distinction is important. If there are expensive actions to be done, you "
"must consider if it will be better to perform these actions on the client or o"
"n the server. For example:"
msgstr ""

msgid ""
"This error shows the minimal generated value that triggers the failure, that i"
"s, `[4]`. The process of finding the minimal generated value that triggers a f"
"ailure is called *shrinking*. All generators that come with `StreamData` gener"
"ate values that \"bundle\" a way to shrink them so that property-based testing c"
"an use this to provide the shrinking functionality. Shrinking is a fundamental"
" part of property-based testing as it takes out the *noise* of random-generate"
"d data to reduce the failing data to focused and easier-to-understand terms."
msgstr ""

msgid ""
"This example shows that through clever combination of an outer function\n"
"(`do_interleave`) and an inner function `step` two producers can be interleave"
"d."
msgstr ""

msgid "This feature also requires Erlang/OTP 20."
msgstr ""

msgid ""
"This feature provides a great workflow for developers, allowing them to effort"
"lessly focus on parts of the codebase when developing new features."
msgstr ""

msgid ""
"This feature was a contribution from [Joseph Wilk](https://github.com/josephwi"
"lk) and he talks about its implementation and provides some benchmarks [on his"
" blog](http://blog.josephwilk.net/elixir/sets-in-elixir.html)."
msgstr ""

msgid "This file can be compiled using `elixirc`:"
msgstr ""

msgid ""
"This file contains Erlang terms (written using Erlang syntax). Even though we "
"are not familiar with Erlang, it is easy to guess this file holds our applicat"
"ion definition. It contains our application `version`, all the modules defined"
" by it, as well as a list of applications we depend on, like Erlang's `kernel`"
", `elixir` itself, and `logger` which is specified in the `:extra_applications"
"` list in `mix.exs`."
msgstr ""

msgid ""
"This file will be required by Mix every time before we run our tests. We can r"
"un tests with `mix test`:"
msgstr ""

msgid ""
"This finishes our introduction to `try`, `catch`, and `rescue`. You will find "
"they are used less frequently in Elixir than in other languages, although they"
" may be handy in some situations where a library or some particular code is no"
"t playing \"by the rules\"."
msgstr ""

msgid ""
"This finishes our introduction to pattern matching. As we will see in the next"
" chapter, pattern matching is very common in many language constructs."
msgstr ""

msgid ""
"This finishes our short introduction to modules. In the next chapters, we will"
" learn how to use named functions for recursion, explore Elixir lexical direct"
"ives that can be used for importing functions from other modules and discuss m"
"odule attributes."
msgstr ""

msgid ""
"This finishes our tour of IO devices and IO related functionality. We have lea"
"rned about four Elixir modules - [`IO`](https://hexdocs.pm/elixir/IO.html), [`"
"File`](https://hexdocs.pm/elixir/File.html), [`Path`](https://hexdocs.pm/elixi"
"r/Path.html) and [`StringIO`](https://hexdocs.pm/elixir/StringIO.html) - as we"
"ll as how the <abbr title=\"Virtual Machine\">VM</abbr> uses processes for the u"
"nderlying IO mechanisms and how to use `chardata` and `iodata` for IO operatio"
"ns."
msgstr ""

msgid ""
"This functionality is at the core of building applications in Erlang and Elixi"
"r. For this reason we have published a new guide called [Mix and OTP](/getting"
"-started/mix-otp/introduction-to-mix.html) where we build a distributed key-va"
"lue store to help explore all concepts mentioned above. The guide is quite fre"
"sh, so please do submit pull requests for typos and mistakes. Feedback is also"
" welcome!"
msgstr ""

msgid ""
"This guide aims to introduce the meta-programming techniques available in Elix"
"ir. The ability to represent an Elixir program by its own data structures is a"
"t the heart of meta-programming. This chapter starts by exploring those struct"
"ures and the associated `quote` and `unquote` constructs, so we can take a loo"
"k at macros in the next chapter and finally build our own domain specific lang"
"uage."
msgstr ""

msgid ""
"This is a bad idea, as we don't want the registry to crash when a bucket crash"
"es! We typically avoid creating new processes directly, instead, we delegate t"
"his responsibility to supervisors. As we'll see in the next chapter, superviso"
"rs rely on links and that explains why link-based APIs (`spawn_link`, `start_l"
"ink`, etc) are so prevalent in Elixir and <abbr title=\"Open Telecom Platform\">"
"OTP</abbr>."
msgstr ""

msgid ""
"This is a minor release that contains a couple enhancements regarding UTF-8, ["
"dialyzer](http://www.erlang.org/doc/man/dialyzer.html) support and bug fixes."
msgstr ""

msgid ""
"This is a quick introduction to the Elixir syntax for Erlang developers and vi"
"ce-versa. It is the absolute minimum amount of knowledge you need in order to "
"understand Elixir/Erlang code, support interoperability, read the docs, sample"
" code, etc."
msgstr ""

msgid ""
"This is equivalent to `else if` clauses in many imperative languages (although"
" used way less frequently here)."
msgstr ""

msgid ""
"This is pretty much all we need to implement our echo server. Let's give it a "
"try!"
msgstr ""

msgid ""
"This is similar to the mistake we made when we called `KV.Bucket.start_link/1`"
" straight from the registry. That meant a failure in any bucket would bring th"
"e whole registry down."
msgstr ""

msgid ""
"This kind of property-based testing doesn't test for *correctness*. In the sni"
"ppet above, `has_key?/2` could be implemented to ignore arguments always retur"
"n `false` and the automatic spec validation would pass since `false` is always"
" a boolean. However, this is a kind of **smoke testing** useful for discoverin"
"g inconsistencies in the arguments and return values of functions."
msgstr ""

msgid ""
"This makes comprehensions useful not only for working with in-memory collectio"
"ns but also with files, io devices, and other sources. In future releases, we "
"will continue exploring how to make comprehensions more expressive, following "
"in the footsteps of other functional programming research on the topic (like C"
"omprehensive Comprehensions and Parallel Comprehensions)."
msgstr ""

msgid ""
"This makes it possible to distribute CLI applications written in Elixir by pub"
"lishing a package which builds an escript to Hex. [`ex_doc`](https://hex.pm/pa"
"ckages/ex_doc) has been updated to serve as an example of how to use this new "
"functionality."
msgstr ""

msgid ""
"This makes your code clearer and easier to test and maintain, as you can invok"
"e and test `do_this_that_and_that/3` directly. It also helps you design an act"
"ual API for developers that do not want to rely on macros."
msgstr ""

msgid ""
"This means our implementation is going in the correct direction, but it doesn'"
"t look very elegant, does it?"
msgstr ""

msgid ""
"This means that when performing multiple operations with `Enum`, each operatio"
"n is going to generate an intermediate list until we reach the result:"
msgstr ""

msgid ""
"This means we can also configure our `:routing_table` directly in the `apps/kv"
"/config/config.exs` file:"
msgstr ""

msgid ""
"This new approach allows `MyApp.Repo` and `MyApp.Endpoint` to control how they"
" run under a supervisor. This reduces the chances of mistakes being made, such"
" as starting an Ecto repository as a worker or forgetting to declare that task"
"s are temporary in a supervision tree."
msgstr ""

msgid ""
"This post is a summary of those talks, focusing on the language goals: compati"
"bility, productivity and extensibility."
msgstr ""

msgid ""
"This project's goal is Tensorflex, an Elixir machine learning framework simila"
"r to [Keras for Python][keras]. Keras uses Tensorflow as a backend for doing a"
"ll the machine learning. Tensorflex will use Using Native Implemented Function"
"s (NIFs) and the Tensorflow C API as a backend to provide a low-level API. Thi"
"s low-level API will then be used to write a Keras-like framework in the form "
"of a high-level API. This will allow Elixir developers to write expedient and "
"efficient machine learning code in Elixir."
msgstr ""

msgid ""
"This release also adds [the Sets API](https://hexdocs.pm/elixir/Set.html) to E"
"lixir and a HashSet implementation. The HashSet implementation follows [the sa"
"me design goals as the HashDict implementation](/blog/2013/01/27/elixir-v0-8-0"
"-released/) released at the beginning of this year, starting with a compact re"
"presentation and expanding and contracting as needed."
msgstr ""

msgid ""
"This release also allows developers to mark which functions in a given module "
"are an implementation of a callback. For example, when using the [Plug](https:"
"//github.com/elixir-lang/plug) project, one needs to implement both `init/1` a"
"nd `call/2` when writing a Plug:"
msgstr ""

msgid ""
"This release also includes some backwards incompatible changes, but the majori"
"ty of changes were first deprecated, meaning your code will run just fine but "
"with warnings. Those warnings will be removed in the next release v0.7.1, whic"
"h should happen in a 2 to 4 weeks time span."
msgstr ""

msgid ""
"This release also introduces the new capture operator, which provides a conven"
"ient syntax for retrieving functions so they can be passed as arguments:"
msgstr ""

msgid ""
"This release also introduces two new attributes associated with function defin"
"itions: `@deprecated` and `@since`. The former marks if a function or macro is"
" deprecated, the latter annotates the version the API was introduced:"
msgstr ""

msgid ""
"This release also marks the announcement of [hex.pm](https://hex.pm/), a packa"
"ge manager for the Erlang VM. Hex allows you to package and publish your proje"
"cts while fetching them and performing dependency resolution in your applicati"
"ons."
msgstr ""

msgid "This release includes many notable language improvements."
msgstr ""

msgid ""
"This release introduces new accessors to make it simpler for developers to tra"
"verse nested data structures, traversing and updating data in different ways. "
" For instance, given a user with a list of languages, here is how to deeply tr"
"averse the map and convert all language names to uppercase:"
msgstr ""

msgid ""
"This release is the consolidation of all the work done through the years. With"
" v1.0, we have reached a stable milestone for the growth of software and proje"
"cts written in Elixir."
msgstr ""

msgid ""
"This section covers built-in attributes. However, attributes can also be used "
"by developers or extended by libraries to support custom behaviour."
msgstr ""

msgid ""
"This section goes over some of the syntactic differences between the two langu"
"ages."
msgstr ""

msgid ""
"This shortcut will be extremely useful as we build our project, allowing us to"
" quickly iterate by running a single test."
msgstr ""

msgid ""
"This should be enough to invoke Elixir functions straight from your Erlang cod"
"e. If you are also going to write Elixir code, you can [install Elixir's rebar"
" plugin for automatic compilation](https://github.com/yrashk/rebar_elixir_plug"
"in)."
msgstr ""

msgid ""
"This simple example illustrates how a developer can leverage macros to provide"
" a concise but powerful API. Macros have access to the whole compilation envir"
"onment, being able to check the imported functions, macros, defined variables "
"and more."
msgstr ""

msgid "This structure is enough to compile our project:"
msgstr ""

msgid ""
"This test is written using an *example-based approach*. We are writing both th"
"e input to the piece of software we are testing as well as the expected output"
", and the testing tool is verifying that running the software on the given inp"
"ut results in the expected output. This style of testing is common and useful "
"because it lets you get up and running easily and also lets you test known cor"
"ner cases in an explicit way. However, it's hard to test many cases this way a"
"nd even harder to uncover *unknown* corner cases that may reveal bugs in your "
"code."
msgstr ""

msgid ""
"This time all tests passed and ExUnit warned us that distributed tests were be"
"ing excluded. If you run tests with `$ elixir --sname foo -S mix test`, one ex"
"tra test should run and successfully pass as long as the `bar@computer-name` n"
"ode is available."
msgstr ""

msgid "This time let's add a `:distributed` tag to `test/kv/router_test.exs`:"
msgstr ""

msgid ""
"This time, since our test relies on global data, we have not given `async: tru"
"e` to `use ExUnit.Case`. Furthermore, in order to guarantee our test is always"
" in a clean state, we stop and start the `:kv` application before each test. I"
"n fact, stopping the `:kv` application even prints a warning on the terminal:"
msgstr ""

msgid ""
"This was a common source of confusion and quite error prone as many developers"
" would not list their dependencies in the applications list."
msgstr ""

msgid ""
"This will bring you to Interactive Elixir and you can execute Elixir expressio"
"ns as usual!"
msgstr ""

msgid "This will build a complete bundle, including JavaScript and CSS."
msgstr ""

msgid ""
"This will generate a file named `Elixir.Math.beam` containing the bytecode for"
" the defined module. If we start `iex` again, our module definition will be av"
"ailable (provided that `iex` is started in the same directory the bytecode fil"
"e is in):"
msgstr ""

msgid ""
"Those are all protocols that ship with Elixir and they are being consolidated."
" Because a protocol can dispatch to any data type, the protocol must check on "
"every call if an implementation for the given type exists. This may be expensi"
"ve."
msgstr ""

msgid ""
"Those distributions will likely install Erlang automatically for you too. In c"
"ase they don't, check the [Installing Erlang](/install.html#installing-erlang)"
" section below."
msgstr ""
"これらのディストリビューションは、たいてい自動で Erlang もインストールしてくれますが、もしインストールされない場合は [Installing Erl"
"ang](/install.html#installing-erlang)(英語) を参照してください."

msgid ""
"Those examples are just scratching the surface of what can be achieved with ma"
"cros in Elixir. For example, we are currently using macros to compile routes f"
"rom a web application into a bunch of patterns that are highly optimizable by "
"the VM, providing an expressive but heavily optimized routing algorithm."
msgstr ""

msgid ""
"Those improvements are not exclusive to the standard library, they are availab"
"le to every Elixir library and application. We hope one day they will be avail"
"able to all applications running on the Erlang VM too."
msgstr ""

msgid ""
"Those improvements will help developers better understand the relationship bet"
"ween files and reveal potentially complex parts of their systems."
msgstr ""

msgid ""
"Those options mean all dependencies will be checked out to `kv_umbrella/deps`,"
" and they will share the same build, config and lock files. This ensures depen"
"dencies will be fetched and compiled once for the whole umbrella structure, in"
"stead of once per umbrella application."
msgstr ""

msgid ""
"Those performance characteristics dictate the usage of those data structures. "
"One very common use case for tuples is to use them to return extra information"
" from a function. For example, `File.read/1` is a function that can be used to"
" read file contents. It returns a tuple:"
msgstr ""

msgid ""
"Those situations are quite uncommon in practice except when interfacing with l"
"ibraries that do not provide a proper API. For example, let's imagine the `Enu"
"m` module did not provide any API for finding a value and that we needed to fi"
"nd the first multiple of 13 in a list of numbers:"
msgstr ""

msgid ""
"Throughout the guide, we have built a very simple distributed key-value store "
"as an opportunity to explore many constructs like generic servers, supervisors"
", tasks, agents, applications and more. Not only that, we have written tests f"
"or the whole application, got familiar with ExUnit, and learned how to use the"
" Mix build tool to accomplish a wide range of tasks."
msgstr ""

msgid ""
"Throughout the tutorial, we will talk a lot about the head and tail of a list."
" The head is the first element of a list and the tail is the remainder of the "
"list. They can be retrieved with the functions `hd/1` and `tl/1`. Let's assign"
" a list to a variable and retrieve its head and tail:"
msgstr ""

msgid ""
"Throughout this tutorial, we have been using the notation `name/arity` to refe"
"r to functions. It happens that this notation can actually be used to retrieve"
" a named function as a function type. Start `iex`, running the `math.exs` file"
" defined above:"
msgstr ""

msgid ""
"To access the new documentation format, developers should use [`Code.fetch_doc"
"s/1`](https://hexdocs.pm/elixir/Code.html#fetch_docs/1). We have always been p"
"roud of treating documentation as a first-class citizen and the ability to add"
" structured information to the documentation is a further step in this directi"
"on."
msgstr ""

msgid ""
"To automatically format your codebase, you can run the [new `mix format` task]"
"(https://hexdocs.pm/mix/Mix.Tasks.Format.html). A `.formatter.exs` file may be"
" added to your project root for rudimentary formatter configuration. The mix t"
"ask also supports flags for CI integration. For instance, you can make your bu"
"ild or a Pull Request fail if the code is not formatted accordingly by using t"
"he `--check-formatted` flag. We also recommend developers to check their favor"
"ite editor and see if it already provides key bindings for `mix format`, allow"
"ing a file or a code snippet to be formatted without hassle."
msgstr ""

msgid ""
"To avoid printing log messages during tests, ExUnit provides a neat feature ca"
"lled `:capture_log`. By setting `@tag :capture_log` before each test or `@modu"
"letag :capture_log` for the whole test case, ExUnit will automatically capture"
" anything that is logged while the test runs. In case our test fails, the capt"
"ured logs will be printed alongside the ExUnit report."
msgstr ""

msgid ""
"To celebrate this release and the new year, we have also reviewed both the [Ge"
"tting Started](http://elixir-lang.org/getting-started/introduction.html) and ["
"Mix & OTP](http://elixir-lang.org/getting-started/mix-otp/introduction-to-mix."
"html) guides, bringing it up to date and exploring new functionalities added s"
"ince Elixir v1.0."
msgstr ""

msgid "To define a struct, the `defstruct` construct is used:"
msgstr ""

msgid "To disable coloring altogether, simply pass an empty list to `:syntax_colors`."
msgstr ""

msgid ""
"To drive the point home, imagine you want to validate a certain attribute only"
" if a given condition is met. We could easily achieve it with the first soluti"
"on, by manipulating the data structure accordingly, or with the second solutio"
"n by using conditionals (if/else) before invoking the function. However, it is"
" impossible to do so with the macros approach unless its DSL is augmented."
msgstr ""

msgid ""
"To fix the failure we need to make `KV.Registry.create/2` synchronous by using"
" `call/2` rather than `cast/2`. This will guarantee that the client will only "
"continue after changes have been made to the table. Let's change the function "
"and its callback as follows:"
msgstr ""

msgid ""
"To give the formatter a try, change a file in the `lib` or `test` directories "
"to include extra spaces or extra newlines, such as `def  hello  do`, and then "
"run `mix format`."
msgstr ""

msgid ""
"To help developers remember the differences between call, cast and info, the s"
"upported return values and more, [Benjamin Tan Wei Hao](http://benjamintan.io)"
" has created an excellent [GenServer cheat sheet](https://raw.githubuserconten"
"t.com/benjamintanweihao/elixir-cheatsheets/master/GenServer_CheatSheet.pdf)."
msgstr ""

msgid ""
"To make the `check all` macro available in your test, alongside importing all "
"functions from `StreamData`, you can `use ExUnitProperties`:"
msgstr ""

msgid ""
"To remain focused, Elixir trusts its ecosystem to bring diversity and broaden "
"its use cases to a wider audience. Therefore the language was designed to be e"
"xtensible: the constructs available to build the language are also available f"
"or developers to extend the language and bring it to different domains. Projec"
"ts such as [the Phoenix web framework](http://phoenixframework.org) and [the N"
"erves embedded framework](http://nerves-project.org) are two of such examples."
msgstr ""

msgid ""
"To run our doctests, we'll create a file at `test/kv_server/command_test.exs` "
"and call `doctest KVServer.Command` in the test case:"
msgstr ""

msgid ""
"To work on these assets you need to install [Node.js] and [npm] first (probabl"
"y\n"
"as superuser or administrator). After that execute the following commands:"
msgstr ""

msgid ""
"Today we are glad to announce the official release of GenStage. GenStage is a "
"new Elixir behaviour for exchanging events with back-pressure between Elixir p"
"rocesses. In the short-term, we expect GenStage to replace the use cases for G"
"enEvent as well as providing a composable abstraction for consuming data from "
"third-party systems."
msgstr ""

msgid ""
"Today, a parallel compiler just landed in Elixir master. The goal of the paral"
"lel compiler is to compile files in parallel, automatically detecting dependen"
"cies between files. In this blog post, we are going to take a peek into the pa"
"rallel compiler internals and learn more about Erlang and Elixir in the proces"
"s."
msgstr ""

msgid ""
"Together with the other values returned the possible return values from a\n"
"producer are `{ :done, acc } | { :halted, acc } | { :suspended, acc,\n"
"continuation }`."
msgstr ""

msgid ""
"Top 10 files with most incoming dependencies:\n"
"  * lib/hexpm/web/web.ex (84)\n"
"  * lib/hexpm/web/router.ex (29)\n"
"  * lib/hexpm/web/controllers/controller_helpers.ex (29)\n"
"  * lib/hexpm/web/controllers/auth_helpers.ex (28)\n"
"  * lib/hexpm/web/views/view_helpers.ex (27)\n"
"  * lib/hexpm/web/views/icons.ex (27)\n"
"  * lib/hexpm/web/endpoint.ex (23)\n"
"  * lib/hexpm/ecto/changeset.ex (22)\n"
"  * lib/hexpm/accounts/user.ex (19)\n"
"  * lib/hexpm/repo.ex (19)\n"
"```"
msgstr ""

msgid ""
"Top 10 files with most outgoing dependencies:\n"
"  * test/support/factory.ex (18)\n"
"  * lib/hexpm/accounts/user.ex (13)\n"
"  * lib/hexpm/accounts/audit_log.ex (12)\n"
"  * lib/hexpm/web/controllers/dashboard_controller.ex (12)\n"
"  * lib/hexpm/repository/package.ex (12)\n"
"  * lib/hexpm/repository/releases.ex (11)\n"
"  * lib/hexpm/repository/release.ex (10)\n"
"  * lib/hexpm/web/controllers/package_controller.ex (10)\n"
"  * lib/mix/tasks/hexpm.stats.ex (9)\n"
"  * lib/hexpm/repository/registry_builder.ex (9)"
msgstr ""

msgid ""
"Try to connect two telnet clients at the same time. When you do so, you will n"
"otice that the second client doesn't echo:"
msgstr ""

msgid "Trying to access an attribute that was not defined will print a warning:"
msgstr ""

msgid ""
"Trying to create a struct with an unknown key raises an error during compilati"
"on:"
msgstr ""

msgid ""
"Tuples store elements contiguously in memory. This means accessing a tuple ele"
"ment by index or getting the tuple size is a fast operation. Indexes start fro"
"m zero:"
msgstr ""

msgid ""
"Tuples, on the other hand, are stored contiguously in memory. This means getti"
"ng the tuple size or accessing an element by index is fast. However, updating "
"or adding elements to tuples is expensive because it requires creating a new t"
"uple in memory:"
msgstr ""

msgid ""
"Two lists can be concatenated or subtracted using the `++/2` and `--/2` operat"
"ors respectively:"
msgstr ""

msgid "Type \"hello\", press enter, and you will get \"hello\" back. Excellent!"
msgstr ""

msgid ""
"Typespecs are not only useful to developers as additional documentation. The E"
"rlang tool [Dialyzer](http://www.erlang.org/doc/man/dialyzer.html), for exampl"
"e, uses typespecs in order to perform static analysis of code. That's why, in "
"the `QuietCalculator` example, we wrote a spec for the `make_quiet/1` function"
" even though it was defined as a private function."
msgstr ""

msgid ""
"Typically, stable releases are pushed to Hex. If you want to depend on an exte"
"rnal dependency still in development, Mix is able to manage Git dependencies t"
"oo:"
msgstr ""

msgid ""
"UTF-8 requires one byte to represent the characters `h`, `e`, and `o`, but two"
" bytes to represent `ł`. In Elixir, you can get a character's code point by us"
"ing `?`:"
msgstr ""

msgid ""
"Umbrella applications can also be used as a stepping stone for eventually extr"
"acting an application from your codebase. For example, imagine a web applicati"
"on that has to send \"push notifications\" to its users. The whole \"push notific"
"ations system\" can be developed as a separate application in the umbrella, wit"
"h its own supervision tree and APIs. If you ever run into a situation where an"
"other project needs the push notifications system, the system can be moved to "
"a private repository or a Hex package."
msgstr ""

msgid ""
"Umbrella applications generated with Elixir v1.2 will by default include this "
"configuration. The downside of this approach is that applications are a bit le"
"ss isolated, since configuration is now shared across all projects, although d"
"evelopers can revert back to the previous behaviour by simply removing the fla"
"gs above."
msgstr ""

msgid ""
"Umbrella projects are a convenience to help you organize and manage multiple a"
"pplications. While it provides a degree of separation between applications, th"
"ose applications are not fully decoupled, as they are assumed to share the sam"
"e configuration and the same dependencies."
msgstr ""

msgid ""
"Under some unlikely circumstances, we may introduce changes that break existin"
"g code:"
msgstr ""

msgid ""
"Unfortunately this time we cannot simply change `handle_info/2`, the operation"
" responsible for cleaning the ETS table, to a synchronous operation. Instead, "
"we need to find a way to guarantee the registry has processed the `:DOWN` noti"
"fication sent when the bucket crashed."
msgstr ""

msgid ""
"Unfortunately, similar to `IO.inspect/2`, `IEx.pry/0` also requires us to chan"
"ge the code we intend to debug. Luckily IEx also provides a [`break!/2`](https"
"://hexdocs.pm/iex/IEx.html#break!/2) function which allows you set and manage "
"breakpoints on any Elixir code without modifying its source:"
msgstr ""

msgid ""
"Unfortunately, this special strategy changed the semantics of the supervisor i"
"n regards to initialization and shutdown. Plus some APIs expected different in"
"puts or would be completely unavailable depending on the supervision strategy."
msgstr ""

msgid ""
"Unknown commands or commands with the wrong number of\n"
"arguments return an error:"
msgstr ""

msgid ""
"Unquoting is very useful when working with macros. When writing macros, develo"
"pers are able to receive code chunks and inject them inside other code chunks,"
" which can be used to transform code or write code that generates code during "
"compilation."
msgstr ""

msgid ""
"Up to this release, umbrella applications shared mostly dependencies, which me"
"ant each application still had their own build directory and their own compila"
"tion cycle. Elixir v1.2 allows developers to also share both build and configu"
"ration files. This change allows teams to drastically reduce compilation times"
" in umbrella projects by adding the following configuration to each umbrella a"
"pp's `mix.exs` file:"
msgstr ""

msgid ""
"Use the pin operator `^` when you want to pattern match against an existing va"
"riable's value rather than rebinding the variable:"
msgstr ""

msgid ""
"User[name: \"john doe\"].first_name #=> \"john\"\n"
"```"
msgstr ""

msgid ""
"Using Git repositories for internal dependencies is somewhat discouraged in El"
"ixir. Remember that the runtime and the Elixir ecosystem already provide the c"
"oncept of applications. As such, we expect you to frequently break your code i"
"nto applications that can be organized logically, even within a single project"
"."
msgstr ""

msgid ""
"Using `try/catch` is already uncommon and using it to catch exits is even rare"
"r."
msgstr ""

msgid ""
"Using functions from the `Path` module as opposed to directly manipulating str"
"ings is preferred since the `Path` module takes care of different operating sy"
"stems transparently. Finally, keep in mind that Elixir will automatically conv"
"ert slashes (`/`) into backslashes (`\\`) on Windows when performing file opera"
"tions."
msgstr ""

msgid ""
"Using processes to maintain state and name registration are very common patter"
"ns in Elixir applications. However, most of the time, we won't implement those"
" patterns manually as above, but by using one of the many abstractions that sh"
"ip with Elixir. For example, Elixir provides [agents](https://hexdocs.pm/elixi"
"r/Agent.html), which are simple abstractions around state:"
msgstr ""

msgid ""
"Using property-based testing has some advantages. First of all, it lets you te"
"st properties of your code over many more values than you otherwise would with"
" example-based testing. While it's true that random data generation can't cove"
"r all the possible values that a piece of code can deal with, the confidence i"
"n your codebase can still increase over time because the property-based tests "
"will likely generate different values on each run. Example-based testing means"
" your test data will not change over time."
msgstr ""

msgid ""
"Using the flag `--type production` will result in minified JavaScript and CSS\n"
"bundles."
msgstr ""

msgid ""
"Using the power of suspension it is now possible to create an interleave\n"
"function."
msgstr ""

msgid ""
"Variable hygiene only works because Elixir annotates variables with their cont"
"ext. For example, a variable `x` defined on line 3 of a module would be repres"
"ented as:"
msgstr ""

msgid ""
"Variables are also represented using such triplets, except the last element is"
" an atom, instead of a list:"
msgstr ""

msgid "Variables can be used when accessing, matching and adding map keys:"
msgstr ""

msgid "Variables in Elixir can be rebound:"
msgstr ""

msgid ""
"Variables in Erlang can only be assigned once. The Erlang shell provides a spe"
"cial command `f` that allows you to erase the binding of a variable or all var"
"iables at once."
msgstr ""

msgid ""
"We also hope to have clarified what Elixir brings to the Erlang VM, in particu"
"lar, meta-programming through macros, polymorphic constructs for extensibility"
" and a data-focused standard library with extensible and consistent APIs for d"
"iverse types, including strict and lazy enumeration, unicode handling, a test "
"framework and more."
msgstr ""

msgid ""
"We also provide a tool called [ExDoc](https://github.com/elixir-lang/ex_doc) w"
"hich is used to generate HTML pages from the documentation."
msgstr ""

msgid ""
"We also would like to thank [Anthony Grimes](https://github.com/raynes) for th"
"e support and [Phil Halgelberg](https://github.com/technomancy) for [the work "
"on Lein](https://github.com/technomancy/leiningen) which Mix borrows a lot fro"
"m."
msgstr ""

msgid ""
"We are also glad to welcome Michał Muskała to the Elixir Core team. Prior to j"
"oining the team, he was [a member of the Ecto team](https://github.com/elixir-"
"ecto/ecto), he has made [plenty of contributions to Elixir](https://github.com"
"/elixir-lang/elixir/pulls?utf8=%E2%9C%93&q=is%3Apr+author%3Amichalmuskala), of"
"ten to improve performance, and [is a frequent to contribute to Erlang/OTP too"
"](https://github.com/erlang/otp/pulls?utf8=%E2%9C%93&q=is%3Apr+author%3Amichal"
"muskala)!"
msgstr ""

msgid ""
"We are excited to announce [ElixirConf](http://elixirconf.com), the first ever"
" Elixir conference, happening July 25-26, 2014 in Austin, TX. The Call For Pro"
"posals is open and we are waiting for your talks!"
msgstr ""

msgid ""
"We are glad to announce Elixir v1.0 is finally out. It has been 8005 commits ["
"by 189 contributors](https://github.com/elixir-lang/elixir/graphs/contributors"
"?from=2011-01-12&to=2014-09-10&type=c), including the initial commit on [Janua"
"ry 9th, 2011](https://github.com/elixir-lang/elixir/commit/337c3f2d569a42ebd5f"
"cab6fef18c5e012f9be5b)!"
msgstr ""

msgid "We are glad to announce v0.14.0 has been released."
msgstr ""

msgid ""
"We are glad to announce v0.15.0 has been released. We have spent the last 2 mo"
"nths tidying up the existing APIs, ensuring consistency, improving performance"
" and more. As a result, v0.15.0 is the last minor branch before Elixir v1.0!"
msgstr ""

msgid ""
"We are going to explore them in detail now. Keep in mind the first three are c"
"alled directives because they have **lexical scope**, while `use` is a common "
"extension point."
msgstr ""

msgid ""
"We are going to solve this issue by defining a new supervisor that will spawn "
"and supervise all buckets. Opposite to the previous Supervisor we defined, the"
" children are not known upfront, but they are rather started dynamically. For "
"those situations, we use a `DynamicSupervisor`. The `DynamicSupervisor` does n"
"ot expect a list of children during initialization, instead each child is star"
"ted manually via `DynamicSupervisor.start_child/2`."
msgstr ""

msgid ""
"We are going to start our server by calling `KVServer.accept(4040)`, where 404"
"0 is the port. The first step in `accept/1` is to listen to the port until the"
" socket becomes available and then call `loop_acceptor/1`. `loop_acceptor/1` i"
"s a loop accepting client connections. For each accepted connection, we call `"
"serve/1`."
msgstr ""

msgid ""
"We are keeping a map inside the agent to store our keys and values. Getting an"
"d putting values on the map is done with the Agent API  and the capture operat"
"or `&`, introduced in [the Getting Started guide](/getting-started/modules-and"
"-functions.html#function-capturing)."
msgstr ""

msgid ""
"We are looking forward to everyone's feedback on using Logger more and more in"
" production."
msgstr ""

msgid ""
"We are pleased to announce that Elixir is taking part in Google Summer of Code"
" 2013\n"
"as member of the [BEAM Community](http://beamcommunity.github.io). This means "
"that\n"
"students all around the world can get paid to work on Elixir during the summer"
"!"
msgstr ""

msgid ""
"We are really proud of this release, as it focuses mostly on quality of life i"
"mprovements, instead of flashy new features. As Elixir continues to mature, ex"
"pect more releases like this one. The full list of changes is available in our"
" [release notes](https://github.com/elixir-lang/elixir/releases/tag/v1.7.0)."
msgstr ""

msgid ""
"We are starting a linked Task directly from the acceptor process. But we've al"
"ready made this mistake once. Do you remember?"
msgstr ""

msgid ""
"We are very close to launch Elixir v1.0! All planned features are already in E"
"lixir's codebase and at the moment there are only [four open issues in our tra"
"cker tagged with the v1.0 milestone](https://github.com/elixir-lang/elixir/iss"
"ues?q=is%3Aopen+is%3Aissue+milestone%3Av1.0)."
msgstr ""

msgid ""
"We are very excited with the possibilities GenStage brings to developers and a"
"ll new paths it allows us to explore and research. So give it a try and let us"
" know! [GenStage, Flows, and more will also be the topic of my keynote at Elix"
"irConf 2016](http://www.elixirconf.com/) and we hope to see you there."
msgstr ""

msgid "We can access the documentation for the `~r` sigil via `sigil_r`:"
msgstr ""

msgid "We can actually verify that this is the case by using `Macro.expand_once/2`:"
msgstr ""

msgid ""
"We can already try out our first umbrella child. We could run tests inside the"
" `apps/kv_server` directory, but that wouldn't be much fun. Instead, go to the"
" root of the umbrella project and run `mix test`:"
msgstr ""

msgid ""
"We can also configure the generated `.app` file by customizing the values retu"
"rned by the `application/0` inside our `mix.exs` project file. We are going to"
" do our first customization soon."
msgstr ""

msgid "We can also get the number of bytes in a string:"
msgstr ""

msgid "We can also pattern match on binaries / bitstrings:"
msgstr ""

msgid ""
"We can also provide our own sigils by implementing functions that follow the `"
"sigil_{identifier}` pattern. For example, let's implement the `~i` sigil that "
"returns an integer (with the optional `n` modifier to make it negative):"
msgstr ""

msgid ""
"We can configure the application callback in two steps. First, open up the `mi"
"x.exs` file and change `def application` to the following:"
msgstr ""

msgid "We can create a `Parser` behaviour:"
msgstr ""

msgid ""
"We can define any function and macro we want, including ones that override the"
" built-in definitions provided by Elixir. The only exceptions are Elixir speci"
"al forms which are not implemented in Elixir and therefore cannot be overridde"
"n, [the full list of special forms is available in `Kernel.SpecialForms`](http"
"s://hexdocs.pm/elixir/Kernel.SpecialForms.html#summary)."
msgstr ""

msgid ""
"We can do this by passing the `restart: :temporary` option to `use Agent` in `"
"KV.Bucket`:"
msgstr ""

msgid ""
"We can find the generated `.app` file at `_build/dev/lib/kv/ebin/kv.app`. Let'"
"s have a look at its contents:"
msgstr ""

msgid "We can model the game's dungeons with a Dungeon struct:"
msgstr ""

msgid ""
"We can now create `User` structs by using a syntax similar to the one used to "
"create maps:"
msgstr ""

msgid ""
"We can pass an option to Mix to ask it to not start our application. Let's giv"
"e it a try by running `iex -S mix run --no-start`:"
msgstr ""

msgid "We can pattern match on lists:"
msgstr ""

msgid "We can retrieve the PID of the current process by calling `self/0`:"
msgstr ""

msgid ""
"We can send and receive messages from the pid returned by `Node.spawn_link/2` "
"as usual. Let's try a quick ping-pong example:"
msgstr ""

msgid ""
"We can send messages to a process with `send/2` and receive them with `receive"
"/1`:"
msgstr ""

msgid ""
"We can specify an application callback function. This is a function that will "
"be invoked when the application starts. The function must return a result of `"
"{:ok, pid}`, where `pid` is the process identifier of a supervisor process."
msgstr ""

msgid ""
"We can stop our `:kv` application as well as the `:logger` application, which "
"is started by default with Elixir:"
msgstr ""

msgid ""
"We changed the callback from `handle_cast/2` to `handle_call/3` and changed it"
" to reply with the pid of the created bucket. Generally speaking, Elixir devel"
"opers prefer to use `call/2` instead of `cast/2` as it also provides back-pres"
"sure - you block until you get a reply. Using `cast/2` when not necessary can "
"also be considered a premature optimization."
msgstr ""

msgid ""
"We continue actively working on Elixir and this release is the [result of our "
"efforts on different areas](https://github.com/elixir-lang/elixir/blob/v0.8.0/"
"CHANGELOG.md)! We have exciting plans and newer possibilities to explore, as a"
" new release of Erlang OTP also comes out in a couple weeks."
msgstr ""

msgid ""
"We could fix this by defining our own module that calls `use Task, restart: :p"
"ermanent` and invokes a `start_link` function responsible for restarting the t"
"ask, quite similar to `Agent` and `GenServer`. However, let's take a different"
" approach here. When integrating with someone else's library, we won't be able"
" to change how their agents, tasks, and servers are defined. Instead, we need "
"to be able to customize their child specification dynamically. This can be don"
"e by using `Supervisor.child_spec/2`, a function that we happen to know from p"
"revious chapters. Let's rewrite `start/2` in `KVServer.Application` once more:"
msgstr ""

msgid ""
"We covered processes in the Getting Started guide. <abbr title=\"Erlang Term St"
"orage\">ETS</abbr> is a new topic that we will explore in later chapters. When "
"it comes to processes though, we rarely hand-roll our own, instead we use the "
"abstractions available in Elixir and  <abbr title=\"Open Telecom Platform\">OTP<"
"/abbr>:"
msgstr ""

msgid ""
"We decided to separate data-generation from property-based testing because it'"
"s something that developers can take advantage of in situations outside of pro"
"perty-based testing. For example, data streams can be used to seed a database "
"or to have randomly generated data available during regular tests."
msgstr ""

msgid ""
"We defined `print_multiple_times/2` so that, no matter what number is passed a"
"s the second argument, it either triggers our first definition (known as a _ba"
"se case_) or it triggers our second definition, which will ensure that we get "
"exactly one step closer to our base case."
msgstr ""

msgid ""
"We didn't implement the `Size` protocol for lists as there is no \"size\" inform"
"ation pre-computed for lists, and the length of a list has to be computed (wit"
"h `length/1`)."
msgstr ""

msgid ""
"We explore the Observer in the context of an actual project [in the Dynamic Su"
"pervisor chapter of the Mix & OTP guide](/getting-started/mix-otp/dynamic-supe"
"rvisor.html)."
msgstr ""

msgid ""
"We fixed the issue for the registry by using a simple one for one supervisor. "
"We are going to use the same tactic here, except that this pattern is so commo"
"n with tasks that `Task` already comes with a solution: a simple one for one s"
"upervisor that starts temporary tasks as part of our supervision tree."
msgstr ""

msgid "We frequently say that **the Erlang VM is Elixir's strongest asset**."
msgstr ""

msgid ""
"We had originally sketched this chapter to come much earlier in the getting st"
"arted guide. However, we noticed the IO system provides a great opportunity to"
" shed some light on some philosophies and curiosities of Elixir and the <abbr "
"title=\"Virtual Machine\">VM</abbr>."
msgstr ""

msgid ""
"We have a [Learning](/learning.html) section that suggests books, screencasts,"
" and other resources for learning Elixir and exploring the ecosystem. There ar"
"e also plenty of Elixir resources out there, like conference talks, open sourc"
"e projects, and other learning material produced by the community."
msgstr ""

msgid ""
"We have a keyword list of users where each value is a map containing the name,"
" age and a list of programming languages each user likes. If we wanted to acce"
"ss the age for john, we could write:"
msgstr ""

msgid ""
"We have added a new `:env` key to the application. It returns the application "
"default environment, which has an entry of key `:routing_table` and value of a"
"n empty list. It makes sense for the application environment to ship with an e"
"mpty table, as the specific routing table depends on the testing/deployment st"
"ructure."
msgstr ""

msgid ""
"We have already learned that Elixir provides double-quoted strings and single-"
"quoted char lists. However, this only covers the surface of structures that ha"
"ve textual representation in the language. Atoms, for example, are mostly crea"
"ted via the `:atom` representation."
msgstr ""

msgid ""
"We have also [added coloring and diffing to doctests](https://hexdocs.pm/ex_un"
"it/ExUnit.DocTest.html#content)."
msgstr ""

msgid ""
"We have also added colored output to Interactive Elixir (IEx) but it requires "
"Erlang R16."
msgstr ""

msgid ""
"We have also added extensive support to ANSI escape codes. For example, by sim"
"ply upgrading to the latest Elixir you will get colored output from your test "
"suites:"
msgstr ""

msgid "We have also added support for variables in map keys. Now you can write:"
msgstr ""

msgid ""
"We have also improved both the parser and compiler to be more aware of languag"
"e constructs, emitting warnings on common pitfalls like when piping to express"
"ions without parentheses or when defining unsafe variables. Such improvements "
"will point developers to the more idiomatic way of writing Elixir code early o"
"n."
msgstr ""

msgid ""
"We have also introduced the concepts of [agents](https://hexdocs.pm/elixir/Age"
"nt.html) and the idea of [tasks](https://hexdocs.pm/elixir/Task.html), which c"
"an be supervised and distributed. Application configuration has been made firs"
"t class in Mix, allowing developers to configure their dependencies, sometimes"
" even using different configurations per environment (dev, test or prod by def"
"ault)."
msgstr ""

msgid "We have also many other smaller improvements:"
msgstr ""

msgid ""
"We have also pushed improvements to [the String module](https://hexdocs.pm/eli"
"xir/String.html), including new APIs. In particular, in order to know that `St"
"ring.length(\"josé\")` has length 4 (even though it takes 5 bytes to be represen"
"ted in UTF-8), we need to use some algorithms defined by the Unicode Standard."
" These have been implemented as specified in the [extended grapheme cluster al"
"gorithm, defined in the version 6.3.0 of the Unicode Standard](http://www.unic"
"ode.org/reports/tr29/)."
msgstr ""

msgid ""
"We have also released a new ExDoc version. It provides a [beautiful, clean and"
" readable way to navigate the Elixir documentation](https://hexdocs.pm/elixir/"
"1.1.0) and it is available to any Elixir project. The latest version includes "
"initial support for User Guides and we have more features and improvements com"
"ing on the way."
msgstr ""

msgid ""
"We have also relied a lot on the [research and work done by Andrew Thompson an"
"d the folks at Basho behind Lager](https://www.youtube.com/watch?v=8BNpOHFvg_Q"
") to ensure our logger is performant and robust. On this front, Logger"
msgstr ""

msgid ""
"We have also seen great progress on areas that go beyond the source code. In p"
"articular, we have added a [CODE\\_OF\\_CONDUCT.md](https://github.com/elixir-la"
"ng/elixir/blob/v1.1/CODE_OF_CONDUCT.md) to guarantee our community continues t"
"o grow into a safe and welcoming place for everyone."
msgstr ""

msgid ""
"We have also seen important developments in other areas not directly related t"
"o the Elixir codebase:"
msgstr ""

msgid ""
"We have also taken important steps into normalizing our APIs. In Erlang, acces"
"ses to tuple and lists are one-based and binaries are zero-based, but in Elixi"
"r we have normalized all of them to rely on zero-based access."
msgstr ""

msgid ""
"We have been working inside an application this entire time. Every time we cha"
"nged a file and ran `mix compile`, we could see a `Generated kv app` message i"
"n the compilation output."
msgstr ""

msgid "We have brought many features specific to Erlang 18. Here are the highlights:"
msgstr ""

msgid ""
"We have finally released [Elixir](/) v0.5.0! This marks the first release sinc"
"e the language was rewritten. In this blog post, we will discuss what we achie"
"ved during this time and what are the next steps!"
msgstr ""

msgid ""
"We have finally released [Elixir](/) v0.6.0! This release includes a build too"
"l called Mix, support for Erlang typespecs, many improvements to IEx and impro"
"ved IO, File and Macro support."
msgstr ""

msgid ""
"We have first defined a setup callback with the help of the `setup/1` macro. T"
"he `setup/1` callback runs before every test, in the same process as the test "
"itself."
msgstr ""

msgid ""
"We have high hopes for this tool as we see value in it for the whole community"
" and for core Elixir projects alike."
msgstr ""

msgid "We have included other modes in `xref`, such as:"
msgstr ""

msgid ""
"We have jumped through different abstractions trying to answer those questions"
" until we have finally settled on GenStage."
msgstr ""

msgid ""
"We have just scratched the surface of what the Erlang VM has to offer, for exa"
"mple:"
msgstr ""

msgid ""
"We have learned about agents, generic servers, and supervisors. They are all m"
"eant to work with multiple messages or manage state. But what do we use when w"
"e only need to execute some task and that is it?"
msgstr ""

msgid ""
"We have now successfully defined our supervisor which is automatically started"
" (and stopped) as part of our application lifecycle."
msgstr ""

msgid ""
"We have previously learned about links in the [Process chapter](/getting-start"
"ed/processes.html). Now, with the registry complete, you may be wondering: whe"
"n should we use monitors and when should we use links?"
msgstr ""

msgid ""
"We have published [a list of ideas we would like to see and explore in Elixir]"
"(https://github.com/beamcommunity/beamcommunity.github.com/wiki/Project:-Elixi"
"r)\n"
"that students can use as a basis, but students are also free to send their own"
"\n"
"proposals. If your proposal gets accepted, Google will pay you $5000 over the\n"
"course of three months to work on Elixir. Students can start submitting their\n"
"proposals on April 22 and the deadline is May 23."
msgstr ""

msgid ""
"We have spent some time improving compilation time. The particular scenario we"
" have worked on was the definition of records:"
msgstr ""

msgid ""
"We have updated [the ExDoc tool](https://github.com/elixir-lang/ex_doc) to sta"
"rt leveraging metadata in order to provide better documentation for developers"
". Some of the improvements include:"
msgstr ""

msgid ""
"We have used [fprof](http://www.erlang.org/doc/man/fprof.html) to identify the"
" bottlenecks and made the compilation stack 35% faster. We have also identifie"
"d bottlenecks coming from Erlang and [pushed some patches](https://github.com/"
"erlang/otp/commit/32b194495f353dde014b00008a630eeff2a71056) that should benefi"
"t both Elixir and Erlang code."
msgstr ""

msgid "We have used the `=` operator a couple times to assign variables in Elixir:"
msgstr ""

msgid ""
"We have written a guide that covers how to build an Elixir application, with i"
"ts own supervision tree, configuration, tests, and more. The application works"
" as a distributed key-value store where we organize key-value pairs into bucke"
"ts and distribute those buckets across multiple nodes:"
msgstr ""

msgid ""
"We have written a whole [guide chapter about creating OTP applications, superv"
"isors and servers](/getting-started/mix-otp/supervisor-and-application.html). "
"Give it a try!"
msgstr ""

msgid ""
"We haven't talked about state so far in this guide. If you are building an app"
"lication that requires state, for example, to keep your application configurat"
"ion, or you need to parse a file and keep it in memory, where would you store "
"it?"
msgstr ""

msgid ""
"We hope the [Hex package manager](https://hex.pm) will be the home of many of "
"those projects and remember the whole Erlang ecosystem is also available to El"
"ixir developers."
msgstr ""

msgid ""
"We hope this feature provides a more streamlined workflow for developers who a"
"re building releases for their Elixir projects."
msgstr ""

msgid ""
"We hope this section shines some light on how Elixir supports meta-programming"
" and how module attributes play an important role when doing so."
msgstr ""

msgid "We hope to see you all this July at [ElixirConf](http://elixirconf.com/)!"
msgstr ""

msgid ""
"We hope to work with you during this summer! If you have more questions, feel "
"free\n"
"to join the [BEAM Community mailing list](https://groups.google.com/d/forum/be"
"am-community)\n"
"or talk to us on `#beam-community` on irc.freenode.net."
msgstr ""

msgid ""
"We invoke `sum_list` with the list `[1, 2, 3]` and the initial value `0` as ar"
"guments. We will try each clause until we find one that matches according to t"
"he pattern matching rules. In this case, the list `[1, 2, 3]` matches against "
"`[head | tail]` which binds `head` to `1` and `tail` to `[2, 3]`; `accumulator"
"` is set to `0`."
msgstr ""

msgid ""
"We now need to modify `apps/kv/mix.exs` to contain the umbrella entries we hav"
"e seen in `apps/kv_server/mix.exs`. Open up `apps/kv/mix.exs` and add to the `"
"project/0` function:"
msgstr ""

msgid "We often write tests like this:"
msgstr ""

msgid ""
"We recommend Elixir libraries that previously hooked into Erlang's `:error_log"
"ger` to hook into `Logger` instead, in order to support all current and future"
" Erlang/OTP versions."
msgstr ""

msgid ""
"We say structs are *raw* because they do not implement any of the protocols th"
"at are implemented for maps  by default. For instance, we can call `Enum.each/"
"2` for a map, which uses the [`Enumerable`](https://hexdocs.pm/elixir/Enumerab"
"le.html) protocol:"
msgstr ""

msgid ""
"We say the `n <- [1, 2, 3, 4]` part is a comprehension generator. In previous "
"Elixir versions, Elixir supported only lists in generators. In Elixir v0.13.0,"
" any Enumerable is supported (ranges, maps, etc):"
msgstr ""

msgid ""
"We say the functions in the `Enum` module are polymorphic because they can wor"
"k with diverse data types. In particular, the functions in the `Enum` module c"
"an work with any data type that implements [the `Enumerable` protocol](https:/"
"/hexdocs.pm/elixir/Enumerable.html). We are going to discuss Protocols in a la"
"ter chapter; for now we are going to move on to a specific kind of enumerable "
"called a stream."
msgstr ""

msgid ""
"We started an agent with an initial state of an empty list. We updated the age"
"nt's state, adding our new item to the head of the list. The second argument o"
"f [`Agent.update/3`](https://hexdocs.pm/elixir/Agent.html#update/3) is a funct"
"ion that takes the agent's current state as input and returns its desired new "
"state. Finally, we retrieved the whole list. The second argument of [`Agent.ge"
"t/3`](https://hexdocs.pm/elixir/Agent.html#get/3) is a function that takes the"
" state as input and returns the value that [`Agent.get/3`](https://hexdocs.pm/"
"elixir/Agent.html#get/3) itself will return. Once we are done with the agent, "
"we can call [`Agent.stop/3`](https://hexdocs.pm/elixir/Agent.html#stop/3) to t"
"erminate the agent process."
msgstr ""

msgid ""
"We use `Application.fetch_env!/2` to read the entry for `:routing_table` in `:"
"kv`'s environment. You can find more information and other functions to manipu"
"late the app environment in the [Application module](https://hexdocs.pm/elixir"
"/Application.html)."
msgstr ""

msgid ""
"We use `import` whenever we want to easily access functions or macros from oth"
"er modules without using the fully-qualified name. For instance, if we want to"
" use the `duplicate/2` function from the `List` module several times, we can i"
"mport it:"
msgstr ""

msgid ""
"We use the same `&` operator to capture a function, allowing us to pass named "
"functions as arguments."
msgstr ""

msgid ""
"We will also work on better integration and documentation on building Erlang s"
"ystems. Erlang ships with the [Open Telecom Platform](https://en.wikipedia.org"
"/wiki/Open_Telecom_Platform) which provides many tools to build distributed ap"
"plications. In v0.5.0, all these tools are already available but we want to ma"
"ke the build process even simpler."
msgstr ""

msgid ""
"We will explore most of these abstractions in this guide. Keep in mind that th"
"ey are all implemented on top of processes using the basic features provided b"
"y the <abbr title=\"Virtual Machine\">VM</abbr>, like `send`, `receive`, `spawn`"
" and `link`."
msgstr ""

msgid ""
"We will explore those functionalities in the ***Mix and OTP guide***, for now "
"it is enough to remember to use `Task` to get better error reports."
msgstr ""

msgid ""
"We will learn those details as we move forward on this guide. If you would rat"
"her peek ahead, check the [Supervisor](https://hexdocs.pm/elixir/Supervisor.ht"
"ml) docs."
msgstr ""

msgid ""
"We will leave it up to you to further explore what Observer provides. Note you"
" can double click any process in the supervision tree to retrieve more informa"
"tion about it, as well as right-click a process to send \"a kill signal\", a per"
"fect way to emulate failures and see if your supervisor reacts as expected."
msgstr ""

msgid ""
"We will start our TCP server by first implementing an echo server. It will sen"
"d a response with the text it received in the request. We will slowly improve "
"our server until it is supervised and ready to handle multiple connections."
msgstr ""

msgid ""
"We will use a [GenServer](https://hexdocs.pm/elixir/GenServer.html) to create "
"a registry process that can monitor the bucket processes. GenServer provides i"
"ndustrial strength functionality for building servers in both Elixir and  <abb"
"r title=\"Open Telecom Platform\">OTP</abbr>."
msgstr ""

msgid ""
"We would like to elaborate on the expectations regarding Elixir v1.0. Although"
" we expect that the vast majority of programs will remain compatible over time"
", it is impossible to guarantee that no future change will break any program."
msgstr ""

msgid ""
"We'll now start a [`Task.Supervisor`](https://hexdocs.pm/elixir/Task.Superviso"
"r.html) process with name `KVServer.TaskSupervisor`. Remember, since the accep"
"tor task depends on this supervisor, the supervisor must be started first."
msgstr ""

msgid ""
"We've also added a more compact and visual form of the `function` helper. Now,"
"\n"
"instead of `function(Enum, :all?, 2)` you can use `function(Enum.all?/2)`."
msgstr ""

msgid ""
"We've also figured out how to achieve an up to 6x [performance increase](https"
"://github.com/elixir-lang/elixir/blob/v0.7.2/lib/elixir/lib/kernel.ex#L1386-L1"
"417)\n"
"under some circunstances when using records."
msgstr ""

msgid ""
"We, on the Elixir team, have just got started too. The next milestone for GenS"
"tage is to revisit the original problem and provide developers a clear path to"
" take their collection processing code from eager, to lazy, to concurrent (and"
" then distributed)."
msgstr ""

msgid "Welcome!"
msgstr ""

msgid "What if we instead want to double all of the values in our list?"
msgstr ""

msgid ""
"What is happening in our tests is that there is a delay in between an operatio"
"n and the time we can observe this change in the ETS table. Here is what we we"
"re expecting to happen:"
msgstr ""

msgid "What is the difference between lists and tuples?"
msgstr ""

msgid ""
"What makes `IO.inspect(item, opts \\\\ [])` really useful in debugging is that i"
"t returns the `item` argument passed to it without affecting the behavior of t"
"he original code. Let's see an example."
msgstr ""

msgid ""
"What makes this project different from the previous one is the `apps_path: \"ap"
"ps\"` entry in the project definition. This means this project will act as an u"
"mbrella. Such projects do not have source files nor tests, although they can h"
"ave their own dependencies. Each child application must be defined inside the "
"`apps` directory."
msgstr ""

msgid ""
"When Elixir sees a list of printable ASCII numbers, Elixir will print that as "
"a charlist (literally a list of characters). Charlists are quite common when i"
"nterfacing with existing Erlang code. Whenever you see a value in IEx and you "
"are not quite sure what it is, you can use the `i/1` to retrieve information a"
"bout it:"
msgstr ""

msgid ""
"When [we released version v0.5.0](/blog/2012/05/25/elixir-v0-5-0-released/), w"
"e have set three major goals for release v0.6.0:"
msgstr ""

msgid ""
"When `print_multiple_times/2` is initially called in the example above, the ar"
"gument `n` is equal to `3`."
msgstr ""

msgid "When `some_fun/3` is invoked with `:foo`, `\"bar\"`, `:baz` it prints:"
msgstr ""

msgid ""
"When a long action is performed on the server, all other requests to that part"
"icular server will wait until the action is done, which may cause some clients"
" to timeout."
msgstr ""

msgid ""
"When a message is sent to a process, the message is stored in the process mail"
"box. The `receive/1` block goes through the current process mailbox searching "
"for a message that matches any of the given patterns. `receive/1` supports gua"
"rds and many clauses, such as `case/2`."
msgstr ""

msgid ""
"When all the keys in a map are atoms, you can use the keyword syntax for conve"
"nience:"
msgstr ""

msgid "When asking questions, remember these two tips:"
msgstr ""

msgid ""
"When calling `Macro.expand_once/2` earlier in this chapter, we used the specia"
"l form `__ENV__`."
msgstr ""

msgid ""
"When counting the elements in a data structure, Elixir also abides by a simple"
" rule: the function is named `size` if the operation is in constant time (i.e."
" the value is pre-calculated) or `length` if the operation is linear (i.e. cal"
"culating the length gets slower as the input grows). As a mnemonic, both \"leng"
"th\" and \"linear\" start with \"l\"."
msgstr ""

msgid ""
"When creating an ETS table, two arguments are required: the table name and a s"
"et of options. From the available options, we passed the table type and its ac"
"cess rules. We have chosen the `:set` type, which means that keys cannot be du"
"plicated. We've also set the table's access to `:protected`, meaning only the "
"process that created the table can write to it, but all processes can read fro"
"m it. Those are actually the default values, so we will skip them from now on."
msgstr ""

msgid ""
"When defining a function with the same name multiple times, each such definiti"
"on is called a **clause**. In Erlang, clauses always go side by side and are s"
"eparated by a semicolon ``;``. The last clause is terminated by a dot ``.``."
msgstr ""

msgid ""
"When defining an attribute, do not leave a line break between the attribute na"
"me and its value."
msgstr ""

msgid ""
"When deriving, Elixir will implement the `Size` protocol for `OtherUser` based"
" on the implementation provided for `Any`."
msgstr ""

msgid ""
"When discussing module attributes in earlier chapters, we mentioned how they c"
"an be used as temporary storage. That's exactly the property we will apply in "
"this section."
msgstr ""

msgid ""
"When going through this getting started guide, it is common to have questions;"
" after all, that is part of the learning process! There are many places you co"
"uld ask them to learn more about Elixir:"
msgstr ""

msgid ""
"When quoting more complex expressions, we can see that the code is represented"
" in such tuples, which are often nested inside each other in a structure resem"
"bling a tree. Many languages would call such representations an Abstract Synta"
"x Tree (AST). Elixir calls them quoted expressions:"
msgstr ""

msgid ""
"When representing code points in bytes, we need to encode them somehow. Elixir"
" chose the UTF-8 encoding as its main and default encoding. When we say a stri"
"ng is a UTF-8 encoded binary, we mean a string is a bunch of bytes organized i"
"n a way to represent certain code points, as specified by the UTF-8 encoding."
msgstr ""

msgid "When running this property, the failure might trigger for a list like this:"
msgstr ""

msgid ""
"When some code call the `unless` macro above, in previous Elixir versions, it "
"would expect the `if` macro to be available at the caller. This may not be nec"
"essarily true and, even worse, another implementation of the `if` macro, not c"
"ompatible to the one above, could be available."
msgstr ""

msgid ""
"When starting processes during your tests, we should always prefer to use `sta"
"rt_supervised!`. We recommend you to change the previous setup block in `bucke"
"t_test.exs` to use `start_supervised!` too."
msgstr ""

msgid ""
"When the list is empty, it will match the final clause which returns the final"
" result of `6`."
msgstr ""

msgid ""
"When there is a need to \"print\" a more complex data structure, one can use the"
" `inspect` function, based on the `Inspect` protocol:"
msgstr ""

msgid ""
"When there is a need to traverse a collection of items concurrently, Elixir de"
"velopers often resort to tasks:"
msgstr ""

msgid ""
"When things fail, your first reaction may be: \"let's rescue those errors\". But"
" in Elixir we avoid the defensive programming habit of rescuing exceptions. In"
"stead, we say \"let it crash\". If there is a bug that leads our registry to cra"
"sh, we have nothing to worry about because we are going to set up a supervisor"
" that will start a fresh copy of the registry."
msgstr ""

msgid ""
"When true, the `:start_permanent` option starts your application in permanent "
"mode, which means the Erlang VM will crash if your application's supervision t"
"ree shuts down. Notice we don't want this behaviour in dev and test because it"
" is useful to keep the VM instance running in those environments for troublesh"
"ooting purposes."
msgstr ""

msgid ""
"When using default values, one must be careful to avoid overlapping function d"
"efinitions. Consider the following example:"
msgstr ""

msgid ""
"When using the update syntax (`|`), the <abbr title=\"Virtual Machine\">VM</abbr"
"> is aware that no new keys will be added to the struct, allowing the maps und"
"erneath to share their structure in memory. In the example above, both `john` "
"and `jane` share the same key structure in memory."
msgstr ""

msgid ""
"When using umbrella applications, it is important to have a clear boundary bet"
"ween them. Our upcoming `kv_server` must only access public APIs defined in `k"
"v`. Think of your umbrella apps as any other dependency or even Elixir itself:"
" you can only access what is public and documented. Reaching into private func"
"tionality in your dependencies is a poor practice that will eventually cause y"
"our code to break when a new version is up."
msgstr ""

msgid ""
"When we `use Application`, we need to define a couple functions, similar to wh"
"en we used `Supervisor` or `GenServer`. This time we only need to define a `st"
"art/2` function. If we wanted to specify custom behaviour on application stop,"
" we could define a `stop/1` function."
msgstr ""

msgid ""
"When we added `KV.BucketSupervisor` as a child of `KV.Supervisor`, we began to"
" have supervisors that supervise other supervisors, forming so-called \"supervi"
"sion trees\"."
msgstr ""

msgid ""
"When we define an `.app` file, which is the application specification, we are "
"able to start and stop the application as a whole. We haven't worried about th"
"is so far for two reasons:"
msgstr ""

msgid ""
"When we discussed maps, we showed how we can access and update the fields of a"
" map. The same techniques (and the same syntax) apply to structs as well:"
msgstr ""

msgid ""
"When we say \"project\" you should think about Mix. Mix is the tool that manages"
" your project. It knows how to compile your project, test your project and mor"
"e. It also knows how to compile and start the application relevant to your pro"
"ject."
msgstr ""

msgid ""
"When we started Logger, the main objective was to translate Erlang messages in"
"to Elixir, so terms are formatted in Elixir syntax. Before this release, the f"
"ollowing code"
msgstr ""

msgid ""
"When we started the supervisor, the registry was automatically started with th"
"e given name, allowing us to create buckets without the need to manually start"
" it."
msgstr ""

msgid ""
"When we talk about applications, we talk about <abbr title=\"Open Telecom Platf"
"orm\">OTP</abbr>. Applications are the entities that are started and stopped as"
" a whole by the runtime. You can learn more about applications and how they re"
"late to booting and shutting down of your system as a whole in the [docs for t"
"he Application module](https://hexdocs.pm/elixir/Application.html)."
msgstr ""

msgid ""
"When working on actual projects, the build tool called `mix` will be responsib"
"le for compiling and setting up the proper paths for you. For learning purpose"
"s, Elixir also supports a scripted mode which is more flexible and does not ge"
"nerate any compiled artifacts."
msgstr ""

msgid ""
"When working with Elixir projects, using the Mix build tool, you may see the o"
"utput as follows:"
msgstr ""

msgid ""
"When working with large or nested data structures, the diffing algorithm makes"
" it fast and convenient to spot the actual differences in the asserted values."
msgstr ""

msgid ""
"When you install Elixir, besides getting the `elixir`, `elixirc` and `iex` exe"
"cutables, you also get an executable Elixir script named `mix`."
msgstr ""

msgid ""
"When you install Elixir, you will have three new executables: `iex`, `elixir` "
"and `elixirc`. If you compiled Elixir from source or are using a packaged vers"
"ion, you can find these inside the `bin` directory."
msgstr ""

msgid ""
"When you start the debugger, a Graphical User Interface will open in your mach"
"ine. We call `:int.ni(Example)` to prepare our module for debugging and then a"
"dd a breakpoint to line 3 with `:int.break(Example, 3)`. After we call our fun"
"ction, we can see our process with break status in the debugger:"
msgstr ""

msgid ""
"When you write to `:stdio`, you are actually sending a message to the group le"
"ader, which writes to the standard-output file descriptor:"
msgstr ""

msgid ""
"Whenever you need a key-value store, maps are the \"go to\" data structure in El"
"ixir. A map is created using the `%{}` syntax:"
msgstr ""

msgid "Which can also be used for partially applying functions and macros:"
msgstr ""

msgid ""
"Which technique is best between deriving and falling back to any depends on th"
"e use case but, given Elixir developers prefer explicit over implicit, you may"
" see many libraries pushing towards the `@derive` approach."
msgstr ""

msgid "Which, as we have seen above, is the same as:"
msgstr ""

msgid ""
"While Elixir allows any metadata to be given, those tools currently exhibit on"
"ly `:deprecated` and `:since`. Other keys may be shown in the future."
msgstr ""

msgid ""
"While Elixir provides a lot of useful built-in types, it's convenient to defin"
"e custom types when appropriate. This can be done when defining modules throug"
"h the `@type` directive."
msgstr ""

msgid ""
"While ExUnit is our test framework, Mix is our build tool. Developers typicall"
"y run their tests by calling `mix test`."
msgstr ""

msgid ""
"While [Programming Elixir](https://pragprog.com/book/elixir/programming-elixir"
") was being announced, we have been working on Elixir v0.9.0 which is finally "
"out. This release contains new features, important performance optimizations a"
"nd bug fixes."
msgstr ""

msgid ""
"While `IO.inspect/2` is static, Elixir's interactive shell provides more dynam"
"ic ways to interact with debugged code."
msgstr ""

msgid ""
"While in the shell, you may find the helper `flush/0` quite useful. It flushes"
" and prints all the messages in the mailbox."
msgstr ""

msgid ""
"While other languages would require us to catch/handle exceptions, in Elixir w"
"e are actually fine with letting processes fail because we expect supervisors "
"to properly restart our systems. \"Failing fast\" is a common philosophy when wr"
"iting Elixir software!"
msgstr ""

msgid ""
"While our application will have many buckets, it will only have a single regis"
"try. So instead of always passing the registry PID around, we can give the reg"
"istry a name, and always reference it by its name."
msgstr ""

msgid ""
"While the above is helpful when working with large or infinite collections, it"
" still does not leverage concurrency. To address that, we are currently explor"
"ing a solution named [`GenStage.Flow`](https://hexdocs.pm/gen_stage/Experiment"
"al.Flow.html), that allows us to express our computations similarly to streams"
", except they will run across multiple stages instead of a single process:"
msgstr ""

msgid ""
"While the solution above works fine and is efficient for small files, it is qu"
"ite restrictive for large inputs as it loads the whole file into memory."
msgstr ""

msgid ""
"While this behaviour is useful for development, in production all implementati"
"ons for all protocols are usually known up-front, so we could avoid this overh"
"ead by doing a direct dispatch. That's exactly what protocol consolidation doe"
"s."
msgstr ""

msgid "Will output:"
msgstr ""

msgid "Will render this table of contents:"
msgstr ""

msgid ""
"With Rebar 3 gaining more adoption in the Erlang community, Mix is now able to"
" fetch and compile Rebar 3 dependencies. This feature is currently experimenta"
"l and therefore opt-in: if you have a Rebar 3 dependency, you can ask Mix to u"
"se Rebar 3 to compile it by passing the `manager: :rebar3` option. Once config"
"ured, Mix will prompt you to install Rebar 3 if it is not yet available."
msgstr ""

msgid ""
"With binaries, strings, and charlists out of the way, it is time to talk about"
" key-value data structures."
msgstr ""

msgid ""
"With doctests at hand, it is your turn to make tests pass! Once you're ready, "
"you can compare your work with our solution below:"
msgstr ""

msgid "With maps, Elixir also introduced structs, that are basically raw, named maps:"
msgstr ""

msgid ""
"With our error handler code in place, the first thing we need to do is to chan"
"ge the function given to `spawn_link` to use the new error handler:"
msgstr ""

msgid ""
"With our umbrella project up and running, it is time to start writing our serv"
"er."
msgstr ""

msgid ""
"With property-based testing, you specify a set of valid inputs (lists in the e"
"xample above) for your code and verify that your code holds some property for "
"values taken at random from the valid inputs. In the example above, the test t"
"akes many (usually around 100) values at random from the `list_of(term())` *ge"
"nerator* and verifies a property of `length/1`, that is, that `length/1` alway"
"s returns a non-negative integer. A generator is just a `StreamData` generator"
", as we discussed in the previous section."
msgstr ""

msgid ""
"With the above, Mix will automatically build your application list based on yo"
"ur dependencies. Developers now only need to specify which applications shippe"
"d as part of Erlang or Elixir that they require, such as `:logger`."
msgstr ""

msgid ""
"With the introduction of maps and structs, some deprecations will arrive on up"
"coming releases. First of all, the `ListDict` data structure is being deprecat"
"ed and phased out. Records are also being deprecated from the language, althou"
"gh it is going to be a longer process, as many projects and Elixir itself stil"
"l use records in diverse occasions."
msgstr ""

msgid ""
"With the nested access functionality, we can now update a nested path directly"
" too. For example, if a user changes his name, we can change it directly with:"
msgstr ""

msgid ""
"With the release of GenStage v0.3.0, we have reached an important milestone as"
" `GenStage` can be used as both event managers and a way to exchange events be"
"tween processes, often external data sources, with back-pressure."
msgstr ""

msgid "With the stages defined, we can start and connect them:"
msgstr ""

msgid ""
"With the test properly tagged, we can now check if the node is alive on the ne"
"twork and, if not, we can exclude all distributed tests. Open up `test/test_he"
"lper.exs` inside the `:kv` application and add the following:"
msgstr ""

msgid ""
"With this change, we are saying that we want to run `KVServer.accept(4040)` as"
" a task. We are hardcoding the port for now but this could be changed in a few"
" ways, for example, by reading the port out of the system environment when sta"
"rting the application:"
msgstr ""

msgid ""
"With this code, we were able to compile each file inside a different process. "
"However, notice that we are not yet compiling in parallel. Every time we spawn"
" a child process, we wait until it succeeds (or fails) before moving to the ne"
"xt step. We are going to eventually compile files in parallel, but before we r"
"each to this point, let's understand the problem of dependencies between files"
"."
msgstr ""

msgid "With this knowledge in hand, let's finally write the routing code."
msgstr ""

msgid ""
"With this release, we also want to welcome [Eric MJ](https://github.com/ericmj"
") to the Elixir Team. He has done fantastic work on Elixir, helping us maintai"
"n the codebase and working on many of the important features from previous rel"
"eases and now many more to come."
msgstr ""

msgid ""
"With this release, we also welcome [Andrea Leopardi](http://github.com/whatyou"
"hide) to Elixir Core Team. He has contributed greatly to this release and main"
"tains important packages in the community, like [Gettext](https://github.com/e"
"lixir-lang/gettext) and [Redix](https://github.com/whatyouhide/redix)."
msgstr ""

msgid ""
"With this simple integration test, we start to see why integration tests may b"
"e slow. Not only this test cannot run asynchronously, it also requires the exp"
"ensive setup of stopping and starting the `:kv` application."
msgstr ""

msgid ""
"With this, we have covered the main modules that Elixir provides for dealing w"
"ith IO and interacting with the file system. In the next sections, we will dis"
"cuss some advanced topics regarding IO. Those sections are not necessary in or"
"der to write Elixir code, so feel free to skip them, but they do provide a nic"
"e overview of how the IO system is implemented in the <abbr title=\"Virtual Mac"
"hine\">VM</abbr> and other curiosities."
msgstr ""

msgid ""
"With this, we have finished our tour of Elixir modules. The last topic to cove"
"r is module attributes."
msgstr ""

msgid ""
"With those lessons, we finish our introduction to macros. The next chapter is "
"a brief discussion on DSLs that shows how we can mix macros and module attribu"
"tes to annotate and extend modules and functions."
msgstr ""

msgid ""
"With v0.14.0 we have expanded on the work started on v0.13.0, replacing record"
"s by structs and integrating OTP behaviours, applications, and configurations "
"into Mix."
msgstr ""

msgid ""
"With v0.14.0 we have reached many of the milestones [we have set in the previo"
"us release](/blog/2014/04/21/elixir-v0-13-0-released/#the-next-steps). This br"
"ings us closer to Elixir v1.0 and only a handful of tasks are pending:"
msgstr ""

msgid ""
"With v0.14.0, Elixir introduced functionality to traverse deeply nested data s"
"tructures. To show this functionality let's imagine we have a gaming applicati"
"on where users can be in different dungeons. Each dungeon may have many rooms "
"and users can talk to each other only if they are in the same room."
msgstr ""

msgid ""
"With v0.15.0, we also would like to welcome [Alexei](https://github.com/alco) "
"to the team of Elixir Maintainers! Alexei was one of the first to actively par"
"ticipate in the Elixir community and he has done an excellent job in guarantee"
"ing quality throughout it, be it in the code, documentation, wiki or website."
msgstr ""

msgid ""
"With v0.5.0 finally out, we are committing to a stable syntax and a basic stan"
"dard library. In the last couple days before the release, we have been working"
" on streamlining the documentation and ensure Elixir works on Mac, Linux and W"
"indows machines!"
msgstr ""

msgid ""
"With v1.0, we are providing a stable platform for the community to leverage an"
"d extend, and we are extremely excited with the projects and possibilities tha"
"t are ahead of us!"
msgstr ""

msgid "Without new lines, as seen below, ExUnit compiles it into a single doctest:"
msgstr ""

msgid ""
"Work on Elixir v1.7 has already started. We still welcome developers to try ou"
"t the [previously announced StreamData library](https://elixir-lang.org/blog/2"
"017/10/31/stream-data-property-based-testing-and-data-generation-for-elixir/),"
" that aims to bring data generation and property-based testing to Elixir. The "
"other [features scheduled for v1.7 can be found in the issues tracker](https:/"
"/github.com/elixir-lang/elixir/issues)."
msgstr ""

msgid "Would be parsed as:"
msgstr ""

msgid ""
"Write code that writes code with Elixir macros. Macros make metaprogramming po"
"ssible and define the language itself. In this book, you’ll learn how to use m"
"acros to extend the language with fast, maintainable code and share functional"
"ity in ways you never thought possible. You’ll discover how to extend Elixir w"
"ith your own first-class features, optimize performance, and create domain-spe"
"cific languages."
msgstr ""

msgid "Writing `@tag :distributed` is equivalent to writing `@tag distributed: true`."
msgstr ""

msgid "Yes, it works! However, does it *scale*?"
msgstr ""

msgid ""
"You can also [use Observer to introspect a remote node](http://blog.plataforma"
"tec.com.br/2016/05/tracing-and-observing-your-remote-node/). This is one of th"
"e debugging techniques [the Phoenix framework used to achieve 2 million connec"
"tions on a single machine](https://phoenixframework.org/blog/the-road-to-2-mil"
"lion-websocket-connections)."
msgstr ""

msgid ""
"You can also consider building multiple releases with a tool like [Distillery]"
"(https://github.com/bitwalker/distillery), which will package the chosen appli"
"cations and configuration, including the current Erlang and Elixir installatio"
"ns, so we can deploy the application even if the runtime is not pre-installed "
"on the target system."
msgstr ""

msgid ""
"You can also define your own errors by creating a module and using the `defexc"
"eption` construct inside it; this way, you'll create an error with the same na"
"me as the module it's defined in. The most common case is to define a custom e"
"xception with a message field:"
msgstr ""

msgid ""
"You can also enforce that certain keys have to be specified when creating the "
"struct:"
msgstr ""

msgid ""
"You can also learn more about Elixir by checking out [the videos from ElixirCo"
"nf 2014](http://www.confreaks.com/events/elixirconf2014), the first (and so fa"
"r the best) Elixir conference ever! You can learn more about [the language his"
"tory](http://www.confreaks.com/videos/4134-elixirconf2014-keynote-elixir), [ho"
"w Elixir can change the way you code](http://www.confreaks.com/videos/4119-eli"
"xirconf2014-opening-keynote-think-different) or [even hear stories of how Elix"
"ir is being used in production](http://www.confreaks.com/videos/4131-elixircon"
"f2014-otp-in-production-the-nitty-gritty-details-of-game-servers)."
msgstr ""

msgid ""
"You can also use `is_integer/1`, `is_float/1` or `is_number/1` to check, respe"
"ctively, if an argument is an integer, a float, or either."
msgstr ""

msgid ""
"You can also use the functions in [the `String` module](https://hexdocs.pm/eli"
"xir/String.html) to split a string in its individual characters, each one as a"
" string of length 1:"
msgstr ""

msgid ""
"You can download and compile Elixir in few steps. The first one is to [install"
" Erlang](/install.html#installing-erlang)."
msgstr ""
"Elixir のダウンロードやコンパイルの前に、まず [Erlang をインストール](/install.html#installing-erlang) し"
"てください。"

msgid ""
"You can find documentation for all modes by running `mix help xref`. We hope t"
"ools and text editors can leverage such features to provide useful functionali"
"ty for their users, helping developers understand code complexity and finding "
"bugs early on."
msgstr ""

msgid ""
"You can find more information about aliases by reading the [Mix documentation]"
"(https://hexdocs.pm/mix/) (there is a section about Aliases around the middle)"
"."
msgstr ""

msgid ""
"You can get further information about a particular task by invoking `mix help "
"TASK`."
msgstr ""

msgid ""
"You can get started with Elixir via our [Getting Started guide](/getting-start"
"ed/introduction.html). There are quite some Elixir books out there too, now ge"
"tting sent to the presses, quite a few can be found in the sidebar, which also"
" includes screencasts and other resources."
msgstr ""

msgid "You can get the representation of any expression by using the `quote` macro:"
msgstr ""

msgid ""
"You can invoke `Protocol.consolidate/2` to manually consolidate protocols. How"
"ever, if you are inside a Mix project, you can consolidate all protocols by si"
"mply invoking `mix compile.protocols`. Type `mix help compile.protocols` in yo"
"ur terminal to get more information. This task should be invoked when deployin"
"g to production and we have opened issues in the Elixir buildpack as well as i"
"n the existing build tools so they automatically consolidade protocols for you"
"."
msgstr ""

msgid ""
"You can invoke the `round` function to get the closest integer to a given floa"
"t, or the `trunc` function to get the integer part of a float."
msgstr ""

msgid ""
"You can learn more about Elixir in our [Getting Started guide](/getting-starte"
"d/introduction.html) and download this release in the [v0.13 announcement](htt"
"ps://github.com/elixir-lang/elixir/releases/tag/v0.13.0). We hope to see you a"
"t [ElixirConf](http://elixirconf.com/) as well as pushing your packages to [he"
"x.pm](https://hex.pm/)."
msgstr ""

msgid ""
"You can learn more about Xen and the LING VM on the [Erlang on Xen website](ht"
"tp://erlangonxen.org)."
msgstr ""

msgid ""
"You can learn more about [doctests on our documentation page](https://hexdocs."
"pm/ex_unit/ExUnit.DocTest.html) and get more information about our latest rele"
"ase [on the CHANGELOG](https://github.com/elixir-lang/elixir/blob/ed27611f48ba"
"150404c95fe15f1d6058a4287330/CHANGELOG.md)."
msgstr ""

msgid ""
"You can learn more about the [new capture operator in our docs](https://hexdoc"
"s.pm/elixir/Kernel.SpecialForms.html#&/1)."
msgstr ""

msgid ""
"You can learn more about the code formatter by checking [the format task docum"
"entation](https://hexdocs.pm/mix/Mix.Tasks.Format.html) or by reading [the rel"
"ease announcement for Elixir v1.6](https://elixir-lang.org/blog/2018/01/17/eli"
"xir-v1-6-0-released/), the first version to include the formatter."
msgstr ""

msgid ""
"You can now also install archives from Hex in this way. Since they are fetched"
" and built on the user's machine, they do not have the same limitations as pre"
"-built archives. However, keep in mind archives are loaded on every Mix comman"
"d and may conflict with modules or dependencies in your projects. For this rea"
"son, escripts is the preferred format for sharing executables."
msgstr ""

msgid "You can print a string using the `IO.puts/1` function from the `IO` module:"
msgstr ""

msgid ""
"You can read more about ExUnit cases in the [`ExUnit.Case` module documentatio"
"n](https://hexdocs.pm/ex_unit/ExUnit.Case.html) and more about callbacks in [`"
"ExUnit.Callbacks` docs](https://hexdocs.pm/ex_unit/ExUnit.Callbacks.html)."
msgstr ""

msgid ""
"You can read more about [`with` in our documentation](https://hexdocs.pm/elixi"
"r/Kernel.SpecialForms.html#with/1)."
msgstr ""

msgid ""
"You can read more about [macros in the getting started guide](/getting-started"
"/case-cond-and-if.html) or [go deep into the quote macro docs](https://hexdocs"
".pm/elixir/Kernel.SpecialForms.html#quote/2)."
msgstr ""

msgid ""
"You can read more about `quote` and `unquote` in the [`Kernel.SpecialForms` mo"
"dule](https://hexdocs.pm/elixir/Kernel.SpecialForms.html). Documentation for `"
"Macro.escape/1` and other functions related to quoted expressions can be found"
" in the [`Macro` module](https://hexdocs.pm/elixir/Macro.html)."
msgstr ""

msgid ""
"You can read more about filters, tags and the default tags in [`ExUnit.Case` m"
"odule documentation](https://hexdocs.pm/ex_unit/ExUnit.Case.html)."
msgstr ""

msgid ""
"You can read more information about nested access in [the Access protocol docu"
"mentation](https://hexdocs.pm/elixir/Access.html) and in the docs for [`get_in"
"/2`](https://hexdocs.pm/elixir/Kernel.html#get_in/2) and friends."
msgstr ""

msgid ""
"You can see now the prompt is slightly different and shows the node name follo"
"wed by the computer name:"
msgstr ""

msgid ""
"You can see that, instead of containing bytes, a charlist contains the code po"
"ints of the characters between single-quotes (note that by default IEx will on"
"ly output code points if any of the integers is outside the ASCII range). So w"
"hile double-quotes represent a string (i.e. a binary), single-quotes represent"
" a charlist (i.e. a list)."
msgstr ""

msgid "You can see the new accessors in the `Access` module."
msgstr ""

msgid ""
"You can take a look at the docs for [Module](https://hexdocs.pm/elixir/Module."
"html) for a complete list of supported attributes. Elixir also uses attributes"
" to define [typespecs](/getting-started/typespecs-and-behaviours.html)."
msgstr ""

msgid ""
"You don't actually need to memorize this ordering, it's enough to know that th"
"is ordering exists."
msgstr ""

msgid ""
"You may even use `@impl Plug` if you want to explicitly document which behavio"
"ur defines the callback you are implementing."
msgstr ""

msgid "You may have noticed that `File.open/2` returns a tuple like `{:ok, pid}`:"
msgstr ""

msgid ""
"You may keep the shell running while you're editing the file. Just don't forge"
"t to execute `c(module_name)` to load the latest changes. Note that the filena"
"me has to be the same as the one declared in the `-module()` directive, plus a"
"n extension `.erl`."
msgstr ""

msgid ""
"You may wonder why we don't tell the node we found in our routing table to per"
"form the requested operation directly, but instead pass the routing request on"
" to that node to process. While a routing table as simple as the one above mig"
"ht reasonably be shared between all nodes, passing on the routing request in t"
"his way makes it much simpler to break the routing table into smaller pieces a"
"s our application grows. Perhaps at some point, `foo@computer-name` will only "
"be responsible for routing bucket requests, and the buckets it handles will be"
" dispatched to different nodes. In this way, `bar@computer-name` does not need"
" to know anything about this change."
msgstr ""

msgid ""
"You might have noticed we have a function head, `def run(command)`, without a "
"body. In the [Modules and Functions](/getting-started/modules-and-functions#de"
"fault-arguments) chapter, we learned that a bodiless function can be used to d"
"eclare default arguments for a multi-clause function. Here is another use case"
" where we use a function without a body to document what the arguments are."
msgstr ""

msgid ""
"You might notice that we added a line, `:ok = :gen_tcp.controlling_process(cli"
"ent, pid)`. This makes the child process the \"controlling process\" of the `cli"
"ent` socket. If we didn't do this, the acceptor would bring down all the clien"
"ts if it crashed because sockets would be tied to the process that accepted th"
"em (which is the default behaviour)."
msgstr ""

msgid ""
"You will also notice that functions in the `File` module have two variants: on"
"e \"regular\" variant and another variant with a trailing bang (`!`). For exampl"
"e, when we read the `\"hello\"` file in the example above, we use `File.read/1`."
" Alternatively, we can use `File.read!/1`:"
msgstr ""

msgid ""
"You will notice that when you add a dependency to your project, Mix generates "
"a `mix.lock` file that guarantees *repeatable builds*. The lock file must be c"
"hecked in to your version control system, to guarantee that everyone who uses "
"the project will use the same dependency versions as you."
msgstr ""

msgid ""
"You will see that Elixir has excellent support for working with strings. It al"
"so supports many of the Unicode operations. In fact, Elixir passes all the tes"
"ts showcased in the article [\"The string type is broken\"](http://mortoray.com/"
"2013/11/27/the-string-type-is-broken/)."
msgstr ""

msgid ""
"You'll notice the slightly uncommon terminology of \"outer function\" and\n"
"\"consumer\" (normally called an \"iteratee\"). That's intentional, naming an\n"
"iteratee a consumer better reflects that it consumes values."
msgstr ""

msgid "[3]: http://learnyousomeerlang.com/syntax-in-functions"
msgstr ""

msgid ""
"[4]: http://www.erlang.org/doc/programming_examples/users_guide.html\n"
"[6]: /getting-started/introduction.html\n"
"[7]: /docs.html"
msgstr ""

msgid ""
"[Agents](https://hexdocs.pm/elixir/Agent.html) are simple wrappers around stat"
"e. If all you want from a process is to keep state, agents are a great fit. Le"
"t's start an `iex` session inside the project with:"
msgstr ""

msgid "[Celebrate with us and give Elixir a try](/getting-started/introduction.html)!"
msgstr ""

msgid ""
"[Domain-specific languages (DSL)](https://en.wikipedia.org/wiki/Domain-specifi"
"c_language) allow developers to tailor their application to a particular domai"
"n. You don't need macros in order to have a DSL: every data structure and ever"
"y function you define in your module is part of your Domain-specific language."
msgstr ""

msgid ""
"[Elixir v1.3](https://elixir-lang.org/blog/2016/06/21/elixir-v1-3-0-released/)"
" introduced the Calendar module with the underlying  `Time`, `Date`, `NaiveDat"
"eTime` and `Datetime` data types. We are glad to announce we consider the base"
" Calendar API to be finished in Elixir v1.5. This release includes many enhanc"
"ements, such as `Date.range/2` and the ability to convert between different ca"
"lendars."
msgstr ""

msgid ""
"[ExUnit](https://hexdocs.pm/ex_unit/) is Elixir's unit testing library. ExUnit"
" has always leveraged Elixir macros to provide excellent error reports when a "
"failure happens. For example, the following code:"
msgstr ""

msgid ""
"[In the previous release](/blog/2013/07/13/elixir-v0-10-0-released/), we intro"
"duced great changes to ExUnit, like the support for the `--trace` option. This"
" time we continued pushing improvements, like adding profiling to test cases ("
"times can be seen with the `--trace` option), paving the way for other feature"
"s like emitting warnings for test cases that are too slow."
msgstr ""

msgid "[Learn more about Elixir](/getting-started/introduction.html)!"
msgstr ""

msgid ""
"[Node.js]: https://nodejs.org/\n"
"[npm]: https://www.npmjs.com/\n"
"[gulp]: https://www.npmjs.com/package/gulp\n"
"[webpack]: http://webpack.github.io/\n"
"[less]: http://lesscss.org/\n"
"[ESLint]: http://eslint.org/"
msgstr ""

msgid ""
"[Plataformatec](http://plataformatec.com.br/), a software consultancy, created"
" Elixir in 2012 as a Research and Development project led by José Valim. Elixi"
"r's goal is to be a productive language for writing maintainable and reliable "
"software."
msgstr ""

msgid ""
"[StreamData][stream_data] is a data-generation and property-based testing libr"
"ary for Elixir. The goal of this GSoC project is to integrate StreamData with "
"typespecs."
msgstr ""

msgid ""
"[The Task module](https://hexdocs.pm/elixir/Task.html) provides this functiona"
"lity exactly. For example, it has a `start_link/1` function that receives an a"
"nonymous function and executes it inside a new process that will be of a super"
"vision tree."
msgstr ""

msgid ""
"[The `Map` module](https://hexdocs.pm/elixir/Map.html) provides a very similar"
" API to the `Keyword` module with convenience functions to manipulate maps:"
msgstr ""

msgid ""
"[The `math` module](http://erlang.org/doc/man/math.html) contains common\n"
"mathematical operations covering trigonometry, exponential, and logarithmic\n"
"functions."
msgstr ""

msgid ""
"[The `zip` module](http://erlang.org/doc/man/zip.html) lets you read and write"
"\n"
"ZIP files to and from disk or memory, as well as extracting file information."
msgstr ""

msgid ""
"[The `zlib` module](http://erlang.org/doc/man/zlib.html) deals with data compr"
"ession in zlib format, as found in the\n"
"`gzip` command."
msgstr ""

msgid ""
"[The crypto module](http://erlang.org/doc/man/crypto.html) contains hashing\n"
"functions, digital signatures, encryption and more:"
msgstr ""

msgid ""
"[The digraph module](http://erlang.org/doc/man/digraph.html) (as well as\n"
"[digraph_utils](http://erlang.org/doc/man/digraph_utils.html)) contains\n"
"functions for dealing with directed graphs built of vertices and edges.\n"
"After constructing the graph, the algorithms in there will help finding,\n"
"for instance, the shortest path between two vertices, or loops in the graph."
msgstr ""

msgid ""
"[This chapter][3] from the Erlang book provides a detailed description of patt"
"ern matching and function syntax in Erlang. Here, I'm briefly covering the mai"
"n points and provide sample code both in Erlang and Elixir."
msgstr ""

msgid ""
"[Xen](https://en.wikipedia.org/wiki/Xen) is an open-source baremetal hyperviso"
"r that allows many operating systems to run on the same hardware. Xen is frequ"
"ently used for server virtualization, Infrastructure as a Service (IaaS) and s"
"ecurity applications."
msgstr ""

msgid ""
"[`mix xref`](https://hexdocs.pm/mix/Mix.Tasks.Xref.html) is a task added in El"
"ixir v1.3 which provides general information about how modules and files in an"
" application depend on each other. This release brings many improvements to `x"
"ref`, extending the reach of the analysis and helping developers digest the va"
"st amount of data it produces."
msgstr ""

msgid ""
"[`rand` has functions](http://erlang.org/doc/man/rand.html) for returning\n"
"random values and setting the random seed."
msgstr ""

msgid ""
"[error] Process #PID<0.289.0> raised an exception\n"
"** (RuntimeError) oops\n"
"    (stdlib) erl_eval.erl:668: :erl_eval.do_apply/6\n"
"```"
msgstr ""

msgid ""
"[error] Process #PID<0.58.00> raised an exception\n"
"** (RuntimeError) oops\n"
"    (stdlib) erl_eval.erl:668: :erl_eval.do_apply/6\n"
"```"
msgstr ""

msgid ""
"[gsoc]: https://summerofcode.withgoogle.com\n"
"[stream_data]: https://github.com/whatyouhide/stream_data\n"
"[elixirforum]: https://elixirforum.com\n"
"[keras]: https://keras.io\n"
"[dialyxir]: https://github.com/jeremyjh/dialyxir\n"
"[dialyzex]: https://github.com/Comcast/dialyzex"
msgstr ""

msgid ""
"[stream_data]: https://github.com/whatyouhide/stream_data\n"
"[quickcheck-paper]: http://www.cs.tufts.edu/~nr/cs257/archive/john-hughes/quic"
"k.pdf\n"
"[test.check]: https://github.com/clojure/test.check\n"
"[Hypothesis]: https://github.com/HypothesisWorks/hypothesis-python\n"
"[QuickCheck]: http://quviq.com\n"
"[propertesting.com]: http://propertesting.com\n"
"[PropEr]: https://github.com/manopapad/proper\n"
"[quickcheck-pr]: https://github.com/elixir-lang/elixir/pull/5022#issuecomment-"
"233195478\n"
"[pollution]: https://github.com/pragdave/pollution\n"
"[elixirforum-post]: https://elixirforum.com/t/questions-about-property-testing"
"-stream-data/9445/47"
msgstr ""

msgid ""
"`%User{age: age}` is matching on a `User` struct with an age field and `when a"
"ge >= 16` is the guard."
msgstr ""

msgid ""
"`&List.flatten(&1, &2)` is the same as writing `fn(list, tail) -> List.flatten"
"(list, tail) end` which in this case is equivalent to `&List.flatten/2`. You c"
"an read more about the capture operator `&` in [the `Kernel.SpecialForms` docu"
"mentation](https://hexdocs.pm/elixir/Kernel.SpecialForms.html#&/1)."
msgstr ""

msgid ""
"`::` means that the function on the left side *returns* a value whose type is "
"what's on the right side. Function specs are written with the `@spec` directiv"
"e, placed right before the function definition. The `round/1` function could b"
"e written as:"
msgstr ""

msgid ""
"`@moduledoc` and `@doc` are by far the most used attributes, and we expect you"
" to use them a lot. Elixir treats documentation as first-class and provides ma"
"ny functions to access documentation. You can read more about [writing documen"
"tation in Elixir in our official documentation](https://hexdocs.pm/elixir/writ"
"ing-documentation.html)."
msgstr ""

msgid ""
"`B` is a producer-consumer. This means it does not explicitly handle the deman"
"d because the demand is always forwarded to its producers. Once `A` receives t"
"he demand from `B`, it will send events to `B` which will be transformed by `B"
"` as desired and then sent to `C`. In our case, B will receive events and mult"
"iply them by a number given on initialization and stored as the state:"
msgstr ""

msgid ""
"`C` is the consumer which will finally receive those events and print them eve"
"ry second to the terminal:"
msgstr ""

msgid ""
"`DynamicSupervisor.start_child/2` expects the name of the supervisor and the c"
"hild specification of the child to be started."
msgstr ""

msgid ""
"`Exception.blame/3` is a new function in Elixir that is capable of attaching d"
"ebug information to certain exceptions. Currently this is used to augment `Fun"
"ctionClauseError`s with a summary of all clauses and which parts of clause mat"
"ch and which ones didn't. Let's try it out:"
msgstr ""

msgid ""
"`IO.inspect/2` also provides the ability to decorate the output with a `label`"
" option. The label will be printed before the inspected `item`:"
msgstr ""

msgid ""
"`KVServer.Command.run/1`'s implementation is sending commands directly to the "
"server named `KV.Registry`, which is registered by the `:kv` application. This"
" means this server is global and if we have two tests sending messages to it a"
"t the same time, our tests will conflict with each other (and likely fail). We"
" need to decide between having unit tests that are isolated and can run asynch"
"ronously, or writing integration tests that work on top of the global state, b"
"ut exercise our application's full stack as it is meant to be exercised in pro"
"duction."
msgstr ""

msgid ""
"`Macro.expand_once/2` receives a quoted expression and expands it according to"
" the current environment. In this case, it expanded/invoked the `Unless.macro_"
"unless/2` macro and returned its result. We then proceeded to convert the retu"
"rned quoted expression to a string and print it (we will talk about `__ENV__` "
"later in this chapter)."
msgstr ""

msgid ""
"`Stream.repeatedly/1` returns an infinite stream but that's ok we just need it"
"s first three elements. You can learn more about [stream and related functions"
" in `Stream` module documentation](https://hexdocs.pm/elixir/Stream.html)."
msgstr ""

msgid ""
"`StreamData.map/2` is encouraged over `Stream.map/2` because generators return"
" values that can shrink, which is something property-based testing takes advan"
"tage of as we'll see later on. When treated as enumerables, generators return "
"normal values that cannot be shrinked."
msgstr ""

msgid ""
"`StreamData` contains some functions to modify generators. For example, you ca"
"n build a generator of positive integers on top of `StreamData.integer()` and "
"`StreamData.map/2`:"
msgstr ""

msgid ""
"`Supervisor.child_spec/2` is capable of building a child specification from a "
"given module and/or tuple, and it also accepts values that override the underl"
"ying child specification. Now we have an always running acceptor that starts t"
"emporary task processes under an always running task supervisor."
msgstr ""

msgid ""
"`__ENV__` returns an instance of the `Macro.Env` struct which contains useful "
"information about the compilation environment, including the current module, f"
"ile, and line, all variables defined in the current scope, as well as imports,"
" requires and so on:"
msgstr ""

msgid "```"
msgstr ""

msgid ""
"```\n"
"  1) test doc at KVServer.Command.parse/1 (1) (KVServer.CommandTest)\n"
"     test/kv_server/command_test.exs:3\n"
"     Doctest failed\n"
"     code: KVServer.Command.parse \"CREATE shopping\n"
"\" === {:ok, {:create, \"shopping\"}}\n"
"     lhs:  :not_implemented\n"
"     stacktrace:\n"
"       lib/kv_server/command.ex:7: KVServer.Command (module)\n"
"```"
msgstr ""

msgid ""
"```\n"
"  1) test greets the world (KVTest)\n"
"     test/kv_test.exs:5\n"
"     Assertion with == failed\n"
"     code:  assert KV.hello() == :oops\n"
"     left:  :world\n"
"     right: :oops\n"
"     stacktrace:\n"
"       test/kv_test.exs:6: (test)"
msgstr ""

msgid ""
"```\n"
"  1) test removes bucket on crash (KV.RegistryTest)\n"
"     test/kv/registry_test.exs:26\n"
"     ** (exit) exited in: GenServer.call(#PID<0.148.0>, {:lookup, \"shopping\"},"
" 5000)\n"
"         ** (EXIT) no process: the process is not alive or there's no process "
"currently associated with the given name, possibly because its application isn"
"'t started\n"
"     code: assert KV.Registry.lookup(registry, \"shopping\") == :error\n"
"     stacktrace:\n"
"       (elixir) lib/gen_server.ex:770: GenServer.call/3\n"
"       test/kv/registry_test.exs:33: (test)\n"
"```"
msgstr ""

msgid ""
"```\n"
"  1) test removes buckets on exit (KV.RegistryTest)\n"
"     test/kv/registry_test.exs:19\n"
"     Assertion with == failed\n"
"     code: KV.Registry.lookup(registry, \"shopping\") == :error\n"
"     lhs:  {:ok, #PID<0.109.0>}\n"
"     rhs:  :error\n"
"     stacktrace:\n"
"       test/kv/registry_test.exs:23\n"
"```"
msgstr ""

msgid ""
"```\n"
"  1) test server interaction (KVServerTest)\n"
"     test/kv_server_test.exs:17\n"
"     ** (RuntimeError) oops\n"
"     stacktrace:\n"
"       test/kv_server_test.exs:29"
msgstr ""

msgid ""
"```\n"
"# To get all files that depend on lib/foo.ex\n"
"mix xref graph --sink lib/foo.ex --only-nodes"
msgstr ""

msgid ""
"```\n"
"$ mix test --only describe:\"String.capitalize/2\"\n"
"```"
msgstr ""

msgid ""
"```\n"
"$ mix test --unknown\n"
"** (Mix) Could not invoke task \"test\": 1 error found!\n"
"--unknown : Unknown option\n"
"```"
msgstr ""

msgid ""
"```\n"
"$ mix xref callers SomeModule --include-siblings\n"
"```"
msgstr ""

msgid ""
"```\n"
"$ mix xref graph --format stats\n"
"Tracked files: 129 (nodes)\n"
"Compile dependencies: 256 (edges)\n"
"Structs dependencies: 46 (edges)\n"
"Runtime dependencies: 266 (edges)"
msgstr ""

msgid ""
"```\n"
"** (UndefinedFunctionError) function KV.Bucket.start_link/1 is undefined (modu"
"le KV.Bucket is not available)\n"
"```"
msgstr ""

msgid ""
"```\n"
"1 property, 10 tests, 0 failures\n"
"```"
msgstr ""

msgid ""
"```\n"
"1) property list does not contain multiples of 7 (MyPropertyTest)\n"
"   my_property_test.exs:6\n"
"   Failed with generated values (after 4 attempt(s)):"
msgstr ""

msgid ""
"```\n"
"1) test adding two numbers (MathTest)\n"
"   ** (ExUnit.ExpectationError)\n"
"                expected: 3\n"
"     to be equal to (==): 4\n"
"   at test.exs:7\n"
"```"
msgstr ""

msgid ""
"```\n"
"10:27:39.083 [debug] hello\n"
"```"
msgstr ""

msgid ""
"```\n"
"10:37:22.457 [error] Task #PID<0.72.0> started from #PID<0.60.0> terminating\n"
"Function: #Function<20.90072148/0 in :erl_eval.expr/5>\n"
"    Args: []\n"
"** (exit) an exception was raised:\n"
"    ** (RuntimeError) oops\n"
"        (elixir) lib/task/supervised.ex:70: Task.Supervised.do_apply/2\n"
"        (elixir) lib/task/supervised.ex:15: Task.Supervised.async/3\n"
"        (stdlib) proc_lib.erl:239: :proc_lib.init_p_do_apply/3\n"
"```"
msgstr ""

msgid ""
"```\n"
"18:12:10.698 [info] Application kv exited: :stopped\n"
"```"
msgstr ""

msgid ""
"```\n"
"=ERROR REPORT==== 7-Aug-2014::10:35:59 ===\n"
"** Task <0.59.0> terminating\n"
"** Started from <0.53.0>\n"
"** When function  == #Fun<erl_eval.20.90072148>\n"
"**      arguments == []\n"
"** Reason for termination ==\n"
"** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message =>"
" <<\"oops\">>},\n"
"    [{'Elixir.Task.Supervised',do_apply,2,\n"
"                               [{file,\"lib/task/supervised.ex\"},{line,70}]},\n"
"     {'Elixir.Task.Supervised',async,3,\n"
"                               [{file,\"lib/task/supervised.ex\"},{line,15}]},\n"
"     {proc_lib,init_p_do_apply,3,[{file,\"proc_lib.erl\"},{line,239}]}]}\n"
"```"
msgstr ""

msgid ""
"```\n"
"CREATE shopping\n"
"OK"
msgstr ""

msgid ""
"```\n"
"Compiling 1 file (.yrl)\n"
"Compiling 1 file (.erl)\n"
"Compiling 19 files (.ex)\n"
"Generated gettext app\n"
"```"
msgstr ""

msgid ""
"```\n"
"Compiling lib/gettext.ex (it's taking more than 10s)\n"
"```"
msgstr ""

msgid ""
"```\n"
"Consolidated String.Chars\n"
"Consolidated Collectable\n"
"Consolidated List.Chars\n"
"Consolidated IEx.Info\n"
"Consolidated Enumerable\n"
"Consolidated Inspect\n"
"```"
msgstr ""

msgid ""
"```\n"
"Generating cover results ..."
msgstr ""

msgid ""
"```\n"
"_build\n"
"└── shared\n"
"    └── lib\n"
"        ├── ecto\n"
"        │   └── ebin\n"
"        |   └── priv\n"
"        ├── poolboy\n"
"        │   └── ebin\n"
"        └── postgrex\n"
"            └── ebin\n"
"```"
msgstr ""

msgid ""
"```\n"
"iex> break! SomeFunction.call(:foo, _, _)\n"
"```"
msgstr ""

msgid ""
"```\n"
"iex> {y, 1} = {2, 2}\n"
"** (MatchError) no match of right hand side value: {2, 2}\n"
"```"
msgstr ""

msgid ""
"```\n"
"~r/hello/\n"
"~r|hello|\n"
"~r\"hello\"\n"
"~r'hello'\n"
"~r(hello)\n"
"~r[hello]\n"
"~r{hello}\n"
"~r<hello>\n"
"```"
msgstr ""

msgid ""
"```bash\n"
"$ git clone https://github.com/elixir-lang/elixir.git\n"
"$ cd elixir\n"
"$ make clean test\n"
"```"
msgstr ""

msgid ""
"```bash\n"
"$ mix deps.get\n"
"$ mix compile\n"
"$ MIX_ENV=test mix deps.get\n"
"$ mix test\n"
"```"
msgstr ""

msgid ""
"```bash\n"
"$ mix new my_project --umbrella\n"
"```"
msgstr ""

msgid ""
"```bash\n"
"$ yarn global add gulp\n"
"$ yarn install\n"
"```"
msgstr ""

msgid ""
"```bash\n"
"export PATH=\"$PATH:/path/to/elixir/bin\"\n"
"```"
msgstr ""

msgid ""
"```bash\n"
"mix test --only property\n"
"```"
msgstr ""

msgid ""
"```batch\n"
"> set \"MIX_ENV=prod\" && mix compile\n"
"```"
msgstr ""

msgid ""
"```c\n"
"for(i = 0; i < sizeof(array); i++) {\n"
"  array[i] = array[i] * 2;\n"
"}\n"
"```"
msgstr ""

msgid ""
"```console\n"
"$ MIX_ENV=prod mix compile\n"
"```"
msgstr ""

msgid ""
"```console\n"
"$ cd kv\n"
"$ mix compile\n"
"```"
msgstr ""

msgid ""
"```console\n"
"$ cd kv_umbrella/apps\n"
"$ mix new kv_server --module KVServer --sup\n"
"```"
msgstr ""

msgid ""
"```console\n"
"$ elixir --sname foo -S mix test\n"
"```"
msgstr ""

msgid ""
"```console\n"
"$ elixir --sname foo -S mix test --only distributed\n"
"```"
msgstr ""

msgid ""
"```console\n"
"$ elixir math.exs\n"
"```"
msgstr ""

msgid ""
"```console\n"
"$ elixir simple.exs\n"
"Hello world from Elixir\n"
"```"
msgstr ""

msgid ""
"```console\n"
"$ elixirc math.ex\n"
"$ iex\n"
"```"
msgstr ""

msgid ""
"```console\n"
"$ elixirc math.ex\n"
"```"
msgstr ""

msgid ""
"```console\n"
"$ iex --sname bar\n"
"```"
msgstr ""

msgid ""
"```console\n"
"$ iex --sname bar -S mix\n"
"$ elixir --sname foo -S mix test --only distributed\n"
"```"
msgstr ""

msgid ""
"```console\n"
"$ iex --sname bar -S mix\n"
"```"
msgstr ""

msgid ""
"```console\n"
"$ iex --sname foo\n"
"```"
msgstr ""

msgid ""
"```console\n"
"$ iex --sname foo -S mix\n"
"$ iex --sname bar -S mix\n"
"```"
msgstr ""

msgid ""
"```console\n"
"$ iex -S mix\n"
"```"
msgstr ""

msgid ""
"```console\n"
"$ iex concat.exs\n"
"```"
msgstr ""

msgid ""
"```console\n"
"$ iex macros.exs\n"
"```"
msgstr ""

msgid ""
"```console\n"
"$ iex math.exs\n"
"```"
msgstr ""

msgid ""
"```console\n"
"$ mix help\n"
"```"
msgstr ""

msgid ""
"```console\n"
"$ mix help\n"
"mix deps              # Lists dependencies and their status\n"
"mix deps.clean        # Deletes the given dependencies' files\n"
"mix deps.compile      # Compiles dependencies\n"
"mix deps.get          # Gets all out of date dependencies\n"
"mix deps.tree         # Prints the dependency tree\n"
"mix deps.unlock       # Unlocks the given dependencies\n"
"mix deps.update       # Updates the given dependencies\n"
"```"
msgstr ""

msgid ""
"```console\n"
"$ mix new kv --module KV\n"
"```"
msgstr ""

msgid ""
"```console\n"
"$ mix new kv_umbrella --umbrella\n"
"* creating README.md\n"
"* creating .formatter.exs\n"
"* creating .gitignore\n"
"* creating mix.exs\n"
"* creating apps\n"
"* creating config\n"
"* creating config/config.exs\n"
"```"
msgstr ""

msgid ""
"```console\n"
"$ mix new path/to/new/project\n"
"```"
msgstr ""

msgid ""
"```console\n"
"$ mix test\n"
"Excluding tags: [distributed: true]"
msgstr ""

msgid ""
"```console\n"
"$ mix test\n"
"```"
msgstr ""

msgid ""
"```console\n"
"$ mix test --trace\n"
"```"
msgstr ""

msgid ""
"```console\n"
"$ mix test test/kv_test.exs:5\n"
"```"
msgstr ""

msgid ""
"```console\n"
"$ telnet 127.0.0.1 4040\n"
"Trying 127.0.0.1...\n"
"Connected to localhost.\n"
"Escape character is '^]'.\n"
"CREATE shopping\n"
"OK\n"
"HELLO\n"
"UNKNOWN COMMAND\n"
"```"
msgstr ""

msgid ""
"```console\n"
"$ telnet 127.0.0.1 4040\n"
"Trying 127.0.0.1...\n"
"Connected to localhost.\n"
"Escape character is '^]'.\n"
"hello\n"
"hello\n"
"is it me\n"
"is it me\n"
"you are looking for?\n"
"you are looking for?\n"
"```"
msgstr ""

msgid ""
"```console\n"
"$ telnet 127.0.0.1 4040\n"
"Trying 127.0.0.1...\n"
"Connected to localhost.\n"
"Escape character is '^]'.\n"
"hello\n"
"hello?\n"
"HELLOOOOOO?\n"
"```"
msgstr ""

msgid ""
"```console\n"
"$ telnet 127.0.0.1 4040\n"
"Trying 127.0.0.1...\n"
"Connected to localhost.\n"
"Escape character is '^]'.\n"
"say you\n"
"say you\n"
"say me\n"
"say me\n"
"```"
msgstr ""

msgid ""
"```css\n"
".clickable-header {\n"
"  cursor:pointer;\n"
"}\n"
".clickable-header:hover {\n"
"  text-decoration:underline;\n"
"}\n"
".top-level-header {\n"
"  display:inline;\n"
"}\n"
".back-to-top {\n"
"  margin-left:5px;\n"
"  cursor:pointer;\n"
"}\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"  def application do\n"
"    [\n"
"      extra_applications: [:logger],\n"
"      mod: {KV, []}\n"
"    ]\n"
"  end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"  def handle_cast({:create, name}, {names, refs}) do\n"
"    if Map.has_key?(names, name) do\n"
"      {:noreply, {names, refs}}\n"
"    else\n"
"      {:ok, pid} = DynamicSupervisor.start_child(KV.BucketSupervisor, KV.Bucke"
"t)\n"
"      ref = Process.monitor(pid)\n"
"      refs = Map.put(refs, ref, name)\n"
"      names = Map.put(names, name, pid)\n"
"      {:noreply, {names, refs}}\n"
"    end\n"
"  end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"  def init(:ok) do\n"
"    children = [\n"
"      {DynamicSupervisor, name: KV.BucketSupervisor, strategy: :one_for_one},\n"
"      {KV.Registry, name: KV.Registry}\n"
"    ]"
msgstr ""

msgid ""
"```elixir\n"
"  def init(:ok) do\n"
"    children = [\n"
"      {KV.Registry, name: KV.Registry}\n"
"    ]"
msgstr ""

msgid ""
"```elixir\n"
"  def init(:ok) do\n"
"    children = [\n"
"      {KV.Registry, name: KV.Registry},\n"
"      {DynamicSupervisor, name: KV.BucketSupervisor, strategy: :one_for_one}\n"
"    ]"
msgstr ""

msgid ""
"```elixir\n"
"  def start(_type, _args) do\n"
"    children = [\n"
"      {Task, fn -> KVServer.accept(4040) end}\n"
"    ]"
msgstr ""

msgid ""
"```elixir\n"
"  def start(_type, _args) do\n"
"    port = String.to_integer(System.get_env(\"PORT\") || raise \"missing $PORT en"
"vironment variable\")"
msgstr ""

msgid ""
"```elixir\n"
"  def start_link(opts) do\n"
"    GenServer.start_link(__MODULE__, :ok, opts)\n"
"  end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"  setup context do\n"
"    _ = start_supervised!({KV.Registry, name: context.test})\n"
"    %{registry: context.test}\n"
"  end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"  test \"are temporary workers\" do\n"
"    assert Supervisor.child_spec(KV.Bucket, []).restart == :temporary\n"
"  end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"  test \"removes buckets on exit\", %{registry: registry} do\n"
"    KV.Registry.create(registry, \"shopping\")\n"
"    {:ok, bucket} = KV.Registry.lookup(registry, \"shopping\")\n"
"    Agent.stop(bucket)"
msgstr ""

msgid ""
"```elixir\n"
"# 1. data structures\n"
"import Validator\n"
"validate user, name: [length: 1..100],\n"
"               email: [matches: ~r/@/]"
msgstr ""

msgid ""
"```elixir\n"
"# A tuple\n"
"tuple = { 1, 2, 3 }"
msgstr ""

msgid ""
"```elixir\n"
"# Alias the module so it can be called as Bar instead of Foo.Bar\n"
"alias Foo.Bar, as: Bar"
msgstr ""

msgid ""
"```elixir\n"
"# Replace computer-name with your local machine nodes.\n"
"config :kv, :routing_table, [{?a..?m, :\"foo@computer-name\"}, {?n..?z, :\"bar@co"
"mputer-name\"}]\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"# Sum all elements in a list\n"
"Enumerable.reduce([1, 2, 3], 0, fn(x, acc) -> x + acc end)\n"
"#=> 6\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"# module_name.ex\n"
"defmodule ModuleName do\n"
"  def hello do\n"
"    IO.puts \"Hello World\"\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"# {tag, name, age}\n"
"{User, nil, 0}\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"## Client API"
msgstr ""

msgid ""
"```elixir\n"
"## Server callbacks"
msgstr ""

msgid ""
"```elixir\n"
"$ mix app.tree\n"
"plug\n"
"├── elixir\n"
"├── crypto\n"
"├── logger\n"
"│   └── elixir\n"
"└── mime\n"
"    └── elixir\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"%Dungeon{name: \"\", rooms: %{}}\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"%Room{id: 0, users: HashDict.new}\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"%User{id: 0, username: \"\", device_codes: HashSet.new}\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"%User{unknown: \"field\"}\n"
"#=> ** (CompileError) iex:2: unknown key :unknown for struct User\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"%{key: \"value\"}\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"(1..10)\n"
"|> IO.inspect\n"
"|> Enum.map(fn x -> x * 2 end)\n"
"|> IO.inspect\n"
"|> Enum.sum\n"
"|> IO.inspect\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"1..10\n"
"[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n"
"110\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
":im_an_atom\n"
":me_too"
msgstr ""

msgid ""
"```elixir\n"
":lists.sort([3, 2, 1])\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
":sum         #=> Atoms\n"
"1.0          #=> Numbers\n"
"[1, 2]       #=> Lists\n"
"\"strings\"    #=> Strings\n"
"{key, value} #=> Tuples with two elements\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"@doc \"\"\"\n"
"Converts double-quotes to single-quotes."
msgstr ""

msgid ""
"```elixir\n"
"@doc \"\"\"\n"
"Deletes `key` from `bucket`."
msgstr ""

msgid ""
"```elixir\n"
"@doc \"\"\"\n"
"Runs the given command.\n"
"\"\"\"\n"
"def run(command)"
msgstr ""

msgid ""
"```elixir\n"
"@doc \"\"\"\n"
"The routing table.\n"
"\"\"\"\n"
"def table do\n"
"  Application.fetch_env!(:kv, :routing_table)\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"@doc \"Breaks a collection into chunks\"\n"
"@since \"1.0.0\"\n"
"@deprecated \"Use chunk_every/2 instead\"\n"
"def chunk(collection, chunk_size) do\n"
"  chunk_every(collection, chunk_size)\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"@doc ~S\"\"\"\n"
"Converts double-quotes to single-quotes."
msgstr ""

msgid ""
"```elixir\n"
"@doc ~S\"\"\"\n"
"Parses the given `line` into a command."
msgstr ""

msgid ""
"```elixir\n"
"@moduledoc \"A brand new module\"\n"
"@moduledoc authors: [\"Jane\", \"Mary\"], since: \"1.4.0\"\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"@moduletag :capture_log\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"@spec has_key?(keyword(), atom()) :: boolean()\n"
"def has_key?(keyword, key) do\n"
"  # ...\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"@spec myfun(integer), do: integer\n"
"# becomes\n"
"@spec myfun(integer) :: integer"
msgstr ""

msgid ""
"```elixir\n"
"@spec round(number) :: integer\n"
"def round(number), do: # implementation...\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"@tag :distributed\n"
"test \"route requests across nodes\" do\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"@type keyword() :: [{atom(), any()}]\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"CREATE shopping\n"
"OK"
msgstr ""

msgid ""
"```elixir\n"
"Enum.all?([:foo, :bar, :baz], &is_atom/1)\n"
"#=> true\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"Enum.each %User{}, fn {k, v} ->\n"
"  IO.puts \"Got #{k}: #{v}\"\n"
"end\n"
"#=> ** (Protocol.UndefinedError) protocol Enumerable not implemented for %User"
"{age: 0, name: \"\"}\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"Enum.each %{foo: :bar}, fn {k, v} ->\n"
"  IO.puts \"Got #{k}: #{v}\"\n"
"end\n"
"#=> Got foo: bar\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"Enum.map [1, 2, 3, 4], &(&1 * 2)\n"
"#=> [2, 4, 6, 8]"
msgstr ""

msgid ""
"```elixir\n"
"Enum.map([1, 2, 3], fn(x) -> x * 2 end)\n"
"#=> [2, 4, 6]\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"Enum.map([1, 2, 3], fn(x) -> x * x end)\n"
"#=> [1, 4, 9]\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"Enum.take(StreamData.integer(), 5)\n"
"#=> [1, -1, 3, 4, 3]\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"Enumerable.reduce(l, 0, fn x, acc -> String.length(x) + acc end)\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"ExUnit.start"
msgstr ""

msgid ""
"```elixir\n"
"ExUnit.start()\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"File.read!(\"path/to/some/file\")\n"
"|> String.split(\"\n"
"\")\n"
"|> Enum.flat_map(fn line ->\n"
"    String.split(line, \" \")\n"
"   end)\n"
"|> Enum.reduce(%{}, fn word, acc ->\n"
"    Map.update(acc, word, 1, & &1 + 1)\n"
"   end)\n"
"|> Enum.to_list()\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"File.stream!(\"README.md\")\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"File.stream!(\"path/to/some/file\")\n"
"|> Stream.flat_map(fn line ->\n"
"    String.split(line, \" \")\n"
"   end)\n"
"|> Enum.reduce(%{}, fn word, acc ->\n"
"    Map.update(acc, word, 1, & &1 + 1)\n"
"   end)\n"
"|> Enum.to_list()\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"File.stream!(\"path/to/some/file\")\n"
"|> Stream.flat_map(fn line ->\n"
"    String.split(line, \" \")\n"
"   end)\n"
"|> Stream.async()  # NEW!\n"
"|> Enum.reduce(%{}, fn word, acc ->\n"
"    Map.update(acc, word, 1, & &1 + 1)\n"
"   end)\n"
"|> Enum.to_list()\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"IEx.configure [colors: [syntax_colors: [atom: :cyan, string: :green]]]\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"IO.puts \"Hello world from Elixir\"\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"List.last([1, 2])\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"Regex.regex? ~r\"\"\"\n"
"This is a regex\n"
"spanning several\n"
"lines.\n"
"\"\"\"\n"
"#=> true\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"Regex.run ~r/abc\\s/, \"abc \"\n"
"#=> [\"abc \"]\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"Stream.repeatedly(fn -> :random.uniform end) |> Enum.take(3)\n"
"#=> [0.4435846174457203, 0.7230402056221108, 0.94581636451987]\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"String.capitalize(\"ﬁN\") #=> \"Fin\"\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"Task.async fn -> raise \"oops\" end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"Unless.macro_unless true, do: IO.puts \"this should never be printed\"\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"[\n"
"  {?a..?m, :\"foo@computer-name\"},\n"
"  {?n..?z, :\"bar@computer-name\"}\n"
"]\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"[1, 2, 3]\n"
"  |> Enum.take_while(fn(x) -> x < 3 end)\n"
"  |> Enum.map(fn(x) -> x * 2 end)\n"
"#=> [2, 4]\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"[1, 2, 3]\n"
"  |> Stream.take_while(fn(x) -> x < 3 end)\n"
"  |> Stream.map(fn(x) -> x * 2 end)\n"
"#=> #Stream.Lazy<...>\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"[1, 2, 3]\n"
"|> IO.inspect(label: \"before\")\n"
"|> Enum.map(&(&1 * 2))\n"
"|> IO.inspect(label: \"after\")\n"
"|> Enum.sum\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"[19, 12, 6, 11, 2, 20, 10]\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"[a: :foo, b: \"bar\", c: :baz]\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"alias Experimental.GenStage"
msgstr ""

msgid ""
"```elixir\n"
"alias Experimental.GenStage.Flow"
msgstr ""

msgid ""
"```elixir\n"
"alias Experimental.GenStage.Flow\n"
"File.stream!(\"path/to/some/file\")\n"
"|> Flow.from_enumerable()\n"
"|> Flow.flat_map(fn line ->\n"
"    for word <- String.split(\" \"), do: {word, 1}\n"
"   end)\n"
"|> Flow.reduce_by_key(& &1 + &2)\n"
"|> Enum.to_list()\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"alias Math.List\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"alias Math.List, as: List\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"alias MyApp.Foo\n"
"alias MyApp.Bar\n"
"alias MyApp.Baz\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"alias MyApp.{Foo, Bar, Baz}\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"assert \"fox jumps over the lazy dog\" ==\n"
"       \"brown fox jumps over the dog\"\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"assert \"fox jumps over the lazy dog\" == \"brown fox jumps over the dog\"\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"assert KV.hello() == :oops\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"before: [1, 2, 3]\n"
"after: [2, 4, 6]\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"build_path: \"../../_build\",\n"
"config_path: \"../../config/config.exs\",\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"build_path: \"../../_build\",\n"
"config_path: \"../../config/config.exs\",\n"
"deps_path: \"../../deps\",\n"
"lockfile: \"../../mix.lock\",\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"case File.read(\"my_file.ex\") do\n"
"  {:ok, contents} ->\n"
"    case Code.eval_string(contents) do\n"
"      {res, _binding} ->\n"
"        {:ok, res}\n"
"      error ->\n"
"        error\n"
"  error -> error\n"
"    error\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"case File.read(file) do\n"
"  {:ok, body}      -> # do something with the `body`\n"
"  {:error, reason} -> # handle the error caused by `reason`\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"case {x, y} do\n"
"  {:a, :b} -> :ok\n"
"  {:b, :c} -> :good\n"
"  other -> other\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"children = [\n"
"  MyApp.Repo,\n"
"  MyApp.Endpoint\n"
"]"
msgstr ""

msgid ""
"```elixir\n"
"children = [\n"
"  {MyApp.Repo, url: \"ecto://localhost:4567/my_dev\"},\n"
"  MyApp.Endpoint\n"
"]\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"collection\n"
"|> Enum.map(&Task.async(SomeMod, :function, [&1]))\n"
"|> Enum.map(&Task.await/1)\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"collection\n"
"|> Task.async_stream(SomeMod, :function, [], max_concurrency: 8)\n"
"|> Enum.to_list()\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"config :iex, default_prompt: \">>>\"\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"config :logger,\n"
"  compile_time_purge_matching: [\n"
"    [application: :foo, level_lower_than: :info],\n"
"    [module: Bar, function: \"foo/3\"]\n"
"  ]\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"def application do\n"
"  [\n"
"    extra_applications: [:logger],\n"
"    env: [routing_table: []],\n"
"    mod: {KV, []}\n"
"  ]\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"def application do\n"
"  [\n"
"    extra_applications: [:logger],\n"
"    mod: {KVServer.Application, []}\n"
"  ]\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"def application do\n"
"  [applications: [:logger, :plug, :postgrex]]\n"
"end"
msgstr ""

msgid ""
"```elixir\n"
"def application do\n"
"  [extra_applications: [:crypto]]\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"def application do\n"
"  [extra_applications: [:logger]]\n"
"end"
msgstr ""

msgid ""
"```elixir\n"
"def create(server, name) do\n"
"  GenServer.call(server, {:create, name})\n"
"end"
msgstr ""

msgid ""
"```elixir\n"
"def delete(bucket, key) do\n"
"  Agent.get_and_update(bucket, fn dict ->\n"
"    Map.pop(dict, key)\n"
"  end)\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"def delete(bucket, key) do\n"
"  Process.sleep(1000) # puts client to sleep\n"
"  Agent.get_and_update(bucket, fn dict ->\n"
"    Process.sleep(1000) # puts server to sleep\n"
"    Map.pop(dict, key)\n"
"  end)\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"def deps do\n"
"  [{:ecto, github: \"elixir-lang/ecto\"},\n"
"   {:hackney, github: \"benoitc/hackney\", only: [:test]}]\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"def deps do\n"
"  [{:kv, git: \"https://github.com/YOUR_ACCOUNT/kv.git\"}]\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"def deps do\n"
"  [{:plug, \"~> 1.0\"}]\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"def deps do\n"
"  [{:plug, git: \"git://github.com/elixir-lang/plug.git\"}]\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"def drive(%User{age: age}) when age >= 16 do\n"
"  # Code that drives a car\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"def format(message, opts) do\n"
"  path =\n"
"    if (file = opts[:file]) && (line = opts[:line]) do\n"
"      relative = Path.relative_to_cwd(file)\n"
"      message  = Exception.format_file_line(relative, line) <> \" \" <> message\n"
"      relative\n"
"    end"
msgstr ""

msgid ""
"```elixir\n"
"def format(message, opts) do\n"
"  path = with_file_and_line(message, opts)\n"
"  {path, message}\n"
"end"
msgstr ""

msgid ""
"```elixir\n"
"def loop_through([h | t]) do\n"
"  IO.inspect h\n"
"  loop_through t\n"
"end"
msgstr ""

msgid ""
"```elixir\n"
"def mul_by(x, n \\\\ 2) do\n"
"  x * n\n"
"end"
msgstr ""

msgid ""
"```elixir\n"
"def outer_function(coll, ...) do\n"
"  ...\n"
"  Enumerable.reduce(coll, initial_consumer_acc, consumer)\n"
"  ...\n"
"end"
msgstr ""

msgid ""
"```elixir\n"
"def parse(line) do\n"
"  case String.split(line) do\n"
"    [\"CREATE\", bucket] -> {:ok, {:create, bucket}}\n"
"    [\"GET\", bucket, key] -> {:ok, {:get, bucket, key}}\n"
"    [\"PUT\", bucket, key, value] -> {:ok, {:put, bucket, key, value}}\n"
"    [\"DELETE\", bucket, key] -> {:ok, {:delete, bucket, key}}\n"
"    _ -> {:error, :unknown_command}\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"def parse(line) do\n"
"  case String.split(line) do\n"
"    [\"CREATE\", bucket] -> {:ok, {:create, bucket}}\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"def project do\n"
"  [...,\n"
"   start_permanent: Mix.env == :prod,\n"
"   ...]\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"def run({:create, bucket}, pid) do\n"
"  KV.Registry.create(pid, bucket)\n"
"  {:ok, \"OK\n"
"\"}\n"
"end"
msgstr ""

msgid ""
"```elixir\n"
"def some_fun(a, b, c) do\n"
"  IO.inspect binding()\n"
"  ...\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"def some_fun(a, b, c) do\n"
"  require IEx; IEx.pry\n"
"  ...\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"def sum(a, b) when is_integer(a) and is_integer(b) do\n"
"  a + b\n"
"end"
msgstr ""

msgid ""
"```elixir\n"
"def sum(coll) do\n"
"  Enumerable.reduce(coll, 0, fn x, acc -> x + acc end)\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"def sum, do: 0\n"
"def sum(a), do: a\n"
"def sum(a, b), do: a + b\n"
"def sum(a, b, c), do: a + b + c\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defguard is_old_to_drive(age) when age >= 16"
msgstr ""

msgid ""
"```elixir\n"
"defimpl Enumerable, for: List do\n"
"  def reduce(list, acc, fun) do\n"
"    do_reduce(list, acc, fun)\n"
"  end"
msgstr ""

msgid ""
"```elixir\n"
"defimpl Size, for: Any do\n"
"  def size(_), do: 0\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defimpl Size, for: BitString do\n"
"  def size(string), do: byte_size(string)\n"
"end"
msgstr ""

msgid ""
"```elixir\n"
"defimpl Size, for: MapSet do\n"
"  def size(set), do: MapSet.size(set)\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defmacro unless(clause, do: expression) do\n"
"  quote do\n"
"    if(!unquote(clause), do: unquote(expression))\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defmacro unless(expr, opts) do\n"
"  quote do\n"
"    if(!unquote(expr), unquote(opts))\n"
"  end\n"
"end"
msgstr ""

msgid ""
"```elixir\n"
"defmacro unless(expr, opts) do\n"
"  quote do\n"
"    if(!unquote(expr), unquote(opts))\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defmodule AssertionTest do\n"
"  use ExUnit.Case, async: true"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Concat do\n"
"  def join(a, b \\\\ nil, sep \\\\ \" \")"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Concat do\n"
"  def join(a, b) do\n"
"    IO.puts \"***First join\"\n"
"    a <> b\n"
"  end"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Concat do\n"
"  def join(a, b, sep \\\\ \" \") do\n"
"    a <> sep <> b\n"
"  end\n"
"end"
msgstr ""

msgid ""
"```elixir\n"
"defmodule DefaultTest do\n"
"  def dowork(x \\\\ \"hello\") do\n"
"    x\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Elixir.Foo do\n"
"  defmodule Elixir.Foo.Bar do\n"
"  end\n"
"  alias Elixir.Foo.Bar, as: Bar\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Enum do\n"
"  def map(collection, fun) do\n"
"    Enumerable.reduce(collection, [], fn(x, acc) ->\n"
"      [fun.(x, acc) | acc]\n"
"    end) |> reverse\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Example do\n"
"  def double_sum(x, y) do\n"
"    hard_work(x, y)\n"
"  end"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Example do\n"
"  require Feature\n"
"  Feature.__using__(option: :value)\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Example do\n"
"  use Feature, option: :value\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Foo do\n"
"  defmodule Bar do\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Hello do\n"
"  def calculate(a, b, c) do\n"
"    temp = a * b\n"
"    temp + c\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Hello, do: (\n"
"  def calculate(a, b, c), do: (\n"
"    temp = a * b\n"
"    temp + c\n"
"  )\n"
")\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defmodule HelloModule do\n"
"  # A \"Hello world\" function\n"
"  def some_fun do\n"
"    IO.puts \"Hello world!\"\n"
"  end"
msgstr ""

msgid ""
"```elixir\n"
"defmodule HelloModule do\n"
"  defmodule Utils do\n"
"    def util do\n"
"      IO.puts \"Utilize\"\n"
"    end"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Hygiene do\n"
"  defmacro interference do\n"
"    quote do: var!(a) = 1\n"
"  end\n"
"end"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Hygiene do\n"
"  defmacro no_interference do\n"
"    quote do: a = 1\n"
"  end\n"
"end"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Interleave do\n"
"  def interleave(a, b) do\n"
"    step = fn x, acc -> { :suspend, [x | acc] } end\n"
"    af = &Enumerable.reduce(a, &1, step)\n"
"    bf = &Enumerable.reduce(b, &1, step)\n"
"    do_interleave(af, bf, []) |> :lists.reverse()\n"
"  end"
msgstr ""

msgid ""
"```elixir\n"
"defmodule JSONParser do\n"
"  @behaviour Parser"
msgstr ""

msgid ""
"```elixir\n"
"defmodule KV do\n"
"  @moduledoc \"\"\"\n"
"  Documentation for KV.\n"
"  \"\"\""
msgstr ""

msgid ""
"```elixir\n"
"defmodule KV do\n"
"  def start_link do\n"
"    Task.start_link(fn -> loop(%{}) end)\n"
"  end"
msgstr ""

msgid ""
"```elixir\n"
"defmodule KV do\n"
"  use Application"
msgstr ""

msgid ""
"```elixir\n"
"defmodule KV.Bucket do\n"
"  use Agent"
msgstr ""

msgid ""
"```elixir\n"
"defmodule KV.Bucket do\n"
"  use Agent, restart: :temporary\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defmodule KV.BucketTest do\n"
"  use ExUnit.Case, async: true"
msgstr ""

msgid ""
"```elixir\n"
"defmodule KV.MixProject do\n"
"  use Mix.Project"
msgstr ""

msgid ""
"```elixir\n"
"defmodule KV.Registry do\n"
"  use GenServer"
msgstr ""

msgid ""
"```elixir\n"
"defmodule KV.RegistryTest do\n"
"  use ExUnit.Case, async: true"
msgstr ""

msgid ""
"```elixir\n"
"defmodule KV.Router do\n"
"  @doc \"\"\"\n"
"  Dispatch the given `mod`, `fun`, `args` request\n"
"  to the appropriate node based on the `bucket`.\n"
"  \"\"\"\n"
"  def route(bucket, mod, fun, args) do\n"
"    # Get the first byte of the binary\n"
"    first = :binary.first(bucket)"
msgstr ""

msgid ""
"```elixir\n"
"defmodule KV.RouterTest do\n"
"  use ExUnit.Case, async: true"
msgstr ""

msgid ""
"```elixir\n"
"defmodule KV.Supervisor do\n"
"  use Supervisor"
msgstr ""

msgid ""
"```elixir\n"
"defmodule KVServer do\n"
"  require Logger"
msgstr ""

msgid ""
"```elixir\n"
"defmodule KVServer.Application do\n"
"  # See https://hexdocs.pm/elixir/Application.html\n"
"  # for more information on OTP Applications\n"
"  @moduledoc false"
msgstr ""

msgid ""
"```elixir\n"
"defmodule KVServer.Command do\n"
"  @doc \"\"\"\n"
"  Runs the given command.\n"
"  \"\"\"\n"
"  def run(command) do\n"
"    {:ok, \"OK\n"
"\"}\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defmodule KVServer.Command do\n"
"  @doc ~S\"\"\"\n"
"  Parses the given `line` into a command."
msgstr ""

msgid ""
"```elixir\n"
"defmodule KVServer.CommandTest do\n"
"  use ExUnit.Case, async: true\n"
"  doctest KVServer.Command\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defmodule KVServer.MixProject do\n"
"  use Mix.Project"
msgstr ""

msgid ""
"```elixir\n"
"defmodule KVServerTest do\n"
"  use ExUnit.Case"
msgstr ""

msgid ""
"```elixir\n"
"defmodule KVTest do\n"
"  use ExUnit.Case\n"
"  doctest KV"
msgstr ""

msgid ""
"```elixir\n"
"defmodule KvUmbrella.MixProject do\n"
"  use Mix.Project"
msgstr ""

msgid ""
"```elixir\n"
"defmodule LousyCalculator do\n"
"  @spec add(number, number) :: {number, String.t}\n"
"  def add(x, y), do: {x + y, \"You need a calculator to do that?!\"}"
msgstr ""

msgid ""
"```elixir\n"
"defmodule LousyCalculator do\n"
"  @typedoc \"\"\"\n"
"  Just a number followed by a string.\n"
"  \"\"\"\n"
"  @type number_with_remark :: {number, String.t}"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Math do\n"
"  @doc \"\"\"\n"
"  Add two numbers together."
msgstr ""

msgid ""
"```elixir\n"
"defmodule Math do\n"
"  @moduledoc \"\"\"\n"
"  Provides math-related functions."
msgstr ""

msgid ""
"```elixir\n"
"defmodule Math do\n"
"  def double_each([head | tail]) do\n"
"    [head * 2 | double_each(tail)]\n"
"  end"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Math do\n"
"  def plus(a, b) do\n"
"    alias Math.List\n"
"    # ...\n"
"  end"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Math do\n"
"  def some_function do\n"
"    import List, only: [duplicate: 2]\n"
"    duplicate(:ok, 10)\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Math do\n"
"  def square(x) do\n"
"    x * x\n"
"  end\n"
"end"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Math do\n"
"  def sum(a, b) do\n"
"    a + b\n"
"  end\n"
"end"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Math do\n"
"  def sum(a, b) do\n"
"    a + b\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Math do\n"
"  def sum(a, b) do\n"
"    do_sum(a, b)\n"
"  end"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Math do\n"
"  def sum_list([head | tail], accumulator) do\n"
"    sum_list(tail, head + accumulator)\n"
"  end"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Math do\n"
"  def zero?(0) do\n"
"    true\n"
"  end"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Math do\n"
"  def zero?(0), do: true\n"
"  def zero?(x) when is_integer(x), do: false\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defmodule MathTest do\n"
"  use ExUnit.Case, async: true\n"
"  doctest Math\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Mix.Tasks.Hello do\n"
"  use Mix.Task"
msgstr ""

msgid ""
"```elixir\n"
"defmodule MyApp do\n"
"  @behaviour Plug"
msgstr ""

msgid ""
"```elixir\n"
"defmodule MyModule do\n"
"  def hello do\n"
"    IO.puts \"Another Hello\"\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defmodule MyModule do\n"
"  defmacro my_macro(a, b, c) do\n"
"    quote do\n"
"      # Keep what you need to do here to a minimum\n"
"      # and move everything else to a function\n"
"      MyModule.do_this_that_and_that(unquote(a), unquote(b), unquote(c))\n"
"    end\n"
"  end"
msgstr ""

msgid ""
"```elixir\n"
"defmodule MyModule do\n"
"  defmacro my_macro(a, b, c) do\n"
"    quote do\n"
"      do_this(unquote(a))\n"
"      ...\n"
"      do_that(unquote(b))\n"
"      ...\n"
"      and_that(unquote(c))\n"
"    end\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defmodule MyPlug do\n"
"  use Plug.Builder"
msgstr ""

msgid ""
"```elixir\n"
"defmodule MyProject do\n"
"  use Mix.Project"
msgstr ""

msgid ""
"```elixir\n"
"defmodule MyPropertyTest do\n"
"  use ExUnit.Case, async: true\n"
"  use ExUnitProperties"
msgstr ""

msgid ""
"```elixir\n"
"defmodule MyServer do\n"
"  @initial_state %{host: \"127.0.0.1\", port: 3456}\n"
"  IO.inspect @initial_state\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defmodule MyServer do\n"
"  @my_data 14\n"
"  def first_data, do: @my_data\n"
"  @my_data 13\n"
"  def second_data, do: @my_data\n"
"end"
msgstr ""

msgid ""
"```elixir\n"
"defmodule MyServer do\n"
"  @unknown\n"
"end\n"
"warning: undefined module attribute @unknown, please remove access to @unknown"
" or explicitly set it before access\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defmodule MyServer do\n"
"  @vsn 2\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defmodule MyTest do\n"
"  use ExUnit.Case"
msgstr ""

msgid ""
"```elixir\n"
"defmodule MyTest do\n"
"  use TestCase"
msgstr ""

msgid ""
"```elixir\n"
"defmodule OtherUser do\n"
"  @derive [Size]\n"
"  defstruct [:name, :age]\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Parser do\n"
"  @callback parse(String.t) :: {:ok, term} | {:error, String.t}\n"
"  @callback extensions() :: [String.t]"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Parser do\n"
"  @callback parse(String.t) :: {:ok, term} | {:error, String.t}\n"
"  @callback extensions() :: [String.t]\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defmodule QuietCalculator do\n"
"  @spec add(number, number) :: number\n"
"  def add(x, y), do: make_quiet(LousyCalculator.add(x, y))"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Recursion do\n"
"  def print_multiple_times(msg, n) when n <= 1 do\n"
"    IO.puts msg\n"
"  end"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Sample do\n"
"  def quoted do\n"
"    quote do: x\n"
"  end\n"
"end"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Sample do\n"
"  defmacro initialize_to_char_count(variables) do\n"
"    Enum.map variables, fn(name) ->\n"
"      var = Macro.var(name, nil)\n"
"      length = name |> Atom.to_string |> String.length\n"
"      quote do\n"
"        unquote(var) = unquote(length)\n"
"      end\n"
"    end\n"
"  end"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Stats do\n"
"  alias Math.List, as: List\n"
"  # In the remaining module definition List expands to Math.List.\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defmodule StringTest do\n"
"  use ExUnit.Case, async: true"
msgstr ""

msgid ""
"```elixir\n"
"defmodule StringTest do\n"
"  use ExUnit.Case, async: true\n"
"  use PropertyTestingLibrary"
msgstr ""

msgid ""
"```elixir\n"
"defmodule TestCase do\n"
"  # Callback invoked by `use`.\n"
"  #\n"
"  # For now it returns a quoted expression that\n"
"  # imports the module itself into the user code.\n"
"  @doc false\n"
"  defmacro __using__(_opts) do\n"
"    quote do\n"
"      import TestCase\n"
"    end\n"
"  end"
msgstr ""

msgid ""
"```elixir\n"
"defmodule TestCase do\n"
"  @doc false\n"
"  defmacro __using__(_opts) do\n"
"    quote do\n"
"      import TestCase"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Unless do\n"
"  def fun_unless(clause, do: expression) do\n"
"    if(!clause, do: expression)\n"
"  end"
msgstr ""

msgid ""
"```elixir\n"
"defmodule User do\n"
"  @derive [Enumerable]\n"
"  defstruct name: \"\", age: 0\n"
"end"
msgstr ""

msgid ""
"```elixir\n"
"defmodule User do\n"
"  defstruct [:name, :age]\n"
"end"
msgstr ""

msgid ""
"```elixir\n"
"defmodule User do\n"
"  defstruct name: \"\", age: 0\n"
"end"
msgstr ""

msgid ""
"```elixir\n"
"defmodule User do\n"
"  defstruct name: nil, age: 0\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defmodule UserManagementTest do\n"
"  use ExUnit.Case, async: true"
msgstr ""

msgid ""
"```elixir\n"
"defmodule YAMLParser do\n"
"  @behaviour Parser"
msgstr ""

msgid ""
"```elixir\n"
"defmodule(Hello, do: (\n"
"  def(calculate(a, b, c), do: (\n"
"    =(temp, *(a, b))\n"
"    +(temp, c)\n"
"  ))\n"
"))\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defmodule(Hello, do: (\n"
"  def(calculate(a, b, c), do: (\n"
"    temp = a * b\n"
"    temp + c\n"
"  ))\n"
"))\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defp deps do\n"
"  [{:kv, in_umbrella: true}]\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defp loop_acceptor(socket) do\n"
"  {:ok, client} = :gen_tcp.accept(socket)\n"
"  Task.start_link(fn -> serve(client) end)\n"
"  loop_acceptor(socket)\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defp loop_acceptor(socket) do\n"
"  {:ok, client} = :gen_tcp.accept(socket)\n"
"  serve(client)\n"
"  loop_acceptor(socket)\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defp loop_acceptor(socket) do\n"
"  {:ok, client} = :gen_tcp.accept(socket)\n"
"  {:ok, pid} = Task.Supervisor.start_child(KVServer.TaskSupervisor, fn -> serv"
"e(client) end)\n"
"  :ok = :gen_tcp.controlling_process(client, pid)\n"
"  loop_acceptor(socket)\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defp serve(socket) do\n"
"  msg =\n"
"    case read_line(socket) do\n"
"      {:ok, data} ->\n"
"        case KVServer.Command.parse(data) do\n"
"          {:ok, command} ->\n"
"            KVServer.Command.run(command)\n"
"          {:error, _} = err ->\n"
"            err\n"
"        end\n"
"      {:error, _} = err ->\n"
"        err\n"
"    end"
msgstr ""

msgid ""
"```elixir\n"
"defp serve(socket) do\n"
"  msg =\n"
"    with {:ok, data} <- read_line(socket),\n"
"         {:ok, command} <- KVServer.Command.parse(data),\n"
"         do: KVServer.Command.run(command)"
msgstr ""

msgid ""
"```elixir\n"
"defp serve(socket) do\n"
"  socket\n"
"  |> read_line()\n"
"  |> write_line(socket)"
msgstr ""

msgid ""
"```elixir\n"
"defp write_line(socket, {:error, :not_found}) do\n"
"  :gen_tcp.send(socket, \"NOT FOUND\n"
"\")\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defprotocol Size do\n"
"  @doc \"Calculates the size (and not the length!) of a data structure\"\n"
"  def size(data)\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defprotocol Size do\n"
"  @fallback_to_any true\n"
"  def size(data)\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defrecord User, name: nil, age: 0\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"defrecord User, name: nil, age: 0 do\n"
"  def first_name(self) do\n"
"    self.name |> String.split |> Enum.at(0)\n"
"  end\n"
"end"
msgstr ""

msgid ""
"```elixir\n"
"defrecord User, name: nil, age: nil\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"dirs = ['/home/mikey', '/home/james']\n"
"for dir  <- dirs,\n"
"    file <- File.ls!(dir),\n"
"    path = Path.join(dir, file),\n"
"    File.regular?(path) do\n"
"  File.stat!(path).size\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"dungeon.rooms[room_id].users[user_id].device_codes\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"elem({:a, :b, :c}, 0)         #=> :a\n"
"put_elem({:a, :b, :c}, 0, :d) #=> {:d, :b, :c}\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"exclude =\n"
"  if Node.alive?, do: [], else: [distributed: true]"
msgstr ""

msgid ""
"```elixir\n"
"f = fn\n"
"      {:a, :b} = tuple ->\n"
"        IO.puts \"All your #{inspect tuple} are belong to us\"\n"
"      [] ->\n"
"        \"Empty\"\n"
"    end"
msgstr ""

msgid ""
"```elixir\n"
"fun = &is_record(&1, Range)\n"
"fun.(1..3)\n"
"#=> true\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"generator = StreamData.map(StreamData.integer(), &abs/1)\n"
"Enum.take(generator, 5)\n"
"#=> [0, 1, 3, 3, 2]\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"iex> key = :hello\n"
"iex> %{^key => value} = %{:hello => \"another world\"}\n"
"iex> value\n"
"\"another world\"\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"if x > 10 do\n"
"  :greater_than_ten\n"
"else\n"
"  :not_greater_than_ten\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"import Integer, only: :functions\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"import Integer, only: :macros\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"import StreamData"
msgstr ""

msgid ""
"```elixir\n"
"import Supervisor.Spec"
msgstr ""

msgid ""
"```elixir\n"
"import_config \"../apps/*/config/config.exs\"\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"is_atom :ok                 #=> true\n"
"is_atom :'ok'               #=> true\n"
"is_atom Ok                  #=> true\n"
"is_atom :\"Multiple words\"   #=> true\n"
"is_atom :\"\"                 #=> true\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"is_binary \"\"\"\n"
"This is a binary\n"
"spanning several\n"
"lines.\n"
"\"\"\"\n"
"#=> true\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"is_list 'Hello'          #=> true\n"
"is_binary \"Hello\"        #=> true\n"
"is_binary <<\"Hello\">>    #=> true\n"
"<<\"Hello\">> === \"Hello\"  #=> true\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"kw = [another_key: 20, key: 10]\n"
"kw[:another_key]\n"
"#=> 20\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"list = [1, 2, 3]\n"
"Enum.map list, fn(x) -> x * 2 end\n"
"#=> [2, 4, 6]"
msgstr ""

msgid ""
"```elixir\n"
"map = %{:key => 0}\n"
"map = %{map | :key => 1}\n"
"%{:key => value} = map\n"
"value === 1\n"
"#=> true\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"map = %{key: 0}\n"
"map = %{map | key: 1}\n"
"map.key === 1\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"pid = Kernel.self"
msgstr ""

msgid ""
"```elixir\n"
"port = String.to_integer(System.get_env(\"PORT\") || raise \"missing $PORT enviro"
"nment variable\")\n"
"# ...\n"
"{Task, fn -> KVServer.accept(port) end}\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"property \"length/1 is always >= 0\" do\n"
"  check all list <- list_of(term()) do\n"
"    assert length(list) >= 0\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"property \"list does not contain multiples of 4\" do\n"
"  check all list <- list_of(positive_integer()) do\n"
"    refute Enum.any?(list, &(rem(&1, 4) == 0))\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"put_in dungeon, [:rooms, room_id, :users, user_id, :username], \"new username\"\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"put_in dungeon.rooms[room_id].users[user_id].username, \"new username\"\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"query = from w in Weather,\n"
"      where: w.prcp > 0,\n"
"      where: w.temp < 20,\n"
"     select: w\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"quote do: hello(\"world\")\n"
"{ :hello, [], [\"world\"] }\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"quote line: __ENV__.line, do: hello(\"world\")\n"
"{ :hello, [line: 9], [\"world\"] }\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"require Logger"
msgstr ""

msgid ""
"```elixir\n"
"require Logger\n"
"Logger.debug \"hello\"\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"round(number) :: integer\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"saudação = \"Bom dia!\"\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"setup do\n"
"  registry = start_supervised!(KV.Registry)\n"
"  %{registry: registry}\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"socket |> read_line() |> write_line(socket)\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"sum = fn(a, b) -> a + b end\n"
"sum.(4, 3)\n"
"#=> 7"
msgstr ""

msgid ""
"```elixir\n"
"sum_list [1, 2, 3], 0\n"
"sum_list [2, 3], 1\n"
"sum_list [3], 3\n"
"sum_list [], 6\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"task = Task.async(fn -> compute_something_expensive end)\n"
"res  = compute_something_else()\n"
"res + Task.await(task)\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"test \"length/1 calculates the length of a list\" do\n"
"  assert length([]) == 0\n"
"  assert length([:one]) == 1\n"
"  assert length([1, 2, 3]) == 3\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"test \"removes bucket on crash\", %{registry: registry} do\n"
"  KV.Registry.create(registry, \"shopping\")\n"
"  {:ok, bucket} = KV.Registry.lookup(registry, \"shopping\")"
msgstr ""

msgid ""
"```elixir\n"
"test \"removes buckets on exit\", %{registry: registry} do\n"
"  KV.Registry.create(registry, \"shopping\")\n"
"  {:ok, bucket} = KV.Registry.lookup(registry, \"shopping\")\n"
"  Agent.stop(bucket)\n"
"  assert KV.Registry.lookup(registry, \"shopping\") == :error\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"test \"spawns buckets\", %{registry: registry} do\n"
"  assert KV.Registry.lookup(registry, \"shopping\") == :error"
msgstr ""

msgid ""
"```elixir\n"
"test \"stores values by key\", %{bucket: bucket} do\n"
"  # `bucket` is now the bucket from the setup block\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"test \"こんにちは世界\" do\n"
"  assert :こんにちは世界\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"test_fun = fn(x) ->\n"
"  cond do\n"
"    x > 10 ->\n"
"      :greater_than_ten\n"
"    x < 10 and x > 0 ->\n"
"      :less_than_ten_positive\n"
"    x < 0 or x === 0 ->\n"
"      :zero_or_negative\n"
"    true ->\n"
"      :exactly_ten\n"
"  end\n"
"end"
msgstr ""

msgid ""
"```elixir\n"
"try do\n"
"  ... something that may fail ...\n"
"rescue\n"
"  exception ->\n"
"    log(exception, System.stacktrace())\n"
"    reraise(exception, System.stacktrace())\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"try do\n"
"  ... something that may fail ...\n"
"rescue\n"
"  exception ->\n"
"    log(exception, __STACKTRACE__)\n"
"    reraise(exception, __STACKTRACE__)\n"
"end\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"update_in dungeon.rooms[room_id].users[user_id].device_codes, &Set.delete(&1, "
"code)\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"with {:ok, contents} <- File.read(\"my_file.ex\"),\n"
"     {res, binding} <- Code.eval_string(contents),\n"
"     do: {:ok, res}\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"write_line(read_line(socket), socket)\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"x = 2; y = 3\n"
"x + y\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"{ :suspended, n_, cont } = Enumerable.reduce(1..5, { :cont, 0 }, fn x, n ->\n"
"  if x == 3 do\n"
"    { :suspend, n }\n"
"  else\n"
"    { :cont, n + x }\n"
"  end\n"
"end)\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"{:ok, a} = GenStage.start_link(A, 0)     # starting from zero\n"
"{:ok, b} = GenStage.start_link(B, 2)     # multiply by 2"
msgstr ""

msgid ""
"```elixir\n"
"{:ok, a} = GenStage.start_link(A, 0)    # starting from zero\n"
"{:ok, b} = GenStage.start_link(B, 2)    # multiply by 2\n"
"{:ok, c} = GenStage.start_link(C, 1000) # sleep for a second"
msgstr ""

msgid ""
"```elixir\n"
"{:ok, body} = File.read(file)\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"{:ok, bucket} = KV.Registry.lookup(registry, \"shopping\")\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"{:ok, pid} = KV.Bucket.start_link([])\n"
"ref = Process.monitor(pid)\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"{:sum, [], [1, 2, 3]}\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"{:x, [line: 3], nil}\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"{Task.Supervisor, name: KV.RouterTasks},\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"{atom | tuple, list, list | atom}\n"
"```"
msgstr ""

msgid ""
"```erl\n"
"Eshell V5.9  (abort with ^G)\n"
"1> X = 10.\n"
"10\n"
"2> X = X + 1.\n"
"** exception error: no match of right hand side value 11\n"
"3> X1 = X + 1.\n"
"11\n"
"4> f(X).\n"
"ok\n"
"5> X = X1 * X1.\n"
"121\n"
"6> f().\n"
"ok\n"
"7> X.\n"
"* 1: variable 'X' is unbound\n"
"8> X1.\n"
"* 1: variable 'X1' is unbound\n"
"```"
msgstr ""

msgid ""
"```erl\n"
"Eshell V5.9  (abort with ^G)\n"
"1> c(math).\n"
"{ok,math}\n"
"2> lists:map(fun math:square/1, [1, 2, 3]).\n"
"[1,4,9]\n"
"```"
msgstr ""

msgid ""
"```erl\n"
"Eshell V5.9  (abort with ^G)\n"
"1> c(module_name).\n"
"ok\n"
"1> module_name:hello().\n"
"Hello world!\n"
"ok\n"
"```"
msgstr ""

msgid ""
"```erlang\n"
"% A tuple\n"
"Tuple = { 1, 2, 3 }."
msgstr ""

msgid ""
"```erlang\n"
"% math.erl\n"
"-module(math).\n"
"-export([square/1])."
msgstr ""

msgid ""
"```erlang\n"
"% module_name.erl\n"
"-module(module_name).  % you may use some other name\n"
"-compile(export_all)."
msgstr ""

msgid ""
"```erlang\n"
"-module(bstring).\n"
"-export([downcase/1])."
msgstr ""

msgid ""
"```erlang\n"
"-module(hello_module).\n"
"-export([some_fun/0, some_fun/1])."
msgstr ""

msgid ""
"```erlang\n"
"F = fun(Tuple = {a, b}) ->\n"
"        io:format(\"All your ~p are belong to us~n\", [Tuple]);\n"
"        ([]) ->\n"
"        \"Empty\"\n"
"    end."
msgstr ""

msgid ""
"```erlang\n"
"Map = #{key => 0}.\n"
"Updated = Map#{key := 1}.\n"
"#{key := Value} = Updated.\n"
"Value =:= 1.\n"
"%=> true\n"
"```"
msgstr ""

msgid ""
"```erlang\n"
"Pid = self()."
msgstr ""

msgid ""
"```erlang\n"
"Proplist = [{another_key, 20}, {key, 10}].\n"
"proplists:get_value(another_key, Proplist).\n"
"%=> 20\n"
"```"
msgstr ""

msgid ""
"```erlang\n"
"Sum = fun(A, B) -> A + B end.\n"
"Sum(4, 3).\n"
"%=> 7"
msgstr ""

msgid ""
"```erlang\n"
"Test_fun = fun (X) ->\n"
"  if X > 10 ->\n"
"       greater_than_ten;\n"
"     X < 10, X > 0 ->\n"
"       less_than_ten_positive;\n"
"     X < 0; X =:= 0 ->\n"
"       zero_or_negative;\n"
"     true ->\n"
"       exactly_ten\n"
"  end\n"
"end."
msgstr ""

msgid ""
"```erlang\n"
"X = 2, Y = 3.\n"
"X + Y.\n"
"```"
msgstr ""

msgid ""
"```erlang\n"
"case {X, Y} of\n"
"  {a, b} -> ok;\n"
"  {b, c} -> good;\n"
"  Else -> Else\n"
"end\n"
"```"
msgstr ""

msgid ""
"```erlang\n"
"element(1, {a, b, c}).       %=> a\n"
"setelement(1, {a, b, c}, d). %=> {d, b, c}\n"
"```"
msgstr ""

msgid ""
"```erlang\n"
"im_an_atom.\n"
"me_too."
msgstr ""

msgid ""
"```erlang\n"
"is_atom(ok).                %=> true\n"
"is_atom('0_ok').            %=> true\n"
"is_atom('Multiple words').  %=> true\n"
"is_atom('').                %=> true\n"
"```"
msgstr ""

msgid ""
"```erlang\n"
"is_list('Hello').        %=> false\n"
"is_list(\"Hello\").        %=> true\n"
"is_binary(<<\"Hello\">>).  %=> true\n"
"```"
msgstr ""

msgid ""
"```erlang\n"
"lists:last([1, 2]).\n"
"```"
msgstr ""

msgid ""
"```erlang\n"
"loop_through([H | T]) ->\n"
"  io:format('~p~n', [H]),\n"
"  loop_through(T);"
msgstr ""

msgid ""
"```erlang\n"
"sum() -> 0.\n"
"sum(A) -> A.\n"
"sum(A, B) -> A + B.\n"
"sum(A, B, C) -> A + B + C.\n"
"```"
msgstr ""

msgid ""
"```erlang\n"
"sum(A, B) when is_integer(A), is_integer(B) ->\n"
"  A + B;"
msgstr ""

msgid ""
"```erlang\n"
"{ ok, Pattern } = re:compile(\"abc\\\\s\").\n"
"re:run(\"abc \", Pattern).\n"
"%=> { match, [\"abc \"] }\n"
"```"
msgstr ""

msgid ""
"```erlang\n"
"{application,kv,\n"
"             [{applications,[kernel,stdlib,elixir,logger]},\n"
"              {description,\"kv\"},\n"
"              {modules,['Elixir.KV','Elixir.KV.Bucket','Elixir.KV.Registry',\n"
"                        'Elixir.KV.Supervisor']},\n"
"              {registered,[]},\n"
"              {vsn,\"0.1.0\"},\n"
"              {extra_applications,[logger]}]}.\n"
"```"
msgstr ""

msgid ""
"```erlang\n"
"{lib_dirs, [\n"
"  \"deps/elixir/lib\"\n"
"]}.\n"
"```"
msgstr ""

msgid ""
"```html\n"
"<div id=\"toc\"></div>\n"
"```"
msgstr ""

msgid ""
"```html\n"
"<script type=\"text/javascript\">\n"
"$(document).ready(function() {\n"
"    $('#toc').toc();\n"
"});\n"
"</script>\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"# A regular expression that matches strings which contain \"foo\" or \"bar\":\n"
"iex> regex = ~r/foo|bar/\n"
"~r/foo|bar/\n"
"iex> \"foo\" =~ regex\n"
"true\n"
"iex> \"bat\" =~ regex\n"
"false\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"# or\n"
"iex> 1 || true\n"
"1\n"
"iex> false || 11\n"
"11"
msgstr ""

msgid ""
"```iex\n"
"$ iex -S mix\n"
"iex(1)> :debugger.start()\n"
"{:ok, #PID<0.87.0>}\n"
"iex(2)> :int.ni(Example)\n"
"{:module, Example}\n"
"iex(3)> :int.break(Example, 3)\n"
":ok\n"
"iex(4)> Example.double_sum(1,2)\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"$ iex -S mix\n"
"iex(1)> :observer.start()\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"Erlang/OTP 19 [erts-8.1] [source] [64-bit] [smp:4:4] [async-threads:10] [hipe]"
" [kernel-poll:false] [dtrace]"
msgstr ""

msgid ""
"```iex\n"
"Interactive Elixir\n"
"iex> c(\"module_name.ex\")\n"
"[ModuleName]\n"
"iex> ModuleName.hello\n"
"Hello world!\n"
":ok\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex(1)> KV.Registry.child_spec([])\n"
"%{\n"
"  id: KV.Registry,\n"
"  restart: :permanent,\n"
"  shutdown: 5000,\n"
"  start: {KV.Registry, :start_link, [[]]},\n"
"  type: :worker\n"
"}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex(1)> Task.start fn -> raise \"oops\" end\n"
"{:ok, #PID<0.55.0>}"
msgstr ""

msgid ""
"```iex\n"
"iex>  is_binary(<<1 :: size(16)>>)\n"
"true\n"
"iex>  is_binary(<<1 :: size(15)>>)\n"
"false\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> \"HELLO\" =~ ~r/hello/\n"
"false\n"
"iex> \"HELLO\" =~ ~r/hello/i\n"
"true\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> \"age: #{25}\"\n"
"\"age: 25\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> \"foo\" <> \"bar\"\n"
"\"foobar\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> \"he\" <> rest = \"hello\"\n"
"\"hello\"\n"
"iex> rest\n"
"\"llo\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> \"hello\n"
"...> world\"\n"
"\"hello\n"
"world\"\n"
"iex> \"hello\n"
"world\"\n"
"\"hello\n"
"world\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> \"hellö #{:world}\"\n"
"\"hellö world\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> \"hellö\"\n"
"\"hellö\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> \"hełło\" <> <<0>>\n"
"<<104, 101, 197, 130, 197, 130, 111, 0>>\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> \"tuple: #{inspect tuple}\"\n"
"\"tuple: {1, 2, 3}\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> %User{name: name} = john\n"
"%User{age: 27, name: \"John\"}\n"
"iex> name\n"
"\"John\"\n"
"iex> %User{} = %{}\n"
"** (MatchError) no match of right hand side value: %{}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> %User{oops: :field}\n"
"** (KeyError) key :oops not found in: %User{age: 27, name: \"John\"}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> %User{}\n"
"%User{age: 27, name: \"John\"}\n"
"iex> %User{name: \"Jane\"}\n"
"%User{age: 27, name: \"Jane\"}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> %{ user | address: [] }\n"
"** (ArgumentError) argument error\n"
"     :maps.update(:address, [], %{})\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> %{\"hello\" => world} = map\n"
"%{\"hello\" => :world}\n"
"iex> world\n"
":world\n"
"iex> %{} = map\n"
"%{\"hello\" => :world}\n"
"iex> %{\"other\" => value} = map\n"
"** (MatchError) no match of right hand side value\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> %{} = %{:a => 1, 2 => :b}\n"
"%{2 => :b, :a => 1}\n"
"iex> %{:a => a} = %{:a => 1, 2 => :b}\n"
"%{2 => :b, :a => 1}\n"
"iex> a\n"
"1\n"
"iex> %{:c => c} = %{:a => 1, 2 => :b}\n"
"** (MatchError) no match of right hand side value: %{2 => :b, :a => 1}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> &is_function/1\n"
"&:erlang.is_function/1\n"
"iex> (&is_function/1).(fun)\n"
"true\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> 'hello' == \"hello\"\n"
"false\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> 'hełło'\n"
"[104, 101, 322, 322, 111]\n"
"iex> is_list 'hełło'\n"
"true\n"
"iex> 'hello'\n"
"'hello'\n"
"iex> List.first('hello')\n"
"104\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> 'this ' <> 'fails'\n"
"** (CompileError) iex:2: invalid literal 'this ' in <<>>\n"
"    (elixir) src/elixir_bitstring.erl:19: :elixir_bitstring.expand/6\n"
"    (elixir) src/elixir_bitstring.erl:12: :elixir_bitstring.expand/4\n"
"    (elixir) expanding macro: Kernel.<>/2\n"
"    iex:2: (file)\n"
"iex> 'this ' ++ 'works'\n"
"'this works'\n"
"iex> \"he\" ++ \"llo\"\n"
"** (ArgumentError) argument error\n"
"    :erlang.++(\"he\", \"llo\")\n"
"iex> \"he\" <> \"llo\"\n"
"\"hello\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> 0b1010\n"
"10\n"
"iex> 0o777\n"
"511\n"
"iex> 0x1F\n"
"31\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> 1          # integer\n"
"iex> 0x1F       # integer\n"
"iex> 1.0        # float\n"
"iex> true       # boolean\n"
"iex> :atom      # atom / symbol\n"
"iex> \"elixir\"   # string\n"
"iex> [1, 2, 3]  # list\n"
"iex> {1, 2, 3}  # tuple\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> 1 + 2\n"
"3\n"
"iex> 5 * 5\n"
"25\n"
"iex> 10 / 2\n"
"5.0\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> 1 < :atom\n"
"true\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> 1 = unknown\n"
"** (CompileError) iex:1: undefined function unknown/0\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> 1 = x\n"
"1\n"
"iex> 2 = x\n"
"** (MatchError) no match of right hand side value: 1\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> 1 == 1\n"
"true\n"
"iex> 1 != 2\n"
"true\n"
"iex> 1 < 2\n"
"true\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> 1 == 1.0\n"
"true\n"
"iex> 1 === 1.0\n"
"false\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> 1 and true\n"
"** (BadBooleanError) expected a boolean on left-side of \"and\", got: 1\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> 1..100_000 |> Stream.map(&(&1 * 3))\n"
"#Stream<[enum: 1..100000, funs: [#Function<34.16982430/1 in Stream.map/2>]]>\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> 1..100_000 |> Stream.map(&(&1 * 3)) |> Stream.filter(odd?)\n"
"#Stream<[enum: 1..100000, funs: [...]]>\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> 1..100_000 |> Stream.map(&(&1 * 3)) |> Stream.filter(odd?) |> Enum.sum\n"
"7500000000\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> 1.0\n"
"1.0\n"
"iex> 1.0e-10\n"
"1.0e-10\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> :ets.new(:buckets_registry, [:named_table])\n"
":buckets_registry\n"
"iex> :ets.insert(:buckets_registry, {\"foo\", self()})\n"
"true\n"
"iex> :ets.lookup(:buckets_registry, \"foo\")\n"
"[{\"foo\", #PID<0.41.0>}]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> :foo + 1\n"
"** (ArithmeticError) bad argument in arithmetic expression\n"
"     :erlang.+(:foo, 1)\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> :hello\n"
":hello\n"
"iex> :hello == :world\n"
"false\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> :io.format(\"Pi is approximately given by:~10.3f~n\", [:math.pi])\n"
"Pi is approximately given by:     3.142\n"
":ok\n"
"iex> to_string :io_lib.format(\"Pi is approximately given by:~10.3f~n\", [:math."
"pi])\n"
"\"Pi is approximately given by:     3.142\n"
"\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> :lists.flatten([1, [2], 3])\n"
"[1, 2, 3]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> :observer.start\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> :rand.uniform()\n"
"0.8175669086010815\n"
"iex> _ = :rand.seed(:exs1024, {123, 123534, 345345})\n"
"iex> :rand.uniform()\n"
"0.5820506340260994\n"
"iex> :rand.uniform(6)\n"
"6\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> :zip.foldl(fn _, _, _, acc -> acc + 1 end, 0, :binary.bin_to_list(\"file.z"
"ip\"))\n"
"{:ok, 633}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> <<0, 1, 2, 3>>\n"
"<<0, 1, 2, 3>>\n"
"iex> byte_size(<<0, 1, 2, 3>>)\n"
"4\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> <<0, 1, x :: binary>> = <<0, 1, 2, 3>>\n"
"<<0, 1, 2, 3>>\n"
"iex> x\n"
"<<2, 3>>\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> <<0, 1, x>> = <<0, 1, 2>>\n"
"<<0, 1, 2>>\n"
"iex> x\n"
"2\n"
"iex> <<0, 1, x>> = <<0, 1, 2, 3>>\n"
"** (MatchError) no match of right hand side value: <<0, 1, 2, 3>>\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> <<0, 1>> <> <<2, 3>>\n"
"<<0, 1, 2, 3>>\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> <<1 :: size(1)>>\n"
"<<1::size(1)>>\n"
"iex> <<2 :: size(1)>> # truncated\n"
"<<0::size(1)>>\n"
"iex> is_binary(<<1 :: size(1)>>)\n"
"false\n"
"iex> is_bitstring(<<1 :: size(1)>>)\n"
"true\n"
"iex> bit_size(<< 1 :: size(1)>>)\n"
"1\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> <<255>>\n"
"<<255>>\n"
"iex> <<256>> # truncated\n"
"<<0>>\n"
"iex> <<256 :: size(16)>> # use 16 bits (2 bytes) to store the number\n"
"<<1, 0>>\n"
"iex> <<256 :: utf8>> # the number is a code point\n"
"\"Ā\"\n"
"iex> <<256 :: utf8, 0>>\n"
"<<196, 128, 0>>\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> ?a\n"
"97\n"
"iex> ?ł\n"
"322\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> Agent.start_link(fn -> %{} end, name: :shopping)\n"
"{:ok, #PID<0.43.0>}\n"
"iex> KV.Bucket.put(:shopping, \"milk\", 1)\n"
":ok\n"
"iex> KV.Bucket.get(:shopping, \"milk\")\n"
"1\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> Application.ensure_all_started(:kv)\n"
"{:ok, [:logger, :kv]}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> Application.start(:kv)\n"
":ok\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> Application.start(:kv)\n"
"{:error, {:already_started, :kv}}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> Application.start(:kv)\n"
"{:error, {:not_started, :logger}}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> Application.stop(:kv)\n"
":ok\n"
"iex> Application.stop(:logger)\n"
":ok\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> Base.encode16(:crypto.hash(:sha256, \"Elixir\"))\n"
"\"3315715A7A3AD57428298676C5AE465DADA38D951BDFAC9348A8A31E9C7401CB\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> Concat.join \"Hello\", \"world\"\n"
"***First join\n"
"\"Helloworld\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> Concat.join \"Hello\", \"world\", \"_\"\n"
"***Second join\n"
"\"Hello_world\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> DefaultTest.dowork\n"
"\"hello\"\n"
"iex> DefaultTest.dowork 123\n"
"123\n"
"iex> DefaultTest.dowork\n"
"\"hello\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> Enum.find -50..50, &(rem(&1, 13) == 0)\n"
"-39\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> Enum.map [1, 2, 3], fn(x) -> x * 2 end\n"
"[2, 4, 6]\n"
"iex> Enum.reduce 1..3, 0, fn(x, acc) -> x + acc end\n"
"6\n"
"```\n"
"Another useful example is the `String.Chars` protocol, which specifies how to "
"convert a data structure with characters to a string. It's exposed via the `to"
"_string` function:"
msgstr ""

msgid ""
"```iex\n"
"iex> Enum.map(1..3, fn x -> x * 2 end)\n"
"[2, 4, 6]\n"
"iex> Enum.reduce(1..3, 0, &+/2)\n"
"6\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> Enum.map([1, 2, 3], fn x -> x * 2 end)\n"
"[2, 4, 6]\n"
"iex> Enum.map(%{1 => 2, 3 => 4}, fn {k, v} -> k * v end)\n"
"[2, 12]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> Enum.reduce([1, 2, 3], 0, &+/2)\n"
"6\n"
"iex> Enum.map([1, 2, 3], &(&1 * 2))\n"
"[2, 4, 6]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> Enum.reduce([1, 2, 3], 0, fn(x, acc) -> x + acc end)\n"
"6\n"
"iex> Enum.map([1, 2, 3], fn(x) -> x * 2 end)\n"
"[2, 4, 6]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> Enum.sum(Enum.filter(Enum.map(1..100_000, &(&1 * 3)), odd?))\n"
"7500000000\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> File.read \"hello\"\n"
"{:error, :enoent}\n"
"iex> File.write \"hello\", \"world\"\n"
":ok\n"
"iex> File.read \"hello\"\n"
"{:ok, \"world\"}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> File.read \"hello\"\n"
"{:ok, \"world\"}\n"
"iex> File.read! \"hello\"\n"
"\"world\"\n"
"iex> File.read \"unknown\"\n"
"{:error, :enoent}\n"
"iex> File.read! \"unknown\"\n"
"** (File.Error) could not read file \"unknown\": no such file or directory\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> File.read! \"unknown\"\n"
"** (File.Error) could not read file unknown: no such file or directory\n"
"    (elixir) lib/file.ex:272: File.read!/1\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> File.read(\"path/to/existing/file\")\n"
"{:ok, \"... contents ...\"}\n"
"iex> File.read(\"path/to/unknown/file\")\n"
"{:error, :enoent}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> Hello.world\n"
"** (UndefinedFunctionError) undefined function: Hello.world/0\n"
"    Hello.world()\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> IO.puts \"hello\n"
"world\"\n"
"hello\n"
"world\n"
":ok\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> IO.puts \"hello world\"\n"
"hello world\n"
":ok\n"
"iex> IO.gets \"yes or no? \"\n"
"yes or no? yes\n"
"\"yes\n"
"\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> IO.puts 'hello world'\n"
"hello world\n"
":ok\n"
"iex> IO.puts ['hello', ?\\s, \"world\"]\n"
"hello world\n"
":ok\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> IO.puts :stderr, \"hello world\"\n"
"hello world\n"
":ok\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> IO.puts :stdio, \"hello\"\n"
"hello\n"
":ok\n"
"iex> IO.puts Process.group_leader, \"hello\"\n"
"hello\n"
":ok\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> Integer.is_odd(3)\n"
"** (UndefinedFunctionError) function Integer.is_odd/1 is undefined or private."
" However there is a macro with the same name and arity. Be sure to require Int"
"eger if you intend to invoke this macro\n"
"iex> require Integer\n"
"Integer\n"
"iex> Integer.is_odd(3)\n"
"true\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> KV.Registry.create(KV.Registry, \"shopping\")\n"
":ok\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> KV.Registry.create(KV.Registry, \"shopping\")\n"
":ok\n"
"iex> KV.Registry.lookup(KV.Registry, \"shopping\")\n"
"{:ok, #PID<0.88.0>}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> KV.Supervisor.start_link([])\n"
"{:ok, #PID<0.66.0>}\n"
"iex> KV.Registry.create(KV.Registry, \"shopping\")\n"
":ok\n"
"iex> KV.Registry.lookup(KV.Registry, \"shopping\")\n"
"{:ok, #PID<0.70.0>}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> KVServer.Command.parse(\"UNKNOWN shopping eggs\n"
"\")\n"
"{:error, :unknown_command}"
msgstr ""

msgid ""
"```iex\n"
"iex> KVServer.Command.parse(\"UNKNOWN shopping eggs\n"
"\")\n"
"{:error, :unknown_command}\n"
"iex> KVServer.Command.parse(\"GET shopping\n"
"\")\n"
"{:error, :unknown_command}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> KVServer.accept(4040)\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> Macro.to_string(quote do: sum(1, 2 + 3, 4))\n"
"\"sum(1, 2 + 3, 4)\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> Map.get(%{:a => 1, 2 => :b}, :a)\n"
"1\n"
"iex> Map.put(%{:a => 1, 2 => :b}, :c, 3)\n"
"%{2 => :b, :a => 1, :c => 3}\n"
"iex> Map.to_list(%{:a => 1, 2 => :b})\n"
"[{2, :b}, {:a, 1}]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> Math.double_each([1, 2, 3]) #=> [2, 4, 6]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> Math.sum(1, 2)\n"
"3\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> Math.zero?(0)\n"
"true\n"
"iex> fun = &Math.zero?/1\n"
"&Math.zero?/1\n"
"iex> is_function(fun)\n"
"true\n"
"iex> fun.(0)\n"
"true\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> MyTest.\"test hello\"()\n"
"** (MatchError) no match of right hand side value: \"world\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> Node.spawn_link :\"foo@computer-name\", fn -> Hello.world end\n"
"#PID<9014.59.0>\n"
"hello world\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> Path.join(\"foo\", \"bar\")\n"
"\"foo/bar\"\n"
"iex> Path.expand(\"~/hello\")\n"
"\"/Users/jose/hello\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> Process.register(pid, :kv)\n"
"true\n"
"iex> send :kv, {:get, :hello, self()}\n"
"{:get, :hello, #PID<0.41.0>}\n"
"iex> flush()\n"
":world\n"
":ok\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> Registry.start_link(:unique, MyRegistry)\n"
"iex> {:ok, _} = Registry.register(MyRegistry, \"hello\", 1)\n"
"iex> Registry.lookup(MyRegistry, \"hello\")\n"
"[{self(), 1}]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> Size.size(\"foo\")\n"
"3\n"
"iex> Size.size({:ok, \"hello\"})\n"
"2\n"
"iex> Size.size(%{label: \"some label\"})\n"
"1\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> Size.size(%{})\n"
"0\n"
"iex> set = %MapSet{} = MapSet.new\n"
"#MapSet<[]>\n"
"iex> Size.size(set)\n"
"** (Protocol.UndefinedError) protocol Size not implemented for #MapSet<[]>\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> Size.size([1, 2, 3])\n"
"** (Protocol.UndefinedError) protocol Size not implemented for [1, 2, 3]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> String.codepoints(\"hełło\")\n"
"[\"h\", \"e\", \"ł\", \"ł\", \"o\"]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> String.length(\"hello\")\n"
"5\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> String.length(\"hellö\")\n"
"5\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> String.to_charlist \"Ø\"\n"
"[216]\n"
"iex> :binary.bin_to_list \"Ø\"\n"
"[195, 152]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> String.upcase(\"hellö\")\n"
"\"HELLÖ\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> String.valid?(<<239, 191, 19>>)\n"
"false\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> [1, 2, 3] ++ [4, 5, 6]\n"
"[1, 2, 3, 4, 5, 6]\n"
"iex> [1, 2, 3] -- [2]\n"
"[1, 3]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> [1, 2, 3] ++ [4, 5, 6]\n"
"[1, 2, 3, 4, 5, 6]\n"
"iex> [1, true, 2, false, 3, true] -- [true, false]\n"
"[1, 2, 3, true]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> [1, 2, true, 3]\n"
"[1, 2, true, 3]\n"
"iex> length [1, 2, 3]\n"
"3\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> [11, 12, 13]\n"
"'\\v\\f'\n"
"iex> [104, 101, 108, 108, 111]\n"
"'hello'\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> [a, b, c] = [1, 2, 3]\n"
"[1, 2, 3]\n"
"iex> a\n"
"1\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> [a: a] = [a: 1]\n"
"[a: 1]\n"
"iex> a\n"
"1\n"
"iex> [a: a] = [a: 1, b: 2]\n"
"** (MatchError) no match of right hand side value: [a: 1, b: 2]\n"
"iex> [b: b, a: a] = [a: 1, b: 2]\n"
"** (MatchError) no match of right hand side value: [a: 1, b: 2]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> [h | _] = [1, 2, 3]\n"
"[1, 2, 3]\n"
"iex> h\n"
"1\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> [h | t] = []\n"
"** (MatchError) no match of right hand side value: []\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> [head | tail] = [1, 2, 3]\n"
"[1, 2, 3]\n"
"iex> head\n"
"1\n"
"iex> tail\n"
"[2, 3]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> _\n"
"** (CompileError) iex:1: invalid use of _. \"_\" represents a value to be ignore"
"d in a pattern and cannot be used in expressions\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> __ENV__.module\n"
"nil\n"
"iex> __ENV__.file\n"
"\"iex\"\n"
"iex> __ENV__.requires\n"
"[IEx.Helpers, Kernel, Kernel.Typespec]\n"
"iex> require Integer\n"
"nil\n"
"iex> __ENV__.requires\n"
"[IEx.Helpers, Integer, Kernel, Kernel.Typespec]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> a = 1\n"
"1\n"
"iex> a = 2\n"
"2\n"
"iex> ^a = 3\n"
"** (MatchError) no match of right hand side value: 3\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> add = fn a, b -> a + b end\n"
"#Function<12.71889879/2 in :erl_eval.expr/5>\n"
"iex> add.(1, 2)\n"
"3\n"
"iex> is_function(add)\n"
"true\n"
"iex> is_function(add, 2) # check if add is a function that expects exactly 2 a"
"rguments\n"
"true\n"
"iex> is_function(add, 1) # check if add is a function that expects exactly 1 a"
"rgument\n"
"false\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> angle_45_deg = :math.pi() * 45.0 / 180.0\n"
"iex> :math.sin(angle_45_deg)\n"
"0.7071067811865475\n"
"iex> :math.exp(55.0)\n"
"7.694785265142018e23\n"
"iex> :math.log(7.694785265142018e23)\n"
"55.0\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> byte_size(\"hellö\")\n"
"6\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> case :ok do\n"
"...>   :error -> \"Won't match\"\n"
"...> end\n"
"** (CaseClauseError) no case clause matching: :ok\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> case File.read \"hello\" do\n"
"...>   {:ok, body}      -> IO.puts \"Success: #{body}\"\n"
"...>   {:error, reason} -> IO.puts \"Error: #{reason}\"\n"
"...> end\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> case {1, 2, 3} do\n"
"...>   {1, x, 3} when x > 0 ->\n"
"...>     \"Will match\"\n"
"...>   _ ->\n"
"...>     \"Would match, if guard condition were not satisfied\"\n"
"...> end\n"
"\"Will match\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> case {1, 2, 3} do\n"
"...>   {4, 5, 6} ->\n"
"...>     \"This clause won't match\"\n"
"...>   {1, x, 3} ->\n"
"...>     \"This clause will match and bind x to 2 in this clause\"\n"
"...>   _ ->\n"
"...>     \"This clause would match any value\"\n"
"...> end\n"
"\"This clause will match and bind x to 2 in this clause\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> cond do\n"
"...>   2 + 2 == 5 ->\n"
"...>     \"This is never true\"\n"
"...>   2 * 2 == 3 ->\n"
"...>     \"Nor this\"\n"
"...>   true ->\n"
"...>     \"This is always true (equivalent to else)\"\n"
"...> end\n"
"\"This is always true (equivalent to else)\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> cond do\n"
"...>   2 + 2 == 5 ->\n"
"...>     \"This will not be true\"\n"
"...>   2 * 2 == 3 ->\n"
"...>     \"Nor this\"\n"
"...>   1 + 1 == 2 ->\n"
"...>     \"But this will\"\n"
"...> end\n"
"\"But this will\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> cond do\n"
"...>   hd([1, 2, 3]) ->\n"
"...>     \"1 is considered as true\"\n"
"...> end\n"
"\"1 is considered as true\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> defmodule Car do\n"
"...>   @enforce_keys [:make]\n"
"...>   defstruct [:model, :make]\n"
"...> end\n"
"iex> %Car{}\n"
"** (ArgumentError) the following keys must also be given when building struct "
"Car: [:make]\n"
"    expanding struct: Car.__struct__/1\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> defmodule Hello do\n"
"...>   def world, do: IO.puts \"hello world\"\n"
"...> end\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> defmodule Math do\n"
"...>   def sum(a, b) do\n"
"...>     a + b\n"
"...>   end\n"
"...> end"
msgstr ""

msgid ""
"```iex\n"
"iex> defmodule MyError do\n"
"iex>   defexception message: \"default message\"\n"
"iex> end\n"
"iex> raise MyError\n"
"** (MyError) default message\n"
"iex> raise MyError, message: \"custom message\"\n"
"** (MyError) custom message\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> defmodule MySigils do\n"
"...>   def sigil_i(string, []), do: String.to_integer(string)\n"
"...>   def sigil_i(string, [?n]), do: -String.to_integer(string)\n"
"...> end\n"
"iex> import MySigils\n"
"iex> ~i(13)\n"
"13\n"
"iex> ~i(42)n\n"
"-42\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> defmodule MyTest do\n"
"...>   use TestCase\n"
"...>\n"
"...>   test \"hello\" do\n"
"...>     \"hello\" = \"world\"\n"
"...>   end\n"
"...> end\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> defmodule MyTest do\n"
"...>   use TestCase\n"
"...>\n"
"...>   test \"hello\" do\n"
"...>     \"hello\" = \"world\"\n"
"...>   end\n"
"...> end\n"
"iex> MyTest.run\n"
"Running test hello\n"
"** (MatchError) no match of right hand side value: \"world\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> defmodule Product do\n"
"...>   defstruct [:name]\n"
"...> end\n"
"iex> %Product{}\n"
"%Product{name: nil}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> defmodule RunAfter do\n"
"...>   def without_even_trying do\n"
"...>     raise \"oops\"\n"
"...>   after\n"
"...>     IO.puts \"cleaning up!\"\n"
"...>   end\n"
"...> end\n"
"iex> RunAfter.without_even_trying\n"
"cleaning up!\n"
"** (RuntimeError) oops\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> defmodule Sample do\n"
"...>  def four, do: two + two\n"
"...>  defmacrop two, do: 2\n"
"...> end\n"
"** (CompileError) iex:2: function two/0 undefined\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> defmodule User do\n"
"...>   defstruct name: \"John\", age: 27\n"
"...> end\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> digraph = :digraph.new()\n"
"iex> coords = [{0.0, 0.0}, {1.0, 0.0}, {1.0, 1.0}]\n"
"iex> [v0, v1, v2] = (for c <- coords, do: :digraph.add_vertex(digraph, c))\n"
"iex> :digraph.add_edge(digraph, v0, v1)\n"
"iex> :digraph.add_edge(digraph, v1, v2)\n"
"iex> :digraph.get_short_path(digraph, v0, v2)\n"
"[{0.0, 0.0}, {1.0, 0.0}, {1.0, 1.0}]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> div(10, 2)\n"
"5\n"
"iex> div 10, 2\n"
"5\n"
"iex> rem 10, 3\n"
"1\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> double = fn a -> add.(a, a) end\n"
"#Function<6.71889879/1 in :erl_eval.expr/5>\n"
"iex> double.(2)\n"
"4\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> expr = quote do: Unless.macro_unless(true, do: IO.puts \"this should never"
" be printed\")\n"
"iex> res  = Macro.expand_once(expr, __ENV__)\n"
"iex> IO.puts Macro.to_string(res)\n"
"if(!true) do\n"
"  IO.puts(\"this should never be printed\")\n"
"end\n"
":ok\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> f = fn\n"
"...>   x, y when x > 0 -> x + y\n"
"...>   x, y -> x * y\n"
"...> end\n"
"#Function<12.71889879/2 in :erl_eval.expr/5>\n"
"iex> f.(1, 3)\n"
"4\n"
"iex> f.(-1, 3)\n"
"-3\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> f2 = fn\n"
"...>   x, y when x > 0 -> x + y\n"
"...>   x, y, z -> x * y + z\n"
"...> end\n"
"** (CompileError) iex:1: cannot mix clauses with different arities in function"
" definition\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> false and raise(\"This error will never be raised\")\n"
"false\n"
"iex> true or raise(\"This error will never be raised\")\n"
"true\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> for <<c <- \" hello world \">>, c != ?\\s, into: \"\", do: <<c>>\n"
"\"helloworld\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> for i <- [:a, :b, :c], j <- [1, 2], do:  {i, j}\n"
"[a: 1, a: 2, b: 1, b: 2, c: 1, c: 2]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> for n <- 1..4, do: n * n\n"
"[1, 4, 9, 16]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> for n <- [1, 2, 3, 4], do: n * n\n"
"[1, 4, 9, 16]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> for {key, val} <- %{\"a\" => 1, \"b\" => 2}, into: %{}, do: {key, val * val}\n"
"%{\"a\" => 1, \"b\" => 4}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> fun = &(&1 + 1)\n"
"#Function<6.71889879/1 in :erl_eval.expr/5>\n"
"iex> fun.(1)\n"
"2\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> fun = &List.flatten(&1, &2)\n"
"&List.flatten/2\n"
"iex> fun.([1, [[2], 3]], [4, 5])\n"
"[1, 2, 3, 4, 5]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> fun = :hello\n"
"iex> Macro.to_string(quote do: unquote(fun)(:world))\n"
"\"hello(:world)\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> h Math # Access the docs for the module Math\n"
"...\n"
"iex> h Math.sum # Access the docs for the sum function\n"
"...\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> h sigil_r\n"
"...\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> hd []\n"
"** (ArgumentError) argument error\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> hd(1)\n"
"** (ArgumentError) argument error\n"
"iex> case 1 do\n"
"...>   x when hd(x) -> \"Won't match\"\n"
"...>   x -> \"Got #{x}\"\n"
"...> end\n"
"\"Got 1\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> i 'hello'\n"
"Term\n"
"  'hello'\n"
"Data type\n"
"  List\n"
"Description\n"
"  ...\n"
"Raw representation\n"
"  [104, 101, 108, 108, 111]\n"
"Reference modules\n"
"  List\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> if false, do: :this, else: :that\n"
":that\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> if nil do\n"
"...>   \"This won't be seen\"\n"
"...> else\n"
"...>   \"This will\"\n"
"...> end\n"
"\"This will\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> if true do\n"
"...>   \"This works!\"\n"
"...> end\n"
"\"This works!\"\n"
"iex> unless true do\n"
"...>   \"This will never be seen\"\n"
"...> end\n"
"nil\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> if true do\n"
"...>   a = 1 + 2\n"
"...>   a + 10\n"
"...> end\n"
"13\n"
"iex> if true, do: (\n"
"...>   a = 1 + 2\n"
"...>   a + 10\n"
"...> )\n"
"13\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> if true, do: 1 + 2\n"
"3\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> if(false, [do: :this, else: :that])\n"
":that\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> if(false, [{:do, :this}, {:else, :that}])\n"
":that\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> import List, only: [duplicate: 2]\n"
"List\n"
"iex> duplicate :ok, 3\n"
"[:ok, :ok, :ok]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> inner = [3, 4, 5]\n"
"iex> Macro.to_string(quote do: [1, 2, unquote(inner), 6])\n"
"\"[1, 2, [3, 4, 5], 6]\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> inner = [3, 4, 5]\n"
"iex> Macro.to_string(quote do: [1, 2, unquote_splicing(inner), 6])\n"
"\"[1, 2, 3, 4, 5, 6]\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> inspect &(&1+2)\n"
"\"#Function<6.71889879/1 in :erl_eval.expr/5>\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> is_atom(Hello)\n"
"true\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> is_atom(String)\n"
"true\n"
"iex> to_string(String)\n"
"\"Elixir.String\"\n"
"iex> :\"Elixir.String\" == String\n"
"true\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> is_binary(\"hellö\")\n"
"true\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> is_boolean(true)\n"
"true\n"
"iex> is_boolean(1)\n"
"false\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> is_map(john)\n"
"true\n"
"iex> john.__struct__\n"
"User\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> is_number if true do\n"
"...>  1 + 2\n"
"...> end\n"
"** (CompileError) undefined function: is_number/2\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> is_number(if true do\n"
"...>  1 + 2\n"
"...> end)\n"
"true\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> is_number(if true) do\n"
"...>  1 + 2\n"
"...> end\n"
"** (CompileError) undefined function: is_number/2\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> jane = Map.put(%User{}, :name, \"Jane\")\n"
"%User{age: 27, name: \"Jane\"}\n"
"iex> Map.merge(jane, %User{name: \"John\"})\n"
"%User{age: 27, name: \"John\"}\n"
"iex> Map.keys(jane)\n"
"[:__struct__, :age, :name]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> john = %User{}\n"
"%User{age: 27, name: \"John\"}\n"
"iex> john.name\n"
"\"John\"\n"
"iex> jane = %{john | name: \"Jane\"}\n"
"%User{age: 27, name: \"Jane\"}\n"
"iex> %{jane | oops: :field}\n"
"** (KeyError) key :oops not found in: %User{age: 27, name: \"Jane\"}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> john = %User{}\n"
"%User{age: 27, name: \"John\"}\n"
"iex> john[:name]\n"
"** (UndefinedFunctionError) function User.fetch/2 is undefined (User does not "
"implement the Access behaviour)\n"
"             User.fetch(%User{age: 27, name: \"John\"}, :name)\n"
"iex> Enum.each john, fn({field, value}) -> IO.puts(value) end\n"
"** (Protocol.UndefinedError) protocol Enumerable not implemented for %User{age"
": 27, name: \"John\"}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> key = :hello\n"
"iex> value = \"world\"\n"
"iex> %{key => value}\n"
"%{:hello => \"world\"}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> length([1, [2], 3]) = 3\n"
"** (CompileError) iex:1: cannot invoke remote function :erlang.length/1 inside"
" match\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> list ++ [c: 3]\n"
"[a: 1, b: 2, c: 3]\n"
"iex> [a: 0] ++ list\n"
"[a: 0, a: 1, b: 2]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> list = [1, 2, 3]"
msgstr ""

msgid ""
"```iex\n"
"iex> list = [1, 2, 3]\n"
"[1, 2, 3]\n"
"iex> [0 | list]\n"
"[0, 1, 2, 3]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> list = [1, 2, 3]\n"
"iex> hd(list)\n"
"1\n"
"iex> tl(list)\n"
"[2, 3]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> list = [{:a, 1}, {:b, 2}]\n"
"[a: 1, b: 2]\n"
"iex> list == [a: 1, b: 2]\n"
"true\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> map = %{\"hello\" => :world}\n"
"%{\"hello\" => :world}\n"
"iex> map[\"hello\"]\n"
":world\n"
"iex> map[:other]\n"
"nil\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> map = %{:a => 1, 2 => :b}\n"
"%{2 => :b, :a => 1}"
msgstr ""

msgid ""
"```iex\n"
"iex> map = %{:a => 1, 2 => :b}\n"
"%{2 => :b, :a => 1}\n"
"iex> map[:a]\n"
"1\n"
"iex> map[2]\n"
":b\n"
"iex> map[:c]\n"
"nil\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> map = %{a: 1, b: 2}\n"
"%{a: 1, b: 2}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> map = %{a: 1, b: 2}\n"
"%{a: 1, b: 2}\n"
"iex> map[:a]\n"
"1\n"
"iex> %{map | a: 3}\n"
"%{a: 3, b: 2}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> map = %{hello: :world}\n"
"iex> Macro.escape(map)\n"
"{:%{}, [], [hello: :world]}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> multiple_of_3? = fn(n) -> rem(n, 3) == 0 end\n"
"iex> for n <- 0..5, multiple_of_3?.(n), do: n * n\n"
"[0, 9]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> n = 1\n"
"1\n"
"iex> map = %{n => :one}\n"
"%{1 => :one}\n"
"iex> map[n]\n"
":one\n"
"iex> %{^n => :one} = %{1 => :one, 2 => :two, 3 => :three}\n"
"%{1 => :one, 2 => :two, 3 => :three}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> new_list = [a: 0] ++ list\n"
"[a: 0, a: 1, b: 2]\n"
"iex> new_list[:a]\n"
"0\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> number = 13\n"
"iex> Macro.to_string(quote do: 11 + number)\n"
"\"11 + number\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> number = 13\n"
"iex> Macro.to_string(quote do: 11 + unquote(number))\n"
"\"11 + 13\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> odd? = &(rem(&1, 2) != 0)\n"
"#Function<6.80484245/1 in :erl_eval.expr/5>\n"
"iex> Enum.filter(1..3, odd?)\n"
"[1, 3]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> parent = self()\n"
"#PID<0.41.0>\n"
"iex> spawn fn -> send(parent, {:hello, self()}) end\n"
"#PID<0.48.0>\n"
"iex> receive do\n"
"...>   {:hello, pid} -> \"Got hello from #{inspect pid}\"\n"
"...> end\n"
"\"Got hello from #PID<0.48.0>\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> pid = Node.spawn_link :\"foo@computer-name\", fn ->\n"
"...>   receive do\n"
"...>     {:ping, client} -> send client, :pong\n"
"...>   end\n"
"...> end\n"
"#PID<9014.59.0>\n"
"iex> send pid, {:ping, self()}\n"
"{:ping, #PID<0.73.0>}\n"
"iex> flush()\n"
":pong\n"
":ok\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> pid = spawn fn ->\n"
"...>  receive do: (msg -> IO.inspect msg)\n"
"...> end\n"
"#PID<0.57.0>\n"
"iex> IO.write(pid, \"hello\")\n"
"{:io_request, #PID<0.41.0>, #Reference<0.0.8.91>,\n"
" {:put_chars, :unicode, \"hello\"}}\n"
"** (ErlangError) erlang error: :terminated\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> pid = spawn fn -> 1 + 2 end\n"
"#PID<0.44.0>\n"
"iex> Process.alive?(pid)\n"
"false\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> pixels = <<213, 45, 132, 64, 76, 32, 76, 0, 0, 234, 32, 15>>\n"
"iex> for <<r::8, g::8, b::8 <- pixels>>, do: {r, g, b}\n"
"[{213, 45, 132}, {64, 76, 32}, {76, 0, 0}, {234, 32, 15}]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> q = :queue.new\n"
"iex> q = :queue.in(\"A\", q)\n"
"iex> q = :queue.in(\"B\", q)\n"
"iex> {value, q} = :queue.out(q)\n"
"iex> value\n"
"{:value, \"A\"}\n"
"iex> {value, q} = :queue.out(q)\n"
"iex> value\n"
"{:value, \"B\"}\n"
"iex> {value, q} = :queue.out(q)\n"
"iex> value\n"
":empty\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> quote do: %{1 => 2}\n"
"{:%{}, [], [{1, 2}]}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> quote do: 1 + 2\n"
"{:+, [context: Elixir, import: Kernel], [1, 2]}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> quote do: sum(1, 2 + 3, 4)\n"
"{:sum, [], [1, {:+, [context: Elixir, import: Kernel], [2, 3]}, 4]}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> quote do: sum(1, 2, 3)\n"
"{:sum, [], [1, 2, 3]}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> quote do: x\n"
"{:x, [], Elixir}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> raise \"oops\"\n"
"** (RuntimeError) oops\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> raise ArgumentError, message: \"invalid argument foo\"\n"
"** (ArgumentError) invalid argument foo\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> receive do\n"
"...>   {:hello, msg}  -> msg\n"
"...> after\n"
"...>   1_000 -> \"nothing after 1s\"\n"
"...> end\n"
"\"nothing after 1s\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> require Unless\n"
"iex> Unless.macro_unless true, do: IO.puts \"this should never be printed\"\n"
"nil\n"
"iex> Unless.fun_unless true, do: IO.puts \"this should never be printed\"\n"
"\"this should never be printed\"\n"
"nil\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> round(3.58)\n"
"4\n"
"iex> trunc(3.58)\n"
"3\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> self()\n"
"#PID<0.41.0>\n"
"iex> Process.alive?(self())\n"
"true\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> self()\n"
"#PID<0.41.0>\n"
"iex> spawn_link fn -> raise \"oops\" end"
msgstr ""

msgid ""
"```iex\n"
"iex> send pid, {:put, :hello, :world}\n"
"{:put, :hello, :world}\n"
"iex> send pid, {:get, :hello, self()}\n"
"{:get, :hello, #PID<0.41.0>}\n"
"iex> flush()\n"
":world\n"
":ok\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> send self(), :hello\n"
":hello\n"
"iex> flush()\n"
":hello\n"
":ok\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> send self(), {:hello, \"world\"}\n"
"{:hello, \"world\"}\n"
"iex> receive do\n"
"...>   {:hello, msg} -> msg\n"
"...>   {:world, msg} -> \"won't match\"\n"
"...> end\n"
"\"world\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> sigil_r(<<\"foo\">>, 'i')\n"
"~r\"foo\"i\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> song = \"\n"
"...> Mary had a little lamb,\n"
"...> His fleece was white as snow,\n"
"...> And everywhere that Mary went,\n"
"...> The lamb was sure to go.\"\n"
"iex> compressed = :zlib.compress(song)\n"
"iex> byte_size song\n"
"110\n"
"iex> byte_size compressed\n"
"99\n"
"iex> :zlib.uncompress(compressed)\n"
"\"\n"
"Mary had a little lamb,\n"
"His fleece was white as snow,\n"
"And everywhere that Mary went,\n"
"The lamb was sure to go.\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> spawn fn -> 1 + 2 end\n"
"#PID<0.43.0>\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> spawn fn -> raise \"oops\" end\n"
"#PID<0.58.0>"
msgstr ""

msgid ""
"```iex\n"
"iex> spawn_link fn -> exit(1) end\n"
"** (EXIT from #PID<0.56.0>) evaluator process exited with reason: 1\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> stream = File.stream!(\"path/to/file\")\n"
"#Function<18.16982430/2 in Stream.resource/3>\n"
"iex> Enum.take(stream, 10)\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> stream = IO.stream(:stdio, :line)\n"
"iex> for line <- stream, into: stream do\n"
"...>   String.upcase(line) <> \"\n"
"\"\n"
"...> end\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> stream = Stream.cycle([1, 2, 3])\n"
"#Function<15.16982430/2 in Stream.unfold/2>\n"
"iex> Enum.take(stream, 10)\n"
"[1, 2, 3, 1, 2, 3, 1, 2, 3, 1]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> stream = Stream.unfold(\"hełło\", &String.next_codepoint/1)\n"
"#Function<39.75994740/2 in Stream.unfold/2>\n"
"iex> Enum.take(stream, 3)\n"
"[\"h\", \"e\", \"ł\"]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> string = \"hello\"\n"
"\"hello\"\n"
"iex> is_binary(string)\n"
"true\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> string = \"hełło\"\n"
"\"hełło\"\n"
"iex> byte_size(string)\n"
"7\n"
"iex> String.length(string)\n"
"5\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> table = :ets.new(:buckets_registry, [:set, :protected])\n"
"#Reference<0.1885502827.460455937.234656>\n"
"iex> :ets.insert(table, {\"foo\", self()})\n"
"true\n"
"iex> :ets.lookup(table, \"foo\")\n"
"[{\"foo\", #PID<0.41.0>}]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> table = :ets.new(:ets_test, [])\n"
"# Store as tuples with {name, population}\n"
"iex> :ets.insert(table, {\"China\", 1_374_000_000})\n"
"iex> :ets.insert(table, {\"India\", 1_284_000_000})\n"
"iex> :ets.insert(table, {\"USA\", 322_000_000})\n"
"iex> :ets.i(table)\n"
"<1   > {<<\"India\">>,1284000000}\n"
"<2   > {<<\"USA\">>,322000000}\n"
"<3   > {<<\"China\">>,1374000000}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> task = Task.Supervisor.async {KV.RouterTasks, :\"foo@computer-name\"}, Kern"
"el, :node, []\n"
"%Task{owner: #PID<0.122.0>, pid: #PID<12467.89.0>, ref: #Reference<0.0.0.404>}"
"\n"
"iex> Task.await(task)\n"
":\"foo@computer-name\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> task = Task.Supervisor.async {KV.RouterTasks, :\"foo@computer-name\"}, fn -"
">\n"
"...>   {:ok, node()}\n"
"...> end\n"
"%Task{owner: #PID<0.122.0>, pid: #PID<12467.88.0>, ref: #Reference<0.0.0.400>}"
"\n"
"iex> Task.await(task)\n"
"{:ok, :\"foo@computer-name\"}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> to_charlist \"hełło\"\n"
"[104, 101, 322, 322, 111]\n"
"iex> to_string 'hełło'\n"
"\"hełło\"\n"
"iex> to_string :hello\n"
"\"hello\"\n"
"iex> to_string 1\n"
"\"1\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> to_string :hello\n"
"\"hello\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> total_sum = 1..100_000 |> Enum.map(&(&1 * 3)) |> Enum.filter(odd?) |> Enu"
"m.sum\n"
"7500000000\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> true\n"
"true\n"
"iex> true == false\n"
"false\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> true == :true\n"
"true\n"
"iex> is_atom(false)\n"
"true\n"
"iex> is_boolean(:false)\n"
"true\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> true and true\n"
"true\n"
"iex> false or is_atom(:example)\n"
"true\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> try do\n"
"...>   Enum.each -50..50, fn(x) ->\n"
"...>     if rem(x, 13) == 0, do: throw(x)\n"
"...>   end\n"
"...>   \"Got nothing\"\n"
"...> catch\n"
"...>   x -> \"Got #{x}\"\n"
"...> end\n"
"\"Got -39\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> try do\n"
"...>   exit \"I am exiting\"\n"
"...> catch\n"
"...>   :exit, _ -> \"not really\"\n"
"...> end\n"
"\"not really\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> try do\n"
"...>   raise \"fail\"\n"
"...>   what_happened = :did_not_raise\n"
"...> rescue\n"
"...>   _ -> what_happened = :rescued\n"
"...> end\n"
"iex> what_happened\n"
"** (RuntimeError) undefined function: what_happened/0\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> try do\n"
"...>   raise \"oops\"\n"
"...> rescue\n"
"...>   RuntimeError -> \"Error!\"\n"
"...> end\n"
"\"Error!\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> try do\n"
"...>   raise \"oops\"\n"
"...> rescue\n"
"...>   e in RuntimeError -> e\n"
"...> end\n"
"%RuntimeError{message: \"oops\"}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> tuple = {1, 2, 3}\n"
"{1, 2, 3}\n"
"iex> \"tuple: #{tuple}\"\n"
"** (Protocol.UndefinedError) protocol String.Chars not implemented for {1, 2, "
"3}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> tuple = {:a, :b, :c, :d}\n"
"iex> put_elem(tuple, 2, :e)\n"
"{:a, :b, :e, :d}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> tuple = {:ok, \"hello\"}\n"
"{:ok, \"hello\"}\n"
"iex> elem(tuple, 1)\n"
"\"hello\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> tuple = {:ok, \"hello\"}\n"
"{:ok, \"hello\"}\n"
"iex> elem(tuple, 1)\n"
"\"hello\"\n"
"iex> tuple_size(tuple)\n"
"2\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> tuple = {:ok, \"hello\"}\n"
"{:ok, \"hello\"}\n"
"iex> put_elem(tuple, 1, \"world\")\n"
"{:ok, \"world\"}\n"
"iex> tuple\n"
"{:ok, \"hello\"}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> user = %User{address: []}\n"
"** (CompileError) unknown key :address for struct User\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> user = %User{name: \"john\"}\n"
"%User{name: \"john\", age: 0}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> user = %{name: \"john\",\n"
"...>          languages: [%{name: \"elixir\", type: :functional},\n"
"...>                      %{name: \"c\", type: :procedural}]}\n"
"iex> update_in user, [:languages, Access.all(), :name], &String.upcase/1\n"
"%{name: \"john\",\n"
"  languages: [%{name: \"ELIXIR\", type: :functional},\n"
"              %{name: \"C\", type: :procedural}]}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> user = %{name: \"john\", age: 27}\n"
"%{name: \"john\", age: 27}\n"
"iex> user.name\n"
"\"john\"\n"
"iex> user = %{user | name: \"meg\"}\n"
"%{name: \"meg\", age: 27}\n"
"iex> user.name\n"
"\"meg\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> user = User[name: \"john\"]\n"
"User[name: \"john\", age: 0]\n"
"iex> user.name\n"
"\"john\"\n"
"iex> User[name: name] = user\n"
"User[name: \"john\", age: 0]\n"
"iex> name\n"
"\"john\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> user.__struct__\n"
"User\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> users = [\n"
"  john: %{name: \"John\", age: 27, languages: [\"Erlang\", \"Ruby\", \"Elixir\"]},\n"
"  mary: %{name: \"Mary\", age: 29, languages: [\"Elixir\", \"F#\", \"Clojure\"]}\n"
"]\n"
"[john: %{age: 27, languages: [\"Erlang\", \"Ruby\", \"Elixir\"], name: \"John\"},\n"
" mary: %{age: 29, languages: [\"Elixir\", \"F#\", \"Clojure\"], name: \"Mary\"}]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> users = put_in users[:john].age, 31\n"
"[john: %{age: 31, languages: [\"Erlang\", \"Ruby\", \"Elixir\"], name: \"John\"},\n"
" mary: %{age: 29, languages: [\"Elixir\", \"F#\", \"Clojure\"], name: \"Mary\"}]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> users = update_in users[:mary].languages, fn languages -> List.delete(lan"
"guages, \"Clojure\") end\n"
"[john: %{age: 31, languages: [\"Erlang\", \"Ruby\", \"Elixir\"], name: \"John\"},\n"
" mary: %{age: 29, languages: [\"Elixir\", \"F#\"], name: \"Mary\"}]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> users[:john].age\n"
"27\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> values = [good: 1, good: 2, bad: 3, good: 4]\n"
"iex> for {:good, n} <- values, do: n * n\n"
"[1, 4, 16]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> what_happened =\n"
"...>   try do\n"
"...>     raise \"fail\"\n"
"...>     :did_not_raise\n"
"...>   rescue\n"
"...>     _ -> :rescued\n"
"...>   end\n"
"iex> what_happened\n"
":rescued\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> x = 1\n"
"1\n"
"iex> ^x = 2\n"
"** (MatchError) no match of right hand side value: 2\n"
"iex> {y, ^x} = {2, 1}\n"
"{2, 1}\n"
"iex> y\n"
"2\n"
"iex> {y, ^x} = {2, 2}\n"
"** (MatchError) no match of right hand side value: {2, 2}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> x = 1\n"
"1\n"
"iex> case 10 do\n"
"...>   ^x -> \"Won't match\"\n"
"...>   _ -> \"Will match\"\n"
"...> end\n"
"\"Will match\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> x = 1\n"
"1\n"
"iex> x\n"
"1\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> x = 1\n"
"1\n"
"iex> x = 2\n"
"2\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> x = 2\n"
"2\n"
"iex> try do\n"
"...>   1 / x\n"
"...> rescue\n"
"...>   ArithmeticError ->\n"
"...>     :infinity\n"
"...> else\n"
"...>   y when y < 1 and y > -1 ->\n"
"...>     :small\n"
"...>   _ ->\n"
"...>     :large\n"
"...> end\n"
":small\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> x = 42\n"
"42\n"
"iex> (fn -> x = 0 end).()\n"
"0\n"
"iex> x\n"
"42\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> {1, 2, 3}\n"
"{1, 2, 3}\n"
"iex> %User{}\n"
"%User{name: \"john\", age: 27}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> {:ok, \"hello\"}\n"
"{:ok, \"hello\"}\n"
"iex> tuple_size {:ok, \"hello\"}\n"
"2\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> {:ok, agent} = Agent.start_link fn -> [] end\n"
"{:ok, #PID<0.57.0>}\n"
"iex> Agent.update(agent, fn list -> [\"eggs\" | list] end)\n"
":ok\n"
"iex> Agent.get(agent, fn list -> list end)\n"
"[\"eggs\"]\n"
"iex> Agent.stop(agent)\n"
":ok\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> {:ok, bucket} = DynamicSupervisor.start_child(KV.BucketSupervisor, KV.Buc"
"ket)\n"
"{:ok, #PID<0.72.0>}\n"
"iex> KV.Bucket.put(bucket, \"eggs\", 3)\n"
":ok\n"
"iex> KV.Bucket.get(bucket, \"eggs\")\n"
"3\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> {:ok, file} = File.open \"hello\", [:write]\n"
"{:ok, #PID<0.47.0>}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> {:ok, file} = File.open \"hello\", [:write]\n"
"{:ok, #PID<0.47.0>}\n"
"iex> IO.binwrite file, \"world\"\n"
":ok\n"
"iex> File.close file\n"
":ok\n"
"iex> File.read \"hello\"\n"
"{:ok, \"world\"}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> {:ok, file} = File.open \"sample\", [:utf8, :write]\n"
"iex> try do\n"
"...>   IO.write file, \"olá\"\n"
"...>   raise \"oops, something went wrong\"\n"
"...> after\n"
"...>   File.close(file)\n"
"...> end\n"
"** (RuntimeError) oops, something went wrong\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> {:ok, pid} = Agent.start_link(fn -> %{} end)\n"
"{:ok, #PID<0.72.0>}\n"
"iex> Agent.update(pid, fn map -> Map.put(map, :hello, :world) end)\n"
":ok\n"
"iex> Agent.get(pid, fn map -> Map.get(map, :hello) end)\n"
":world\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> {:ok, pid} = KV.Bucket.start_link([])\n"
"{:ok, #PID<0.66.0>}\n"
"iex> Process.monitor(pid)\n"
"#Reference<0.0.0.551>\n"
"iex> Agent.stop(pid)\n"
":ok\n"
"iex> flush()\n"
"{:DOWN, #Reference<0.0.0.551>, :process, #PID<0.66.0>, :normal}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> {:ok, pid} = KV.start_link\n"
"{:ok, #PID<0.62.0>}\n"
"iex> send pid, {:get, :hello, self()}\n"
"{:get, :hello, #PID<0.41.0>}\n"
"iex> flush()\n"
"nil\n"
":ok\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> {:ok, pid} = StringIO.open(\"hello\")\n"
"{:ok, #PID<0.43.0>}\n"
"iex> IO.read(pid, 2)\n"
"\"he\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> {:ok, result} = {:ok, 13}\n"
"{:ok, 13}\n"
"iex> result\n"
"13"
msgstr ""

msgid ""
"```iex\n"
"iex> {a, b, c} = [:hello, \"world\", 42]\n"
"** (MatchError) no match of right hand side value: [:hello, \"world\", 42]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> {a, b, c} = {:hello, \"world\", 42}\n"
"{:hello, \"world\", 42}\n"
"iex> a\n"
":hello\n"
"iex> b\n"
"\"world\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> {a, b, c} = {:hello, \"world\"}\n"
"** (MatchError) no match of right hand side value: {:hello, \"world\"}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> {x, x} = {1, 1}\n"
"{1, 1}\n"
"iex> {x, x} = {1, 2}\n"
"** (MatchError) no match of right hand side value: {1, 2}\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> ~c(this is a char list containing 'single quotes')\n"
"'this is a char list containing \\'single quotes\\''\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> ~s\"\"\"\n"
"...> this is\n"
"...> a heredoc string\n"
"...> \"\"\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> ~s(String with escape codes \\x26 #{\"inter\" <> \"polation\"})\n"
"\"String with escape codes & interpolation\"\n"
"iex> ~S(String without escape codes \\x26 without #{interpolation})\n"
"\"String without escape codes \\\\x26 without \\#{interpolation}\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> ~s(this is a string with \"double\" quotes, not 'single' ones)\n"
"\"this is a string with \\\"double\\\" quotes, not 'single' ones\"\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> ~w(foo bar bat)\n"
"[\"foo\", \"bar\", \"bat\"]\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> ~w(foo bar bat)a\n"
"[:foo, :bar, :bat]\n"
"```"
msgstr ""

msgid ""
"```javascript\n"
"$('#toc').toc({ headers: 'h3, h4, h5, h6' });\n"
"$('#toc').toc({ headers: '.content h1, .content h2, .content h3, .content h4, "
".content h5, .content h6' });\n"
"```"
msgstr ""

msgid ""
"```javascript\n"
"$('#toc').toc({ listType: 'ul' });\n"
"```"
msgstr ""

msgid ""
"```javascript\n"
"$('#toc').toc({ minimumHeaders: 2 });\n"
"```"
msgstr ""

msgid ""
"```javascript\n"
"$('#toc').toc({ noBackToTopLinks: true });\n"
"```"
msgstr ""

msgid ""
"```javascript\n"
"$('#toc').toc({ showEffect: 'slideDown' });\n"
"```"
msgstr ""

msgid ""
"```javascript\n"
"$('#toc').toc({ showSpeed: 0 });\n"
"```"
msgstr ""

msgid "`alias` allows you to set up aliases for any given module name."
msgstr ""

msgid ""
"`async/await` provides a very simple mechanism to compute values concurrently."
" Not only that, `async/await` can also be used with the same [`Task.Supervisor"
"`](https://hexdocs.pm/elixir/Task.Supervisor.html) we have used in previous ch"
"apters. We just need to call `Task.Supervisor.async/2` instead of `Task.Superv"
"isor.start_child/2` and use `Task.await/2` to read the result later on."
msgstr ""

msgid ""
"`case` allows us to compare a value against many patterns until we find a matc"
"hing one:"
msgstr ""

msgid ""
"`case` is useful when you need to match against different values. However, in "
"many circumstances, we want to check different conditions and find the first o"
"ne that evaluates to true. In such cases, one may use `cond`:"
msgstr ""

msgid ""
"`do/end` blocks are a syntactic convenience built on top of the keywords one. "
"That's why `do/end` blocks do not require a comma between the previous argumen"
"t and the block. They are useful exactly because they remove the verbosity whe"
"n writing blocks of code. These are equivalent:"
msgstr ""

msgid "`exit` can also be \"caught\" using `try/catch`:"
msgstr ""

msgid ""
"`exit` signals are an important part of the fault tolerant system provided by "
"the Erlang <abbr title=\"Virtual Machine\">VM</abbr>. Processes usually run unde"
"r supervision trees which are themselves processes that listen to `exit` signa"
"ls from the supervised processes. Once an exit signal is received, the supervi"
"sion strategy kicks in and the supervised process is restarted."
msgstr ""

msgid ""
"`import` also supports `:macros` and `:functions` to be given to `:only`. For "
"example, to import all macros, one could write:"
msgstr ""

msgid ""
"`mix xref graph` also got the `--only-nodes` and `--label` options. The former"
" asks Mix to only output file names (nodes) without the edges. The latter allo"
"ws you to focus on certain relationships:"
msgstr ""

msgid ""
"`or` and `and` are short-circuit operators. They only execute the right side i"
"f the left side is not enough to determine the result:"
msgstr ""

msgid ""
"`orddict` is still the faster representation for small ranges since it is a si"
"mple list. However, `HashDict` is able to be relatively fast compared to `ordd"
"ict` for those small ranges and the fastest solution once you have dozens of k"
"eys. [Those results can be verified when using other types as keys as well](ht"
"tps://gist.github.com/436a9d2bca5051a6dfab)."
msgstr ""

msgid ""
"`put_in/2` and `update_in/2` are macros that work as syntax sugar for the lowe"
"r-level `put_in/3` and `update_in/3`, that expects the whole path to be given "
"as a list:"
msgstr ""

msgid ""
"`serve/1` is another loop that reads a line from the socket and writes those l"
"ines back to the socket. Note that the `serve/1` function uses [the pipe opera"
"tor `|>`](https://hexdocs.pm/elixir/Kernel.html#%7C%3E/2) to express this flow"
" of operations. The pipe operator evaluates the left side and passes its resul"
"t as the first argument to the function on the right side. The example above:"
msgstr ""

msgid ""
"`spawn/1` and `spawn_link/1` are the basic primitives for creating processes i"
"n Elixir. Although we have used them exclusively so far, most of the time we a"
"re going to use abstractions that build on top of them. Let's see the most com"
"mon one, called tasks."
msgstr ""

msgid "`spawn/1` takes a function which it will execute in another process."
msgstr ""

msgid "`unquote` can even be used to inject function names:"
msgstr ""

msgid ""
"`with` will match each left side of `<-` against the right side, executing exp"
"ressions until one of those match fails or until the `do: expression` is perfo"
"rmed. In case a match fails, the non-matching result is returned."
msgstr ""

msgid ""
"as, in case of an error, `File.read/1` will return `{:error, reason}` and the "
"pattern matching will fail. You will still get the desired result (a raised er"
"ror), but the message will be about the pattern which doesn't match (thus bein"
"g cryptic in respect to what the error actually is about)."
msgstr ""

msgid "by the following:"
msgstr ""

msgid ""
"children = [\n"
"  supervisor(MyApp.Repo, []),\n"
"  supervisor(MyApp.Endpoint, [])\n"
"]"
msgstr ""

msgid ""
"def deps do\n"
"  [{:plug, \"~> 1.2\"},\n"
"   {:postgrex, \"~> 1.0\"}]\n"
"end\n"
"```"
msgstr ""

msgid ""
"def drive(%User{age: age}) when is_old_to_drive(age) do\n"
"  # Code that drives a car\n"
"end\n"
"```"
msgstr ""

msgid ""
"def handle_call({:create, name}, _from, {names, refs}) do\n"
"  case lookup(names, name) do\n"
"    {:ok, pid} ->\n"
"      {:reply, pid, {names, refs}}\n"
"    :error ->\n"
"      {:ok, pid} = DynamicSupervisor.start_child(KV.BucketSupervisor, KV.Bucke"
"t)\n"
"      ref = Process.monitor(pid)\n"
"      refs = Map.put(refs, ref, name)\n"
"      :ets.insert(names, {name, pid})\n"
"      {:reply, pid, {names, refs}}\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"def handle_call({:lookup, name}, _from, {names, _} = state) do\n"
"  {:reply, Map.fetch(names, name), state}\n"
"end"
msgstr ""

msgid ""
"def handle_cast({:create, name}, {names, refs}) do\n"
"  if Map.has_key?(names, name) do\n"
"    {:noreply, {names, refs}}\n"
"  else\n"
"    {:ok, pid} = KV.Bucket.start_link([])\n"
"    ref = Process.monitor(pid)\n"
"    refs = Map.put(refs, ref, name)\n"
"    names = Map.put(names, name, pid)\n"
"    {:noreply, {names, refs}}\n"
"  end\n"
"end"
msgstr ""

msgid ""
"def handle_info(_msg, state) do\n"
"  {:noreply, state}\n"
"end\n"
"```"
msgstr ""

msgid ""
"def handle_info({:DOWN, ref, :process, _pid, _reason}, {names, refs}) do\n"
"  {name, refs} = Map.pop(refs, ref)\n"
"  names = Map.delete(names, name)\n"
"  {:noreply, {names, refs}}\n"
"end"
msgstr ""

msgid ""
"def init(:ok) do\n"
"  names = %{}\n"
"  refs = %{}\n"
"  {:ok, {names, refs}}\n"
"end"
msgstr ""

msgid ""
"def loop_through([]) do\n"
"  :ok\n"
"end\n"
"```"
msgstr ""

msgid ""
"def run({:create, bucket}) do\n"
"  KV.Registry.create(KV.Registry, bucket)\n"
"  {:ok, \"OK\n"
"\"}\n"
"end"
msgstr ""

msgid ""
"def run({:delete, bucket, key}) do\n"
"  lookup(bucket, fn pid ->\n"
"    KV.Bucket.delete(pid, key)\n"
"    {:ok, \"OK\n"
"\"}\n"
"  end)\n"
"end"
msgstr ""

msgid ""
"def run({:get, bucket, key}) do\n"
"  lookup(bucket, fn pid ->\n"
"    value = KV.Bucket.get(pid, key)\n"
"    {:ok, \"#{value}\n"
"OK\n"
"\"}\n"
"  end)\n"
"end"
msgstr ""

msgid ""
"def run({:put, bucket, key, value}) do\n"
"  lookup(bucket, fn pid ->\n"
"    KV.Bucket.put(pid, key, value)\n"
"    {:ok, \"OK\n"
"\"}\n"
"  end)\n"
"end"
msgstr ""

msgid ""
"def sum(a, b) when is_binary(a) and is_binary(b) do\n"
"  a <> b\n"
"end"
msgstr ""

msgid ""
"def sum(a, b) when is_list(a) and is_list(b) do\n"
"  a ++ b\n"
"end"
msgstr ""

msgid ""
"defimpl Size, for: Map do\n"
"  def size(map), do: map_size(map)\n"
"end"
msgstr ""

msgid ""
"defimpl Size, for: Tuple do\n"
"  def size(tuple), do: tuple_size(tuple)\n"
"end\n"
"```"
msgstr ""

msgid ""
"defimpl Size, for: User do\n"
"  def size(_user), do: 2\n"
"end\n"
"```"
msgstr ""

msgid ""
"defmodule A do\n"
"  use GenStage"
msgstr ""

msgid ""
"defmodule B do\n"
"  use GenStage"
msgstr ""

msgid ""
"defmodule ByeModule do\n"
"end"
msgstr ""

msgid ""
"defmodule C do\n"
"  use GenStage"
msgstr ""

msgid ""
"defmodule EventHandler do\n"
"  use GenStage"
msgstr ""

msgid ""
"defmodule EventManager do\n"
"  use GenStage"
msgstr ""

msgid ""
"defmodule HygieneTest do\n"
"  def go do\n"
"    require Hygiene\n"
"    a = 13\n"
"    Hygiene.interference\n"
"    a\n"
"  end\n"
"end"
msgstr ""

msgid ""
"defmodule HygieneTest do\n"
"  def go do\n"
"    require Hygiene\n"
"    a = 13\n"
"    Hygiene.no_interference\n"
"    a\n"
"  end\n"
"end"
msgstr ""

msgid ""
"defmodule KVServer do\n"
"  def accept(port) do\n"
"    # The options below mean:\n"
"    #\n"
"    # 1. `:binary` - receives data as binaries (instead of lists)\n"
"    # 2. `packet: :line` - receives data line by line\n"
"    # 3. `active: false` - blocks on `:gen_tcp.recv/2` until data is available"
"\n"
"    # 4. `reuseaddr: true` - allows us to reuse the address if the listener cr"
"ashes\n"
"    #\n"
"    {:ok, socket} =\n"
"      :gen_tcp.listen(port, [:binary, packet: :line, active: false, reuseaddr:"
" true])\n"
"    Logger.info(\"Accepting connections on port #{port}\")\n"
"    loop_acceptor(socket)\n"
"  end"
msgstr ""

msgid ""
"defmodule MathTest do\n"
"  use ExUnit.Case, async: true"
msgstr ""

msgid ""
"defp lookup(bucket, callback) do\n"
"  case KV.Registry.lookup(KV.Registry, bucket) do\n"
"    {:ok, pid} -> callback.(pid)\n"
"    :error -> {:error, :not_found}\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"defp read_line(socket) do\n"
"  :gen_tcp.recv(socket, 0)\n"
"end"
msgstr ""

msgid ""
"defp read_line(socket) do\n"
"  {:ok, data} = :gen_tcp.recv(socket, 0)\n"
"  data\n"
"end"
msgstr ""

msgid ""
"defp with_file_and_line(message, opts) do\n"
"  if (file = opts[:file]) && (line = opts[:line]) do\n"
"    relative = Path.relative_to_cwd(file)\n"
"    message  = Exception.format_file_line(relative, line) <> \" \" <> message\n"
"    relative\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"defp write_line(_socket, {:error, :closed}) do\n"
"  # The connection was closed, exit politely.\n"
"  exit(:shutdown)\n"
"end"
msgstr ""

msgid ""
"defp write_line(line, socket) do\n"
"  :gen_tcp.send(socket, line)\n"
"end\n"
"```"
msgstr ""

msgid ""
"defp write_line(socket, {:error, :unknown_command}) do\n"
"  # Known error. Write to the client.\n"
"  :gen_tcp.send(socket, \"UNKNOWN COMMAND\n"
"\")\n"
"end"
msgstr ""

msgid ""
"defp write_line(socket, {:error, error}) do\n"
"  # Unknown error. Write to the client and exit.\n"
"  :gen_tcp.send(socket, \"ERROR\n"
"\")\n"
"  exit(error)\n"
"end\n"
"```"
msgstr ""

msgid ""
"defp write_line(socket, {:ok, text}) do\n"
"  :gen_tcp.send(socket, text)\n"
"end"
msgstr ""

msgid ""
"downcase(Bin) ->\n"
"  'Elixir.String':downcase(Bin).\n"
"```"
msgstr ""

msgid ""
"drive(User.get(\"John Doe\"))\n"
"#=> Fails if the user is under 16\n"
"{% endhighlight %}"
msgstr ""

msgid ""
"f.([])\n"
"#=> \"Empty\""
msgstr ""

msgid ""
"f.({:a, :b})\n"
"#=> \"All your {:a, :b} are belong to us\"\n"
"```"
msgstr ""

msgid ""
"hello() ->\n"
"  io:format(\"~s~n\", [\"Hello world!\"]).\n"
"```"
msgstr ""

msgid ""
"iex> %{map | 2 => \"two\"}\n"
"%{2 => \"two\", :a => 1}\n"
"iex> %{map | :c => 3}\n"
"** (KeyError) key :c not found in: %{2 => :b, :a => 1}\n"
"```"
msgstr ""

msgid ""
"iex> KVServer.Command.parse(\"GET shopping\n"
"\")\n"
"{:error, :unknown_command}\n"
"```"
msgstr ""

msgid ""
"iex> Math.sum(1, 2)\n"
"3\n"
"```"
msgstr ""

msgid ""
"iex> map.a\n"
"1\n"
"iex> map.c\n"
"** (KeyError) key :c not found in: %{2 => :b, :a => 1}\n"
"```"
msgstr ""

msgid ""
"iex> {:ok, result} = {:error, :oops}\n"
"** (MatchError) no match of right hand side value: {:error, :oops}\n"
"```"
msgstr ""

msgid ""
"im_a_var\n"
"x = 10"
msgstr ""

msgid "is compiled into"
msgstr ""

msgid "is equivalent to:"
msgstr ""

msgid "keywords_generator = from_type(keyword/0)"
msgstr ""

msgid "keywords_generator = list_of({atom(:alphanumeric), term()})"
msgstr ""

msgid "logged the following report:"
msgstr ""

msgid ""
"loop_through([]) ->\n"
"  ok.\n"
"```"
msgstr ""

msgid "maps to Erlang:"
msgstr ""

msgid "may be failing on this line:"
msgstr ""

msgid ""
"mul_by 4, 3 #=> 12\n"
"mul_by 4    #=> 8\n"
"```"
msgstr ""

msgid ""
"range = 1..3\n"
"Enum.map range, fn(x) -> x * 2 end\n"
"#=> [2, 4, 6]"
msgstr ""

msgid ""
"receive\n"
"  {hello} -> ok;\n"
"  Other -> Other\n"
"after\n"
"  10 -> timeout\n"
"end.\n"
"```"
msgstr ""

msgid ""
"receive do\n"
"  {:hello} -> :ok\n"
"  other -> other\n"
"after\n"
"  10 -> :timeout\n"
"end\n"
"```"
msgstr ""

msgid "send pid, {:hello}"
msgstr ""

msgid ""
"set = HashSet.new [1, 2, 3]\n"
"Enum.map set, fn(x) -> x * 2 end\n"
"#=> [2, 4, 6]\n"
"```"
msgstr ""

msgid ""
"something_that_returns_an_enumerable(...) |> outer_function(...)\n"
"```"
msgstr ""

msgid ""
"square = fn(x) -> x * x end\n"
"Enum.map [1, 2, 3, 4], square\n"
"#=> [1, 4, 9, 16]\n"
"```"
msgstr ""

msgid ""
"square(X) -> X * X.\n"
"```"
msgstr ""

msgid ""
"stream_data and the functionalities it includes are scheduled to be included i"
"n one of the next two Elixir releases, likely 1.6 but possibly 1.7. We have us"
"ed the names `StreamData` and `ExUnitProperties` to avoid conflicts when those"
" modules are eventually merged into Elixir. When merged, they will be renamed "
"to the proper `Stream.Data` and `ExUnit.Properties` modules. Right now, all de"
"velopment is happening in the [stream_data][] repository, where we are discuss"
"ing features and giving users a chance to try out the functionalities early on"
". We'd love for anyone to get involved in trying stream_data and we'd love fee"
"dback!"
msgstr ""

msgid "such can now be rewritten as"
msgstr ""

msgid ""
"such that \"lazy\" in \"lhs\" will be shown in red to denote it has been removed f"
"rom \"rhs\" while \"brown\" in \"rhs\" will be shown in green to denote it has been "
"added to the \"rhs\"."
msgstr ""

msgid ""
"sum \"a\", \"b\"\n"
"#=> \"ab\"\n"
"```"
msgstr ""

msgid ""
"sum 1, 2\n"
"#=> 3"
msgstr ""

msgid ""
"sum [1], [2]\n"
"#=> [1, 2]"
msgstr ""

msgid ""
"sum(\"a\", \"b\").\n"
"%=> \"ab\"\n"
"```"
msgstr ""

msgid ""
"sum(1, 2).\n"
"%=> 3"
msgstr ""

msgid ""
"sum(A, B) when is_binary(A), is_binary(B) ->\n"
"  <<A/binary,  B/binary>>."
msgstr ""

msgid ""
"sum(A, B) when is_list(A), is_list(B) ->\n"
"  A ++ B;"
msgstr ""

msgid ""
"sum([1], [2]).\n"
"%=> [1, 2]"
msgstr ""

msgid ""
"test_fun.(0)\n"
"#=> :zero_or_negative"
msgstr ""

msgid ""
"test_fun.(10)\n"
"#=> :exactly_ten\n"
"```"
msgstr ""

msgid ""
"test_fun.(44)\n"
"#=> :greater_than_ten"
msgstr ""

msgid "to also use `Task.start_link/1`:"
msgstr ""

msgid ""
"to invoke the `last` function from the `List` module. In Elixir, use the dot `"
".` in place of the colon `:`"
msgstr ""

msgid "to run only properties."
msgstr ""

msgid ""
"unless true do\n"
"  IO.puts \"this will never be seen\"\n"
"end\n"
"```"
msgstr ""

msgid ""
"v1.2 brings enhancements, bug fixes, performance improvements and more into El"
"ixir. Elixir v1.2 relies on many features in Erlang 18, requiring at least Erl"
"ang 18+. Upgrading to Erlang 18 is therefore necessary before upgrading Elixir"
"."
msgstr ""

msgid "which in turn will register the process with the given name."
msgstr ""

msgid ""
"which leads to an undefined function error because that invocation passes two "
"arguments, and `is_number/2` does not exist. The `if true` expression is inval"
"id in itself because it needs the block, but since the arity of `is_number/2` "
"does not match, Elixir does not even reach its evaluation."
msgstr ""

msgid "will fail with"
msgstr ""

msgid "will fail with the following report:"
msgstr ""

msgid ""
"will fetch `ex_doc` and its dependencies, build them, and then install `ex_doc"
"` to `~/.mix/escripts` (by default). After adding `~/.mix/escripts` to your `P"
"ATH`, running `ex_doc` is as simple as:"
msgstr ""

msgid "write:"
msgstr ""

msgid ""
"{% assign stable = site.data.elixir-versions[site.data.elixir-versions.stable]"
" %}"
msgstr ""

msgid ""
"{% for version in site.data.elixir-versions reversed %}\n"
"  {% if version[0] == 'stable' %}\n"
"    {% continue %}\n"
"  {% endif %}"
msgstr ""

msgid ""
"{% highlight elixir %}\n"
"%User{name: name, age: age} = User.get(\"John Doe\")\n"
"name #=> \"John Doe\"\n"
"{% endhighlight %}"
msgstr ""

msgid ""
"{% highlight elixir %}\n"
"children = [\n"
"  TCP.Pool,\n"
"  {TCP.Acceptor, port: 4040}\n"
"]"
msgstr ""

msgid ""
"{% highlight elixir %}\n"
"current_process = self()"
msgstr ""

msgid ""
"{% highlight elixir %}\n"
"def drive(%User{age: age}) when age >= 16 do\n"
"  # Code that drives a car\n"
"end"
msgstr ""

msgid ""
"{% highlight elixir %}\n"
"defmodule MathTest do\n"
"  use ExUnit.Case, async: true"
msgstr ""

msgid ""
"{% highlight iex %}\n"
"iex> :crypto.hash(:md5, \"Using crypto from Erlang OTP\")\n"
"<<192, 223, 75, 115, ...>>\n"
"{% endhighlight %}"
msgstr ""

msgid ""
"{% highlight text %}\n"
"$ iex\n"
"Interactive Elixir - press Ctrl+C to exit (type h() ENTER for help)\n"
"iex> h String.trim           # Prints the documentation for function\n"
"iex> i \"Hello, World\"        # Prints information about the given data type\n"
"iex> break! String.trim/1    # Sets a breakpoint in the String.trim/1 function"
"\n"
"iex> recompile               # Recompiles the current project on the fly\n"
"{% endhighlight %}\n"
"    </div>\n"
"  </div>"
msgstr ""

msgid ""
"{% highlight text %}\n"
"$ mix new my_app\n"
"$ cd my_app\n"
"$ mix test\n"
"."
msgstr ""

msgid "{% include bottom.html %}"
msgstr ""

msgid "{% include distilled-by.html %}"
msgstr ""

msgid "{% include elixir-radar.html %}"
msgstr ""

msgid "{% include mini-docu.html %}"
msgstr ""

msgid "{% include mix-otp-preface.html %}"
msgstr ""

msgid "{% include toc.html %}"
msgstr ""

msgid "{% include top.html %}"
msgstr ""

msgid ""
"{% raw %}\n"
"```elixir\n"
"macro_unless(true, [do: {{:., [], [{:__aliases__, [alias: false], [:IO]}, :put"
"s]}, [], [\"this should never be printed\"]}])\n"
"```\n"
"{% endraw %}"
msgstr ""

msgid ""
"{% raw %}\n"
"```elixir\n"
"{:if, [],\n"
" [{:!, [], [true]},\n"
"  [do: {{:., [],\n"
"     [{:__aliases__,\n"
"       [], [:IO]},\n"
"      :puts]}, [], [\"this should never be printed\"]}]]}\n"
"```\n"
"{% endraw %}"
msgstr ""

msgid ""
"{:ok, c1} = GenStage.start_link(C, 1000) # sleep for a second\n"
"{:ok, c2} = GenStage.start_link(C, 1000) # sleep for a second\n"
"{:ok, c3} = GenStage.start_link(C, 1000) # sleep for a second\n"
"{:ok, c4} = GenStage.start_link(C, 1000) # sleep for a second"
msgstr ""

msgid ""
"| Erlang         | Elixir         | Meaning                                 |\n"
"|----------------|----------------|-----------------------------------------|\n"
"| and            | NOT AVAILABLE  | Logical 'and', evaluates both arguments |\n"
"| andalso        | and            | Logical 'and', short-circuits           |\n"
"| or             | NOT AVAILABLE  | Logical 'or', evaluates both arguments  |\n"
"| orelse         | or             | Logical 'or', short-circuits            |\n"
"| =:=            | ===            | A match operator                        |\n"
"| =/=            | !==            | A negative match                        |\n"
"| /=             | !=             | Not equals                              |\n"
"| =<             | <=             | Less than or equals                     |"
msgstr ""
