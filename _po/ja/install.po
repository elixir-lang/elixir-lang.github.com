msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2018-08-11 01:00+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"title: \"Elxir をインストール\"\n"
"section: install\n"
"layout: default\n"
"---\n"
"{% assign stable = site.data.elixir-versions[site.data.elixir-versions.stable]"
" %}"
msgstr ""

msgid "# {{ page.title }}"
msgstr ""

msgid "{% include toc.html %}"
msgstr ""

msgid ""
"The quickest way to install Elixir is through a distribution or using one of t"
"he available installers. If not available, then we recommend the precompiled p"
"ackages or compiling it."
msgstr ""
"目次の Distributions からご自分の環境を選んでください。簡単にインストールできます！それ以外には、パッケージをプリプロセス(プリコンパイル)し"
"てコンパイルする方法がありますので、そちらを利用してください。"

msgid ""
"Note that Elixir {{ stable.name }} requires Erlang {{ stable.minimum_otp }} or"
" later. Many of the instructions below will automatically install Erlang for y"
"ou. In case they do not, read the \"Installing Erlang\" section below."
msgstr ""
"Note > Elixir {{ stable.name }} の使用には Erlang {{ stable.minimum_otp }} 以降が必要ですが"
"、大抵は自動でインストールされます。もしインストールされないようでしたら、\"Installing Erlang\" を参照してください。"

msgid "## Distributions"
msgstr "## ディストリビューション"

msgid ""
"The preferred option for installing Elixir. Choose your operating system and t"
"ool."
msgstr "お好きなオプションをお選びいただけます。あなたのシステムに Elixir をインストールしましょう！"

msgid ""
"If your distribution contains an old Elixir/Erlang version, see the sections b"
"elow for installing Elixir/Erlang from version managers or from source."
msgstr ""
"以前に一度 Elixir/Erlang をインストールしたことがあるのでしたら、 \"Compiling with version managers\" や \""
" Compiling form source (Unix and MinGW) \" を参照してください。"

msgid "### Mac OS X"
msgstr "### macOS(Mac OS X)"

msgid ""
"  * Homebrew\n"
"    * Update your homebrew to latest: `brew update`\n"
"    * Run: `brew install elixir`\n"
"  * Macports\n"
"    * Run: `sudo port install elixir`"
msgstr ""
"  * Homebrew をお使いの場合\n"
"    * Homebrew を最新バージョンにアップデート: `brew update`\n"
"    * インストール: `brew install elixir`\n"
"  * Macports をお使いの場合\n"
"    * インストール: `sudo port install elixir`"

msgid "### Unix (and Unix-like)"
msgstr "### UNIX 系"

msgid ""
"  * Arch Linux (Community repo)\n"
"    * Run: `pacman -S elixir`\n"
"  * openSUSE (and SLES 11 SP3+)\n"
"    * Add Erlang devel repo: `zypper ar -f http://download.opensuse.org/reposi"
"tories/devel:/languages:/erlang/openSUSE_Factory/ erlang`\n"
"    * Run: `zypper in elixir`\n"
"  * Gentoo\n"
"    * Run: `emerge --ask dev-lang/elixir`\n"
"  * GNU Guix\n"
"    * Run: `guix package -i elixir`\n"
"  * Fedora 21 (and older)\n"
"    * Run: `yum install elixir`\n"
"  * Fedora 22 (and newer)\n"
"    * Run `dnf install elixir`\n"
"  * FreeBSD\n"
"    * From ports: `cd /usr/ports/lang/elixir && make install clean`\n"
"    * From pkg: `pkg install elixir`\n"
"  * Solus\n"
"    * Run: `eopkg install elixir`\n"
"  * Ubuntu 14.04/16.04/16.10/17.04 or Debian 7/8/9\n"
"    * Add Erlang Solutions repo: `wget https://packages.erlang-solutions.com/e"
"rlang-solutions_1.0_all.deb && sudo dpkg -i erlang-solutions_1.0_all.deb`\n"
"    * Run: `sudo apt-get update`\n"
"    * Install the Erlang/OTP platform and all of its applications: `sudo apt-g"
"et install esl-erlang`\n"
"    * Install Elixir: `sudo apt-get install elixir`"
msgstr ""
"  * Arch Linux (Community repo) をお使いの場合\n"
"    * インストール: `pacman -S elixir`\n"
"  * openSUSE (and SLES 11 SP3+) をお使いの場合\n"
"    * Erlang devel リポジトリの追加: `zypper ar -f http://download.opensuse.org/reposi"
"tories/devel:/languages:/erlang/openSUSE_Factory/ erlang`\n"
"    * インストール: `zypper in elixir`\n"
"  * Gentoo をお使いの場合\n"
"    * インストール: `emerge --ask dev-lang/elixir`\n"
"  * GNU Guix\n"
"    * インストール: `guix package -i elixir`\n"
"  * Fedora 21 (and older) をお使いの場合\n"
"    * インストール: `yum install elixir`\n"
"  * Fedora 22 (and newer)\n"
"    * インストール `dnf install elixir`\n"
"  * FreeBSD をお使いの場合\n"
"    * ports : `cd /usr/ports/lang/elixir && make install clean`\n"
"    * pkg: `pkg install elixir`\n"
"  * Solus をお使いの場合\n"
"    * インストール: `eopkg install elixir`\n"
"  * Ubuntu 14.04/16.04/16.10/17.04 or Debian 7/8/9\n"
"    * Erlang Solutions リポジトリの追加: `wget https://packages.erlang-solutions.com/e"
"rlang-solutions_1.0_all.deb && sudo dpkg -i erlang-solutions_1.0_all.deb`\n"
"    * リストのアップデート: `sudo apt-get update`\n"
"    * Erlang/OTP プラットフォームとそれら全アプリケーションのインストール: `sudo apt-get install esl-erlan"
"g`\n"
"    * Elixir をインストール: `sudo apt-get install elixir`"

msgid "### Windows"
msgstr "### Windows"

msgid ""
"  * Web installer\n"
"    * [Download the installer](https://repo.hex.pm/elixir-websetup.exe)\n"
"    * Click next, next, ..., finish\n"
"  * Chocolatey\n"
"    * `cinst elixir`"
msgstr ""
"  * インストーラーの利用\n"
"    * [ダウンロード](https://repo.hex.pm/elixir-websetup.exe)\n"
"    * 画面に従って進んでいただくと完了です\n"
"  * Chocolatey\n"
"    * インストール: `cinst elixir`"

msgid "### Raspberry Pi"
msgstr "### Raspberry Pi"

msgid "If necessary, replace \"stretch\" with the name of your Raspbian release."
msgstr "以下は Stretch の場合ですが、必要であれば \"stretch\" の部分をあなたの Raspbian に置き換えてください。"

msgid ""
"  * The Erlang Solutions repository has a prebuilt package for armhf. This sav"
"es a significant amount of time in comparison to recompiling natively\n"
"  * Get Erlang key\n"
"    * `echo \"deb https://packages.erlang-solutions.com/debian stretch contrib\""
" | sudo tee /etc/apt/sources.list.d/erlang-solutions.list`\n"
"    * Run: `wget https://packages.erlang-solutions.com/debian/erlang_solutions"
".asc`\n"
"    * Add to keychain: `sudo apt-key add erlang_solutions.asc`\n"
"  * Install Elixir\n"
"    * Update apt to latest: `sudo apt update`\n"
"    * Run: `sudo apt install elixir`"
msgstr ""
"  * armhf でパッケージをプリビルドしましょう。再コンパイルに比べると大幅に時間を短縮してくれます。\n"
"  * 公開鍵の取得\n"
"    * `echo \"deb https://packages.erlang-solutions.com/debian stretch contrib\""
" | sudo tee /etc/apt/sources.list.d/erlang-solutions.list`\n"
"    * Erlang のインストール: `wget https://packages.erlang-solutions.com/debian/erlan"
"g_solutions.asc`\n"
"    * 鍵を keychain に追加: `sudo apt-key add erlang_solutions.asc`\n"
"  * Elixir\n"
"    * apt のアップデート: `sudo apt update`\n"
"    * Elixir のインストール: `sudo apt install elixir`"

msgid "### Docker"
msgstr "### Docker"

msgid ""
"If you are familiar with Docker you can use the official Docker image to get s"
"tarted quickly with Elixir."
msgstr "もしあなたが Docker に親しみ慣れているのなら、公式 Docker イメージを使えばとても簡単です。"

msgid ""
"  * Enter interactive mode\n"
"    * Run: `docker run -it --rm elixir`\n"
"  * Enter bash within container with installed `elixir`\n"
"    * Run: `docker run -it --rm elixir bash`"
msgstr ""
"  * インタラクティブモード\n"
"    * Run: `docker run -it --rm elixir`\n"
"  * イメージからインストールしたコンテナ内で bash シェルを起動\n"
"    * Run: `docker run -it --rm elixir bash`"

msgid ""
"Those distributions will likely install Erlang automatically for you too. In c"
"ase they don't, check the [Installing Erlang](/install.html#installing-erlang)"
" section below."
msgstr ""
"これらのディストリビューションは、たいてい自動で Erlang もインストールしてくれますが、もしインストールされない場合は [Installing Erl"
"ang](/install.html#installing-erlang)(英語) を参照してください."

msgid ""
"If you need to programmatically fetch the list of Elixir precompiled packages "
"alongside their checksums, access [https://elixir-lang.org/elixir.csv](https:/"
"/elixir-lang.org/elixir.csv)."
msgstr ""
"プリコンパイル済みパッケージのリストが必要でしたら、こちらからどうぞ。[https://elixir-lang.org/elixir.csv](https:"
"//elixir-lang.org/elixir.csv)."

msgid "## Precompiled package"
msgstr "## プリコンパイル済みパッケージ"

msgid ""
"Elixir provides a precompiled package for every release. First [install Erlang"
"](/install.html#installing-erlang) and then download and unzip the [Precompile"
"d.zip file for the latest release](https://github.com/elixir-lang/elixir/relea"
"ses/download/v{{ stable.version }}/Precompiled.zip)."
msgstr ""
"Elixir はリリースごとにプリコンパイル済みパッケージをご用意しています。まずはじめに [Erlangをインストール](/install.html#in"
"stalling-erlang) します。次に [最新の Precopiled.zip ファイル](https://github.com/elixir-la"
"ng/elixir/releases/download/v{{ stable.version }}/Precompiled.zip)をダウンロード後、解凍し"
"てください。."

msgid ""
"Once the release is unpacked, you are ready to run the `elixir` and `iex` comm"
"ands from the `bin` directory, but we recommend you to [add Elixir's bin path "
"to your PATH environment variable](#setting-path-environment-variable) to ease"
" development."
msgstr ""
"一度ファイルを解凍すると 'bin' ディレクトリから 'elixir' や 'iex' コマンドを使用できますが、Elixir へのパスを環境変数 PAT"
"H に追加した方が効率的でしょう。\n"
"詳しくは [環境変数にパスを追加する](#setting-path-environment-variable) を参照してください。"

msgid "## Compiling with version managers"
msgstr "## バージョン管理ツールを使用する"

msgid ""
"There are many tools that allow developers to install and manage multiple Erla"
"ng and Elixir versions. They are useful if you can't install Erlang or Elixir "
"as mentioned above or if your package manager is simply outdated. Here are som"
"e of those tools:"
msgstr "それぞれバージョンの異なる Erlang や Elixir をインストールして、それらを管理できるようにするツールというのはいくつかあります。"

msgid ""
"  * [asdf](https://github.com/asdf-vm/asdf) - install and manage different Eli"
"xir and Erlang versions\n"
"  * [exenv](https://github.com/mururu/exenv) - install and manage different El"
"ixir versions\n"
"  * [kiex](https://github.com/taylor/kiex) - install and manage different Elix"
"ir versions\n"
"  * [kerl](https://github.com/yrashk/kerl) - install and manage different Erla"
"ng versions"
msgstr ""
"  * [asdf](https://github.com/asdf-vm/asdf) - Erlang と Elixir の複数バージョンをインストールし"
"管理ができます。\n"
"  * [exenv](https://github.com/mururu/exenv) - 〃\n"
"  * [kiex](https://github.com/taylor/kiex) - 〃\n"
"  * [kerl](https://github.com/yrashk/kerl) - 〃"

msgid ""
"Keep in mind that each Elixir version supports specific Erlang/OTP versions. ["
"Check the compatibility table](https://hexdocs.pm/elixir/compatibility-and-dep"
"recations.html#compatibility-between-elixir-and-erlang-otp) if you have questi"
"ons or run into issues."
msgstr ""

msgid "## Compiling from source (Unix and MinGW)"
msgstr "## ソースファイルから直接コンパイルする (UNIX 系や MinGW)"

msgid ""
"You can download and compile Elixir in few steps. The first one is to [install"
" Erlang](/install.html#installing-erlang)."
msgstr ""
"Elixir のダウンロードやコンパイルの前に、まず [Erlang をインストール](/install.html#installing-erlang) し"
"てください。"

msgid ""
"Next you should download source code ([.zip](https://github.com/elixir-lang/el"
"ixir/archive/v{{ stable.version }}.zip), [.tar.gz](https://github.com/elixir-l"
"ang/elixir/archive/v{{ stable.version }}.tar.gz)) of the [latest release](http"
"s://github.com/elixir-lang/elixir/releases/tag/v{{ stable.version }}), unpack "
"it and then run `make` inside the unpacked directory (note: if you are running"
" on Windows, [read this page on setting up your environment for compiling Elix"
"ir](https://github.com/elixir-lang/elixir/wiki/Windows))."
msgstr ""
"そうしましたら次は [最新バージョン](https://github.com/elixir-lang/elixir/releases/tag/v{{ sta"
"ble.version }}) の Elixir のソースコード ([.zip](https://github.com/elixir-lang/elixir"
"/archive/v{{ stable.version }}.zip), [.tar.gz](https://github.com/elixir-lang/"
"elixir/archive/v{{ stable.version }}.tar.gz)) をダウンロードしましょう。ファイルを解凍してディレクトリに移動し"
"、 `make` コマンドを実行します。(note: Windows をお使いの方は [Windows 環境に Elixir をコンパイルする方法](htt"
"ps://github.com/elixir-lang/elixir/wiki/Windows))を参照してください。)"

msgid ""
"After compiling, you are ready to run the elixir and `iex` commands from the b"
"in directory. It is recommended that you [add Elixir's bin path to your PATH e"
"nvironment variable](#setting-path-environment-variable) to ease development."
msgstr ""
"コンパイルが完了すると `bin` ディレクトリから `iex` コマンドで Elixir の REPL を起動できます。手軽な開発の為にも [Elixir"
" を環境変数 PATH に追加](#setting-path-environment-variable) することをおすすめします。"

msgid ""
"In case you are feeling a bit more adventurous, you can also compile from mast"
"er:"
msgstr "好奇心旺盛な方なら master ブランチから開発途中の Elixir もコンパイルしてお試しいただけます！"

msgid ""
"```bash\n"
"$ git clone https://github.com/elixir-lang/elixir.git\n"
"$ cd elixir\n"
"$ make clean test\n"
"```"
msgstr ""

msgid ""
"If the tests pass, you are ready to go. Otherwise, feel free to open an issue "
"[in the issues tracker on Github](https://github.com/elixir-lang/elixir)."
msgstr ""
"問題なければいいのですが、もし何か気づいたことがありましたら、いつでも気軽に Issue をください！\n"
"[in the issues tracker on Github](https://github.com/elixir-lang/elixir)"

msgid "## Installing Erlang"
msgstr "## Erlang をインストールする"

msgid ""
"The only prerequisite for Elixir is Erlang, version {{ stable.minimum_otp }} o"
"r later, which can be easily installed with [Precompiled packages](https://www"
".erlang-solutions.com/resources/download.html). In case you want to install it"
" directly from source, it can be found on [the Erlang website](http://www.erla"
"ng.org/download.html) or by following the excellent tutorial available in the "
"[Riak documentation](https://docs.basho.com/riak/latest/ops/building/installin"
"g/erlang/)."
msgstr ""
"Elixir に必要な要件は、 {{ stable.minimum_otp }} 以降の Erlang だけです。 [パッケージをプリコンパイル](http"
"s://www.erlang-solutions.com/resources/download.html)(英語) して簡単にインストールできます。ソースフ"
"ァイルからある特定のディレクトリにインストールしたい場合は、[Erlang 公式 Web サイト](http://www.erlang.org/downlo"
"ad.html)(英語) をお探しいただくか、 [Riak ドキュメント (Installing Erlang)](https://docs.basho.c"
"om/riak/latest/ops/building/installing/erlang/)(英語) がとても参考になるはずです。"

msgid ""
"For Windows developers, we recommend the precompiled packages. Those on a Unix"
" platform can probably get Erlang installed via one of the many package distri"
"bution tools."
msgstr ""
"Windows をご利用されている開発者にはプリコンパイル済みのパッケージをおすすめします。Unix 系ディストリビューションでは、大抵それぞれに用意された"
"ツールを用いて Erlang をインストールできます。"

msgid ""
"After Erlang is installed, you should be able to open up the command line (or "
"command prompt) and check the Erlang version by typing `erl`. You will see som"
"e information similar to:"
msgstr ""
"Erlang のインストールが終わりましたら、コマンドラインやコマンドプロンプトを開き、 `erl` コマンドでバージョンを確認しましょう。以下のような情報"
"がいくつか表示されるはずです。"

msgid ""
"    Erlang/OTP {{ stable.minimum_otp }} [64-bit] [smp:2:2] [async-threads:0] ["
"hipe] [kernel-poll:false]"
msgstr ""

msgid ""
"Notice that depending on how you installed Erlang, Erlang binaries might not b"
"e available in your PATH. Be sure to have Erlang binaries in your [PATH](https"
"://en.wikipedia.org/wiki/Environment_variable), otherwise Elixir won't work!"
msgstr ""
"Erlang のインストールの仕方によっては、環境変数 PATH からコマンドを利用できないことがあるかも知れません。その場合は PATH を適切に設定して"
"ください。そうでなければ、 Elixir を正常に利用できません。PATH (環境変数) という用語については [PATH](https://ja.wiki"
"pedia.org/wiki/環境変数) を参照してください。"

msgid "## Setting PATH environment variable"
msgstr "## 環境変数を設定する"

msgid ""
"It is highly recommended to add Elixir's bin path to your PATH environment var"
"iable to ease development."
msgstr "効率的な開発の為にも、Elixir コマンドのパスを環境変数 PATH に設定しておくことを強くおすすめします。"

msgid ""
"On **Windows**, there are [instructions for different versions](http://www.com"
"puterhope.com/issues/ch000549.htm) explaining the process."
msgstr ""
"**Windows をご利用の方** : 環境変数 PATH の設定が OS のバージョンによって異なります。 [各バージョンごとの取扱](http://w"
"ww.computerhope.com/issues/ch000549.htm)(英語) で手順の説明をご用意していますので参考にしてください。"

msgid ""
"On **Unix systems**, you need to [find your shell profile file](https://unix.s"
"tackexchange.com/a/117470/101951), and then add to the end of this file the fo"
"llowing line reflecting the path to your Elixir installation:"
msgstr ""
"**Unix 系ご利用の方** : Elixir のインストールを終えましたら、コマンドを探索する為に [ログインプロファイル](https://unix."
"stackexchange.com/a/117470/101951)(英語) を作成し、エディタで開いたのちに以下の一行を入力して保存します。設定ファイルが"
"すでに存在する場合は一番最後の行に書き加えてください。"

msgid ""
"```bash\n"
"export PATH=\"$PATH:/path/to/elixir/bin\"\n"
"```"
msgstr ""

msgid "## Checking the installed version of Elixir"
msgstr "## インストール済み Elixir を確認する"

msgid ""
"Once you have Elixir installed, you can check its version by running `elixir -"
"-version`."
msgstr "一度 Elixir のインストールを終わらせると、 `elixir --version` と入力すればバージョンを確認できます。"
