msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2017-10-30 15:10+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"layout: getting-started\n"
"title: Enumerables and Streams\n"
"---"
msgstr ""

msgid "# {{ page.title }}"
msgstr ""

msgid "{% include toc.html %}"
msgstr ""

msgid "## Enumerables"
msgstr ""

msgid ""
"Elixir provides the concept of enumerables and [the `Enum` module](https://hex"
"docs.pm/elixir/Enum.html) to work with them. We have already learned two enume"
"rables: lists and maps."
msgstr ""

msgid ""
"```iex\n"
"iex> Enum.map([1, 2, 3], fn x -> x * 2 end)\n"
"[2, 4, 6]\n"
"iex> Enum.map(%{1 => 2, 3 => 4}, fn {k, v} -> k * v end)\n"
"[2, 12]\n"
"```"
msgstr ""

msgid ""
"The `Enum` module provides a huge range of functions to transform, sort, group"
", filter and retrieve items from enumerables. It is one of the modules develop"
"ers use frequently in their Elixir code."
msgstr ""

msgid "Elixir also provides ranges:"
msgstr ""

msgid ""
"```iex\n"
"iex> Enum.map(1..3, fn x -> x * 2 end)\n"
"[2, 4, 6]\n"
"iex> Enum.reduce(1..3, 0, &+/2)\n"
"6\n"
"```"
msgstr ""

msgid ""
"The functions in the Enum module are limited to, as the name says, enumerating"
" values in data structures. For specific operations, like inserting and updati"
"ng particular elements, you may need to reach for modules specific to the data"
" type. For example, if you want to insert an element at a given position in a "
"list, you should use the `List.insert_at/3` function from [the `List` module]("
"https://hexdocs.pm/elixir/List.html), as it would make little sense to insert "
"a value into, for example, a range."
msgstr ""

msgid ""
"We say the functions in the `Enum` module are polymorphic because they can wor"
"k with diverse data types. In particular, the functions in the `Enum` module c"
"an work with any data type that implements [the `Enumerable` protocol](https:/"
"/hexdocs.pm/elixir/Enumerable.html). We are going to discuss Protocols in a la"
"ter chapter; for now we are going to move on to a specific kind of enumerable "
"called a stream."
msgstr ""

msgid "## Eager vs Lazy"
msgstr ""

msgid ""
"All the functions in the `Enum` module are eager. Many functions expect an enu"
"merable and return a list back:"
msgstr ""

msgid ""
"```iex\n"
"iex> odd? = &(rem(&1, 2) != 0)\n"
"#Function<6.80484245/1 in :erl_eval.expr/5>\n"
"iex> Enum.filter(1..3, odd?)\n"
"[1, 3]\n"
"```"
msgstr ""

msgid ""
"This means that when performing multiple operations with `Enum`, each operatio"
"n is going to generate an intermediate list until we reach the result:"
msgstr ""

msgid ""
"```iex\n"
"iex> total_sum = 1..100_000 |> Enum.map(&(&1 * 3)) |> Enum.filter(odd?) |> Enu"
"m.sum\n"
"7500000000\n"
"```"
msgstr ""

msgid ""
"The example above has a pipeline of operations. We start with a range and then"
" multiply each element in the range by 3. This first operation will now create"
" and return a list with `100_000` items. Then we keep all odd elements from th"
"e list, generating a new list, now with `50_000` items, and then we sum all en"
"tries."
msgstr ""

msgid "## The pipe operator"
msgstr ""

msgid ""
"The `|>` symbol used in the snippet above is the **pipe operator**: it takes t"
"he output from the expression on its left side and passes it as the first argu"
"ment to the function call on its right side. It's similar to the Unix `|` oper"
"ator.  Its purpose is to highlight the data being transformed by a series of f"
"unctions. To see how it can make the code cleaner, have a look at the example "
"above rewritten without using the `|>` operator:"
msgstr ""

msgid ""
"```iex\n"
"iex> Enum.sum(Enum.filter(Enum.map(1..100_000, &(&1 * 3)), odd?))\n"
"7500000000\n"
"```"
msgstr ""

msgid ""
"Find more about the pipe operator [by reading its documentation](https://hexdo"
"cs.pm/elixir/Kernel.html#%7C%3E/2)."
msgstr ""

msgid "## Streams"
msgstr ""

msgid ""
"As an alternative to `Enum`, Elixir provides [the `Stream` module](https://hex"
"docs.pm/elixir/Stream.html) which supports lazy operations:"
msgstr ""

msgid ""
"```iex\n"
"iex> 1..100_000 |> Stream.map(&(&1 * 3)) |> Stream.filter(odd?) |> Enum.sum\n"
"7500000000\n"
"```"
msgstr ""

msgid "Streams are lazy, composable enumerables."
msgstr ""

msgid ""
"In the example above, `1..100_000 |> Stream.map(&(&1 * 3))` returns a data typ"
"e, an actual stream, that represents the `map` computation over the range `1.."
"100_000`:"
msgstr ""

msgid ""
"```iex\n"
"iex> 1..100_000 |> Stream.map(&(&1 * 3))\n"
"#Stream<[enum: 1..100000, funs: [#Function<34.16982430/1 in Stream.map/2>]]>\n"
"```"
msgstr ""

msgid "Furthermore, they are composable because we can pipe many stream operations:"
msgstr ""

msgid ""
"```iex\n"
"iex> 1..100_000 |> Stream.map(&(&1 * 3)) |> Stream.filter(odd?)\n"
"#Stream<[enum: 1..100000, funs: [...]]>\n"
"```"
msgstr ""

msgid ""
"Instead of generating intermediate lists, streams build a series of computatio"
"ns that are invoked only when we pass the underlying stream to the `Enum` modu"
"le. Streams are useful when working with large, *possibly infinite*, collectio"
"ns."
msgstr ""

msgid ""
"Many functions in the `Stream` module accept any enumerable as an argument and"
" return a stream as a result. It also provides functions for creating streams."
" For example, `Stream.cycle/1` can be used to create a stream that cycles a gi"
"ven enumerable infinitely. Be careful to not call a function like `Enum.map/2`"
" on such streams, as they would cycle forever:"
msgstr ""

msgid ""
"```iex\n"
"iex> stream = Stream.cycle([1, 2, 3])\n"
"#Function<15.16982430/2 in Stream.unfold/2>\n"
"iex> Enum.take(stream, 10)\n"
"[1, 2, 3, 1, 2, 3, 1, 2, 3, 1]\n"
"```"
msgstr ""

msgid ""
"On the other hand, `Stream.unfold/2` can be used to generate values from a giv"
"en initial value:"
msgstr ""

msgid ""
"```iex\n"
"iex> stream = Stream.unfold(\"hełło\", &String.next_codepoint/1)\n"
"#Function<39.75994740/2 in Stream.unfold/2>\n"
"iex> Enum.take(stream, 3)\n"
"[\"h\", \"e\", \"ł\"]\n"
"```"
msgstr ""

msgid ""
"Another interesting function is `Stream.resource/3` which can be used to wrap "
"around resources, guaranteeing they are opened right before enumeration and cl"
"osed afterwards, even in the case of failures. For example, we can use it to s"
"tream a file:"
msgstr ""

msgid ""
"```iex\n"
"iex> stream = File.stream!(\"path/to/file\")\n"
"#Function<18.16982430/2 in Stream.resource/3>\n"
"iex> Enum.take(stream, 10)\n"
"```"
msgstr ""

msgid ""
"The example above will fetch the first 10 lines of the file you have selected."
" This means streams can be very useful for handling large files or even slow r"
"esources like network resources."
msgstr ""

msgid ""
"The amount of functionality in the [`Enum`](https://hexdocs.pm/elixir/Enum.htm"
"l) and [`Stream`](https://hexdocs.pm/elixir/Stream.html) modules can be daunti"
"ng at first, but you will get familiar with them case by case. In particular, "
"focus on the `Enum` module first and only move to `Stream` for the particular "
"scenarios where laziness is required, to either deal with slow resources or la"
"rge, possibly infinite, collections."
msgstr ""

msgid ""
"Next, we'll look at a feature central to Elixir, Processes, which allows us to"
" write concurrent, parallel and distributed programs in an easy and understand"
"able way."
msgstr ""
