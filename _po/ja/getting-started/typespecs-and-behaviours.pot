# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-08-08 04:23+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../getting-started/typespecs-and-behaviours.markdown:1
msgid "---\n"
"layout: getting-started\n"
"title: Typespecs and behaviours\n"
"---"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:6
msgid "# {{ page.title }}"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:8
msgid "{% include toc.html %}"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:10
msgid "## Types and specs"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:12
msgid "Elixir is a dynamically typed language, so all types in Elixir are inferred by the runtime. Nonetheless, Elixir comes with **typespecs**, which are a notation used for:"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:14
msgid "1. declaring typed function signatures (specifications);\n"
"2. declaring custom data types."
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:17
msgid "### Function specifications"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:19
msgid "By default, Elixir provides some basic types, such as `integer` or `pid`, as well as more complex types: for example, the `round/1` function, which rounds a float to its nearest integer, takes a `number` as an argument (an `integer` or a `float`) and returns an `integer`. As you can see [in its documentation](https://hexdocs.pm/elixir/Kernel.html#round/1), `round/1`'s typed signature is written as:"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:21
msgid "```elixir\n"
"round(number) :: integer\n"
"```"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:25
msgid "`::` means that the function on the left side *returns* a value whose type is what's on the right side. Function specs are written with the `@spec` directive, placed right before the function definition. The `round/1` function could be written as:"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:27
msgid "```elixir\n"
"@spec round(number) :: integer\n"
"def round(number), do: # implementation...\n"
"```"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:32
msgid "Elixir supports compound types as well. For example, a list of integers has type `[integer]`. You can see all the built-in types provided by Elixir [in the typespecs docs](https://hexdocs.pm/elixir/typespecs.html)."
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:34
msgid "### Defining custom types"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:36
msgid "While Elixir provides a lot of useful built-in types, it's convenient to define custom types when appropriate. This can be done when defining modules through the `@type` directive."
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:38
msgid "Say we have a `LousyCalculator` module, which performs the usual arithmetic operations (sum, product, and so on) but, instead of returning numbers, it returns tuples with the result of an operation as the first element and a random remark as the second element."
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:40
msgid "```elixir\n"
"defmodule LousyCalculator do\n"
"  @spec add(number, number) :: {number, String.t}\n"
"  def add(x, y), do: {x + y, \"You need a calculator to do that?!\"}"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:45
msgid "  @spec multiply(number, number) :: {number, String.t}\n"
"  def multiply(x, y), do: {x * y, \"Jeez, come on!\"}\n"
"end\n"
"```"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:50
msgid "As you can see in the example, tuples are a compound type and each tuple is identified by the types inside it. To understand why `String.t` is not written as `string`, have another look at the [notes in the typespecs docs](https://hexdocs.pm/elixir/typespecs.html#notes)."
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:52
msgid "Defining function specs this way works, but it quickly becomes annoying since we're repeating the type `{number, String.t}` over and over. We can use the `@type` directive in order to declare our own custom type."
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:54
msgid "```elixir\n"
"defmodule LousyCalculator do\n"
"  @typedoc \"\"\"\n"
"  Just a number followed by a string.\n"
"  \"\"\"\n"
"  @type number_with_remark :: {number, String.t}"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:61
msgid "  @spec add(number, number) :: number_with_remark\n"
"  def add(x, y), do: {x + y, \"You need a calculator to do that?\"}"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:64
msgid "  @spec multiply(number, number) :: number_with_remark\n"
"  def multiply(x, y), do: {x * y, \"It is like addition on steroids.\"}\n"
"end\n"
"```"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:69
msgid "The `@typedoc` directive, similarly to the `@doc` and `@moduledoc` directives, is used to document custom types."
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:71
msgid "Custom types defined through `@type` are exported and available outside the module they're defined in:"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:73
msgid "```elixir\n"
"defmodule QuietCalculator do\n"
"  @spec add(number, number) :: number\n"
"  def add(x, y), do: make_quiet(LousyCalculator.add(x, y))"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:78
msgid "  @spec make_quiet(LousyCalculator.number_with_remark) :: number\n"
"  defp make_quiet({num, _remark}), do: num\n"
"end\n"
"```"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:83
msgid "If you want to keep a custom type private, you can use the `@typep` directive instead of `@type`."
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:85
msgid "### Static code analysis"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:87
msgid "Typespecs are not only useful to developers as additional documentation. The Erlang tool [Dialyzer](http://www.erlang.org/doc/man/dialyzer.html), for example, uses typespecs in order to perform static analysis of code. That's why, in the `QuietCalculator` example, we wrote a spec for the `make_quiet/1` function even though it was defined as a private function."
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:89
msgid "## Behaviours"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:91
msgid "Many modules share the same public API. Take a look at [Plug](https://github.com/elixir-lang/plug), which, as its description states, is a **specification** for composable modules in web applications. Each *plug* is a module which **has to** implement at least two public functions: `init/1` and `call/2`."
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:93
msgid "Behaviours provide a way to:"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:95
msgid "* define a set of functions that have to be implemented by a module;\n"
"* ensure that a module implements all the functions in that set."
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:98
msgid "If you have to, you can think of behaviours like interfaces in object oriented languages like Java: a set of function signatures that a module has to implement."
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:100
msgid "### Defining behaviours"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:102
msgid "Say we want to implement a bunch of parsers, each parsing structured data: for example, a JSON parser and a MessagePack parser. Each of these two parsers will *behave* the same way: both will provide a `parse/1` function and an `extensions/0` function. The `parse/1` function will return an Elixir representation of the structured data, while the `extensions/0` function will return a list of file extensions that can be used for each type of data (e.g., `.json` for JSON files)."
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:104
msgid "We can create a `Parser` behaviour:"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:106
msgid "```elixir\n"
"defmodule Parser do\n"
"  @callback parse(String.t) :: {:ok, term} | {:error, String.t}\n"
"  @callback extensions() :: [String.t]\n"
"end\n"
"```"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:113
msgid "Modules adopting the `Parser` behaviour will have to implement all the functions defined with the `@callback` directive. As you can see, `@callback` expects a function name but also a function specification like the ones used with the `@spec` directive we saw above. Also note that the `term` type is used to represent the parsed value. In Elixir, the `term` type is a shortcut to represent any type."
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:115
msgid "### Adopting behaviours"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:117
msgid "Adopting a behaviour is straightforward:"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:119
msgid "```elixir\n"
"defmodule JSONParser do\n"
"  @behaviour Parser"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:123
msgid "  def parse(str), do: {:ok, \"some json \" <> str} # ... parse JSON\n"
"  def extensions, do: [\"json\"]\n"
"end\n"
"```"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:128
msgid "```elixir\n"
"defmodule YAMLParser do\n"
"  @behaviour Parser"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:132
msgid "  def parse(str), do: {:ok, \"some yaml \" <> str} # ... parse YAML\n"
"  def extensions, do: [\"yml\"]\n"
"end\n"
"```"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:137
msgid "If a module adopting a given behaviour doesn't implement one of the callbacks required by that behaviour, a compile-time warning will be generated."
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:139
msgid "### Dynamic dispatch"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:141
msgid "Behaviours are frequently used with dynamic dispatching. For example, we could add a `parse!` function to the `Parser` module that dispatches to the given implementation and returns the `:ok` result or raises in cases of `:error`:"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:143
msgid "```elixir\n"
"defmodule Parser do\n"
"  @callback parse(String.t) :: {:ok, term} | {:error, String.t}\n"
"  @callback extensions() :: [String.t]"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:148
msgid "  def parse!(implementation, contents) do\n"
"    case implementation.parse(contents) do\n"
"      {:ok, data} -> data\n"
"      {:error, error} -> raise ArgumentError, \"parsing error: #{error}\"\n"
"    end\n"
"  end\n"
"end\n"
"```"
msgstr ""

#: ../../../getting-started/typespecs-and-behaviours.markdown:157
msgid "Note you don't need to define a behaviour in order to dynamically dispatch on a module, but those features often go hand in hand."
msgstr ""

