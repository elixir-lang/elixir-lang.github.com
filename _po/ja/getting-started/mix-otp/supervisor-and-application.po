msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2017-10-30 15:10+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"layout: getting-started\n"
"title: Supervisor and Application\n"
"---"
msgstr ""

msgid "# {{ page.title }}"
msgstr ""

msgid "{% include toc.html %}"
msgstr ""

msgid "{% include mix-otp-preface.html %}"
msgstr ""

msgid ""
"So far our application has a registry that may monitor dozens, if not hundreds"
", of buckets. While we think our implementation so far is quite good, no softw"
"are is bug-free, and failures are definitely going to happen."
msgstr ""

msgid ""
"When things fail, your first reaction may be: \"let's rescue those errors\". But"
" in Elixir we avoid the defensive programming habit of rescuing exceptions. In"
"stead, we say \"let it crash\". If there is a bug that leads our registry to cra"
"sh, we have nothing to worry about because we are going to set up a supervisor"
" that will start a fresh copy of the registry."
msgstr ""

msgid ""
"In this chapter, we are going to learn about supervisors and also about applic"
"ations. We are going to create not one, but two supervisors, and use them to s"
"upervise our processes."
msgstr ""

msgid "## Our first supervisor"
msgstr ""

msgid ""
"Creating a supervisor is not much different from creating a GenServer. We are "
"going to define a module named `KV.Supervisor`, which will use the [Supervisor"
"](https://hexdocs.pm/elixir/Supervisor.html) behaviour, inside the `lib/kv/sup"
"ervisor.ex` file:"
msgstr ""

msgid ""
"```elixir\n"
"defmodule KV.Supervisor do\n"
"  use Supervisor"
msgstr ""

msgid ""
"  def start_link(opts) do\n"
"    Supervisor.start_link(__MODULE__, :ok, opts)\n"
"  end"
msgstr ""

msgid ""
"  def init(:ok) do\n"
"    children = [\n"
"      KV.Registry\n"
"    ]"
msgstr ""

msgid ""
"    Supervisor.init(children, strategy: :one_for_one)\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"Our supervisor has a single child so far: `KV.Registry`. After we define a lis"
"t of children, we call `Supervisor.init/2`, passing the children and the super"
"vision strategy."
msgstr ""

msgid ""
"The supervision strategy dictates what happens when one of the children crashe"
"s. `:one_for_one` means that if a child dies, it will be the only one restarte"
"d. Since we have only one child now, that's all we need. The `Supervisor` beha"
"viour supports many different strategies and we will discuss them in this chap"
"ter."
msgstr ""

msgid ""
"Once the supervisor starts, it will traverse the list of children and it will "
"invoke the `child_spec/1` function on each module."
msgstr ""

msgid ""
"The `child_spec/1` function returns the child specification which describes ho"
"w to start the process, if the process is a worker or a supervisor, if the pro"
"cess is temporary, transient or permanent and so on. The `child_spec/1` functi"
"on is automatically defined when we `use Agent`, `use GenServer`, `use Supervi"
"sor`, etc. Let's give it a try in the terminal with `iex -S mix`:"
msgstr ""

msgid ""
"```iex\n"
"iex(1)> KV.Registry.child_spec([])\n"
"%{\n"
"  id: KV.Registry,\n"
"  restart: :permanent,\n"
"  shutdown: 5000,\n"
"  start: {KV.Registry, :start_link, [[]]},\n"
"  type: :worker\n"
"}\n"
"```"
msgstr ""

msgid ""
"We will learn those details as we move forward on this guide. If you would rat"
"her peek ahead, check the [Supervisor](https://hexdocs.pm/elixir/Supervisor.ht"
"ml) docs."
msgstr ""

msgid ""
"After the supervisor retrieves all child specifications, it proceeds to start "
"its children one by one, in the order they were defined, using the information"
" in the `:start` key in the child specification. For our current specification"
", it will call `KV.Registry.start_link([])`."
msgstr ""

msgid ""
"In the previous chapter, we have used `start_supervised!` to start the registr"
"y during our tests. Internally, the `start_supervised!` function starts the re"
"gistry under a supervisor defined by the ExUnit framework. By defining our own"
" supervisor, we provide more structure on how we initialize, shutdown and supe"
"rvise registries in your applications, aligning our production code and tests "
"best practices."
msgstr ""

msgid ""
"So far `start_link/1` has always received an empty list of options. It is time"
" we change that."
msgstr ""

msgid "## Naming processes"
msgstr ""

msgid ""
"While our application will have many buckets, it will only have a single regis"
"try. So instead of always passing the registry PID around, we can give the reg"
"istry a name, and always reference it by its name."
msgstr ""

msgid ""
"Also, remember buckets were started dynamically based on user input, and that "
"meant we should not use atom names for managing our buckets. But the registry "
"is in the opposite situation, we want to start a single registry, preferably u"
"nder a supervisor, when our application boots."
msgstr ""

msgid ""
"So let's do that. Let's slightly change our children definition to be a list o"
"f tuples instead of a list of atoms:"
msgstr ""

msgid ""
"```elixir\n"
"  def init(:ok) do\n"
"    children = [\n"
"      {KV.Registry, name: KV.Registry}\n"
"    ]"
msgstr ""

msgid ""
"    Supervisor.init(children, strategy: :one_for_one)\n"
"  end\n"
"```"
msgstr ""

msgid ""
"The difference now is that, instead of calling `KV.Registry.start_link([])`, t"
"he Supervisor will call `KV.Registry.start_link([name: KV.Registry])`. If you "
"revisit `KV.Registry.start_link/1` implementation, you will remember it simply"
" passes the options to GenServer"
msgstr ""

msgid ""
"```elixir\n"
"  def start_link(opts) do\n"
"    GenServer.start_link(__MODULE__, :ok, opts)\n"
"  end\n"
"```"
msgstr ""

msgid "which in turn will register the process with the given name."
msgstr ""

msgid "Let's give this all a try inside `iex -S mix`:"
msgstr ""

msgid ""
"```iex\n"
"iex> KV.Supervisor.start_link([])\n"
"{:ok, #PID<0.66.0>}\n"
"iex> KV.Registry.create(KV.Registry, \"shopping\")\n"
":ok\n"
"iex> KV.Registry.lookup(KV.Registry, \"shopping\")\n"
"{:ok, #PID<0.70.0>}\n"
"```"
msgstr ""

msgid ""
"When we started the supervisor, the registry was automatically started with th"
"e given name, allowing us to create buckets without the need to manually start"
" it."
msgstr ""

msgid ""
"In practice, we rarely start the application supervisor manually. Instead, it "
"is started as part of the application callback."
msgstr ""

msgid "## Understanding applications"
msgstr ""

msgid ""
"We have been working inside an application this entire time. Every time we cha"
"nged a file and ran `mix compile`, we could see a `Generated kv app` message i"
"n the compilation output."
msgstr ""

msgid ""
"We can find the generated `.app` file at `_build/dev/lib/kv/ebin/kv.app`. Let'"
"s have a look at its contents:"
msgstr ""

msgid ""
"```erlang\n"
"{application,kv,\n"
"             [{applications,[kernel,stdlib,elixir,logger]},\n"
"              {description,\"kv\"},\n"
"              {modules,['Elixir.KV','Elixir.KV.Bucket','Elixir.KV.Registry',\n"
"                        'Elixir.KV.Supervisor']},\n"
"              {registered,[]},\n"
"              {vsn,\"0.1.0\"},\n"
"              {extra_applications,[logger]}]}.\n"
"```"
msgstr ""

msgid ""
"This file contains Erlang terms (written using Erlang syntax). Even though we "
"are not familiar with Erlang, it is easy to guess this file holds our applicat"
"ion definition. It contains our application `version`, all the modules defined"
" by it, as well as a list of applications we depend on, like Erlang's `kernel`"
", `elixir` itself, and `logger` which is specified in the `:extra_applications"
"` list in `mix.exs`."
msgstr ""

msgid ""
"It would be pretty boring to update this file manually every time we add a new"
" module to our application. That's why Mix generates and maintains it for us."
msgstr ""

msgid ""
"We can also configure the generated `.app` file by customizing the values retu"
"rned by the `application/0` inside our `mix.exs` project file. We are going to"
" do our first customization soon."
msgstr ""

msgid "### Starting applications"
msgstr ""

msgid ""
"When we define an `.app` file, which is the application specification, we are "
"able to start and stop the application as a whole. We haven't worried about th"
"is so far for two reasons:"
msgstr ""

msgid "1. Mix automatically starts our current application for us"
msgstr ""

msgid ""
"2. Even if Mix didn't start our application for us, our application does not y"
"et do anything when it starts"
msgstr ""

msgid ""
"In any case, let's see how Mix starts the application for us. Let's start a pr"
"oject console with `iex -S mix` and try:"
msgstr ""

msgid ""
"```iex\n"
"iex> Application.start(:kv)\n"
"{:error, {:already_started, :kv}}\n"
"```"
msgstr ""

msgid ""
"Oops, it's already started. Mix normally starts the whole hierarchy of applica"
"tions defined in our project's `mix.exs` file and it does the same for all dep"
"endencies if they depend on other applications."
msgstr ""

msgid ""
"We can pass an option to Mix to ask it to not start our application. Let's giv"
"e it a try by running `iex -S mix run --no-start`:"
msgstr ""

msgid ""
"```iex\n"
"iex> Application.start(:kv)\n"
":ok\n"
"```"
msgstr ""

msgid ""
"We can stop our `:kv` application as well as the `:logger` application, which "
"is started by default with Elixir:"
msgstr ""

msgid ""
"```iex\n"
"iex> Application.stop(:kv)\n"
":ok\n"
"iex> Application.stop(:logger)\n"
":ok\n"
"```"
msgstr ""

msgid "And let's try to start our application again:"
msgstr ""

msgid ""
"```iex\n"
"iex> Application.start(:kv)\n"
"{:error, {:not_started, :logger}}\n"
"```"
msgstr ""

msgid ""
"Now we get an error because an application that `:kv` depends on (`:logger` in"
" this case) isn't started. We need to either start each application manually i"
"n the correct order or call `Application.ensure_all_started` as follows:"
msgstr ""

msgid ""
"```iex\n"
"iex> Application.ensure_all_started(:kv)\n"
"{:ok, [:logger, :kv]}\n"
"```"
msgstr ""

msgid ""
"Nothing really exciting happens but it shows how we can control our applicatio"
"n."
msgstr ""

msgid ""
"> When you run `iex -S mix`, it is equivalent to running `iex -S mix run`. So "
"whenever you need to pass more options to Mix when starting IEx, it's a matter"
" of typing `iex -S mix run` and then passing any options the `run` command acc"
"epts. You can find more information about `run` by running `mix help run` in y"
"our shell."
msgstr ""

msgid "## The application callback"
msgstr ""

msgid ""
"Since we spent all this time talking about how applications are started and st"
"opped, there must be a way to do something useful when the application starts."
" And indeed, there is!"
msgstr ""

msgid ""
"We can specify an application callback function. This is a function that will "
"be invoked when the application starts. The function must return a result of `"
"{:ok, pid}`, where `pid` is the process identifier of a supervisor process."
msgstr ""

msgid ""
"We can configure the application callback in two steps. First, open up the `mi"
"x.exs` file and change `def application` to the following:"
msgstr ""

msgid ""
"```elixir\n"
"  def application do\n"
"    [\n"
"      extra_applications: [:logger],\n"
"      mod: {KV, []}\n"
"    ]\n"
"  end\n"
"```"
msgstr ""

msgid ""
"The `:mod` option specifies the \"application callback module\", followed by the"
" arguments to be passed on application start. The application callback module "
"can be any module that implements the [Application](https://hexdocs.pm/elixir/"
"Application.html) behaviour."
msgstr ""

msgid ""
"Now that we have specified `KV` as the module callback, we need to change the "
"`KV` module, defined in `lib/kv.ex`:"
msgstr ""

msgid ""
"```elixir\n"
"defmodule KV do\n"
"  use Application"
msgstr ""

msgid ""
"  def start(_type, _args) do\n"
"    KV.Supervisor.start_link(name: KV.Supervisor)\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"When we `use Application`, we need to define a couple functions, similar to wh"
"en we used `Supervisor` or `GenServer`. This time we only need to define a `st"
"art/2` function. If we wanted to specify custom behaviour on application stop,"
" we could define a `stop/1` function."
msgstr ""

msgid ""
"Let's start our project console once again with `iex -S mix`. We will see a pr"
"ocess named `KV.Registry` is already running:"
msgstr ""

msgid ""
"```iex\n"
"iex> KV.Registry.create(KV.Registry, \"shopping\")\n"
":ok\n"
"iex> KV.Registry.lookup(KV.Registry, \"shopping\")\n"
"{:ok, #PID<0.88.0>}\n"
"```"
msgstr ""

msgid ""
"How do we know this is working? After all, we are creating the bucket and then"
" looking it up; of course it should work, right? Well, remember that `KV.Regis"
"try.create/2` uses `GenServer.cast/2`, and therefore will return `:ok` regardl"
"ess of whether the message finds its target or not. At that point, we don't kn"
"ow whether the supervisor and the server are up, and if the bucket was created"
". However, `KV.Registry.lookup/2` uses `GenServer.call/3`, and will block and "
"wait for a response from the server. We do get a positive response, so we know"
" all is up and running."
msgstr ""

msgid ""
"For an experiment, try reimplementing `KV.Registry.create/2` to use `GenServer"
".call/3` instead, and momentarily disable the application callback. Run the co"
"de above on the console again, and you will see the creation step fails straig"
"ht away."
msgstr ""

msgid "Don't forget to bring the code back to normal before resuming this tutorial!"
msgstr ""

msgid "## Projects or applications?"
msgstr ""

msgid ""
"Mix makes a distinction between projects and applications. Based on the conten"
"ts of our `mix.exs` file, we would say we have a Mix project that defines the "
"`:kv` application. As we will see in later chapters, there are projects that d"
"on't define any application."
msgstr ""

msgid ""
"When we say \"project\" you should think about Mix. Mix is the tool that manages"
" your project. It knows how to compile your project, test your project and mor"
"e. It also knows how to compile and start the application relevant to your pro"
"ject."
msgstr ""

msgid ""
"When we talk about applications, we talk about <abbr title=\"Open Telecom Platf"
"orm\">OTP</abbr>. Applications are the entities that are started and stopped as"
" a whole by the runtime. You can learn more about applications and how they re"
"late to booting and shutting down of your system as a whole in the [docs for t"
"he Application module](https://hexdocs.pm/elixir/Application.html)."
msgstr ""

msgid ""
"Next let's learn about one special type of supervisor that is designed to star"
"t and shut down children dynamically, called dynamic supervisors."
msgstr ""
