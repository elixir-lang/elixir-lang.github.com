msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2017-10-30 15:10+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"layout: getting-started\n"
"title: Introduction to Mix\n"
"---"
msgstr ""

msgid "# {{ page.title }}"
msgstr ""

msgid "{% include toc.html %}"
msgstr ""

msgid ""
"In this guide, we will learn how to build a complete Elixir application, with "
"its own supervision tree, configuration, tests and more."
msgstr ""

msgid ""
"The application works as a distributed key-value store. We are going to organi"
"ze key-value pairs into buckets and distribute those buckets across multiple n"
"odes. We will also build a simple client that allows us to connect to any of t"
"hose nodes and send requests such as:"
msgstr ""

msgid ""
"```\n"
"CREATE shopping\n"
"OK"
msgstr ""

msgid ""
"PUT shopping milk 1\n"
"OK"
msgstr ""

msgid ""
"PUT shopping eggs 3\n"
"OK"
msgstr ""

msgid ""
"GET shopping milk\n"
"1\n"
"OK"
msgstr ""

msgid ""
"DELETE shopping eggs\n"
"OK\n"
"```"
msgstr ""

msgid ""
"In order to build our key-value application, we are going to use three main to"
"ols:"
msgstr ""

msgid ""
"* ***OTP*** _(Open Telecom Platform)_ is a set of libraries that ships with Er"
"lang. Erlang developers use OTP to build robust, fault-tolerant applications. "
"In this chapter we will explore how many aspects from OTP integrate with Elixi"
"r, including supervision trees, event managers and more;"
msgstr ""

msgid ""
"* ***[Mix](https://hexdocs.pm/mix/)*** is a build tool that ships with Elixir "
"that provides tasks for creating, compiling, testing your application, managin"
"g its dependencies and much more;"
msgstr ""

msgid ""
"* ***[ExUnit](https://hexdocs.pm/ex_unit/)*** is a test-unit based framework t"
"hat ships with Elixir;"
msgstr ""

msgid ""
"In this chapter, we will create our first project using Mix and explore differ"
"ent features in  <abbr title=\"Open Telecom Platform\">OTP</abbr>, Mix and ExUni"
"t as we go."
msgstr ""

msgid ""
"> This guide requires Elixir v1.6.1 or later. You can check your Elixir versio"
"n with `elixir --version` and install a more recent version if required by fol"
"lowing the steps described in [the first chapter of the Getting Started guide]"
"(/install.html).\n"
">\n"
"> If you have any questions or improvements to the guide, please reach discuss"
"ion channels such as the [Elixir Forum](https://elixirforum.com) or the [issue"
"s tracker](https://github.com/elixir-lang/elixir-lang.github.com/issues). Your"
" input is really important to help us guarantee the guides are accessible and "
"up to date!\n"
">\n"
"> The final code for the application built in this guide is in [this repositor"
"y](https://github.com/josevalim/kv_umbrella) and can be used as a reference."
msgstr ""

msgid ""
"> The Elixir guides are also available in EPUB format:\n"
">\n"
">   * [Getting started guide](https://repo.hex.pm/guides/elixir/elixir-getting"
"-started-guide.epub)\n"
">   * [Mix and OTP guide](https://repo.hex.pm/guides/elixir/mix-and-otp.epub)\n"
">   * [Meta-programming guide](https://repo.hex.pm/guides/elixir/meta-programm"
"ing-in-elixir.epub)"
msgstr ""

msgid "## Our first project"
msgstr ""

msgid ""
"When you install Elixir, besides getting the `elixir`, `elixirc` and `iex` exe"
"cutables, you also get an executable Elixir script named `mix`."
msgstr ""

msgid ""
"Let's create our first project by invoking `mix new` from the command line. We"
"'ll pass the project name as the argument (`kv`, in this case), and tell Mix t"
"hat our main module should be the all-uppercase `KV`, instead of the default, "
"which would have been `Kv`:"
msgstr ""

msgid ""
"```console\n"
"$ mix new kv --module KV\n"
"```"
msgstr ""

msgid "Mix will create a directory named `kv` with a few files in it:"
msgstr ""

msgid ""
"    * creating README.md\n"
"    * creating .formatter.exs\n"
"    * creating .gitignore\n"
"    * creating mix.exs\n"
"    * creating config\n"
"    * creating config/config.exs\n"
"    * creating lib\n"
"    * creating lib/kv.ex\n"
"    * creating test\n"
"    * creating test/test_helper.exs\n"
"    * creating test/kv_test.exs"
msgstr ""

msgid "Let's take a brief look at those generated files."
msgstr ""

msgid ""
"> Note: Mix is an Elixir executable. This means that in order to run `mix`, yo"
"u need to have both `mix` and `elixir` executables in your PATH. That's what h"
"appens when you install Elixir."
msgstr ""

msgid "## Project compilation"
msgstr ""

msgid ""
"A file named `mix.exs` was generated inside our new project folder (`kv`) and "
"its main responsibility is to configure our project. Let's take a look at it:"
msgstr ""

msgid ""
"```elixir\n"
"defmodule KV.MixProject do\n"
"  use Mix.Project"
msgstr ""

msgid ""
"  def project do\n"
"    [\n"
"      app: :kv,\n"
"      version: \"0.1.0\",\n"
"      elixir: \"~> 1.6-dev\",\n"
"      start_permanent: Mix.env == :prod,\n"
"      deps: deps()\n"
"    ]\n"
"  end"
msgstr ""

msgid ""
"  # Run \"mix help compile.app\" to learn about applications.\n"
"  def application do\n"
"    [\n"
"      extra_applications: [:logger]\n"
"    ]\n"
"  end"
msgstr ""

msgid ""
"  # Run \"mix help deps\" to learn about dependencies.\n"
"  defp deps do\n"
"    [\n"
"      # {:dep_from_hexpm, \"~> 0.3.0\"},\n"
"      # {:dep_from_git, git: \"https://github.com/elixir-lang/my_dep.git\", tag:"
" \"0.1.0\"},\n"
"    ]\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"Our `mix.exs` defines two public functions: `project`, which returns project c"
"onfiguration like the project name and version, and `application`, which is us"
"ed to generate an application file."
msgstr ""

msgid ""
"There is also a private function named `deps`, which is invoked from the `proj"
"ect` function, that defines our project dependencies. Defining `deps` as a sep"
"arate function is not required, but it helps keep the project configuration ti"
"dy."
msgstr ""

msgid ""
"Mix also generates a file at `lib/kv.ex` with a module containing exactly one "
"function, called `hello`:"
msgstr ""

msgid ""
"```elixir\n"
"defmodule KV do\n"
"  @moduledoc \"\"\"\n"
"  Documentation for KV.\n"
"  \"\"\""
msgstr ""

msgid ""
"  @doc \"\"\"\n"
"  Hello world."
msgstr ""

msgid "  ## Examples"
msgstr ""

msgid ""
"      iex> KV.hello()\n"
"      :world"
msgstr ""

msgid ""
"  \"\"\"\n"
"  def hello do\n"
"    :world\n"
"  end\n"
"end"
msgstr ""

msgid "```"
msgstr ""

msgid "This structure is enough to compile our project:"
msgstr ""

msgid ""
"```console\n"
"$ cd kv\n"
"$ mix compile\n"
"```"
msgstr ""

msgid "Will output:"
msgstr ""

msgid ""
"    Compiling 1 file (.ex)\n"
"    Generated kv app"
msgstr ""

msgid ""
"The `lib/kv.ex` file was compiled, an application manifest named `kv.app` was "
"generated and [all protocols were consolidated as described in the Getting Sta"
"rted guide](/getting-started/protocols.html#protocol-consolidation). All compi"
"lation artifacts are placed inside the `_build` directory using the options de"
"fined in the `mix.exs` file."
msgstr ""

msgid ""
"Once the project is compiled, you can start an `iex` session inside the projec"
"t by running:"
msgstr ""

msgid ""
"```console\n"
"$ iex -S mix\n"
"```"
msgstr ""

msgid "## Running tests"
msgstr ""

msgid ""
"Mix also generated the appropriate structure for running our project tests. Mi"
"x projects usually follow the convention of having a `<filename>_test.exs` fil"
"e in the `test` directory for each file in the `lib` directory. For this reaso"
"n, we can already find a `test/kv_test.exs` corresponding to our `lib/kv.ex` f"
"ile. It doesn't do much at this point:"
msgstr ""

msgid ""
"```elixir\n"
"defmodule KVTest do\n"
"  use ExUnit.Case\n"
"  doctest KV"
msgstr ""

msgid ""
"  test \"greets the world\" do\n"
"    assert KV.hello() == :world\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid "It is important to note a couple things:"
msgstr ""

msgid ""
"1. the test file is an Elixir script file (`.exs`). This is convenient because"
" we don't need to compile test files before running them;"
msgstr ""

msgid ""
"2. we define a test module named `KVTest`, use [`ExUnit.Case`](https://hexdocs"
".pm/ex_unit/ExUnit.Case.html) to inject the testing API and define a simple te"
"st using the `test/2` macro;"
msgstr ""

msgid ""
"Mix also generated a file named `test/test_helper.exs` which is responsible fo"
"r setting up the test framework:"
msgstr ""

msgid ""
"```elixir\n"
"ExUnit.start()\n"
"```"
msgstr ""

msgid ""
"This file will be required by Mix every time before we run our tests. We can r"
"un tests with `mix test`:"
msgstr ""

msgid ""
"    Compiled lib/kv.ex\n"
"    Generated kv app\n"
"    .."
msgstr ""

msgid ""
"    Finished in 0.04 seconds\n"
"    1 doctest, 1 test, 0 failures"
msgstr ""

msgid "    Randomized with seed 540224"
msgstr ""

msgid ""
"Notice that by running `mix test`, Mix has compiled the source files and gener"
"ated the application manifest once again. This happens because Mix supports mu"
"ltiple environments, which we will explore in the next section."
msgstr ""

msgid ""
"Furthermore, you can see that ExUnit prints a dot for each successful test and"
" automatically randomizes tests too. Let's make the test fail on purpose and s"
"ee what happens."
msgstr ""

msgid "Change the assertion in `test/kv_test.exs` to the following:"
msgstr ""

msgid ""
"```elixir\n"
"assert KV.hello() == :oops\n"
"```"
msgstr ""

msgid "Now run `mix test` again (notice this time there will be no compilation):"
msgstr ""

msgid ""
"```\n"
"  1) test greets the world (KVTest)\n"
"     test/kv_test.exs:5\n"
"     Assertion with == failed\n"
"     code:  assert KV.hello() == :oops\n"
"     left:  :world\n"
"     right: :oops\n"
"     stacktrace:\n"
"       test/kv_test.exs:6: (test)"
msgstr ""

msgid "."
msgstr ""

msgid ""
"Finished in 0.05 seconds\n"
"1 doctest, 1 test, 1 failure\n"
"```"
msgstr ""

msgid ""
"For each failure, ExUnit prints a detailed report, containing the test name wi"
"th the test case, the code that failed and the values for the left side and ri"
"ght side (rhs) of the `==` operator."
msgstr ""

msgid ""
"In the second line of the failure, right below the test name, there is the loc"
"ation where the test was defined. If you copy the test location in full, inclu"
"ding the file and line number, and append it to `mix test`, Mix will load and "
"run just that particular test:"
msgstr ""

msgid ""
"```console\n"
"$ mix test test/kv_test.exs:5\n"
"```"
msgstr ""

msgid ""
"This shortcut will be extremely useful as we build our project, allowing us to"
" quickly iterate by running a single test."
msgstr ""

msgid ""
"Finally, the stacktrace relates to the failure itself, giving information abou"
"t the test and often the place the failure was generated from within the sourc"
"e files."
msgstr ""

msgid "## Automatic code formatting"
msgstr ""

msgid ""
"One of the files generated by `mix new` is the `.formatter.exs`. Elixir ships "
"with a code formatter that is capable of automatically formatting our codebase"
" according to consistent style. The formatter is triggered with the `mix forma"
"t` task. The generated `.formatter.exs` file configures which files should be "
"formatted when `mix format` runs."
msgstr ""

msgid ""
"To give the formatter a try, change a file in the `lib` or `test` directories "
"to include extra spaces or extra newlines, such as `def  hello  do`, and then "
"run `mix format`."
msgstr ""

msgid ""
"Most editors provide built-in integration with the formatter, allowing a file "
"to be formatted on save or via a chosen keybinding. If you are learning Elixir"
", editor integration gives you useful and quick feedback when learning the Eli"
"xir syntax."
msgstr ""

msgid ""
"For companies and teams, we recommend developers to run `mix format --check-fo"
"rmatted` on their continuous integration servers, ensuring all current and fut"
"ure code follows the standard."
msgstr ""

msgid ""
"You can learn more about the code formatter by checking [the format task docum"
"entation](https://hexdocs.pm/mix/Mix.Tasks.Format.html) or by reading [the rel"
"ease announcement for Elixir v1.6](https://elixir-lang.org/blog/2018/01/17/eli"
"xir-v1-6-0-released/), the first version to include the formatter."
msgstr ""

msgid "## Environments"
msgstr ""

msgid ""
"Mix supports the concept of \"environments\". They allow a developer to customiz"
"e compilation and other options for specific scenarios. By default, Mix unders"
"tands three environments:"
msgstr ""

msgid ""
"* `:dev` - the one in which Mix tasks (like `compile`) run by default\n"
"* `:test` - used by `mix test`\n"
"* `:prod` - the one you will use to run your project in production"
msgstr ""

msgid ""
"The environment applies only to the current project. As we will see later on, "
"any dependency you add to your project will by default run in the `:prod` envi"
"ronment."
msgstr ""

msgid ""
"Customization per environment can be done by accessing [the `Mix.env` function"
"](https://hexdocs.pm/mix/Mix.html#env/0) in your `mix.exs` file, which returns"
" the current environment as an atom. That's what we have used in the `:start_p"
"ermanent` options:"
msgstr ""

msgid ""
"```elixir\n"
"def project do\n"
"  [...,\n"
"   start_permanent: Mix.env == :prod,\n"
"   ...]\n"
"end\n"
"```"
msgstr ""

msgid ""
"When true, the `:start_permanent` option starts your application in permanent "
"mode, which means the Erlang VM will crash if your application's supervision t"
"ree shuts down. Notice we don't want this behaviour in dev and test because it"
" is useful to keep the VM instance running in those environments for troublesh"
"ooting purposes."
msgstr ""

msgid ""
"Mix will default to the `:dev` environment, except for the `test` task that wi"
"ll default to the `:test` environment. The environment can be changed via the "
"`MIX_ENV` environment variable:"
msgstr ""

msgid ""
"```console\n"
"$ MIX_ENV=prod mix compile\n"
"```"
msgstr ""

msgid "Or on Windows:"
msgstr ""

msgid ""
"```batch\n"
"> set \"MIX_ENV=prod\" && mix compile\n"
"```"
msgstr ""

msgid ""
"> Mix is a build tool and, as such, it is not always expected to be available "
"in production, especially if your team uses explicit build steps. Therefore, i"
"t is recommended to access `Mix.env` only in configuration files and inside `m"
"ix.exs`, never in your application code (`lib`)."
msgstr ""

msgid "## Exploring"
msgstr ""

msgid ""
"There is much more to Mix, and we will continue to explore it as we build our "
"project. A [general overview is available on the Mix documentation](https://he"
"xdocs.pm/mix/). Read [the Mix source code here](https://github.com/elixir-lang"
"/elixir/tree/master/lib/mix)."
msgstr ""

msgid ""
"Keep in mind that you can always invoke the help task to list all available ta"
"sks:"
msgstr ""

msgid ""
"```console\n"
"$ mix help\n"
"```"
msgstr ""

msgid ""
"You can get further information about a particular task by invoking `mix help "
"TASK`."
msgstr ""

msgid "Let's write some code!"
msgstr ""
