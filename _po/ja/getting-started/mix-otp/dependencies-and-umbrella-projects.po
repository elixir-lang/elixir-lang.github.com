msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2018-07-27 22:30+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"layout: getting-started\n"
"title: Dependencies and umbrella projects\n"
"redirect_from: /getting-started/mix-otp/dependencies-and-umbrella-apps.html\n"
"---"
msgstr ""

msgid "# {{ page.title }}"
msgstr ""

msgid "{% include toc.html %}"
msgstr ""

msgid "{% include mix-otp-preface.html %}"
msgstr ""

msgid "In this chapter, we will discuss how to manage dependencies in Mix."
msgstr ""

msgid ""
"Our `kv` application is complete, so it's time to implement the server that wi"
"ll handle the requests we defined in the first chapter:"
msgstr ""

msgid ""
"```\n"
"CREATE shopping\n"
"OK"
msgstr ""

msgid ""
"PUT shopping milk 1\n"
"OK"
msgstr ""

msgid ""
"PUT shopping eggs 3\n"
"OK"
msgstr ""

msgid ""
"GET shopping milk\n"
"1\n"
"OK"
msgstr ""

msgid ""
"DELETE shopping eggs\n"
"OK\n"
"```"
msgstr ""

msgid ""
"However, instead of adding more code to the `kv` application, we are going to "
"build the TCP server as another application that is a client of the `kv` appli"
"cation. Since the whole runtime and Elixir ecosystem are geared towards applic"
"ations, it makes sense to break our projects into smaller applications that wo"
"rk together rather than building a big, monolithic app."
msgstr ""

msgid ""
"Before creating our new application, we must discuss how Mix handles dependenc"
"ies. In practice, there are two kinds of dependencies we usually work with: in"
"ternal and external dependencies. Mix supports mechanisms to work with both of"
" them."
msgstr ""

msgid "## External dependencies"
msgstr ""

msgid ""
"External dependencies are the ones not tied to your business domain. For examp"
"le, if you need an HTTP API for your distributed KV application, you can use t"
"he [Plug](https://github.com/elixir-lang/plug) project as an external dependen"
"cy."
msgstr ""

msgid ""
"Installing external dependencies is simple. Most commonly, we use the [Hex Pac"
"kage Manager](https://hex.pm), by listing the dependency inside the deps funct"
"ion in our `mix.exs` file:"
msgstr ""

msgid ""
"```elixir\n"
"def deps do\n"
"  [{:plug, \"~> 1.0\"}]\n"
"end\n"
"```"
msgstr ""

msgid ""
"This dependency refers to the latest version of Plug in the 1.x.x version seri"
"es that has been pushed to Hex. This is indicated by the `~>` preceding the ve"
"rsion number. For more information on specifying version requirements, see the"
" [documentation for the Version module](https://hexdocs.pm/elixir/Version.html"
")."
msgstr ""

msgid ""
"Typically, stable releases are pushed to Hex. If you want to depend on an exte"
"rnal dependency still in development, Mix is able to manage Git dependencies t"
"oo:"
msgstr ""

msgid ""
"```elixir\n"
"def deps do\n"
"  [{:plug, git: \"git://github.com/elixir-lang/plug.git\"}]\n"
"end\n"
"```"
msgstr ""

msgid ""
"You will notice that when you add a dependency to your project, Mix generates "
"a `mix.lock` file that guarantees *repeatable builds*. The lock file must be c"
"hecked in to your version control system, to guarantee that everyone who uses "
"the project will use the same dependency versions as you."
msgstr ""

msgid ""
"Mix provides many tasks for working with dependencies, which can be seen in `m"
"ix help`:"
msgstr ""

msgid ""
"```console\n"
"$ mix help\n"
"mix deps              # Lists dependencies and their status\n"
"mix deps.clean        # Deletes the given dependencies' files\n"
"mix deps.compile      # Compiles dependencies\n"
"mix deps.get          # Gets all out of date dependencies\n"
"mix deps.tree         # Prints the dependency tree\n"
"mix deps.unlock       # Unlocks the given dependencies\n"
"mix deps.update       # Updates the given dependencies\n"
"```"
msgstr ""

msgid ""
"The most common tasks are `mix deps.get` and `mix deps.update`. Once fetched, "
"dependencies are automatically compiled for you. You can read more about deps "
"by typing `mix help deps`, and in the [documentation for the Mix.Tasks.Deps mo"
"dule](https://hexdocs.pm/mix/Mix.Tasks.Deps.html)."
msgstr ""

msgid "## Internal dependencies"
msgstr ""

msgid ""
"Internal dependencies are the ones that are specific to your project. They usu"
"ally don't make sense outside the scope of your project/company/organization. "
"Most of the time, you want to keep them private, whether due to technical, eco"
"nomic or business reasons."
msgstr ""

msgid ""
"If you have an internal dependency, Mix supports two methods to work with them"
": Git repositories or umbrella projects."
msgstr ""

msgid ""
"For example, if you push the `kv` project to a Git repository, you'll need to "
"list it in your deps code in order to use it:"
msgstr ""

msgid ""
"```elixir\n"
"def deps do\n"
"  [{:kv, git: \"https://github.com/YOUR_ACCOUNT/kv.git\"}]\n"
"end\n"
"```"
msgstr ""

msgid ""
"If the repository is private though, you may need to specify the private URL `"
"git@github.com:YOUR_ACCOUNT/kv.git`. In any case, Mix will be able to fetch it"
" for you as long as you have the proper credentials."
msgstr ""

msgid ""
"Using Git repositories for internal dependencies is somewhat discouraged in El"
"ixir. Remember that the runtime and the Elixir ecosystem already provide the c"
"oncept of applications. As such, we expect you to frequently break your code i"
"nto applications that can be organized logically, even within a single project"
"."
msgstr ""

msgid ""
"However, if you push every application as a separate project to a Git reposito"
"ry, your projects may become very hard to maintain as you will spend a lot of "
"time managing those Git repositories rather than writing your code."
msgstr ""

msgid ""
"For this reason, Mix supports \"umbrella projects\". Umbrella projects are used "
"to build applications that run together in a single repository. That is exactl"
"y the style we are going to explore in the next sections."
msgstr ""

msgid ""
"Let's create a new Mix project. We are going to creatively name it `kv_umbrell"
"a`, and this new project will have both the existing `kv` application and the "
"new `kv_server` application inside. The directory structure will look like thi"
"s:"
msgstr ""

msgid ""
"    + kv_umbrella\n"
"      + apps\n"
"        + kv\n"
"        + kv_server"
msgstr ""

msgid ""
"The interesting thing about this approach is that Mix has many conveniences fo"
"r working with such projects, such as the ability to compile and test all appl"
"ications inside `apps` with a single command. However, even though they are al"
"l listed together inside `apps`, they are still decoupled from each other, so "
"you can build, test and deploy each application in isolation if you want to."
msgstr ""

msgid "So let's get started!"
msgstr ""

msgid "## Umbrella projects"
msgstr ""

msgid ""
"Let's start a new project using `mix new`. This new project will be named `kv_"
"umbrella` and we need to pass the `--umbrella` option when creating it. Do not"
" create this new project inside the existing `kv` project!"
msgstr ""

msgid ""
"```console\n"
"$ mix new kv_umbrella --umbrella\n"
"* creating README.md\n"
"* creating .formatter.exs\n"
"* creating .gitignore\n"
"* creating mix.exs\n"
"* creating apps\n"
"* creating config\n"
"* creating config/config.exs\n"
"```"
msgstr ""

msgid ""
"From the printed information, we can see far fewer files are generated. The ge"
"nerated `mix.exs` file is different too. Let's take a look (comments have been"
" removed):"
msgstr ""

msgid ""
"```elixir\n"
"defmodule KvUmbrella.MixProject do\n"
"  use Mix.Project"
msgstr ""

msgid ""
"  def project do\n"
"    [\n"
"      apps_path: \"apps\",\n"
"      start_permanent: Mix.env() == :prod,\n"
"      deps: deps()\n"
"    ]\n"
"  end"
msgstr ""

msgid ""
"  defp deps do\n"
"    []\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"What makes this project different from the previous one is the `apps_path: \"ap"
"ps\"` entry in the project definition. This means this project will act as an u"
"mbrella. Such projects do not have source files nor tests, although they can h"
"ave their own dependencies. Each child application must be defined inside the "
"`apps` directory."
msgstr ""

msgid ""
"Let's move inside the apps directory and start building `kv_server`. This time"
", we are going to pass the `--sup` flag, which will tell Mix to generate a sup"
"ervision tree automatically for us, instead of building one manually as we did"
" in previous chapters:"
msgstr ""

msgid ""
"```console\n"
"$ cd kv_umbrella/apps\n"
"$ mix new kv_server --module KVServer --sup\n"
"```"
msgstr ""

msgid ""
"The generated files are similar to the ones we first generated for `kv`, with "
"a few differences. Let's open up `mix.exs`:"
msgstr ""

msgid ""
"```elixir\n"
"defmodule KVServer.MixProject do\n"
"  use Mix.Project"
msgstr ""

msgid ""
"  def project do\n"
"    [\n"
"      app: :kv_server,\n"
"      version: \"0.1.0\",\n"
"      build_path: \"../../_build\",\n"
"      config_path: \"../../config/config.exs\",\n"
"      deps_path: \"../../deps\",\n"
"      lockfile: \"../../mix.lock\",\n"
"      elixir: \"~> 1.7-dev\",\n"
"      start_permanent: Mix.env() == :prod,\n"
"      deps: deps()\n"
"    ]\n"
"  end"
msgstr ""

msgid ""
"  # Run \"mix help compile.app\" to learn about applications.\n"
"  def application do\n"
"    [\n"
"      extra_applications: [:logger],\n"
"      mod: {KVServer.Application, []}\n"
"    ]\n"
"  end"
msgstr ""

msgid ""
"  # Run \"mix help deps\" to learn about dependencies.\n"
"  defp deps do\n"
"    [\n"
"      # {:dep_from_hexpm, \"~> 0.3.0\"},\n"
"      # {:dep_from_git, git: \"https://github.com/elixir-lang/my_dep.git\", tag:"
" \"0.1.0\"},\n"
"      # {:sibling_app_in_umbrella, in_umbrella: true},\n"
"    ]\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"First of all, since we generated this project inside `kv_umbrella/apps`, Mix a"
"utomatically detected the umbrella structure and added four lines to the proje"
"ct definition:"
msgstr ""

msgid ""
"```elixir\n"
"build_path: \"../../_build\",\n"
"config_path: \"../../config/config.exs\",\n"
"deps_path: \"../../deps\",\n"
"lockfile: \"../../mix.lock\",\n"
"```"
msgstr ""

msgid ""
"Those options mean all dependencies will be checked out to `kv_umbrella/deps`,"
" and they will share the same build, config and lock files. This ensures depen"
"dencies will be fetched and compiled once for the whole umbrella structure, in"
"stead of once per umbrella application."
msgstr ""

msgid "The second change is in the `application` function inside `mix.exs`:"
msgstr ""

msgid ""
"```elixir\n"
"def application do\n"
"  [\n"
"    extra_applications: [:logger],\n"
"    mod: {KVServer.Application, []}\n"
"  ]\n"
"end\n"
"```"
msgstr ""

msgid ""
"Because we passed the `--sup` flag, Mix automatically added `mod: {KVServer.Ap"
"plication, []}`, specifying that `KVServer.Application` is our application cal"
"lback module. `KVServer.Application` will start our application supervision tr"
"ee."
msgstr ""

msgid "In fact, let's open up `lib/kv_server/application.ex`:"
msgstr ""

msgid ""
"```elixir\n"
"defmodule KVServer.Application do\n"
"  # See https://hexdocs.pm/elixir/Application.html\n"
"  # for more information on OTP Applications\n"
"  @moduledoc false"
msgstr ""

msgid "  use Application"
msgstr ""

msgid ""
"  def start(_type, _args) do\n"
"    # List all child processes to be supervised\n"
"    children = [\n"
"      # Starts a worker by calling: KVServer.Worker.start_link(arg)\n"
"      # {KVServer.Worker, arg},\n"
"    ]"
msgstr ""

msgid ""
"    # See https://hexdocs.pm/elixir/Supervisor.html\n"
"    # for other strategies and supported options\n"
"    opts = [strategy: :one_for_one, name: KVServer.Supervisor]\n"
"    Supervisor.start_link(children, opts)\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"Notice that it defines the application callback function, `start/2`, and inste"
"ad of defining a supervisor named `KVServer.Supervisor` that uses the `Supervi"
"sor` module, it conveniently defined the supervisor inline! You can read more "
"about such supervisors by reading [the Supervisor module documentation](https:"
"//hexdocs.pm/elixir/Supervisor.html)."
msgstr ""

msgid ""
"We can already try out our first umbrella child. We could run tests inside the"
" `apps/kv_server` directory, but that wouldn't be much fun. Instead, go to the"
" root of the umbrella project and run `mix test`:"
msgstr ""

msgid ""
"```console\n"
"$ mix test\n"
"```"
msgstr ""

msgid "And it works!"
msgstr ""

msgid ""
"Since we want `kv_server` to eventually use the functionality we defined in `k"
"v`, we need to add `kv` as a dependency to our application."
msgstr ""

msgid "## Dependencies within an umbrella project"
msgstr ""

msgid ""
"Dependencies between applications in an umbrella project must still be explici"
"tly defined and Mix makes easy to do so. Open up `apps/kv_server/mix.exs` and "
"change the `deps/0` function to the following:"
msgstr ""

msgid ""
"```elixir\n"
"defp deps do\n"
"  [{:kv, in_umbrella: true}]\n"
"end\n"
"```"
msgstr ""

msgid ""
"The line above makes `:kv` available as a dependency inside `:kv_server` and a"
"utomatically starts the `:kv` application before the server starts."
msgstr ""

msgid ""
"Finally, copy the `kv` application we have built so far to the `apps` director"
"y in our new umbrella project. The final directory structure should match the "
"structure we mentioned earlier:"
msgstr ""

msgid ""
"We now need to modify `apps/kv/mix.exs` to contain the umbrella entries we hav"
"e seen in `apps/kv_server/mix.exs`. Open up `apps/kv/mix.exs` and add to the `"
"project/0` function:"
msgstr ""

msgid ""
"Now you can run tests for both projects from the umbrella root with `mix test`"
". Sweet!"
msgstr ""

msgid "## Don't drink the kool aid"
msgstr ""

msgid ""
"Umbrella projects are a convenience to help you organize and manage multiple a"
"pplications. While it provides a degree of separation between applications, th"
"ose applications are not fully decoupled, as they are assumed to share the sam"
"e configuration and the same dependencies."
msgstr ""

msgid ""
"The pattern of keeping multiple applications in the same repository is known a"
"s \"mono-repo\". Umbrella projects maximize this pattern by providing convenienc"
"es to compile, test and run multiple applications at once."
msgstr ""

msgid ""
"If you find yourself in a position where you want to use different configurati"
"ons in each application for the same dependency or use different dependency ve"
"rsions, then it is likely your codebase has grown beyond what umbrellas can pr"
"ovide."
msgstr ""

msgid ""
"The good news is that breaking an umbrella apart is quite straightforward, as "
"you simply need to move applications outside of the umbrella project's `apps/`"
" directory. In the worst case scenario, you can discard the umbrella project a"
"nd all related configuration (`build_path`, `config_path`, `deps_path` and `lo"
"ckfile`) and still leverage the \"mono-repo\" pattern by keeping all application"
"s together in the same repository. Each application will have its own dependen"
"cies and configuration. Dependencies between those applications can still be e"
"xplicitly listed by using the `:path` option (in contrast to `:git`)."
msgstr ""

msgid "## Summing up"
msgstr ""

msgid ""
"In this chapter, we have learned more about Mix dependencies and umbrella proj"
"ects. While we may run `kv` without a server, our `kv_server` depends directly"
" on `kv`. By breaking them into separate applications, we gain more control in"
" how they are developed and tested."
msgstr ""

msgid ""
"When using umbrella applications, it is important to have a clear boundary bet"
"ween them. Our upcoming `kv_server` must only access public APIs defined in `k"
"v`. Think of your umbrella apps as any other dependency or even Elixir itself:"
" you can only access what is public and documented. Reaching into private func"
"tionality in your dependencies is a poor practice that will eventually cause y"
"our code to break when a new version is up."
msgstr ""

msgid ""
"Umbrella applications can also be used as a stepping stone for eventually extr"
"acting an application from your codebase. For example, imagine a web applicati"
"on that has to send \"push notifications\" to its users. The whole \"push notific"
"ations system\" can be developed as a separate application in the umbrella, wit"
"h its own supervision tree and APIs. If you ever run into a situation where an"
"other project needs the push notifications system, the system can be moved to "
"a private repository or a Hex package."
msgstr ""

msgid ""
"Developers may also use umbrella projects to break large business domains apar"
"t. The caution here is to make sure the domains don't depend on each other (al"
"so known as cyclic dependencies). If you run into such situations, it means th"
"ose applications are not as isolated from each other as you originally thought"
", and you have architectural and design issues to solve."
msgstr ""

msgid ""
"Finally, keep in mind that applications in an umbrella project all share the s"
"ame configurations and dependencies. If two applications in your umbrella need"
" to configure the same dependency in drastically different ways or even use di"
"fferent versions, you have probably outgrown the benefits brought by umbrellas"
". Remember you can break the umbrella and still leverage the benefits behind \""
"mono-repos\"."
msgstr ""

msgid ""
"With our umbrella project up and running, it is time to start writing our serv"
"er."
msgstr ""
