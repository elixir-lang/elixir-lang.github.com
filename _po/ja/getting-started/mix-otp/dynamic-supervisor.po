msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2017-10-30 15:10+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"layout: getting-started\n"
"title: Dynamic supervisors\n"
"---"
msgstr ""

msgid "# {{ page.title }}"
msgstr ""

msgid "{% include toc.html %}"
msgstr ""

msgid "{% include mix-otp-preface.html %}"
msgstr ""

msgid ""
"We have now successfully defined our supervisor which is automatically started"
" (and stopped) as part of our application lifecycle."
msgstr ""

msgid ""
"Remember however that our `KV.Registry` is both linking (via `start_link`) and"
" monitoring (via `monitor`) bucket processes in the `handle_cast/2` callback:"
msgstr ""

msgid ""
"```elixir\n"
"{:ok, pid} = KV.Bucket.start_link([])\n"
"ref = Process.monitor(pid)\n"
"```"
msgstr ""

msgid ""
"Links are bidirectional, which implies that a crash in a bucket will crash the"
" registry. Although we now have the supervisor, which guarantees the registry "
"will be back up and running, crashing the registry still means we lose all dat"
"a associating bucket names to their respective processes."
msgstr ""

msgid ""
"In other words, we want the registry to keep on running even if a bucket crash"
"es. Let's write a new registry test:"
msgstr ""

msgid ""
"```elixir\n"
"test \"removes bucket on crash\", %{registry: registry} do\n"
"  KV.Registry.create(registry, \"shopping\")\n"
"  {:ok, bucket} = KV.Registry.lookup(registry, \"shopping\")"
msgstr ""

msgid ""
"  # Stop the bucket with non-normal reason\n"
"  Agent.stop(bucket, :shutdown)\n"
"  assert KV.Registry.lookup(registry, \"shopping\") == :error\n"
"end\n"
"```"
msgstr ""

msgid ""
"The test is similar to \"removes bucket on exit\" except that we are being a bit"
" more harsh by sending `:shutdown` as the exit reason instead of `:normal`. If"
" a process terminates with a reason different than `:normal`, all linked proce"
"sses receive an EXIT signal, causing the linked process to also terminate unle"
"ss they are trapping exits."
msgstr ""

msgid ""
"Since the bucket terminated, the registry went away with it, and our test fail"
"s when trying to `GenServer.call/3` it:"
msgstr ""

msgid ""
"```\n"
"  1) test removes bucket on crash (KV.RegistryTest)\n"
"     test/kv/registry_test.exs:26\n"
"     ** (exit) exited in: GenServer.call(#PID<0.148.0>, {:lookup, \"shopping\"},"
" 5000)\n"
"         ** (EXIT) no process: the process is not alive or there's no process "
"currently associated with the given name, possibly because its application isn"
"'t started\n"
"     code: assert KV.Registry.lookup(registry, \"shopping\") == :error\n"
"     stacktrace:\n"
"       (elixir) lib/gen_server.ex:770: GenServer.call/3\n"
"       test/kv/registry_test.exs:33: (test)\n"
"```"
msgstr ""

msgid ""
"We are going to solve this issue by defining a new supervisor that will spawn "
"and supervise all buckets. Opposite to the previous Supervisor we defined, the"
" children are not known upfront, but they are rather started dynamically. For "
"those situations, we use a `DynamicSupervisor`. The `DynamicSupervisor` does n"
"ot expect a list of children during initialization, instead each child is star"
"ted manually via `DynamicSupervisor.start_child/2`."
msgstr ""

msgid "## The bucket supervisor"
msgstr ""

msgid ""
"Let's define a DynamicSupervisor and give it a name of `KV.BucketSupervisor` i"
"n `lib/kv/supervisor.ex` as follows:"
msgstr ""

msgid ""
"```elixir\n"
"  def init(:ok) do\n"
"    children = [\n"
"      {KV.Registry, name: KV.Registry},\n"
"      {DynamicSupervisor, name: KV.BucketSupervisor, strategy: :one_for_one}\n"
"    ]"
msgstr ""

msgid ""
"    Supervisor.init(children, strategy: :one_for_one)\n"
"  end\n"
"```"
msgstr ""

msgid ""
"Note this time we didn't have to define a separate module that invokes `use Dy"
"namicSupervisor`. Instead we directly started it in our supervision tree. This"
" is straight-forward to do with the `DynamicSupervisor` because it doesn't req"
"uire any child to be given during initialization."
msgstr ""

msgid "Run `iex -S mix` so we can give our dynamic supervisor a try:"
msgstr ""

msgid ""
"```iex\n"
"iex> {:ok, bucket} = DynamicSupervisor.start_child(KV.BucketSupervisor, KV.Buc"
"ket)\n"
"{:ok, #PID<0.72.0>}\n"
"iex> KV.Bucket.put(bucket, \"eggs\", 3)\n"
":ok\n"
"iex> KV.Bucket.get(bucket, \"eggs\")\n"
"3\n"
"```"
msgstr ""

msgid ""
"`DynamicSupervisor.start_child/2` expects the name of the supervisor and the c"
"hild specification of the child to be started."
msgstr ""

msgid "The last step is to change the registry to use the dynamic supervisor:"
msgstr ""

msgid ""
"```elixir\n"
"  def handle_cast({:create, name}, {names, refs}) do\n"
"    if Map.has_key?(names, name) do\n"
"      {:noreply, {names, refs}}\n"
"    else\n"
"      {:ok, pid} = DynamicSupervisor.start_child(KV.BucketSupervisor, KV.Bucke"
"t)\n"
"      ref = Process.monitor(pid)\n"
"      refs = Map.put(refs, ref, name)\n"
"      names = Map.put(names, name, pid)\n"
"      {:noreply, {names, refs}}\n"
"    end\n"
"  end\n"
"```"
msgstr ""

msgid ""
"That's enough for our tests to pass but there is a resource leakage in our app"
"lication. When a bucket terminates, the supervisor will start a new bucket in "
"its place. After all, that's the role of the supervisor!"
msgstr ""

msgid ""
"However, when the supervisor restarts the new bucket, the registry does not kn"
"ow about it. So we will have an empty bucket in the supervisor that nobody can"
" access! To solve this, we want to say that buckets are actually temporary. If"
" they crash, regardless of the reason, they should not be restarted."
msgstr ""

msgid ""
"We can do this by passing the `restart: :temporary` option to `use Agent` in `"
"KV.Bucket`:"
msgstr ""

msgid ""
"```elixir\n"
"defmodule KV.Bucket do\n"
"  use Agent, restart: :temporary\n"
"```"
msgstr ""

msgid ""
"Let's also add a test to `test/kv/bucket_test.exs` that guarantees the bucket "
"is temporary:"
msgstr ""

msgid ""
"```elixir\n"
"  test \"are temporary workers\" do\n"
"    assert Supervisor.child_spec(KV.Bucket, []).restart == :temporary\n"
"  end\n"
"```"
msgstr ""

msgid ""
"Our test uses the `Supervisor.child_spec/2` function to retrieve the child spe"
"cification out of a module and then assert its restart value is `:temporary`. "
"At this point, you may be wondering why use a supervisor if it never restarts "
"its children. It happens that supervisors provide more than restarts, they are"
" also responsible to guarantee proper startup and shutdown, especially in case"
" of crashes in a supervision tree."
msgstr ""

msgid "## Supervision trees"
msgstr ""

msgid ""
"When we added `KV.BucketSupervisor` as a child of `KV.Supervisor`, we began to"
" have supervisors that supervise other supervisors, forming so-called \"supervi"
"sion trees\"."
msgstr ""

msgid ""
"Every time you add a new child to a supervisor, it is important to evaluate if"
" the supervisor strategy is correct as well as the order of child processes. I"
"n this case, we are using `:one_for_one` and the `KV.Registry` is started befo"
"re `KV.BucketSupervisor`."
msgstr ""

msgid ""
"One flaw that shows up right away is the ordering issue. Since `KV.Registry` i"
"nvokes `KV.BucketSupervisor`, then the `KV.BucketSupervisor` must be started b"
"efore `KV.Registry`. Otherwise, it may happen that the registry attempts to re"
"ach the bucket supervisor before it has started."
msgstr ""

msgid ""
"The second flaw is related to the supervision strategy. If `KV.Registry` dies,"
" all information linking `KV.Bucket` names to bucket processes is lost. Theref"
"ore the `KV.BucketSupervisor` and all children must terminate too - otherwise "
"we will have orphan processes."
msgstr ""

msgid ""
"In light of this observation, we should consider moving to another supervision"
" strategy. The two other candidates are `:one_for_all` and `:rest_for_one`. A "
"supervisor using the `:rest_for_one` will kill and restart child processes whi"
"ch were started *after* the crashed child. In this case, we would want `KV.Buc"
"ketSupervisor` to terminate if `KV.Registry` terminates. This would require th"
"e bucket supervisor to be placed after the registry. Which violates the orderi"
"ng constraints we have established two paragraphs above."
msgstr ""

msgid ""
"So our last option is to go all in and pick the `:one_for_all` strategy: the s"
"upervisor will kill and restart all of its children processes whenever any one"
" of them dies. This is a completely reasonable approach for our application, s"
"ince the registry can't work without the bucket supervisor, and the bucket sup"
"ervisor should terminate without the registry. Let's reimplement `init/1` in `"
"KV.Supervisor` to encode those properties:"
msgstr ""

msgid ""
"```elixir\n"
"  def init(:ok) do\n"
"    children = [\n"
"      {DynamicSupervisor, name: KV.BucketSupervisor, strategy: :one_for_one},\n"
"      {KV.Registry, name: KV.Registry}\n"
"    ]"
msgstr ""

msgid ""
"    Supervisor.init(children, strategy: :one_for_all)\n"
"  end\n"
"```"
msgstr ""

msgid "There are two topics left before we move on to the next chapter."
msgstr ""

msgid "## Shared state in tests"
msgstr ""

msgid ""
"So far we have been starting one registry per test to ensure they are isolated"
":"
msgstr ""

msgid ""
"```elixir\n"
"setup do\n"
"  registry = start_supervised!(KV.Registry)\n"
"  %{registry: registry}\n"
"end\n"
"```"
msgstr ""

msgid ""
"Since we have now changed our registry to use `KV.BucketSupervisor`, which is "
"registered globally, our tests are now relying on this shared supervisor even "
"though each test has its own registry. The question is: should we?"
msgstr ""

msgid ""
"It depends. It is ok to rely on shared state as long as we depend only on a no"
"n-shared partition of this state. Although multiple registries may start bucke"
"ts on the shared bucket supervisor, those buckets and registries are isolated "
"from each other. We would only run into concurrency issues if we used a functi"
"on like `Supervisor.count_children(KV.BucketSupervisor)` which would count all"
" buckets from all registries, potentially giving different results when tests "
"run concurrently."
msgstr ""

msgid ""
"Since we have relied only on a non-shared partition of the bucket supervisor s"
"o far, we don't need to worry about concurrency issues in our test suite. In c"
"ase it ever becomes a problem, we can start a supervisor per test and pass it "
"as an argument to the registry `start_link` function."
msgstr ""

msgid "## Observer"
msgstr ""

msgid ""
"Now that we have defined our supervision tree, it is a great opportunity to in"
"troduce the Observer tool that ships with Erlang. Start your application with "
"`iex -S mix` and key this in:"
msgstr ""

msgid ""
"```iex\n"
"iex> :observer.start\n"
"```"
msgstr ""

msgid ""
"A GUI should pop-up containing all sorts of information about our system, from"
" general statistics to load charts as well as a list of all running processes "
"and applications."
msgstr ""

msgid ""
"In the Applications tab, you will see all applications currently running in yo"
"ur system along side their supervision tree. You can select the `kv` applicati"
"on to explore it further:"
msgstr ""

msgid ""
"<img src=\"/images/contents/kv-observer.png\" width=\"640\" alt=\"Observer GUI scre"
"enshot\" />"
msgstr ""

msgid ""
"Not only that, as you create new buckets on the terminal, you should see new p"
"rocesses spawned in the supervision tree shown in Observer:"
msgstr ""

msgid ""
"```iex\n"
"iex> KV.Registry.create(KV.Registry, \"shopping\")\n"
":ok\n"
"```"
msgstr ""

msgid ""
"We will leave it up to you to further explore what Observer provides. Note you"
" can double click any process in the supervision tree to retrieve more informa"
"tion about it, as well as right-click a process to send \"a kill signal\", a per"
"fect way to emulate failures and see if your supervisor reacts as expected."
msgstr ""

msgid ""
"At the end of the day, tools like Observer is one of the reasons you want to a"
"lways start processes inside supervision trees, even if they are temporary, to"
" ensure they are always reachable and introspectable."
msgstr ""

msgid ""
"Now that our buckets are properly linked and supervised, let's see how we can "
"speed things up."
msgstr ""
