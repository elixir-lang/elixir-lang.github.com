# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-10-31 01:24+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:1
msgid "---\n"
"layout: getting-started\n"
"title: Dependencies and umbrella projects\n"
"---"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:6
msgid "# {{ page.title }}"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:8
msgid "{% include toc.html %}"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:10
msgid "{% include mix-otp-preface.html %}"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:12
msgid "In this chapter, we will discuss how to manage dependencies in Mix."
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:14
msgid "Our `kv` application is complete, so it's time to implement the server that will handle the requests we defined in the first chapter:"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:16
msgid "```\n"
"CREATE shopping\n"
"OK"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:20
msgid "PUT shopping milk 1\n"
"OK"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:23
msgid "PUT shopping eggs 3\n"
"OK"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:26
msgid "GET shopping milk\n"
"1\n"
"OK"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:30
msgid "DELETE shopping eggs\n"
"OK\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:34
msgid "However, instead of adding more code to the `kv` application, we are going to build the TCP server as another application that is a client of the `kv` application. Since the whole runtime and Elixir ecosystem are geared towards applications, it makes sense to break our projects into smaller applications that work together rather than building a big, monolithic app."
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:36
msgid "Before creating our new application, we must discuss how Mix handles dependencies. In practice, there are two kinds of dependencies we usually work with: internal and external dependencies. Mix supports mechanisms to work with both of them."
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:38
msgid "## External dependencies"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:40
msgid "External dependencies are the ones not tied to your business domain. For example, if you need an HTTP API for your distributed KV application, you can use the [Plug](https://github.com/elixir-lang/plug) project as an external dependency."
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:42
msgid "Installing external dependencies is simple. Most commonly, we use the [Hex Package Manager](https://hex.pm), by listing the dependency inside the deps function in our `mix.exs` file:"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:44
msgid "```elixir\n"
"def deps do\n"
"  [{:plug, \"~> 1.0\"}]\n"
"end\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:50
msgid "This dependency refers to the latest version of Plug in the 1.x.x version series that has been pushed to Hex. This is indicated by the `~>` preceding the version number. For more information on specifying version requirements, see the [documentation for the Version module](https://hexdocs.pm/elixir/Version.html)."
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:52
msgid "Typically, stable releases are pushed to Hex. If you want to depend on an external dependency still in development, Mix is able to manage git dependencies too:"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:54
msgid "```elixir\n"
"def deps do\n"
"  [{:plug, git: \"git://github.com/elixir-lang/plug.git\"}]\n"
"end\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:60
msgid "You will notice that when you add a dependency to your project, Mix generates a `mix.lock` file that guarantees *repeatable builds*. The lock file must be checked in to your version control system, to guarantee that everyone who uses the project will use the same dependency versions as you."
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:62
msgid "Mix provides many tasks for working with dependencies, which can be seen in `mix help`:"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:64
msgid "```bash\n"
"$ mix help\n"
"mix deps              # Lists dependencies and their status\n"
"mix deps.clean        # Deletes the given dependencies' files\n"
"mix deps.compile      # Compiles dependencies\n"
"mix deps.get          # Gets all out of date dependencies\n"
"mix deps.tree         # Prints the dependency tree\n"
"mix deps.unlock       # Unlocks the given dependencies\n"
"mix deps.update       # Updates the given dependencies\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:75
msgid "The most common tasks are `mix deps.get` and `mix deps.update`. Once fetched, dependencies are automatically compiled for you. You can read more about deps by typing `mix help deps`, and in the [documentation for the Mix.Tasks.Deps module](https://hexdocs.pm/mix/Mix.Tasks.Deps.html)."
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:77
msgid "## Internal dependencies"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:79
msgid "Internal dependencies are the ones that are specific to your project. They usually don't make sense outside the scope of your project/company/organization. Most of the time, you want to keep them private, whether due to technical, economic or business reasons."
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:81
msgid "If you have an internal dependency, Mix supports two methods to work with them: git repositories or umbrella projects."
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:83
msgid "For example, if you push the `kv` project to a git repository, you'll need to list it in your deps code in order to use it:"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:85
msgid "```elixir\n"
"def deps do\n"
"  [{:kv, git: \"https://github.com/YOUR_ACCOUNT/kv.git\"}]\n"
"end\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:91
msgid "If the repository is private though, you may need to specify the private URL `git@github.com:YOUR_ACCOUNT/kv.git`. In any case, Mix will be able to fetch it for you as long as you have the proper credentials."
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:93
msgid "Using git dependencies for internal dependencies is somewhat discouraged in Elixir. Remember that the runtime and the Elixir ecosystem already provide the concept of applications. As such, we expect you to frequently break your code into applications that can be organized logically, even within a single project."
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:95
msgid "However, if you push every application as a separate project to a git repository, your projects may become very hard to maintain as you will spend a lot of time managing those git repositories rather than writing your code."
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:97
msgid "For this reason, Mix supports \"umbrella projects\". Umbrella projects are used to build applications that run together in a single repository. That is exactly the style we are going to explore in the next sections."
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:99
msgid "Let's create a new Mix project. We are going to creatively name it `kv_umbrella`, and this new project will have both the existing `kv` application and the new `kv_server` application inside. The directory structure will look like this:"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:101
#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:267
msgid "    + kv_umbrella\n"
"      + apps\n"
"        + kv\n"
"        + kv_server"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:106
msgid "The interesting thing about this approach is that Mix has many conveniences for working with such projects, such as the ability to compile and test all applications inside `apps` with a single command. However, even though they are all listed together inside `apps`, they are still decoupled from each other, so you can build, test and deploy each application in isolation if you want to."
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:108
msgid "So let's get started!"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:110
msgid "## Umbrella projects"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:112
msgid "Let's start a new project using `mix new`. This new project will be named `kv_umbrella` and we need to pass the `--umbrella` option when creating it. Do not create this new project inside the existing `kv` project!"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:114
msgid "```bash\n"
"$ mix new kv_umbrella --umbrella\n"
"* creating .gitignore\n"
"* creating README.md\n"
"* creating mix.exs\n"
"* creating apps\n"
"* creating config\n"
"* creating config/config.exs\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:124
msgid "From the printed information, we can see far fewer files are generated. The generated `mix.exs` file is different too. Let's take a look (comments have been removed):"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:126
msgid "```elixir\n"
"defmodule KvUmbrella.Mixfile do\n"
"  use Mix.Project"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:130
msgid "  def project do\n"
"    [\n"
"      apps_path: \"apps\",\n"
"      start_permanent: Mix.env == :prod,\n"
"      deps: deps()\n"
"    ]\n"
"  end"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:138
msgid "  defp deps do\n"
"    []\n"
"  end\n"
"end\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:144
msgid "What makes this project different from the previous one is the `apps_path: \"apps\"` entry in the project definition. This means this project will act as an umbrella. Such projects do not have source files nor tests, although they can have their own dependencies. Each child application must be defined inside the `apps` directory."
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:146
msgid "Let's move inside the apps directory and start building `kv_server`. This time, we are going to pass the `--sup` flag, which will tell Mix to generate a supervision tree automatically for us, instead of building one manually as we did in previous chapters:"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:148
msgid "```bash\n"
"$ cd kv_umbrella/apps\n"
"$ mix new kv_server --module KVServer --sup\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:153
msgid "The generated files are similar to the ones we first generated for `kv`, with a few differences. Let's open up `mix.exs`:"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:155
msgid "```elixir\n"
"defmodule KVServer.Mixfile do\n"
"  use Mix.Project"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:159
msgid "  def project do\n"
"    [\n"
"      app: :kv_server,\n"
"      version: \"0.1.0\",\n"
"      build_path: \"../../_build\",\n"
"      config_path: \"../../config/config.exs\",\n"
"      deps_path: \"../../deps\",\n"
"      lockfile: \"../../mix.lock\",\n"
"      elixir: \"~> 1.6-dev\",\n"
"      start_permanent: Mix.env == :prod,\n"
"      deps: deps()\n"
"    ]\n"
"  end"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:173
msgid "  # Run \"mix help compile.app\" to learn about applications.\n"
"  def application do\n"
"    [\n"
"      extra_applications: [:logger],\n"
"      mod: {KVServer.Application, []}\n"
"    ]\n"
"  end"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:181
msgid "  # Run \"mix help deps\" to learn about dependencies.\n"
"  defp deps do\n"
"    [\n"
"      # {:dep_from_hexpm, \"~> 0.3.0\"},\n"
"      # {:dep_from_git, git: \"https://github.com/elixir-lang/my_dep.git\", tag: \"0.1.0\"},\n"
"      # {:sibling_app_in_umbrella, in_umbrella: true},\n"
"    ]\n"
"  end\n"
"end\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:192
msgid "First of all, since we generated this project inside `kv_umbrella/apps`, Mix automatically detected the umbrella structure and added four lines to the project definition:"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:194
#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:274
msgid "```elixir\n"
"build_path: \"../../_build\",\n"
"config_path: \"../../config/config.exs\",\n"
"deps_path: \"../../deps\",\n"
"lockfile: \"../../mix.lock\",\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:201
msgid "Those options mean all dependencies will be checked out to `kv_umbrella/deps`, and they will share the same build, config and lock files. This ensures dependencies will be fetched and compiled once for the whole umbrella structure, instead of once per umbrella application."
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:203
msgid "The second change is in the `application` function inside `mix.exs`:"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:205
msgid "```elixir\n"
"def application do\n"
"  [\n"
"    extra_applications: [:logger],\n"
"    mod: {KVServer.Application, []}\n"
"  ]\n"
"end\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:214
msgid "Because we passed the `--sup` flag, Mix automatically added `mod: {KVServer.Application, []}`, specifying that `KVServer.Application` is our application callback module. `KVServer.Application` will start our application supervision tree."
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:216
msgid "In fact, let's open up `lib/kv_server/application.ex`:"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:218
msgid "```elixir\n"
"defmodule KVServer.Application do\n"
"  # See https://hexdocs.pm/elixir/Application.html\n"
"  # for more information on OTP Applications\n"
"  @moduledoc false"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:224
msgid "  use Application"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:226
msgid "  def start(_type, _args) do\n"
"    # List all child processes to be supervised\n"
"    children = [\n"
"      # Starts a worker by calling: KVServer.Worker.start_link(arg)\n"
"      # {KVServer.Worker, arg},\n"
"    ]"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:233
msgid "    # See https://hexdocs.pm/elixir/Supervisor.html\n"
"    # for other strategies and supported options\n"
"    opts = [strategy: :one_for_one, name: KVServer.Supervisor]\n"
"    Supervisor.start_link(children, opts)\n"
"  end\n"
"end\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:241
msgid "Notice that it defines the application callback function, `start/2`, and instead of defining a supervisor named `KVServer.Supervisor` that uses the `Supervisor` module, it conveniently defined the supervisor inline! You can read more about such supervisors by reading [the Supervisor module documentation](https://hexdocs.pm/elixir/Supervisor.html)."
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:243
msgid "We can already try out our first umbrella child. We could run tests inside the `apps/kv_server` directory, but that wouldn't be much fun. Instead, go to the root of the umbrella project and run `mix test`:"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:245
msgid "```bash\n"
"$ mix test\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:249
msgid "And it works!"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:251
msgid "Since we want `kv_server` to eventually use the functionality we defined in `kv`, we need to add `kv` as a dependency to our application."
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:253
msgid "## In umbrella dependencies"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:255
msgid "Dependencies between applications in an umbrella project must still be explicitly defined and Mix makes it easy to do so. Open up `apps/kv_server/mix.exs` and change the `deps/0` function to the following:"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:257
msgid "```elixir\n"
"defp deps do\n"
"  [{:kv, in_umbrella: true}]\n"
"end\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:263
msgid "The line above makes `:kv` available as a dependency inside `:kv_server` and automatically starts the `:kv` application before the server starts."
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:265
msgid "Finally, copy the `kv` application we have built so far to the `apps` directory in our new umbrella project. The final directory structure should match the structure we mentioned earlier:"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:272
msgid "We now need to modify `apps/kv/mix.exs` to contain the umbrella entries we have seen in `apps/kv_server/mix.exs`. Open up `apps/kv/mix.exs` and add to the `project` function:"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:281
msgid "Now you can run tests for both projects from the umbrella root with `mix test`. Sweet!"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:283
msgid "## Don't drink the kool aid"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:285
msgid "Umbrella projects are a convenience to help you organize and manage multiple applications. While it provides a degree of separation between applications, those applications are not fully decoupled, as they are assumed to share the same configuration and the same dependencies."
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:287
msgid "The pattern of keeping multiple applications in the same repository is known as \"mono-repo\". Umbrella projects maximize this pattern by providing conveniences to compile, test and run multiple applications at once."
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:289
msgid "If you find yourself in a position where you want to use different configurations to different applications in the same umbrella or to use different dependency versions, then it is likely your codebase have grown beyond what umbrellas can provide."
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:291
msgid "The good news is that breaking an umbrella apart is quite straightforward, as you simply need to move applications outside of the umbrella project's `apps/` directory. In the worst case scenario, you can discard the umbrella project and all related configuration (`build_path`, `config_path`, `deps_path` and `lockfile`) and still leverage the \"mono-repo\" pattern by keeping all applications together in the same repository. Each application will have its own dependencies and configuration. Dependencies between those applications can still be explicitly listed by using the `:path` option (in contrast to `:git`)."
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:293
msgid "## Summing up"
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:295
msgid "In this chapter, we have learned more about Mix dependencies and umbrella projects. While we may run `kv` without a server, our `kv_server` depends directly on `kv`. By breaking them into separate applications, we gain more control in how they are developed and tested."
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:297
msgid "When using umbrella applications, it is important to have a clear boundary between them. Our upcoming `kv_server` must only access public APIs defined in `kv`. Think of your umbrella apps as any other dependency or even Elixir itself: you can only access what is public and documented. Reaching into private functionality in your dependencies is a poor practice that will eventually cause your code to break when a new version is up."
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:299
msgid "Umbrella applications can also be used as a stepping stone for eventually extracting an application from your codebase. For example, imagine a web application that has to send \"push notifications\" to its users. The whole \"push notifications system\" can be developed as a separate application in the umbrella, with its own supervision tree and APIs. If you ever run into a situation where another project needs the push notifications system, the system can be moved to a private repository or a hex.pm package."
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:301
msgid "Developers may also use umbrella projects to break large business domains apart. The caution here is to make sure the domains don't depend on each other (also known as cyclic dependencies). If you run into such situations, it means those applications are not as isolated from each other as you originally thought, and you have architectural and design issues to solve."
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:303
msgid "Finally, keep in mind that applications in an umbrella project all share the same configurations and dependencies. If two applications in your umbrella need to configure the same dependency in drastically different ways or even use different versions, you have probably outgrown the benefits brought by umbrellas. Remember you can break the umbrella and still leverage the benefits behind \"mono-repos\"."
msgstr ""

#: ../../../../getting-started/mix-otp/dependencies-and-umbrella-apps.markdown:305
msgid "With our umbrella project up and running, it is time to start writing our server."
msgstr ""

