# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-07-26 17:55+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../../getting-started/mix-otp/genserver.markdown:1
msgid "---\n"
"layout: getting-started\n"
"title: GenServer\n"
"---"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:6
msgid "# {{ page.title }}"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:8
msgid "{% include toc.html %}"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:10
msgid "{% include mix-otp-preface.html %}"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:12
msgid "In the [previous chapter](/getting-started/mix-otp/agent.html), we used agents to represent our buckets. In the first chapter, we specified we would like to name each bucket so we can do the following:"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:14
msgid "```elixir\n"
"CREATE shopping\n"
"OK"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:18
msgid "PUT shopping milk 1\n"
"OK"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:21
msgid "GET shopping milk\n"
"1\n"
"OK\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:26
msgid "In the session above we interacted with the \"shopping\" bucket."
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:28
msgid "Since agents are processes, each bucket has a process identifier (pid), but buckets do not have a name. Back [in the Process chapter](/getting-started/processes.html), we have learned that we can register processes in Elixir by giving them atom names:"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:30
msgid "```iex\n"
"iex> Agent.start_link(fn -> %{} end, name: :shopping)\n"
"{:ok, #PID<0.43.0>}\n"
"iex> KV.Bucket.put(:shopping, \"milk\", 1)\n"
":ok\n"
"iex> KV.Bucket.get(:shopping, \"milk\")\n"
"1\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:39
msgid "However, naming dynamic processes with atoms is a terrible idea! If we use atoms, we would need to convert the bucket name (often received from an external client) to atoms, and **we should never convert user input to atoms**. This is because atoms are not garbage collected. Once an atom is created, it is never reclaimed. Generating atoms from user input would mean the user can inject enough different names to exhaust our system memory!"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:41
msgid "In practice, it is more likely you will reach the Erlang <abbr title=\"Virtual Machine\">VM</abbr> limit for the maximum number of atoms before you run out of memory, which will bring your system down regardless."
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:43
msgid "Instead of abusing the built-in name facility, we will create our own *process registry* that associates the bucket name to the bucket process."
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:45
msgid "The registry needs to guarantee that it is always up to date. For example, if one of the bucket processes crashes due to a bug, the registry must notice this change and avoid serving stale entries. In Elixir, we say the registry needs to *monitor* each bucket."
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:47
msgid "We will use a [GenServer](https://hexdocs.pm/elixir/GenServer.html) to create a registry process that can monitor the bucket processes. GenServer provides industrial strength functionality for building servers in both Elixir and  <abbr title=\"Open Telecom Platform\">OTP</abbr>."
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:49
msgid "## Our first GenServer"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:51
msgid "A GenServer is implemented in two parts: the client API and the server callbacks. You can either combine both parts into a single module or you can separate them into a client module and a server module. The client and server run in separate processes, with the client passing messages back and forth to the server as its functions are called. Here we'll use a single module for both the server callbacks and the client API."
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:53
msgid "Create a new file at `lib/kv/registry.ex` with the following contents:"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:55
msgid "```elixir\n"
"defmodule KV.Registry do\n"
"  use GenServer"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:59
msgid "  ## Client API"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:61
msgid "  @doc \"\"\"\n"
"  Starts the registry.\n"
"  \"\"\"\n"
"  def start_link(opts) do\n"
"    GenServer.start_link(__MODULE__, :ok, opts)\n"
"  end"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:68
msgid "  @doc \"\"\"\n"
"  Looks up the bucket pid for `name` stored in `server`."
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:71
msgid "  Returns `{:ok, pid}` if the bucket exists, `:error` otherwise.\n"
"  \"\"\"\n"
"  def lookup(server, name) do\n"
"    GenServer.call(server, {:lookup, name})\n"
"  end"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:77
msgid "  @doc \"\"\"\n"
"  Ensures there is a bucket associated with the given `name` in `server`.\n"
"  \"\"\"\n"
"  def create(server, name) do\n"
"    GenServer.cast(server, {:create, name})\n"
"  end"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:84
msgid "  ## Server Callbacks"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:86
msgid "  def init(:ok) do\n"
"    {:ok, %{}}\n"
"  end"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:90
msgid "  def handle_call({:lookup, name}, _from, names) do\n"
"    {:reply, Map.fetch(names, name), names}\n"
"  end"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:94
msgid "  def handle_cast({:create, name}, names) do\n"
"    if Map.has_key?(names, name) do\n"
"      {:noreply, names}\n"
"    else\n"
"      {:ok, bucket} = KV.Bucket.start_link([])\n"
"      {:noreply, Map.put(names, name, bucket)}\n"
"    end\n"
"  end\n"
"end\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:105
msgid "The first function is `start_link/1`, which starts a new GenServer passing three arguments:"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:107
msgid "1. The module where the server callbacks are implemented, in this case `__MODULE__`, meaning the current module"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:109
msgid "2. The initialization arguments, in this case, the atom `:ok`"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:111
msgid "3. A list of options which can be used to specify things like the name of the server. For now, we forward the list of options that we receive on `start_link/1`, which defaults to an empty list. We will customize it later on"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:113
msgid "There are two types of requests you can send to a GenServer: calls and casts. Calls are synchronous and the server **must** send a response back to such requests. Casts are asynchronous and the server won't send a response back."
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:115
msgid "The next two functions, `lookup/2` and `create/2` are responsible for sending these requests to the server.  In this case, we have used `{:lookup, name}` and `{:create, name}` respectively.  Requests are often specified as tuples, like this, in order to provide more than one \"argument\" in that first argument slot. It's common to specify the action being requested as the first element of a tuple, and arguments for that action in the remaining elements. Note that the requests must match the first argument to `handle_call/3` or `handle_cast/2`."
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:117
msgid "That's it for the client API. On the server side, we can implement a variety of callbacks to guarantee the server initialization, termination, and handling of requests. Those callbacks are optional and for now, we have only implemented the ones we care about."
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:119
msgid "The first is the `init/1` callback, that receives the second argument given to `GenServer.start_link/3` and returns `{:ok, state}`, where state is a new map. We can already notice how the `GenServer` API makes the client/server segregation more apparent. `start_link/3` happens in the client, while `init/1` is the respective callback that runs on the server."
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:121
msgid "For `call/2` requests, we  implement a `handle_call/3` callback that receives the `request`, the process from which we received the request (`_from`), and the current server state (`names`). The `handle_call/3` callback returns a tuple in the format `{:reply, reply, new_state}`. The first element of the tuple, `:reply`,  indicates that server should send a reply back to the client. The second element, `reply`, is what will be sent to the client while the third, `new_state` is the new server state."
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:123
msgid "For `cast/2` requests, we implement a `handle_cast/2` callback that receives the `request` and the current server state (`names`). The `handle_cast/2` callback returns a tuple in the format `{:noreply, new_state}`. Note that in a real application we would have probably implemented the callback for `:create` with a synchronous call instead of an asynchronous cast. We are doing it this way to illustrate how to implement a cast callback."
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:125
msgid "There are other tuple formats both `handle_call/3` and `handle_cast/2` callbacks may return. There are also other callbacks like `terminate/2` and `code_change/3` that we could implement. You are welcome to explore the [full GenServer documentation](https://hexdocs.pm/elixir/GenServer.html) to learn more about those."
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:127
msgid "For now, let's write some tests to guarantee our GenServer works as expected."
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:129
msgid "## Testing a GenServer"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:131
msgid "Testing a GenServer is not much different from testing an agent. We will spawn the server on a setup callback and use it throughout our tests. Create a file at `test/kv/registry_test.exs` with the following:"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:133
msgid "```elixir\n"
"defmodule KV.RegistryTest do\n"
"  use ExUnit.Case, async: true"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:137
msgid "  setup do\n"
"    registry = start_supervised!(KV.Registry)\n"
"    %{registry: registry}\n"
"  end"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:142
msgid "  test \"spawns buckets\", %{registry: registry} do\n"
"    assert KV.Registry.lookup(registry, \"shopping\") == :error"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:145
msgid "    KV.Registry.create(registry, \"shopping\")\n"
"    assert {:ok, bucket} = KV.Registry.lookup(registry, \"shopping\")"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:148
msgid "    KV.Bucket.put(bucket, \"milk\", 1)\n"
"    assert KV.Bucket.get(bucket, \"milk\") == 1\n"
"  end\n"
"end\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:154
msgid "Our test should pass right out of the box!"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:156
msgid "There is one important difference between the `setup` block we wrote for `KV.Registry` and the one we wrote for `KV.Bucket`. Instead of starting the registry by hand by calling `KV.Registry.start_link/1`, we instead called [the `start_supervised!/1` function](https://hexdocs.pm/ex_unit/ExUnit.Callbacks.html#start_supervised/2), passing the `KV.Registry` module."
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:158
msgid "The `start_supervised!` function will do the job of starting the `KV.Registry` process by calling `start_link/1`. The advantage of using `start_supervised!` is that ExUnit will guarantee that the registry process will be shutdown before the next test starts. In other words, it helps guarantee the state of one test is not going to interfere with the next one in case they depend on shared resources."
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:160
msgid "When starting processes during your tests, we should always prefer to use `start_supervised!`. We recommend you to change the previous setup block in `bucket_test.exs` to use `start_supervised!` too."
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:162
msgid "If there is a need to stop a `GenServer` as part of the application logic, one can use the `GenServer.stop/1` function:"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:164
msgid "```elixir\n"
"## Client API"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:167
msgid "@doc \"\"\"\n"
"Stops the registry.\n"
"\"\"\"\n"
"def stop(server) do\n"
"  GenServer.stop(server)\n"
"end\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:175
msgid "## The need for monitoring"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:177
msgid "Our registry is almost complete. The only remaining issue is that the registry may become stale if a bucket stops or crashes. Let's add a test to `KV.RegistryTest` that exposes this bug:"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:179
msgid "```elixir\n"
"test \"removes buckets on exit\", %{registry: registry} do\n"
"  KV.Registry.create(registry, \"shopping\")\n"
"  {:ok, bucket} = KV.Registry.lookup(registry, \"shopping\")\n"
"  Agent.stop(bucket)\n"
"  assert KV.Registry.lookup(registry, \"shopping\") == :error\n"
"end\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:188
msgid "The test above will fail on the last assertion as the bucket name remains in the registry even after we stop the bucket process."
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:190
msgid "In order to fix this bug, we need the registry to monitor every bucket it spawns. Once we set up a monitor, the registry will receive a notification every time a bucket process exits, allowing us to clean the registry up."
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:192
msgid "Let's first play with monitors by starting a new console with `iex -S mix`:"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:194
msgid "```iex\n"
"iex> {:ok, pid} = KV.Bucket.start_link([])\n"
"{:ok, #PID<0.66.0>}\n"
"iex> Process.monitor(pid)\n"
"#Reference<0.0.0.551>\n"
"iex> Agent.stop(pid)\n"
":ok\n"
"iex> flush()\n"
"{:DOWN, #Reference<0.0.0.551>, :process, #PID<0.66.0>, :normal}\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:205
msgid "Note `Process.monitor(pid)` returns a unique reference that allows us to match upcoming messages to that monitoring reference. After we stop the agent, we can `flush/0` all messages and notice a `:DOWN` message arrived, with the exact reference returned by monitor, notifying that the bucket process exited with reason `:normal`."
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:207
msgid "Let's reimplement the server callbacks to fix the bug and make the test pass. First, we will modify the GenServer state to two dictionaries: one that contains `name -> pid` and another that holds `ref -> name`. Then we need to monitor the buckets on `handle_cast/2` as well as implement a `handle_info/2` callback to handle the monitoring messages. The full server callbacks implementation is shown below:"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:209
msgid "```elixir\n"
"## Server callbacks"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:212
msgid "def init(:ok) do\n"
"  names = %{}\n"
"  refs = %{}\n"
"  {:ok, {names, refs}}\n"
"end"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:218
msgid "def handle_call({:lookup, name}, _from, {names, _} = state) do\n"
"  {:reply, Map.fetch(names, name), state}\n"
"end"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:222
msgid "def handle_cast({:create, name}, {names, refs}) do\n"
"  if Map.has_key?(names, name) do\n"
"    {:noreply, {names, refs}}\n"
"  else\n"
"    {:ok, pid} = KV.Bucket.start_link([])\n"
"    ref = Process.monitor(pid)\n"
"    refs = Map.put(refs, ref, name)\n"
"    names = Map.put(names, name, pid)\n"
"    {:noreply, {names, refs}}\n"
"  end\n"
"end"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:234
msgid "def handle_info({:DOWN, ref, :process, _pid, _reason}, {names, refs}) do\n"
"  {name, refs} = Map.pop(refs, ref)\n"
"  names = Map.delete(names, name)\n"
"  {:noreply, {names, refs}}\n"
"end"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:240
msgid "def handle_info(_msg, state) do\n"
"  {:noreply, state}\n"
"end\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:245
msgid "Observe that we were able to considerably change the server implementation without changing any of the client API. That's one of the benefits of explicitly segregating the server and the client."
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:247
msgid "Finally, different from the other callbacks, we have defined a \"catch-all\" clause for `handle_info/2` that discards any unknown message. To understand why, let's move on to the next section."
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:249
msgid "## `call`, `cast` or `info`?"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:251
msgid "So far we have used three callbacks: `handle_call/3`, `handle_cast/2` and `handle_info/2`. Here is what we should consider when deciding when to use each:"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:253
msgid "1. `handle_call/3` must be used for synchronous requests. This should be the default choice as waiting for the server reply is a useful backpressure mechanism."
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:255
msgid "2. `handle_cast/2` must be used for asynchronous requests, when you don't care about a reply. A cast does not even guarantee the server has received the message and, for this reason, should be used sparingly. For example, the `create/2` function we have defined in this chapter should have used `call/2`. We have used `cast/2` for didactic purposes."
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:257
msgid "3. `handle_info/2` must be used for all other messages a server may receive that are not sent via `GenServer.call/2` or `GenServer.cast/2`, including regular messages sent with `send/2`. The monitoring `:DOWN` messages are such an example of this."
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:259
msgid "Since any message, including the ones sent via `send/2`, go to `handle_info/2`, there is a chance unexpected messages will arrive to the server. Therefore, if we don't define the catch-all clause, those messages could cause our registry to crash, because no clause would match. We don't need to worry about such cases for `handle_call/3` and `handle_cast/2` though. Calls and casts are only done via the `GenServer` API, so an unknown message is quite likely a developer mistake."
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:261
msgid "To help developers remember the differences between call, cast and info, the supported return values and more, [Benjamin Tan Wei Hao](http://benjamintan.io) has created an excellent [GenServer cheat sheet](https://raw.githubusercontent.com/benjamintanweihao/elixir-cheatsheets/master/GenServer_CheatSheet.pdf)."
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:263
msgid "## Monitors or links?"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:265
msgid "We have previously learned about links in the [Process chapter](/getting-started/processes.html). Now, with the registry complete, you may be wondering: when should we use monitors and when should we use links?"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:267
msgid "Links are bi-directional. If you link two processes and one of them crashes, the other side will crash too (unless it is trapping exits). A monitor is uni-directional: only the monitoring process will receive notifications about the monitored one. In other words: use links when you want linked crashes, and monitors when you just want to be informed of crashes, exits, and so on."
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:269
msgid "Returning to our `handle_cast/2` implementation, you can see the registry is both linking and monitoring the buckets:"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:271
msgid "```elixir\n"
"{:ok, pid} = KV.Bucket.start_link([])\n"
"ref = Process.monitor(pid)\n"
"```"
msgstr ""

#: ../../../../getting-started/mix-otp/genserver.markdown:276
msgid "This is a bad idea, as we don't want the registry to crash when a bucket crashes! We typically avoid creating new processes directly, instead, we delegate this responsibility to supervisors. As we'll see in the next chapter, supervisors rely on links and that explains why link-based APIs (`spawn_link`, `start_link`, etc) are so prevalent in Elixir and <abbr title=\"Open Telecom Platform\">OTP</abbr>."
msgstr ""

