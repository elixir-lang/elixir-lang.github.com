# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-07-26 17:55+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../getting-started/modules-and-functions.markdown:1
msgid "---\n"
"layout: getting-started\n"
"title: Modules and functions\n"
"redirect_from: /getting-started/modules.html\n"
"---"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:7
msgid "# {{ page.title }}"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:9
msgid "{% include toc.html %}"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:11
msgid "In Elixir we group several functions into modules. We've already used many different modules in the previous chapters such as [the `String` module](https://hexdocs.pm/elixir/String.html):"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:13
msgid "```iex\n"
"iex> String.length(\"hello\")\n"
"5\n"
"```"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:18
msgid "In order to create our own modules in Elixir, we use the `defmodule` macro. We use the `def` macro to define functions in that module:"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:20
msgid "```iex\n"
"iex> defmodule Math do\n"
"...>   def sum(a, b) do\n"
"...>     a + b\n"
"...>   end\n"
"...> end"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:27
msgid "iex> Math.sum(1, 2)\n"
"3\n"
"```"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:31
msgid "In the following sections, our examples are going to get longer in size, and it can be tricky to type them all in the shell. It's about time for us to learn how to compile Elixir code and also how to run Elixir scripts."
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:33
msgid "## Compilation"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:35
msgid "Most of the time it is convenient to write modules into files so they can be compiled and reused. Let's assume we have a file named `math.ex` with the following contents:"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:37
msgid "```elixir\n"
"defmodule Math do\n"
"  def sum(a, b) do\n"
"    a + b\n"
"  end\n"
"end\n"
"```"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:45
msgid "This file can be compiled using `elixirc`:"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:47
msgid "```console\n"
"$ elixirc math.ex\n"
"```"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:51
msgid "This will generate a file named `Elixir.Math.beam` containing the bytecode for the defined module. If we start `iex` again, our module definition will be available (provided that `iex` is started in the same directory the bytecode file is in):"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:53
msgid "```iex\n"
"iex> Math.sum(1, 2)\n"
"3\n"
"```"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:58
msgid "Elixir projects are usually organized into three directories:"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:60
msgid "* ebin - contains the compiled bytecode\n"
"* lib - contains elixir code (usually `.ex` files)\n"
"* test - contains tests (usually `.exs` files)"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:64
msgid "When working on actual projects, the build tool called `mix` will be responsible for compiling and setting up the proper paths for you. For learning purposes, Elixir also supports a scripted mode which is more flexible and does not generate any compiled artifacts."
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:66
msgid "## Scripted mode"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:68
msgid "In addition to the Elixir file extension `.ex`, Elixir also supports `.exs` files for scripting. Elixir treats both files exactly the same way, the only difference is in intention. `.ex` files are meant to be compiled while `.exs` files are used for scripting. When executed, both extensions compile and load their modules into memory, although only `.ex` files write their bytecode to disk in the format of `.beam` files."
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:70
msgid "For instance, we can create a file called `math.exs`:"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:72
msgid "```elixir\n"
"defmodule Math do\n"
"  def sum(a, b) do\n"
"    a + b\n"
"  end\n"
"end"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:79
msgid "IO.puts Math.sum(1, 2)\n"
"```"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:82
msgid "And execute it as:"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:84
msgid "```console\n"
"$ elixir math.exs\n"
"```"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:88
msgid "The file will be compiled in memory and executed, printing \"3\" as the result. No bytecode file will be created. In the following examples, we recommend you write your code into script files and execute them as shown above."
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:90
msgid "## Named functions"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:92
msgid "Inside a module, we can define functions with `def/2` and private functions with `defp/2`. A function defined with `def/2` can be invoked from other modules while a private function can only be invoked locally."
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:94
msgid "```elixir\n"
"defmodule Math do\n"
"  def sum(a, b) do\n"
"    do_sum(a, b)\n"
"  end"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:100
msgid "  defp do_sum(a, b) do\n"
"    a + b\n"
"  end\n"
"end"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:105
msgid "IO.puts Math.sum(1, 2)    #=> 3\n"
"IO.puts Math.do_sum(1, 2) #=> ** (UndefinedFunctionError)\n"
"```"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:109
msgid "Function declarations also support guards and multiple clauses. If a function has several clauses, Elixir will try each clause until it finds one that matches. Here is an implementation of a function that checks if the given number is zero or not:"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:111
msgid "```elixir\n"
"defmodule Math do\n"
"  def zero?(0) do\n"
"    true\n"
"  end"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:117
msgid "  def zero?(x) when is_integer(x) do\n"
"    false\n"
"  end\n"
"end"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:122
msgid "IO.puts Math.zero?(0)         #=> true\n"
"IO.puts Math.zero?(1)         #=> false\n"
"IO.puts Math.zero?([1, 2, 3]) #=> ** (FunctionClauseError)\n"
"IO.puts Math.zero?(0.0)       #=> ** (FunctionClauseError)\n"
"```"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:128
msgid "*The trailing question mark in `zero?` means that this function returns a boolean; see [Naming Conventions](https://hexdocs.pm/elixir/master/naming-conventions.html#trailing-question-mark-foo).*"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:130
msgid "Giving an argument that does not match any of the clauses raises an error."
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:132
msgid "Similar to constructs like `if`, named functions support both `do:` and `do`/`end` block syntax, as [we learned `do`/`end` is a convenient syntax for the keyword list format](/getting-started/case-cond-and-if.html#doend-blocks). For example, we can edit `math.exs` to look like this:"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:134
msgid "```elixir\n"
"defmodule Math do\n"
"  def zero?(0), do: true\n"
"  def zero?(x) when is_integer(x), do: false\n"
"end\n"
"```"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:141
msgid "And it will provide the same behaviour. You may use `do:` for one-liners but always use `do`/`end` for functions spanning multiple lines."
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:143
msgid "## Function capturing"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:145
msgid "Throughout this tutorial, we have been using the notation `name/arity` to refer to functions. It happens that this notation can actually be used to retrieve a named function as a function type. Start `iex`, running the `math.exs` file defined above:"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:147
msgid "```console\n"
"$ iex math.exs\n"
"```"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:151
msgid "```iex\n"
"iex> Math.zero?(0)\n"
"true\n"
"iex> fun = &Math.zero?/1\n"
"&Math.zero?/1\n"
"iex> is_function(fun)\n"
"true\n"
"iex> fun.(0)\n"
"true\n"
"```"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:162
msgid "Remember Elixir makes a distinction between anonymous functions and named functions, where the former must be invoked with a dot (`.`) between the variable name and parentheses. The capture operator bridges this gap by allowing named functions to be assigned to variables and passed as arguments in the same way we assign, invoke and pass anonymous functions."
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:164
msgid "Local or imported functions, like `is_function/1`, can be captured without the module:"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:166
msgid "```iex\n"
"iex> &is_function/1\n"
"&:erlang.is_function/1\n"
"iex> (&is_function/1).(fun)\n"
"true\n"
"```"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:173
msgid "Note the capture syntax can also be used as a shortcut for creating functions:"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:175
msgid "```iex\n"
"iex> fun = &(&1 + 1)\n"
"#Function<6.71889879/1 in :erl_eval.expr/5>\n"
"iex> fun.(1)\n"
"2\n"
"```"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:182
msgid "The `&1` represents the first argument passed into the function. `&(&1+1)` above is exactly the same as `fn x -> x + 1 end`. The syntax above is useful for short function definitions."
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:184
msgid "If you want to capture a function from a module, you can do `&Module.function()`:"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:186
msgid "```iex\n"
"iex> fun = &List.flatten(&1, &2)\n"
"&List.flatten/2\n"
"iex> fun.([1, [[2], 3]], [4, 5])\n"
"[1, 2, 3, 4, 5]\n"
"```"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:193
msgid "`&List.flatten(&1, &2)` is the same as writing `fn(list, tail) -> List.flatten(list, tail) end` which in this case is equivalent to `&List.flatten/2`. You can read more about the capture operator `&` in [the `Kernel.SpecialForms` documentation](https://hexdocs.pm/elixir/Kernel.SpecialForms.html#&/1)."
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:195
msgid "## Default arguments"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:197
msgid "Named functions in Elixir also support default arguments:"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:199
msgid "```elixir\n"
"defmodule Concat do\n"
"  def join(a, b, sep \\\\ \" \") do\n"
"    a <> sep <> b\n"
"  end\n"
"end"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:206
msgid "IO.puts Concat.join(\"Hello\", \"world\")      #=> Hello world\n"
"IO.puts Concat.join(\"Hello\", \"world\", \"_\") #=> Hello_world\n"
"```"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:210
msgid "Any expression is allowed to serve as a default value, but it won't be evaluated during the function definition. Every time the function is invoked and any of its default values have to be used, the expression for that default value will be evaluated:"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:212
msgid "```elixir\n"
"defmodule DefaultTest do\n"
"  def dowork(x \\\\ \"hello\") do\n"
"    x\n"
"  end\n"
"end\n"
"```"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:220
msgid "```iex\n"
"iex> DefaultTest.dowork\n"
"\"hello\"\n"
"iex> DefaultTest.dowork 123\n"
"123\n"
"iex> DefaultTest.dowork\n"
"\"hello\"\n"
"```"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:229
msgid "If a function with default values has multiple clauses, it is required to create a function head (without an actual body) for declaring defaults:"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:231
msgid "```elixir\n"
"defmodule Concat do\n"
"  def join(a, b \\\\ nil, sep \\\\ \" \")"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:235
msgid "  def join(a, b, _sep) when is_nil(b) do\n"
"    a\n"
"  end"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:239
msgid "  def join(a, b, sep) do\n"
"    a <> sep <> b\n"
"  end\n"
"end"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:244
msgid "IO.puts Concat.join(\"Hello\", \"world\")      #=> Hello world\n"
"IO.puts Concat.join(\"Hello\", \"world\", \"_\") #=> Hello_world\n"
"IO.puts Concat.join(\"Hello\")               #=> Hello\n"
"```"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:249
msgid "*The leading underscore in `_sep` means that the variable will be ignored in this function; see [Naming Conventions](https://hexdocs.pm/elixir/master/naming-conventions.html#underscore-_foo).*"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:251
msgid "When using default values, one must be careful to avoid overlapping function definitions. Consider the following example:"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:253
msgid "```elixir\n"
"defmodule Concat do\n"
"  def join(a, b) do\n"
"    IO.puts \"***First join\"\n"
"    a <> b\n"
"  end"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:260
msgid "  def join(a, b, sep \\\\ \" \") do\n"
"    IO.puts \"***Second join\"\n"
"    a <> sep <> b\n"
"  end\n"
"end\n"
"```"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:267
msgid "If we save the code above in a file named \"concat.ex\" and compile it, Elixir will emit the following warning:"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:269
msgid "    warning: this clause cannot match because a previous clause at line 2 always matches"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:271
msgid "The compiler is telling us that invoking the `join` function with two arguments will always choose the first definition of `join` whereas the second one will only be invoked when three arguments are passed:"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:273
msgid "```console\n"
"$ iex concat.exs\n"
"```"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:277
msgid "```iex\n"
"iex> Concat.join \"Hello\", \"world\"\n"
"***First join\n"
"\"Helloworld\"\n"
"```"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:283
msgid "```iex\n"
"iex> Concat.join \"Hello\", \"world\", \"_\"\n"
"***Second join\n"
"\"Hello_world\"\n"
"```"
msgstr ""

#: ../../../getting-started/modules-and-functions.markdown:289
msgid "This finishes our short introduction to modules. In the next chapters, we will learn how to use named functions for recursion, explore Elixir lexical directives that can be used for importing functions from other modules and discuss module attributes."
msgstr ""

