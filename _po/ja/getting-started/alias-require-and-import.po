msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2017-10-30 15:10+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"layout: getting-started\n"
"title: alias, require, and import\n"
"---"
msgstr ""

msgid "# {{ page.title }}"
msgstr ""

msgid "{% include toc.html %}"
msgstr ""

msgid ""
"In order to facilitate software reuse, Elixir provides three directives (`alia"
"s`, `require` and `import`) plus a macro called `use` summarized below:"
msgstr ""

msgid ""
"```elixir\n"
"# Alias the module so it can be called as Bar instead of Foo.Bar\n"
"alias Foo.Bar, as: Bar"
msgstr ""

msgid ""
"# Require the module in order to use its macros\n"
"require Foo"
msgstr ""

msgid ""
"# Import functions from Foo so they can be called without the `Foo.` prefix\n"
"import Foo"
msgstr ""

msgid ""
"# Invokes the custom code defined in Foo as an extension point\n"
"use Foo\n"
"```"
msgstr ""

msgid ""
"We are going to explore them in detail now. Keep in mind the first three are c"
"alled directives because they have **lexical scope**, while `use` is a common "
"extension point."
msgstr ""

msgid "## alias"
msgstr ""

msgid "`alias` allows you to set up aliases for any given module name."
msgstr ""

msgid ""
"Imagine a module uses a specialized list implemented in `Math.List`. The `alia"
"s` directive allows referring to `Math.List` just as `List` within the module "
"definition:"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Stats do\n"
"  alias Math.List, as: List\n"
"  # In the remaining module definition List expands to Math.List.\n"
"end\n"
"```"
msgstr ""

msgid ""
"The original `List` can still be accessed within `Stats` by the fully-qualifie"
"d name `Elixir.List`."
msgstr ""

msgid ""
"> Note: All modules defined in Elixir are defined inside the main `Elixir` nam"
"espace. However, for convenience, you can omit \"Elixir.\" when referencing them"
"."
msgstr ""

msgid ""
"Aliases are frequently used to define shortcuts. In fact, calling `alias` with"
"out an `:as` option sets the alias automatically to the last part of the modul"
"e name, for example:"
msgstr ""

msgid ""
"```elixir\n"
"alias Math.List\n"
"```"
msgstr ""

msgid "Is the same as:"
msgstr ""

msgid ""
"```elixir\n"
"alias Math.List, as: List\n"
"```"
msgstr ""

msgid ""
"Note that `alias` is **lexically scoped**, which allows you to set aliases ins"
"ide specific functions:"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Math do\n"
"  def plus(a, b) do\n"
"    alias Math.List\n"
"    # ...\n"
"  end"
msgstr ""

msgid ""
"  def minus(a, b) do\n"
"    # ...\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"In the example above, since we are invoking `alias` inside the function `plus/"
"2`, the alias will be valid only inside the function `plus/2`. `minus/2` won't"
" be affected at all."
msgstr ""

msgid "## require"
msgstr ""

msgid ""
"Elixir provides macros as a mechanism for meta-programming (writing code that "
"generates code). Macros are expanded at compile time."
msgstr ""

msgid ""
"Public functions in modules are globally available, but in order to use macros"
", you need to opt-in by requiring the module they are defined in."
msgstr ""

msgid ""
"```iex\n"
"iex> Integer.is_odd(3)\n"
"** (UndefinedFunctionError) function Integer.is_odd/1 is undefined or private."
" However there is a macro with the same name and arity. Be sure to require Int"
"eger if you intend to invoke this macro\n"
"iex> require Integer\n"
"Integer\n"
"iex> Integer.is_odd(3)\n"
"true\n"
"```"
msgstr ""

msgid ""
"In Elixir, `Integer.is_odd/1` is defined as a macro so that it can be used as "
"a guard. This means that, in order to invoke `Integer.is_odd/1`, we need to fi"
"rst require the `Integer` module."
msgstr ""

msgid ""
"Note that like the `alias` directive, `require` is also lexically scoped. We w"
"ill talk more about macros in a later chapter."
msgstr ""

msgid "## import"
msgstr ""

msgid ""
"We use `import` whenever we want to easily access functions or macros from oth"
"er modules without using the fully-qualified name. For instance, if we want to"
" use the `duplicate/2` function from the `List` module several times, we can i"
"mport it:"
msgstr ""

msgid ""
"```iex\n"
"iex> import List, only: [duplicate: 2]\n"
"List\n"
"iex> duplicate :ok, 3\n"
"[:ok, :ok, :ok]\n"
"```"
msgstr ""

msgid ""
"In this case, we are importing only the function `duplicate` (with arity 2) fr"
"om `List`. Although `:only` is optional, its usage is recommended in order to "
"avoid importing all the functions of a given module inside the namespace. `:ex"
"cept` could also be given as an option in order to import everything in a modu"
"le *except* a list of functions."
msgstr ""

msgid ""
"`import` also supports `:macros` and `:functions` to be given to `:only`. For "
"example, to import all macros, one could write:"
msgstr ""

msgid ""
"```elixir\n"
"import Integer, only: :macros\n"
"```"
msgstr ""

msgid "Or to import all functions, you could write:"
msgstr ""

msgid ""
"```elixir\n"
"import Integer, only: :functions\n"
"```"
msgstr ""

msgid ""
"Note that `import` is **lexically scoped** too. This means that we can import "
"specific macros or functions inside function definitions:"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Math do\n"
"  def some_function do\n"
"    import List, only: [duplicate: 2]\n"
"    duplicate(:ok, 10)\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"In the example above, the imported `List.duplicate/2` is only visible within t"
"hat specific function. `duplicate/2` won't be available in any other function "
"in that module (or any other module for that matter)."
msgstr ""

msgid "Note that `import`ing a module automatically `require`s it."
msgstr ""

msgid "## use"
msgstr ""

msgid ""
"The `use` macro is frequently used by developers to bring external functionali"
"ty into the current lexical scope, often modules."
msgstr ""

msgid ""
"For example, in order to write tests using the ExUnit framework, a developer s"
"hould use the `ExUnit.Case` module:"
msgstr ""

msgid ""
"```elixir\n"
"defmodule AssertionTest do\n"
"  use ExUnit.Case, async: true"
msgstr ""

msgid ""
"  test \"always pass\" do\n"
"    assert true\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"Behind the scenes, `use` requires the given module and then calls the `__using"
"__/1` callback on it allowing the module to inject some code into the current "
"context. Generally speaking, the following module:"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Example do\n"
"  use Feature, option: :value\n"
"end\n"
"```"
msgstr ""

msgid "is compiled into"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Example do\n"
"  require Feature\n"
"  Feature.__using__(option: :value)\n"
"end\n"
"```"
msgstr ""

msgid "## Understanding Aliases"
msgstr ""

msgid ""
"At this point, you may be wondering: what exactly is an Elixir alias and how i"
"s it represented?"
msgstr ""

msgid ""
"An alias in Elixir is a capitalized identifier (like `String`, `Keyword`, etc)"
" which is converted to an atom during compilation. For instance, the `String` "
"alias translates by default to the atom `:\"Elixir.String\"`:"
msgstr ""

msgid ""
"```iex\n"
"iex> is_atom(String)\n"
"true\n"
"iex> to_string(String)\n"
"\"Elixir.String\"\n"
"iex> :\"Elixir.String\" == String\n"
"true\n"
"```"
msgstr ""

msgid ""
"By using the `alias/2` directive, we are changing the atom the alias expands t"
"o."
msgstr ""

msgid ""
"Aliases expand to atoms because in the Erlang <abbr title=\"Virtual Machine\">VM"
"</abbr> (and consequently Elixir) modules are always represented by atoms. For"
" example, that's the mechanism we use to call Erlang modules:"
msgstr ""

msgid ""
"```iex\n"
"iex> :lists.flatten([1, [2], 3])\n"
"[1, 2, 3]\n"
"```"
msgstr ""

msgid "## Module nesting"
msgstr ""

msgid ""
"Now that we have talked about aliases, we can talk about nesting and how it wo"
"rks in Elixir. Consider the following example:"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Foo do\n"
"  defmodule Bar do\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"The example above will define two modules: `Foo` and `Foo.Bar`. The second can"
" be accessed as `Bar` inside `Foo` as long as they are in the same lexical sco"
"pe. The code above is exactly the same as:"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Elixir.Foo do\n"
"  defmodule Elixir.Foo.Bar do\n"
"  end\n"
"  alias Elixir.Foo.Bar, as: Bar\n"
"end\n"
"```"
msgstr ""

msgid ""
"If, later, the `Bar` module is moved outside the `Foo` module definition, it m"
"ust be referenced by its full name (`Foo.Bar`) or an alias must be set using t"
"he `alias` directive discussed above."
msgstr ""

msgid ""
"**Note**: in Elixir, you don't have to define the `Foo` module before being ab"
"le to define the `Foo.Bar` module, as the language translates all module names"
" to atoms. You can define arbitrarily-nested modules without defining any modu"
"le in the chain (e.g., `Foo.Bar.Baz` without defining `Foo` or `Foo.Bar` first"
")."
msgstr ""

msgid ""
"As we will see in later chapters, aliases also play a crucial role in macros, "
"to guarantee they are hygienic."
msgstr ""

msgid "## Multi alias/import/require/use"
msgstr ""

msgid ""
"From Elixir v1.2, it is possible to alias, import or require multiple modules "
"at once. This is particularly useful once we start nesting modules, which is v"
"ery common when building Elixir applications. For example, imagine you have an"
" application where all modules are nested under `MyApp`, you can alias the mod"
"ules `MyApp.Foo`, `MyApp.Bar` and `MyApp.Baz` at once as follows:"
msgstr ""

msgid ""
"```elixir\n"
"alias MyApp.{Foo, Bar, Baz}\n"
"```"
msgstr ""

msgid ""
"With this, we have finished our tour of Elixir modules. The last topic to cove"
"r is module attributes."
msgstr ""
