msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2017-10-30 15:10+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"layout: getting-started\n"
"title: Quote and unquote\n"
"---"
msgstr ""

msgid "# {{ page.title }}"
msgstr ""

msgid "{% include toc.html %}"
msgstr ""

msgid ""
"This guide aims to introduce the meta-programming techniques available in Elix"
"ir. The ability to represent an Elixir program by its own data structures is a"
"t the heart of meta-programming. This chapter starts by exploring those struct"
"ures and the associated `quote` and `unquote` constructs, so we can take a loo"
"k at macros in the next chapter and finally build our own domain specific lang"
"uage."
msgstr ""

msgid ""
"> The Elixir guides are also available in EPUB format:\n"
">\n"
">   * [Getting started guide](https://repo.hex.pm/guides/elixir/elixir-getting"
"-started-guide.epub)\n"
">   * [Mix and OTP guide](https://repo.hex.pm/guides/elixir/mix-and-otp.epub)\n"
">   * [Meta-programming guide](https://repo.hex.pm/guides/elixir/meta-programm"
"ing-in-elixir.epub)"
msgstr ""

msgid "## Quoting"
msgstr ""

msgid ""
"The building block of an Elixir program is a tuple with three elements. For ex"
"ample, the function call `sum(1, 2, 3)` is represented internally as:"
msgstr ""

msgid ""
"```elixir\n"
"{:sum, [], [1, 2, 3]}\n"
"```"
msgstr ""

msgid "You can get the representation of any expression by using the `quote` macro:"
msgstr ""

msgid ""
"```iex\n"
"iex> quote do: sum(1, 2, 3)\n"
"{:sum, [], [1, 2, 3]}\n"
"```"
msgstr ""

msgid ""
"The first element is the function name, the second is a keyword list containin"
"g metadata and the third is the arguments list."
msgstr ""

msgid "Operators are also represented as such tuples:"
msgstr ""

msgid ""
"```iex\n"
"iex> quote do: 1 + 2\n"
"{:+, [context: Elixir, import: Kernel], [1, 2]}\n"
"```"
msgstr ""

msgid "Even a map is represented as a call to `%{}`:"
msgstr ""

msgid ""
"```iex\n"
"iex> quote do: %{1 => 2}\n"
"{:%{}, [], [{1, 2}]}\n"
"```"
msgstr ""

msgid ""
"Variables are also represented using such triplets, except the last element is"
" an atom, instead of a list:"
msgstr ""

msgid ""
"```iex\n"
"iex> quote do: x\n"
"{:x, [], Elixir}\n"
"```"
msgstr ""

msgid ""
"When quoting more complex expressions, we can see that the code is represented"
" in such tuples, which are often nested inside each other in a structure resem"
"bling a tree. Many languages would call such representations an Abstract Synta"
"x Tree (AST). Elixir calls them quoted expressions:"
msgstr ""

msgid ""
"```iex\n"
"iex> quote do: sum(1, 2 + 3, 4)\n"
"{:sum, [], [1, {:+, [context: Elixir, import: Kernel], [2, 3]}, 4]}\n"
"```"
msgstr ""

msgid ""
"Sometimes when working with quoted expressions, it may be useful to get the te"
"xtual code representation back. This can be done with `Macro.to_string/1`:"
msgstr ""

msgid ""
"```iex\n"
"iex> Macro.to_string(quote do: sum(1, 2 + 3, 4))\n"
"\"sum(1, 2 + 3, 4)\"\n"
"```"
msgstr ""

msgid "In general, the tuples above are structured according to the following format:"
msgstr ""

msgid ""
"```elixir\n"
"{atom | tuple, list, list | atom}\n"
"```"
msgstr ""

msgid ""
"* The first element is an atom or another tuple in the same representation;\n"
"* The second element is a keyword list containing metadata, like numbers and c"
"ontexts;\n"
"* The third element is either a list of arguments for the function call or an "
"atom. When this element is an atom, it means the tuple represents a variable."
msgstr ""

msgid ""
"Besides the tuple defined above, there are five Elixir literals that, when quo"
"ted, return themselves (and not a tuple). They are:"
msgstr ""

msgid ""
"```elixir\n"
":sum         #=> Atoms\n"
"1.0          #=> Numbers\n"
"[1, 2]       #=> Lists\n"
"\"strings\"    #=> Strings\n"
"{key, value} #=> Tuples with two elements\n"
"```"
msgstr ""

msgid ""
"Most Elixir code has a straight-forward translation to its underlying quoted e"
"xpression. We recommend you try out different code samples and see what the re"
"sults are. For example, what does `String.upcase(\"foo\")` expand to? We have al"
"so learned that `if(true, do: :this, else: :that)` is the same as `if true do "
":this else :that end`. How does this affirmation hold with quoted expressions?"
msgstr ""

msgid "## Unquoting"
msgstr ""

msgid ""
"Quote is about retrieving the inner representation of some particular chunk of"
" code. However, sometimes it may be necessary to inject some other particular "
"chunk of code inside the representation we want to retrieve."
msgstr ""

msgid ""
"For example, imagine you have a variable `number` which contains the number yo"
"u want to inject inside a quoted expression."
msgstr ""

msgid ""
"```iex\n"
"iex> number = 13\n"
"iex> Macro.to_string(quote do: 11 + number)\n"
"\"11 + number\"\n"
"```"
msgstr ""

msgid ""
"That's not what we wanted, since the value of the `number` variable has not be"
"en injected and `number` has been quoted in the expression. In order to inject"
" the *value* of the `number` variable, `unquote` has to be used inside the quo"
"ted representation:"
msgstr ""

msgid ""
"```iex\n"
"iex> number = 13\n"
"iex> Macro.to_string(quote do: 11 + unquote(number))\n"
"\"11 + 13\"\n"
"```"
msgstr ""

msgid "`unquote` can even be used to inject function names:"
msgstr ""

msgid ""
"```iex\n"
"iex> fun = :hello\n"
"iex> Macro.to_string(quote do: unquote(fun)(:world))\n"
"\"hello(:world)\"\n"
"```"
msgstr ""

msgid ""
"In some cases, it may be necessary to inject many values inside a list. For ex"
"ample, imagine you have a list containing `[1, 2, 6]` and we want to inject `["
"3, 4, 5]` into it. Using `unquote` won't yield the desired result:"
msgstr ""

msgid ""
"```iex\n"
"iex> inner = [3, 4, 5]\n"
"iex> Macro.to_string(quote do: [1, 2, unquote(inner), 6])\n"
"\"[1, 2, [3, 4, 5], 6]\"\n"
"```"
msgstr ""

msgid "That's when `unquote_splicing` becomes handy:"
msgstr ""

msgid ""
"```iex\n"
"iex> inner = [3, 4, 5]\n"
"iex> Macro.to_string(quote do: [1, 2, unquote_splicing(inner), 6])\n"
"\"[1, 2, 3, 4, 5, 6]\"\n"
"```"
msgstr ""

msgid ""
"Unquoting is very useful when working with macros. When writing macros, develo"
"pers are able to receive code chunks and inject them inside other code chunks,"
" which can be used to transform code or write code that generates code during "
"compilation."
msgstr ""

msgid "## Escaping"
msgstr ""

msgid ""
"As we saw at the beginning of this chapter, only some values are valid quoted "
"expressions in Elixir. For example, a map is not a valid quoted expression. Ne"
"ither is a tuple with four elements. However, such values *can* be expressed a"
"s a quoted expression:"
msgstr ""

msgid ""
"In some cases, you may need to inject such *values* into *quoted expressions*."
" To do that, we need to first escape those values into quoted expressions with"
" the help of `Macro.escape/1`:"
msgstr ""

msgid ""
"```iex\n"
"iex> map = %{hello: :world}\n"
"iex> Macro.escape(map)\n"
"{:%{}, [], [hello: :world]}\n"
"```"
msgstr ""

msgid ""
"Macros receive quoted expressions and must return quoted expressions. However,"
" sometimes during the execution of a macro, you may need to work with values a"
"nd making a distinction between values and quoted expressions will be required"
"."
msgstr ""

msgid ""
"In other words, it is important to make a distinction between a regular Elixir"
" value (like a list, a map, a process, a reference, etc) and a quoted expressi"
"on. Some values, such as integers, atoms, and strings, have a quoted expressio"
"n equal to the value itself. Other values, like maps, need to be explicitly co"
"nverted. Finally, values like functions and references cannot be converted to "
"a quoted expression at all."
msgstr ""

msgid ""
"You can read more about `quote` and `unquote` in the [`Kernel.SpecialForms` mo"
"dule](https://hexdocs.pm/elixir/Kernel.SpecialForms.html). Documentation for `"
"Macro.escape/1` and other functions related to quoted expressions can be found"
" in the [`Macro` module](https://hexdocs.pm/elixir/Macro.html)."
msgstr ""

msgid ""
"In this introduction, we have laid the groundwork to finally write our first m"
"acro, so let's move to the next chapter."
msgstr ""
