# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-08-08 04:23+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../getting-started/debugging.markdown:1
msgid "---\n"
"layout: getting-started\n"
"title: Debugging\n"
"---"
msgstr ""

#: ../../../getting-started/debugging.markdown:6
msgid "# {{ page.title }}"
msgstr ""

#: ../../../getting-started/debugging.markdown:8
msgid "{% include toc.html %}"
msgstr ""

#: ../../../getting-started/debugging.markdown:10
msgid "There are a number of ways one can debug their code in Elixir. In this chapter we will cover some of the more common ways of doing so."
msgstr ""

#: ../../../getting-started/debugging.markdown:12
msgid "## IO.inspect/2"
msgstr ""

#: ../../../getting-started/debugging.markdown:14
msgid "What makes `IO.inspect(item, opts \\\\ [])` really useful in debugging is that it returns the `item` argument passed to it without affecting the behavior of the original code. Let's see an example."
msgstr ""

#: ../../../getting-started/debugging.markdown:16
msgid "```elixir\n"
"(1..10)\n"
"|> IO.inspect\n"
"|> Enum.map(fn x -> x * 2 end)\n"
"|> IO.inspect\n"
"|> Enum.sum\n"
"|> IO.inspect\n"
"```"
msgstr ""

#: ../../../getting-started/debugging.markdown:25
#: ../../../getting-started/debugging.markdown:45
msgid "Prints:"
msgstr ""

#: ../../../getting-started/debugging.markdown:27
msgid "```elixir\n"
"1..10\n"
"[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n"
"110\n"
"```"
msgstr ""

#: ../../../getting-started/debugging.markdown:33
msgid "As you can see `IO.inspect/2` makes it possible to \"spy\" on values almost anywhere in your code without altering the result, making it very helpful inside of a pipeline like in the above case."
msgstr ""

#: ../../../getting-started/debugging.markdown:35
msgid "`IO.inspect/2` also provides the ability to decorate the output with a `label` option. The label will be printed before the inspected `item`:"
msgstr ""

#: ../../../getting-started/debugging.markdown:37
msgid "```elixir\n"
"[1, 2, 3]\n"
"|> IO.inspect(label: \"before\")\n"
"|> Enum.map(&(&1 * 2))\n"
"|> IO.inspect(label: \"after\")\n"
"|> Enum.sum\n"
"```"
msgstr ""

#: ../../../getting-started/debugging.markdown:47
msgid "```elixir\n"
"before: [1, 2, 3]\n"
"after: [2, 4, 6]\n"
"```"
msgstr ""

#: ../../../getting-started/debugging.markdown:52
msgid "It is also very common to use `IO.inspect/2` with [`binding()`](https://hexdocs.pm/elixir/Kernel.html#binding/0), which returns all variable names and their values:"
msgstr ""

#: ../../../getting-started/debugging.markdown:54
msgid "```elixir\n"
"def some_fun(a, b, c) do\n"
"  IO.inspect binding()\n"
"  ...\n"
"end\n"
"```"
msgstr ""

#: ../../../getting-started/debugging.markdown:61
msgid "When `some_fun/3` is invoked with `:foo`, `\"bar\"`, `:baz` it prints:"
msgstr ""

#: ../../../getting-started/debugging.markdown:63
msgid "```elixir\n"
"[a: :foo, b: \"bar\", c: :baz]\n"
"```"
msgstr ""

#: ../../../getting-started/debugging.markdown:67
msgid "Please see [IO.inspect/2](https://hexdocs.pm/elixir/IO.html#inspect/2) to read more about other ways in which one could use this function. Also, in order to find a full list of other formatting options that one can use alongside `IO.inspect/2`, see [Inspect.Opts](https://hexdocs.pm/elixir/Inspect.Opts.html)."
msgstr ""

#: ../../../getting-started/debugging.markdown:69
msgid "## `IEx.pry/0` and `IEx.break!/2`"
msgstr ""

#: ../../../getting-started/debugging.markdown:71
msgid "While `IO.inspect/2` is static, Elixir's interactive shell provides more dynamic ways to interact with debugged code."
msgstr ""

#: ../../../getting-started/debugging.markdown:73
msgid "The first one is with [`IEx.pry/0`](https://hexdocs.pm/iex/IEx.html#pry/0) which we can use instead of `IO.inspect binding()`:"
msgstr ""

#: ../../../getting-started/debugging.markdown:75
msgid "```elixir\n"
"def some_fun(a, b, c) do\n"
"  require IEx; IEx.pry\n"
"  ...\n"
"end\n"
"```"
msgstr ""

#: ../../../getting-started/debugging.markdown:82
msgid "Once the code above is executed inside an `iex` session, IEx will ask if we want to pry into the current code. If accepted, we will be able to access all variables, as well as imports and aliases from the code, directly From IEx. While pry is running, the code execution stops, until `continue` is called. Remember you can always run `iex` in the context of a project with `iex -S mix TASK`."
msgstr ""

#: ../../../getting-started/debugging.markdown:84
msgid "Unfortunately, similar to `IO.inspect/2`, `IEx.pry/0` also requires us to change the code we intend to debug. Luckily IEx also provides a [`break!/2`](https://hexdocs.pm/iex/IEx.html#break!/2) function which allows you set and manage breakpoints on any Elixir code without modifying its source:"
msgstr ""

#: ../../../getting-started/debugging.markdown:86
msgid "<script type=\"text/javascript\" src=\"https://asciinema.org/a/0h3po0AmTcBAorc5GBNU97nrs.js\" id=\"asciicast-0h3po0AmTcBAorc5GBNU97nrs\" async></script><noscript><p><a href=\"https://asciinema.org/a/0h3po0AmTcBAorc5GBNU97nrs\">See the example in asciinema</a></p></noscript>"
msgstr ""

#: ../../../getting-started/debugging.markdown:88
msgid "Similar to `IEx.pry/0`, once a breakpoint is reached code execution stops until `continue` is invoked. However, note `break!/2` does not have access to aliases and imports from the debugged code as it works on the compiled artifact rather than on source."
msgstr ""

#: ../../../getting-started/debugging.markdown:90
msgid "## Debugger"
msgstr ""

#: ../../../getting-started/debugging.markdown:92
msgid "For those who enjoy breakpoints but are rather interested in a visual debugger, Erlang/OTP ships with a graphical debugger conveniently named `:debugger`. Let's define a module:"
msgstr ""

#: ../../../getting-started/debugging.markdown:94
msgid "```elixir\n"
"defmodule Example do\n"
"  def double_sum(x, y) do\n"
"    hard_work(x, y)\n"
"  end"
msgstr ""

#: ../../../getting-started/debugging.markdown:100
msgid "  defp hard_work(x, y) do\n"
"    x = 2 * x\n"
"    y = 2 * y"
msgstr ""

#: ../../../getting-started/debugging.markdown:104
msgid "    x + y\n"
"  end\n"
"end\n"
"```"
msgstr ""

#: ../../../getting-started/debugging.markdown:109
msgid "Now we can start our debugger:"
msgstr ""

#: ../../../getting-started/debugging.markdown:111
msgid "```iex\n"
"$ iex -S mix\n"
"iex(1)> :debugger.start()\n"
"{:ok, #PID<0.87.0>}\n"
"iex(2)> :int.ni(Example)\n"
"{:module, Example}\n"
"iex(3)> :int.break(Example, 3)\n"
":ok\n"
"iex(4)> Example.double_sum(1,2)\n"
"```"
msgstr ""

#: ../../../getting-started/debugging.markdown:122
msgid "When you start the debugger, a Graphical User Interface will open in your machine. We call `:int.ni(Example)` to prepare our module for debugging and then add a breakpoint to line 3 with `:int.break(Example, 3)`. After we call our function, we can see our process with break status in the debugger:"
msgstr ""

#: ../../../getting-started/debugging.markdown:124
msgid "<img src=\"/images/contents/debugger-elixir.gif\" width=\"640\" alt=\"Debugger GUI GIF\" />"
msgstr ""

#: ../../../getting-started/debugging.markdown:126
msgid "Note: the Debugger snippet above was retrieved from [\"Debugging techniques in Elixir\" by Plataformatec](http://blog.plataformatec.com.br/2016/04/debugging-techniques-in-elixir-lang/)."
msgstr ""

#: ../../../getting-started/debugging.markdown:128
msgid "## Observer"
msgstr ""

#: ../../../getting-started/debugging.markdown:130
msgid "For debugging complex systems, jumping at the code is not enough. It is necessary to have an understanding of the whole virtual machine, processes, applications, as well as set up tracing mechanisms. Luckily this can be achieved in Erlang with `:observer`. In your application:"
msgstr ""

#: ../../../getting-started/debugging.markdown:132
msgid "```iex\n"
"$ iex -S mix\n"
"iex(1)> :observer.start()\n"
"```"
msgstr ""

#: ../../../getting-started/debugging.markdown:137
msgid "The above will open another Graphical User Interface that provides many panes to fully understand and navigate the runtime and your project:"
msgstr ""

#: ../../../getting-started/debugging.markdown:139
msgid "<img src=\"/images/contents/kv-observer.png\" width=\"640\" alt=\"Observer GUI screenshot\" />"
msgstr ""

#: ../../../getting-started/debugging.markdown:141
msgid "We explore the Observer in the context of an actual project [in the Dynamic Supervisor chapter of the Mix & OTP guide](/getting-started/mix-otp/dynamic-supervisor.html)."
msgstr ""

#: ../../../getting-started/debugging.markdown:143
msgid "You can also [use Observer to introspect a remote node](http://blog.plataformatec.com.br/2016/05/tracing-and-observing-your-remote-node/). This is one of the debugging techniques [the Phoenix framework used to achieve 2 million connections on a single machine](https://phoenixframework.org/blog/the-road-to-2-million-websocket-connections)."
msgstr ""

#: ../../../getting-started/debugging.markdown:145
msgid "Finally remember you can also get a mini-overview of the runtime info by calling `runtime_info/0` directly in IEx."
msgstr ""

#: ../../../getting-started/debugging.markdown:147
msgid "## Other tools and community"
msgstr ""

#: ../../../getting-started/debugging.markdown:149
msgid "We have just scratched the surface of what the Erlang VM has to offer, for example:"
msgstr ""

#: ../../../getting-started/debugging.markdown:151
msgid "  * Alongside the observer application, Erlang also includes a `:crashdump_viewer` to view crash dumps\n"
"  * Integration with OS level tracers, such as [Linux Trace Toolkit,](http://erlang.org/doc/apps/runtime_tools/LTTng.html) [DTRACE,](http://erlang.org/doc/apps/runtime_tools/DTRACE.html) and [SystemTap](http://erlang.org/doc/apps/runtime_tools/SYSTEMTAP.html)\n"
"  * [Microstate accounting](http://erlang.org/doc/man/msacc.html) measures how much time the runtime spends in several low-level tasks in a short time interval\n"
"  * Mix ships with many tasks under the `profile` namespace, such as `cprof` and `fprof`\n"
"  * And more"
msgstr ""

#: ../../../getting-started/debugging.markdown:157
msgid "The community has also created their own tools, often to aid in production, other times in development:"
msgstr ""

#: ../../../getting-started/debugging.markdown:159
msgid "  * [wObserver](https://github.com/shinyscorpion/wObserver) observes production nodes through a web interface.\n"
"  * [visualixir](https://github.com/koudelka/visualixir) is a development-time process message visualizer.\n"
"  * [erlyberly](https://github.com/andytill/erlyberly) is a GUI for tracing during development."
msgstr ""

#: ../../../getting-started/debugging.markdown:163
msgid "There are probably many more to come too!"
msgstr ""

