msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2017-10-30 15:10+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"layout: getting-started\n"
"title: Module attributes\n"
"---"
msgstr ""

msgid "# {{ page.title }}"
msgstr ""

msgid "{% include toc.html %}"
msgstr ""

msgid "Module attributes in Elixir serve three purposes:"
msgstr ""

msgid ""
"1. They serve to annotate the module, often with information to be used by the"
" user or the <abbr title=\"Virtual Machine\">VM</abbr>.\n"
"2. They work as constants.\n"
"3. They work as a temporary module storage to be used during compilation."
msgstr ""

msgid "Let's check each case, one by one."
msgstr ""

msgid "## As annotations"
msgstr ""

msgid "Elixir brings the concept of module attributes from Erlang. For example:"
msgstr ""

msgid ""
"```elixir\n"
"defmodule MyServer do\n"
"  @vsn 2\n"
"end\n"
"```"
msgstr ""

msgid ""
"In the example above, we are explicitly setting the version attribute for that"
" module. `@vsn` is used by the code reloading mechanism in the Erlang <abbr ti"
"tle=\"Virtual Machine\">VM</abbr> to check if a module has been updated or not. "
"If no version is specified, the version is set to the MD5 checksum of the modu"
"le functions."
msgstr ""

msgid ""
"Elixir has a handful of reserved attributes. Here are a few of them, the most "
"commonly used ones:"
msgstr ""

msgid ""
"* `@moduledoc` - provides documentation for the current module.\n"
"* `@doc` - provides documentation for the function or macro that follows the a"
"ttribute.\n"
"* `@behaviour` - (notice the British spelling) used for specifying an <abbr ti"
"tle=\"Open Telecom Platform\">OTP</abbr> or user-defined behaviour.\n"
"* `@before_compile` - provides a hook that will be invoked before the module i"
"s compiled. This makes it possible to inject functions inside the module exact"
"ly before compilation."
msgstr ""

msgid ""
"`@moduledoc` and `@doc` are by far the most used attributes, and we expect you"
" to use them a lot. Elixir treats documentation as first-class and provides ma"
"ny functions to access documentation. You can read more about [writing documen"
"tation in Elixir in our official documentation](https://hexdocs.pm/elixir/writ"
"ing-documentation.html)."
msgstr ""

msgid ""
"Let's go back to the `Math` module defined in the previous chapters, add some "
"documentation and save it to the `math.ex` file:"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Math do\n"
"  @moduledoc \"\"\"\n"
"  Provides math-related functions."
msgstr ""

msgid "  ## Examples"
msgstr ""

msgid ""
"      iex> Math.sum(1, 2)\n"
"      3"
msgstr ""

msgid "  \"\"\""
msgstr ""

msgid ""
"  @doc \"\"\"\n"
"  Calculates the sum of two numbers.\n"
"  \"\"\"\n"
"  def sum(a, b), do: a + b\n"
"end\n"
"```"
msgstr ""

msgid ""
"Elixir promotes the use of Markdown with heredocs to write readable documentat"
"ion. Heredocs are multi-line strings, they start and end with triple double-qu"
"otes, keeping the formatting of the inner text. We can access the documentatio"
"n of any compiled module directly from IEx:"
msgstr ""

msgid ""
"```console\n"
"$ elixirc math.ex\n"
"$ iex\n"
"```"
msgstr ""

msgid ""
"```iex\n"
"iex> h Math # Access the docs for the module Math\n"
"...\n"
"iex> h Math.sum # Access the docs for the sum function\n"
"...\n"
"```"
msgstr ""

msgid ""
"We also provide a tool called [ExDoc](https://github.com/elixir-lang/ex_doc) w"
"hich is used to generate HTML pages from the documentation."
msgstr ""

msgid ""
"You can take a look at the docs for [Module](https://hexdocs.pm/elixir/Module."
"html) for a complete list of supported attributes. Elixir also uses attributes"
" to define [typespecs](/getting-started/typespecs-and-behaviours.html)."
msgstr ""

msgid ""
"This section covers built-in attributes. However, attributes can also be used "
"by developers or extended by libraries to support custom behaviour."
msgstr ""

msgid "## As \"constants\""
msgstr ""

msgid "Elixir developers will often use module attributes as constants:"
msgstr ""

msgid ""
"```elixir\n"
"defmodule MyServer do\n"
"  @initial_state %{host: \"127.0.0.1\", port: 3456}\n"
"  IO.inspect @initial_state\n"
"end\n"
"```"
msgstr ""

msgid ""
"> Note: Unlike Erlang, user defined attributes are not stored in the module by"
" default. The value exists only during compilation time. A developer can confi"
"gure an attribute to behave closer to Erlang by calling [`Module.register_attr"
"ibute/3`](https://hexdocs.pm/elixir/Module.html#register_attribute/3)."
msgstr ""

msgid "Trying to access an attribute that was not defined will print a warning:"
msgstr ""

msgid ""
"```elixir\n"
"defmodule MyServer do\n"
"  @unknown\n"
"end\n"
"warning: undefined module attribute @unknown, please remove access to @unknown"
" or explicitly set it before access\n"
"```"
msgstr ""

msgid "Finally, attributes can also be read inside functions:"
msgstr ""

msgid ""
"```elixir\n"
"defmodule MyServer do\n"
"  @my_data 14\n"
"  def first_data, do: @my_data\n"
"  @my_data 13\n"
"  def second_data, do: @my_data\n"
"end"
msgstr ""

msgid ""
"MyServer.first_data #=> 14\n"
"MyServer.second_data #=> 13\n"
"```"
msgstr ""

msgid ""
"Every time an attribute is read inside a function, a snapshot of its current v"
"alue is taken. In other words, the value is read at compilation time and not a"
"t runtime. As we are going to see, this also makes attributes useful to be use"
"d as storage during module compilation."
msgstr ""

msgid "Any functions may be called when defining a module attribute."
msgstr ""

msgid ""
"When defining an attribute, do not leave a line break between the attribute na"
"me and its value."
msgstr ""

msgid "## As temporary storage"
msgstr ""

msgid ""
"One of the projects in the Elixir organization is [the `Plug` project](https:/"
"/github.com/elixir-lang/plug), which is meant to be a common foundation for bu"
"ilding web libraries and frameworks in Elixir."
msgstr ""

msgid ""
"The Plug library also allows developers to define their own plugs which can be"
" run in a web server:"
msgstr ""

msgid ""
"```elixir\n"
"defmodule MyPlug do\n"
"  use Plug.Builder"
msgstr ""

msgid ""
"  plug :set_header\n"
"  plug :send_ok"
msgstr ""

msgid ""
"  def set_header(conn, _opts) do\n"
"    put_resp_header(conn, \"x-header\", \"set\")\n"
"  end"
msgstr ""

msgid ""
"  def send_ok(conn, _opts) do\n"
"    send(conn, 200, \"ok\")\n"
"  end\n"
"end"
msgstr ""

msgid ""
"IO.puts \"Running MyPlug with Cowboy on http://localhost:4000\"\n"
"Plug.Adapters.Cowboy.http MyPlug, []\n"
"```"
msgstr ""

msgid ""
"In the example above, we have used the `plug/1` macro to connect functions tha"
"t will be invoked when there is a web request. Internally, every time you call"
" `plug/1`, the Plug library stores the given argument in a `@plugs` attribute."
" Just before the module is compiled, Plug runs a callback that defines a funct"
"ion (`call/2`) which handles HTTP requests. This function will run all plugs i"
"nside `@plugs` in order."
msgstr ""

msgid ""
"In order to understand the underlying code, we'd need macros, so we will revis"
"it this pattern in the meta-programming guide. However, the focus here is on h"
"ow using module attributes as storage allows developers to create DSLs."
msgstr ""

msgid ""
"Another example comes from [the ExUnit framework](https://hexdocs.pm/ex_unit/)"
" which uses module attributes as annotation and storage:"
msgstr ""

msgid ""
"```elixir\n"
"defmodule MyTest do\n"
"  use ExUnit.Case"
msgstr ""

msgid ""
"  @tag :external\n"
"  test \"contacts external service\" do\n"
"    # ...\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"Tags in ExUnit are used to annotate tests. Tags can be later used to filter te"
"sts. For example, you can avoid running external tests on your machine because"
" they are slow and dependent on other services, while they can still be enable"
"d in your build system."
msgstr ""

msgid ""
"We hope this section shines some light on how Elixir supports meta-programming"
" and how module attributes play an important role when doing so."
msgstr ""

msgid ""
"In the next chapters, we'll explore structs and protocols before moving to exc"
"eption handling and other constructs like sigils and comprehensions."
msgstr ""
