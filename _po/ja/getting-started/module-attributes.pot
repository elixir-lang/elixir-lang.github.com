# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-07-26 17:55+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../getting-started/module-attributes.markdown:1
msgid "---\n"
"layout: getting-started\n"
"title: Module attributes\n"
"---"
msgstr ""

#: ../../../getting-started/module-attributes.markdown:6
msgid "# {{ page.title }}"
msgstr ""

#: ../../../getting-started/module-attributes.markdown:8
msgid "{% include toc.html %}"
msgstr ""

#: ../../../getting-started/module-attributes.markdown:10
msgid "Module attributes in Elixir serve three purposes:"
msgstr ""

#: ../../../getting-started/module-attributes.markdown:12
msgid "1. They serve to annotate the module, often with information to be used by the user or the <abbr title=\"Virtual Machine\">VM</abbr>.\n"
"2. They work as constants.\n"
"3. They work as a temporary module storage to be used during compilation."
msgstr ""

#: ../../../getting-started/module-attributes.markdown:16
msgid "Let's check each case, one by one."
msgstr ""

#: ../../../getting-started/module-attributes.markdown:18
msgid "## As annotations"
msgstr ""

#: ../../../getting-started/module-attributes.markdown:20
msgid "Elixir brings the concept of module attributes from Erlang. For example:"
msgstr ""

#: ../../../getting-started/module-attributes.markdown:22
msgid "```elixir\n"
"defmodule MyServer do\n"
"  @vsn 2\n"
"end\n"
"```"
msgstr ""

#: ../../../getting-started/module-attributes.markdown:28
msgid "In the example above, we are explicitly setting the version attribute for that module. `@vsn` is used by the code reloading mechanism in the Erlang <abbr title=\"Virtual Machine\">VM</abbr> to check if a module has been updated or not. If no version is specified, the version is set to the MD5 checksum of the module functions."
msgstr ""

#: ../../../getting-started/module-attributes.markdown:30
msgid "Elixir has a handful of reserved attributes. Here are a few of them, the most commonly used ones:"
msgstr ""

#: ../../../getting-started/module-attributes.markdown:32
msgid "* `@moduledoc` - provides documentation for the current module.\n"
"* `@doc` - provides documentation for the function or macro that follows the attribute.\n"
"* `@behaviour` - (notice the British spelling) used for specifying an <abbr title=\"Open Telecom Platform\">OTP</abbr> or user-defined behaviour.\n"
"* `@before_compile` - provides a hook that will be invoked before the module is compiled. This makes it possible to inject functions inside the module exactly before compilation."
msgstr ""

#: ../../../getting-started/module-attributes.markdown:37
msgid "`@moduledoc` and `@doc` are by far the most used attributes, and we expect you to use them a lot. Elixir treats documentation as first-class and provides many functions to access documentation. You can read more about [writing documentation in Elixir in our official documentation](https://hexdocs.pm/elixir/writing-documentation.html)."
msgstr ""

#: ../../../getting-started/module-attributes.markdown:39
msgid "Let's go back to the `Math` module defined in the previous chapters, add some documentation and save it to the `math.ex` file:"
msgstr ""

#: ../../../getting-started/module-attributes.markdown:41
msgid "```elixir\n"
"defmodule Math do\n"
"  @moduledoc \"\"\"\n"
"  Provides math-related functions."
msgstr ""

#: ../../../getting-started/module-attributes.markdown:46
msgid "  ## Examples"
msgstr ""

#: ../../../getting-started/module-attributes.markdown:48
msgid "      iex> Math.sum(1, 2)\n"
"      3"
msgstr ""

#: ../../../getting-started/module-attributes.markdown:51
msgid "  \"\"\""
msgstr ""

#: ../../../getting-started/module-attributes.markdown:53
msgid "  @doc \"\"\"\n"
"  Calculates the sum of two numbers.\n"
"  \"\"\"\n"
"  def sum(a, b), do: a + b\n"
"end\n"
"```"
msgstr ""

#: ../../../getting-started/module-attributes.markdown:60
msgid "Elixir promotes the use of Markdown with heredocs to write readable documentation. Heredocs are multi-line strings, they start and end with triple double-quotes, keeping the formatting of the inner text. We can access the documentation of any compiled module directly from IEx:"
msgstr ""

#: ../../../getting-started/module-attributes.markdown:62
msgid "```console\n"
"$ elixirc math.ex\n"
"$ iex\n"
"```"
msgstr ""

#: ../../../getting-started/module-attributes.markdown:67
msgid "```iex\n"
"iex> h Math # Access the docs for the module Math\n"
"...\n"
"iex> h Math.sum # Access the docs for the sum function\n"
"...\n"
"```"
msgstr ""

#: ../../../getting-started/module-attributes.markdown:74
msgid "We also provide a tool called [ExDoc](https://github.com/elixir-lang/ex_doc) which is used to generate HTML pages from the documentation."
msgstr ""

#: ../../../getting-started/module-attributes.markdown:76
msgid "You can take a look at the docs for [Module](https://hexdocs.pm/elixir/Module.html) for a complete list of supported attributes. Elixir also uses attributes to define [typespecs](/getting-started/typespecs-and-behaviours.html)."
msgstr ""

#: ../../../getting-started/module-attributes.markdown:78
msgid "This section covers built-in attributes. However, attributes can also be used by developers or extended by libraries to support custom behaviour."
msgstr ""

#: ../../../getting-started/module-attributes.markdown:80
msgid "## As \"constants\""
msgstr ""

#: ../../../getting-started/module-attributes.markdown:82
msgid "Elixir developers will often use module attributes as constants:"
msgstr ""

#: ../../../getting-started/module-attributes.markdown:84
msgid "```elixir\n"
"defmodule MyServer do\n"
"  @initial_state %{host: \"127.0.0.1\", port: 3456}\n"
"  IO.inspect @initial_state\n"
"end\n"
"```"
msgstr ""

#: ../../../getting-started/module-attributes.markdown:91
msgid "> Note: Unlike Erlang, user defined attributes are not stored in the module by default. The value exists only during compilation time. A developer can configure an attribute to behave closer to Erlang by calling [`Module.register_attribute/3`](https://hexdocs.pm/elixir/Module.html#register_attribute/3)."
msgstr ""

#: ../../../getting-started/module-attributes.markdown:93
msgid "Trying to access an attribute that was not defined will print a warning:"
msgstr ""

#: ../../../getting-started/module-attributes.markdown:95
msgid "```elixir\n"
"defmodule MyServer do\n"
"  @unknown\n"
"end\n"
"warning: undefined module attribute @unknown, please remove access to @unknown or explicitly set it before access\n"
"```"
msgstr ""

#: ../../../getting-started/module-attributes.markdown:102
msgid "Finally, attributes can also be read inside functions:"
msgstr ""

#: ../../../getting-started/module-attributes.markdown:104
msgid "```elixir\n"
"defmodule MyServer do\n"
"  @my_data 14\n"
"  def first_data, do: @my_data\n"
"  @my_data 13\n"
"  def second_data, do: @my_data\n"
"end"
msgstr ""

#: ../../../getting-started/module-attributes.markdown:112
msgid "MyServer.first_data #=> 14\n"
"MyServer.second_data #=> 13\n"
"```"
msgstr ""

#: ../../../getting-started/module-attributes.markdown:116
msgid "Every time an attribute is read inside a function, a snapshot of its current value is taken. In other words, the value is read at compilation time and not at runtime. As we are going to see, this also makes attributes useful to be used as storage during module compilation."
msgstr ""

#: ../../../getting-started/module-attributes.markdown:118
msgid "Any functions may be called when defining a module attribute."
msgstr ""

#: ../../../getting-started/module-attributes.markdown:120
msgid "When defining an attribute, do not leave a line break between the attribute name and its value."
msgstr ""

#: ../../../getting-started/module-attributes.markdown:122
msgid "## As temporary storage"
msgstr ""

#: ../../../getting-started/module-attributes.markdown:124
msgid "One of the projects in the Elixir organization is [the `Plug` project](https://github.com/elixir-lang/plug), which is meant to be a common foundation for building web libraries and frameworks in Elixir."
msgstr ""

#: ../../../getting-started/module-attributes.markdown:126
msgid "The Plug library also allows developers to define their own plugs which can be run in a web server:"
msgstr ""

#: ../../../getting-started/module-attributes.markdown:128
msgid "```elixir\n"
"defmodule MyPlug do\n"
"  use Plug.Builder"
msgstr ""

#: ../../../getting-started/module-attributes.markdown:132
msgid "  plug :set_header\n"
"  plug :send_ok"
msgstr ""

#: ../../../getting-started/module-attributes.markdown:135
msgid "  def set_header(conn, _opts) do\n"
"    put_resp_header(conn, \"x-header\", \"set\")\n"
"  end"
msgstr ""

#: ../../../getting-started/module-attributes.markdown:139
msgid "  def send_ok(conn, _opts) do\n"
"    send(conn, 200, \"ok\")\n"
"  end\n"
"end"
msgstr ""

#: ../../../getting-started/module-attributes.markdown:144
msgid "IO.puts \"Running MyPlug with Cowboy on http://localhost:4000\"\n"
"Plug.Adapters.Cowboy.http MyPlug, []\n"
"```"
msgstr ""

#: ../../../getting-started/module-attributes.markdown:148
msgid "In the example above, we have used the `plug/1` macro to connect functions that will be invoked when there is a web request. Internally, every time you call `plug/1`, the Plug library stores the given argument in a `@plugs` attribute. Just before the module is compiled, Plug runs a callback that defines a function (`call/2`) which handles HTTP requests. This function will run all plugs inside `@plugs` in order."
msgstr ""

#: ../../../getting-started/module-attributes.markdown:150
msgid "In order to understand the underlying code, we'd need macros, so we will revisit this pattern in the meta-programming guide. However, the focus here is on how using module attributes as storage allows developers to create DSLs."
msgstr ""

#: ../../../getting-started/module-attributes.markdown:152
msgid "Another example comes from [the ExUnit framework](https://hexdocs.pm/ex_unit/) which uses module attributes as annotation and storage:"
msgstr ""

#: ../../../getting-started/module-attributes.markdown:154
msgid "```elixir\n"
"defmodule MyTest do\n"
"  use ExUnit.Case"
msgstr ""

#: ../../../getting-started/module-attributes.markdown:158
msgid "  @tag :external\n"
"  test \"contacts external service\" do\n"
"    # ...\n"
"  end\n"
"end\n"
"```"
msgstr ""

#: ../../../getting-started/module-attributes.markdown:165
msgid "Tags in ExUnit are used to annotate tests. Tags can be later used to filter tests. For example, you can avoid running external tests on your machine because they are slow and dependent on other services, while they can still be enabled in your build system."
msgstr ""

#: ../../../getting-started/module-attributes.markdown:167
msgid "We hope this section shines some light on how Elixir supports meta-programming and how module attributes play an important role when doing so."
msgstr ""

#: ../../../getting-started/module-attributes.markdown:169
msgid "In the next chapters, we'll explore structs and protocols before moving to exception handling and other constructs like sigils and comprehensions."
msgstr ""

