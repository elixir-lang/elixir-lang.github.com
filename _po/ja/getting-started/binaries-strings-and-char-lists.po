msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2018-07-27 22:30+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"layout: getting-started\n"
"title: Binaries, strings, and charlists\n"
"---"
msgstr ""

msgid "# {{ page.title }}"
msgstr ""

msgid "{% include toc.html %}"
msgstr ""

msgid ""
"In \"Basic types\", we learned about strings and used the `is_binary/1` function"
" for checks:"
msgstr ""

msgid ""
"```iex\n"
"iex> string = \"hello\"\n"
"\"hello\"\n"
"iex> is_binary(string)\n"
"true\n"
"```"
msgstr ""

msgid ""
"In this chapter, we will understand what binaries are, how they associate with"
" strings, and what a single-quoted value, `'like this'`, means in Elixir."
msgstr ""

msgid "## UTF-8 and Unicode"
msgstr ""

msgid ""
"A string is a UTF-8 encoded binary. In order to understand exactly what we mea"
"n by that, we need to understand the difference between bytes and code points."
msgstr ""

msgid ""
"The Unicode standard assigns code points to many of the characters we know. Fo"
"r example, the letter `a` has code point `97` while the letter `ł` has code po"
"int `322`. When writing the string `\"hełło\"` to disk, we need to convert this "
"sequence of characters to bytes. If we adopted a rule that said one byte repre"
"sents one code point, we wouldn't be able to write `\"hełło\"`, because it uses "
"the code point `322` for `ł`, and one byte can only represent a number from `0"
"` to `255`. But of course, given you can actually read `\"hełło\"` on your scree"
"n, it must be represented *somehow*. That's where encodings come in."
msgstr ""

msgid ""
"When representing code points in bytes, we need to encode them somehow. Elixir"
" chose the UTF-8 encoding as its main and default encoding. When we say a stri"
"ng is a UTF-8 encoded binary, we mean a string is a bunch of bytes organized i"
"n a way to represent certain code points, as specified by the UTF-8 encoding."
msgstr ""

msgid ""
"Since we have characters like `ł` assigned to the code point `322`, we actuall"
"y need more than one byte to represent them. That's why we see a difference wh"
"en we calculate the `byte_size/1` of a string compared to its `String.length/1"
"`:"
msgstr ""

msgid ""
"```iex\n"
"iex> string = \"hełło\"\n"
"\"hełło\"\n"
"iex> byte_size(string)\n"
"7\n"
"iex> String.length(string)\n"
"5\n"
"```"
msgstr ""

msgid ""
"There, `byte_size/1` counts the underlying raw bytes, and `String.length/1` co"
"unts characters."
msgstr ""

msgid ""
"> Note: if you are running on Windows, there is a chance your terminal does no"
"t use UTF-8 by default. You can change the encoding of your current session by"
" running `chcp 65001` before entering `iex` (`iex.bat`)."
msgstr ""

msgid ""
"UTF-8 requires one byte to represent the characters `h`, `e`, and `o`, but two"
" bytes to represent `ł`. In Elixir, you can get a character's code point by us"
"ing `?`:"
msgstr ""

msgid ""
"```iex\n"
"iex> ?a\n"
"97\n"
"iex> ?ł\n"
"322\n"
"```"
msgstr ""

msgid ""
"You can also use the functions in [the `String` module](https://hexdocs.pm/eli"
"xir/String.html) to split a string in its individual characters, each one as a"
" string of length 1:"
msgstr ""

msgid ""
"```iex\n"
"iex> String.codepoints(\"hełło\")\n"
"[\"h\", \"e\", \"ł\", \"ł\", \"o\"]\n"
"```"
msgstr ""

msgid ""
"You will see that Elixir has excellent support for working with strings. It al"
"so supports many of the Unicode operations. In fact, Elixir passes all the tes"
"ts showcased in the article [\"The string type is broken\"](http://mortoray.com/"
"2013/11/27/the-string-type-is-broken/)."
msgstr ""

msgid ""
"However, strings are just part of the story. If a string is a binary, and we h"
"ave used the `is_binary/1` function, Elixir must have an underlying type empow"
"ering strings. And it does! Let's talk about binaries."
msgstr ""

msgid "## Binaries (and bitstrings)"
msgstr ""

msgid "In Elixir, you can define a binary using `<<>>`:"
msgstr ""

msgid ""
"```iex\n"
"iex> <<0, 1, 2, 3>>\n"
"<<0, 1, 2, 3>>\n"
"iex> byte_size(<<0, 1, 2, 3>>)\n"
"4\n"
"```"
msgstr ""

msgid ""
"A binary is a sequence of bytes. Those bytes can be organized in any way, even"
" in a sequence that does not make them a valid string:"
msgstr ""

msgid ""
"```iex\n"
"iex> String.valid?(<<239, 191, 19>>)\n"
"false\n"
"```"
msgstr ""

msgid ""
"The string concatenation operation is actually a binary concatenation operator"
":"
msgstr ""

msgid ""
"```iex\n"
"iex> <<0, 1>> <> <<2, 3>>\n"
"<<0, 1, 2, 3>>\n"
"```"
msgstr ""

msgid ""
"A common trick in Elixir is to concatenate the null byte `<<0>>` to a string t"
"o see its inner binary representation:"
msgstr ""

msgid ""
"```iex\n"
"iex> \"hełło\" <> <<0>>\n"
"<<104, 101, 197, 130, 197, 130, 111, 0>>\n"
"```"
msgstr ""

msgid ""
"Each number given to a binary is meant to represent a byte and therefore must "
"go up to 255. Binaries allow modifiers to be given to store numbers bigger tha"
"n 255 or to convert a code point to its UTF-8 representation:"
msgstr ""

msgid ""
"```iex\n"
"iex> <<255>>\n"
"<<255>>\n"
"iex> <<256>> # truncated\n"
"<<0>>\n"
"iex> <<256 :: size(16)>> # use 16 bits (2 bytes) to store the number\n"
"<<1, 0>>\n"
"iex> <<256 :: utf8>> # the number is a code point\n"
"\"Ā\"\n"
"iex> <<256 :: utf8, 0>>\n"
"<<196, 128, 0>>\n"
"```"
msgstr ""

msgid "If a byte has 8 bits, what happens if we pass a size of 1 bit?"
msgstr ""

msgid ""
"```iex\n"
"iex> <<1 :: size(1)>>\n"
"<<1::size(1)>>\n"
"iex> <<2 :: size(1)>> # truncated\n"
"<<0::size(1)>>\n"
"iex> is_binary(<<1 :: size(1)>>)\n"
"false\n"
"iex> is_bitstring(<<1 :: size(1)>>)\n"
"true\n"
"iex> bit_size(<< 1 :: size(1)>>)\n"
"1\n"
"```"
msgstr ""

msgid ""
"The value is no longer a binary, but a bitstring -- a bunch of bits! So a bina"
"ry is a bitstring where the number of bits is divisible by 8."
msgstr ""

msgid ""
"```iex\n"
"iex>  is_binary(<<1 :: size(16)>>)\n"
"true\n"
"iex>  is_binary(<<1 :: size(15)>>)\n"
"false\n"
"```"
msgstr ""

msgid "We can also pattern match on binaries / bitstrings:"
msgstr ""

msgid ""
"```iex\n"
"iex> <<0, 1, x>> = <<0, 1, 2>>\n"
"<<0, 1, 2>>\n"
"iex> x\n"
"2\n"
"iex> <<0, 1, x>> = <<0, 1, 2, 3>>\n"
"** (MatchError) no match of right hand side value: <<0, 1, 2, 3>>\n"
"```"
msgstr ""

msgid ""
"Note each entry in the binary pattern is expected to match exactly 8 bits. If "
"we want to match on a binary of unknown size, it is possible by using the bina"
"ry modifier at the end of the pattern:"
msgstr ""

msgid ""
"```iex\n"
"iex> <<0, 1, x :: binary>> = <<0, 1, 2, 3>>\n"
"<<0, 1, 2, 3>>\n"
"iex> x\n"
"<<2, 3>>\n"
"```"
msgstr ""

msgid "Similar results can be achieved with the string concatenation operator `<>`:"
msgstr ""

msgid ""
"```iex\n"
"iex> \"he\" <> rest = \"hello\"\n"
"\"hello\"\n"
"iex> rest\n"
"\"llo\"\n"
"```"
msgstr ""

msgid ""
"A complete reference about the binary / bitstring constructor `<<>>` can be fo"
"und [in the Elixir documentation](https://hexdocs.pm/elixir/Kernel.SpecialForm"
"s.html#%3C%3C%3E%3E/1). This concludes our tour of bitstrings, binaries and st"
"rings. A string is a UTF-8 encoded binary and a binary is a bitstring where th"
"e number of bits is divisible by 8. Although this shows the flexibility Elixir"
" provides for working with bits and bytes, 99% of the time you will be working"
" with binaries and using the `is_binary/1` and `byte_size/1` functions."
msgstr ""

msgid "## Charlists"
msgstr ""

msgid ""
"A charlist is nothing more than a list of code points. Char lists may be creat"
"ed with single-quoted literals:"
msgstr ""

msgid ""
"```iex\n"
"iex> 'hełło'\n"
"[104, 101, 322, 322, 111]\n"
"iex> is_list 'hełło'\n"
"true\n"
"iex> 'hello'\n"
"'hello'\n"
"iex> List.first('hello')\n"
"104\n"
"```"
msgstr ""

msgid ""
"You can see that, instead of containing bytes, a charlist contains the code po"
"ints of the characters between single-quotes (note that by default IEx will on"
"ly output code points if any of the integers is outside the ASCII range). So w"
"hile double-quotes represent a string (i.e. a binary), single-quotes represent"
" a charlist (i.e. a list)."
msgstr ""

msgid ""
"In practice, charlists are used mostly when interfacing with Erlang, in partic"
"ular old libraries that do not accept binaries as arguments. You can convert a"
" charlist to a string and back by using the `to_string/1` and `to_charlist/1` "
"functions:"
msgstr ""

msgid ""
"```iex\n"
"iex> to_charlist \"hełło\"\n"
"[104, 101, 322, 322, 111]\n"
"iex> to_string 'hełło'\n"
"\"hełło\"\n"
"iex> to_string :hello\n"
"\"hello\"\n"
"iex> to_string 1\n"
"\"1\"\n"
"```"
msgstr ""

msgid ""
"Note that those functions are polymorphic. They not only convert charlists to "
"strings, but also integers to strings, atoms to strings, and so on."
msgstr ""

msgid ""
"String (binary) concatenation uses the `<>` operator but charlists use the lis"
"ts concatenation operator `++`:"
msgstr ""

msgid ""
"```iex\n"
"iex> 'this ' <> 'fails'\n"
"** (CompileError) iex:2: invalid literal 'this ' in <<>>\n"
"    (elixir) src/elixir_bitstring.erl:19: :elixir_bitstring.expand/6\n"
"    (elixir) src/elixir_bitstring.erl:12: :elixir_bitstring.expand/4\n"
"    (elixir) expanding macro: Kernel.<>/2\n"
"    iex:2: (file)\n"
"iex> 'this ' ++ 'works'\n"
"'this works'\n"
"iex> \"he\" ++ \"llo\"\n"
"** (ArgumentError) argument error\n"
"    :erlang.++(\"he\", \"llo\")\n"
"iex> \"he\" <> \"llo\"\n"
"\"hello\"\n"
"```"
msgstr ""

msgid ""
"With binaries, strings, and charlists out of the way, it is time to talk about"
" key-value data structures."
msgstr ""
