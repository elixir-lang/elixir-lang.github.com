msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2018-07-27 22:30+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"layout: getting-started\n"
"title: Debugging\n"
"---"
msgstr ""

msgid "# {{ page.title }}"
msgstr ""

msgid "{% include toc.html %}"
msgstr ""

msgid ""
"There are a number of ways one can debug their code in Elixir. In this chapter"
" we will cover some of the more common ways of doing so."
msgstr ""

msgid "## IO.inspect/2"
msgstr ""

msgid ""
"What makes `IO.inspect(item, opts \\\\ [])` really useful in debugging is that i"
"t returns the `item` argument passed to it without affecting the behavior of t"
"he original code. Let's see an example."
msgstr ""

msgid ""
"```elixir\n"
"(1..10)\n"
"|> IO.inspect\n"
"|> Enum.map(fn x -> x * 2 end)\n"
"|> IO.inspect\n"
"|> Enum.sum\n"
"|> IO.inspect\n"
"```"
msgstr ""

msgid "Prints:"
msgstr ""

msgid ""
"```elixir\n"
"1..10\n"
"[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n"
"110\n"
"```"
msgstr ""

msgid ""
"As you can see `IO.inspect/2` makes it possible to \"spy\" on values almost anyw"
"here in your code without altering the result, making it very helpful inside o"
"f a pipeline like in the above case."
msgstr ""

msgid ""
"`IO.inspect/2` also provides the ability to decorate the output with a `label`"
" option. The label will be printed before the inspected `item`:"
msgstr ""

msgid ""
"```elixir\n"
"[1, 2, 3]\n"
"|> IO.inspect(label: \"before\")\n"
"|> Enum.map(&(&1 * 2))\n"
"|> IO.inspect(label: \"after\")\n"
"|> Enum.sum\n"
"```"
msgstr ""

msgid ""
"```elixir\n"
"before: [1, 2, 3]\n"
"after: [2, 4, 6]\n"
"```"
msgstr ""

msgid ""
"It is also very common to use `IO.inspect/2` with [`binding()`](https://hexdoc"
"s.pm/elixir/Kernel.html#binding/0), which returns all variable names and their"
" values:"
msgstr ""

msgid ""
"```elixir\n"
"def some_fun(a, b, c) do\n"
"  IO.inspect binding()\n"
"  ...\n"
"end\n"
"```"
msgstr ""

msgid "When `some_fun/3` is invoked with `:foo`, `\"bar\"`, `:baz` it prints:"
msgstr ""

msgid ""
"```elixir\n"
"[a: :foo, b: \"bar\", c: :baz]\n"
"```"
msgstr ""

msgid ""
"Please see [IO.inspect/2](https://hexdocs.pm/elixir/IO.html#inspect/2) to read"
" more about other ways in which one could use this function. Also, in order to"
" find a full list of other formatting options that one can use alongside `IO.i"
"nspect/2`, see [Inspect.Opts](https://hexdocs.pm/elixir/Inspect.Opts.html)."
msgstr ""

msgid "## `IEx.pry/0` and `IEx.break!/2`"
msgstr ""

msgid ""
"While `IO.inspect/2` is static, Elixir's interactive shell provides more dynam"
"ic ways to interact with debugged code."
msgstr ""

msgid ""
"The first one is with [`IEx.pry/0`](https://hexdocs.pm/iex/IEx.html#pry/0) whi"
"ch we can use instead of `IO.inspect binding()`:"
msgstr ""

msgid ""
"```elixir\n"
"def some_fun(a, b, c) do\n"
"  require IEx; IEx.pry\n"
"  ...\n"
"end\n"
"```"
msgstr ""

msgid ""
"Once the code above is executed inside an `iex` session, IEx will ask if we wa"
"nt to pry into the current code. If accepted, we will be able to access all va"
"riables, as well as imports and aliases from the code, directly From IEx. Whil"
"e pry is running, the code execution stops, until `continue` is called. Rememb"
"er you can always run `iex` in the context of a project with `iex -S mix TASK`"
"."
msgstr ""

msgid ""
"Unfortunately, similar to `IO.inspect/2`, `IEx.pry/0` also requires us to chan"
"ge the code we intend to debug. Luckily IEx also provides a [`break!/2`](https"
"://hexdocs.pm/iex/IEx.html#break!/2) function which allows you set and manage "
"breakpoints on any Elixir code without modifying its source:"
msgstr ""

msgid ""
"<script type=\"text/javascript\" src=\"https://asciinema.org/a/0h3po0AmTcBAorc5GB"
"NU97nrs.js\" id=\"asciicast-0h3po0AmTcBAorc5GBNU97nrs\" async></script><noscript>"
"<p><a href=\"https://asciinema.org/a/0h3po0AmTcBAorc5GBNU97nrs\">See the example"
" in asciinema</a></p></noscript>"
msgstr ""

msgid ""
"Similar to `IEx.pry/0`, once a breakpoint is reached code execution stops unti"
"l `continue` is invoked. However, note `break!/2` does not have access to alia"
"ses and imports from the debugged code as it works on the compiled artifact ra"
"ther than on source."
msgstr ""

msgid "## Debugger"
msgstr ""

msgid ""
"For those who enjoy breakpoints but are rather interested in a visual debugger"
", Erlang/OTP ships with a graphical debugger conveniently named `:debugger`. L"
"et's define a module:"
msgstr ""

msgid ""
"```elixir\n"
"defmodule Example do\n"
"  def double_sum(x, y) do\n"
"    hard_work(x, y)\n"
"  end"
msgstr ""

msgid ""
"  defp hard_work(x, y) do\n"
"    x = 2 * x\n"
"    y = 2 * y"
msgstr ""

msgid ""
"    x + y\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid "Now we can start our debugger:"
msgstr ""

msgid ""
"```iex\n"
"$ iex -S mix\n"
"iex(1)> :debugger.start()\n"
"{:ok, #PID<0.87.0>}\n"
"iex(2)> :int.ni(Example)\n"
"{:module, Example}\n"
"iex(3)> :int.break(Example, 3)\n"
":ok\n"
"iex(4)> Example.double_sum(1,2)\n"
"```"
msgstr ""

msgid ""
"When you start the debugger, a Graphical User Interface will open in your mach"
"ine. We call `:int.ni(Example)` to prepare our module for debugging and then a"
"dd a breakpoint to line 3 with `:int.break(Example, 3)`. After we call our fun"
"ction, we can see our process with break status in the debugger:"
msgstr ""

msgid ""
"<img src=\"/images/contents/debugger-elixir.gif\" width=\"640\" alt=\"Debugger GUI "
"GIF\" />"
msgstr ""

msgid ""
"Note: the Debugger snippet above was retrieved from [\"Debugging techniques in "
"Elixir\" by Plataformatec](http://blog.plataformatec.com.br/2016/04/debugging-t"
"echniques-in-elixir-lang/)."
msgstr ""

msgid "## Observer"
msgstr ""

msgid ""
"For debugging complex systems, jumping at the code is not enough. It is necess"
"ary to have an understanding of the whole virtual machine, processes, applicat"
"ions, as well as set up tracing mechanisms. Luckily this can be achieved in Er"
"lang with `:observer`. In your application:"
msgstr ""

msgid ""
"```iex\n"
"$ iex -S mix\n"
"iex(1)> :observer.start()\n"
"```"
msgstr ""

msgid ""
"The above will open another Graphical User Interface that provides many panes "
"to fully understand and navigate the runtime and your project:"
msgstr ""

msgid ""
"<img src=\"/images/contents/kv-observer.png\" width=\"640\" alt=\"Observer GUI scre"
"enshot\" />"
msgstr ""

msgid ""
"We explore the Observer in the context of an actual project [in the Dynamic Su"
"pervisor chapter of the Mix & OTP guide](/getting-started/mix-otp/dynamic-supe"
"rvisor.html)."
msgstr ""

msgid ""
"You can also [use Observer to introspect a remote node](http://blog.plataforma"
"tec.com.br/2016/05/tracing-and-observing-your-remote-node/). This is one of th"
"e debugging techniques [the Phoenix framework used to achieve 2 million connec"
"tions on a single machine](https://phoenixframework.org/blog/the-road-to-2-mil"
"lion-websocket-connections)."
msgstr ""

msgid ""
"Finally remember you can also get a mini-overview of the runtime info by calli"
"ng `runtime_info/0` directly in IEx."
msgstr ""

msgid "## Other tools and community"
msgstr ""

msgid ""
"We have just scratched the surface of what the Erlang VM has to offer, for exa"
"mple:"
msgstr ""

msgid ""
"  * Alongside the observer application, Erlang also includes a `:crashdump_vie"
"wer` to view crash dumps\n"
"  * Integration with OS level tracers, such as [Linux Trace Toolkit,](http://e"
"rlang.org/doc/apps/runtime_tools/LTTng.html) [DTRACE,](http://erlang.org/doc/a"
"pps/runtime_tools/DTRACE.html) and [SystemTap](http://erlang.org/doc/apps/runt"
"ime_tools/SYSTEMTAP.html)\n"
"  * [Microstate accounting](http://erlang.org/doc/man/msacc.html) measures how"
" much time the runtime spends in several low-level tasks in a short time inter"
"val\n"
"  * Mix ships with many tasks under the `profile` namespace, such as `cprof` a"
"nd `fprof`\n"
"  * And more"
msgstr ""

msgid ""
"The community has also created their own tools, often to aid in production, ot"
"her times in development:"
msgstr ""

msgid ""
"  * [wObserver](https://github.com/shinyscorpion/wObserver) observes productio"
"n nodes through a web interface.\n"
"  * [visualixir](https://github.com/koudelka/visualixir) is a development-time"
" process message visualizer.\n"
"  * [erlyberly](https://github.com/andytill/erlyberly) is a GUI for tracing du"
"ring development."
msgstr ""

msgid "There are probably many more to come too!"
msgstr ""
