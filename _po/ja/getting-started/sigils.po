msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2017-10-30 15:10+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"layout: getting-started\n"
"title: Sigils\n"
"---"
msgstr ""

msgid "# {{ page.title }}"
msgstr ""

msgid "{% include toc.html %}"
msgstr ""

msgid ""
"We have already learned that Elixir provides double-quoted strings and single-"
"quoted char lists. However, this only covers the surface of structures that ha"
"ve textual representation in the language. Atoms, for example, are mostly crea"
"ted via the `:atom` representation."
msgstr ""

msgid ""
"One of Elixir's goals is extensibility: developers should be able to extend th"
"e language to fit any particular domain. Computer science has become such a wi"
"de field that it is impossible for a language to tackle many fields as part of"
" its core. Rather, our best bet is to make the language extensible, so develop"
"ers, companies, and communities can extend the language to their relevant doma"
"ins."
msgstr ""

msgid ""
"In this chapter, we are going to explore sigils, which are one of the mechanis"
"ms provided by the language for working with textual representations. Sigils s"
"tart with the tilde (`~`) character which is followed by a letter (which ident"
"ifies the sigil) and then a delimiter; optionally, modifiers can be added afte"
"r the final delimiter."
msgstr ""

msgid "## Regular expressions"
msgstr ""

msgid ""
"The most common sigil in Elixir is `~r`, which is used to create [regular expr"
"essions](https://en.wikipedia.org/wiki/Regular_Expressions):"
msgstr ""

msgid ""
"```iex\n"
"# A regular expression that matches strings which contain \"foo\" or \"bar\":\n"
"iex> regex = ~r/foo|bar/\n"
"~r/foo|bar/\n"
"iex> \"foo\" =~ regex\n"
"true\n"
"iex> \"bat\" =~ regex\n"
"false\n"
"```"
msgstr ""

msgid ""
"Elixir provides Perl-compatible regular expressions (regexes), as implemented "
"by the [PCRE](http://www.pcre.org/) library. Regexes also support modifiers. F"
"or example, the `i` modifier makes a regular expression case insensitive:"
msgstr ""

msgid ""
"```iex\n"
"iex> \"HELLO\" =~ ~r/hello/\n"
"false\n"
"iex> \"HELLO\" =~ ~r/hello/i\n"
"true\n"
"```"
msgstr ""

msgid ""
"Check out the [`Regex` module](https://hexdocs.pm/elixir/Regex.html) for more "
"information on other modifiers and the supported operations with regular expre"
"ssions."
msgstr ""

msgid ""
"So far, all examples have used `/` to delimit a regular expression. However, s"
"igils support 8 different delimiters:"
msgstr ""

msgid ""
"```\n"
"~r/hello/\n"
"~r|hello|\n"
"~r\"hello\"\n"
"~r'hello'\n"
"~r(hello)\n"
"~r[hello]\n"
"~r{hello}\n"
"~r<hello>\n"
"```"
msgstr ""

msgid ""
"The reason behind supporting different delimiters is to provide a way to write"
" literals without escaped delimiters. For example, a regular expression with f"
"orward slashes like `~r(^https?://)` reads arguably better than `~r/^https?:\\/"
"\\//`. Similarly, if the regular expression has forward slashes and capturing g"
"roups (that use `()`), you may then choose double quotes instead of parenthese"
"s."
msgstr ""

msgid "## Strings, char lists, and word lists sigils"
msgstr ""

msgid "Besides regular expressions, Elixir ships with three other sigils."
msgstr ""

msgid "### Strings"
msgstr ""

msgid ""
"The `~s` sigil is used to generate strings, like double quotes are. The `~s` s"
"igil is useful when a string contains double quotes:"
msgstr ""

msgid ""
"```iex\n"
"iex> ~s(this is a string with \"double\" quotes, not 'single' ones)\n"
"\"this is a string with \\\"double\\\" quotes, not 'single' ones\"\n"
"```"
msgstr ""

msgid "### Char lists"
msgstr ""

msgid "The `~c` sigil is useful for generating char lists that contain single quotes:"
msgstr ""

msgid ""
"```iex\n"
"iex> ~c(this is a char list containing 'single quotes')\n"
"'this is a char list containing \\'single quotes\\''\n"
"```"
msgstr ""

msgid "### Word lists"
msgstr ""

msgid ""
"The `~w` sigil is used to generate lists of words (*words* are just regular st"
"rings). Inside the `~w` sigil, words are separated by whitespace."
msgstr ""

msgid ""
"```iex\n"
"iex> ~w(foo bar bat)\n"
"[\"foo\", \"bar\", \"bat\"]\n"
"```"
msgstr ""

msgid ""
"The `~w` sigil also accepts the `c`, `s` and `a` modifiers (for char lists, st"
"rings, and atoms, respectively), which specify the data type of the elements o"
"f the resulting list:"
msgstr ""

msgid ""
"```iex\n"
"iex> ~w(foo bar bat)a\n"
"[:foo, :bar, :bat]\n"
"```"
msgstr ""

msgid "## Interpolation and escaping in sigils"
msgstr ""

msgid ""
"Besides lowercase sigils, Elixir supports uppercase sigils to deal with escapi"
"ng characters and interpolation. While both `~s` and `~S` will return strings,"
" the former allows escape codes and interpolation while the latter does not:"
msgstr ""

msgid ""
"```iex\n"
"iex> ~s(String with escape codes \\x26 #{\"inter\" <> \"polation\"})\n"
"\"String with escape codes & interpolation\"\n"
"iex> ~S(String without escape codes \\x26 without #{interpolation})\n"
"\"String without escape codes \\\\x26 without \\#{interpolation}\"\n"
"```"
msgstr ""

msgid "The following escape codes can be used in strings and char lists:"
msgstr ""

msgid ""
"* `\\\\` – single backslash\n"
"* `\\a` – bell/alert\n"
"* `\\b` – backspace\n"
"* `\\d` - delete\n"
"* `\\e` - escape\n"
"* `\\f` - form feed\n"
"* `\n"
"` – newline\n"
"* `` – carriage return\n"
"* `\\s` – space\n"
"* `\t` – tab\n"
"* `\\v` – vertical tab\n"
"* `\\0` - null byte\n"
"* `\\xDD` - represents a single byte in hexadecimal (such as `\\x13`)\n"
"* `\\uDDDD` and `\\u{D...}` - represents a Unicode codepoint in hexadecimal (suc"
"h as `\\u{1F600}`)"
msgstr ""

msgid ""
"In addition to those, a double quote inside a double-quoted string needs to be"
" escaped as `\\\"`, and, analogously, a single quote inside a single-quoted char"
" list needs to be escaped as `\\'`. Nevertheless, it is better style to change "
"delimiters as seen above than to escape them."
msgstr ""

msgid ""
"Sigils also support heredocs, that is, triple double- or single-quotes as sepa"
"rators:"
msgstr ""

msgid ""
"```iex\n"
"iex> ~s\"\"\"\n"
"...> this is\n"
"...> a heredoc string\n"
"...> \"\"\"\n"
"```"
msgstr ""

msgid ""
"The most common use case for heredoc sigils is when writing documentation. For"
" example, writing escape characters in the documentation would soon become err"
"or prone because of the need to double-escape some characters:"
msgstr ""

msgid ""
"```elixir\n"
"@doc \"\"\"\n"
"Converts double-quotes to single-quotes."
msgstr ""

msgid "## Examples"
msgstr ""

msgid ""
"    iex> convert(\"\\\\\\\"foo\\\\\\\"\")\n"
"    \"'foo'\""
msgstr ""

msgid ""
"\"\"\"\n"
"def convert(...)\n"
"```"
msgstr ""

msgid "By using `~S`, this problem can be avoided altogether:"
msgstr ""

msgid ""
"```elixir\n"
"@doc ~S\"\"\"\n"
"Converts double-quotes to single-quotes."
msgstr ""

msgid ""
"    iex> convert(\"\\\"foo\\\"\")\n"
"    \"'foo'\""
msgstr ""

msgid "## Custom sigils"
msgstr ""

msgid ""
"As hinted at the beginning of this chapter, sigils in Elixir are extensible. I"
"n fact, using the sigil `~r/foo/i` is equivalent to calling `sigil_r` with a b"
"inary and a char list as the argument:"
msgstr ""

msgid ""
"```iex\n"
"iex> sigil_r(<<\"foo\">>, 'i')\n"
"~r\"foo\"i\n"
"```"
msgstr ""

msgid "We can access the documentation for the `~r` sigil via `sigil_r`:"
msgstr ""

msgid ""
"```iex\n"
"iex> h sigil_r\n"
"...\n"
"```"
msgstr ""

msgid ""
"We can also provide our own sigils by implementing functions that follow the `"
"sigil_{identifier}` pattern. For example, let's implement the `~i` sigil that "
"returns an integer (with the optional `n` modifier to make it negative):"
msgstr ""

msgid ""
"```iex\n"
"iex> defmodule MySigils do\n"
"...>   def sigil_i(string, []), do: String.to_integer(string)\n"
"...>   def sigil_i(string, [?n]), do: -String.to_integer(string)\n"
"...> end\n"
"iex> import MySigils\n"
"iex> ~i(13)\n"
"13\n"
"iex> ~i(42)n\n"
"-42\n"
"```"
msgstr ""

msgid ""
"Sigils can also be used to do compile-time work with the help of macros. For e"
"xample, regular expressions in Elixir are compiled into an efficient represent"
"ation during compilation of the source code, therefore skipping this step at r"
"untime. If you're interested in the subject, we recommend you learn more about"
" macros and check out how sigils are implemented in the `Kernel` module (where"
" the `sigil_*` functions are defined)."
msgstr ""
