# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-07-21 23:34+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../getting-started/protocols.markdown:1
msgid "---\n"
"layout: getting-started\n"
"title: Protocols\n"
"---"
msgstr ""

#: ../../../getting-started/protocols.markdown:6
msgid "# {{ page.title }}"
msgstr ""

#: ../../../getting-started/protocols.markdown:8
msgid "{% include toc.html %}"
msgstr ""

#: ../../../getting-started/protocols.markdown:10
msgid "Protocols are a mechanism to achieve polymorphism in Elixir. Dispatching on a protocol is available to any data type as long as it implements the protocol. Let's see an example."
msgstr ""

#: ../../../getting-started/protocols.markdown:12
msgid "In Elixir, we have two idioms for checking how many items there are in a data structure: `length` and `size`. `length` means the information must be computed. For example, `length(list)` needs to traverse the whole list to calculate its length. On the other hand, `tuple_size(tuple)` and `byte_size(binary)` do not depend on the tuple and binary size as the size information is pre-computed in the data structure."
msgstr ""

#: ../../../getting-started/protocols.markdown:14
msgid "Even if we have type-specific functions for getting the size built into Elixir (such as `tuple_size/1`), we could implement a generic `Size` protocol that all data structures for which size is pre-computed would implement."
msgstr ""

#: ../../../getting-started/protocols.markdown:16
msgid "The protocol definition would look like this:"
msgstr ""

#: ../../../getting-started/protocols.markdown:18
msgid "```elixir\n"
"defprotocol Size do\n"
"  @doc \"Calculates the size (and not the length!) of a data structure\"\n"
"  def size(data)\n"
"end\n"
"```"
msgstr ""

#: ../../../getting-started/protocols.markdown:25
msgid "The `Size` protocol expects a function called `size` that receives one argument (the data structure we want to know the size of) to be implemented. We can now implement this protocol for the data structures that would have a compliant implementation:"
msgstr ""

#: ../../../getting-started/protocols.markdown:27
msgid "```elixir\n"
"defimpl Size, for: BitString do\n"
"  def size(string), do: byte_size(string)\n"
"end"
msgstr ""

#: ../../../getting-started/protocols.markdown:32
msgid "defimpl Size, for: Map do\n"
"  def size(map), do: map_size(map)\n"
"end"
msgstr ""

#: ../../../getting-started/protocols.markdown:36
msgid "defimpl Size, for: Tuple do\n"
"  def size(tuple), do: tuple_size(tuple)\n"
"end\n"
"```"
msgstr ""

#: ../../../getting-started/protocols.markdown:41
msgid "We didn't implement the `Size` protocol for lists as there is no \"size\" information pre-computed for lists, and the length of a list has to be computed (with `length/1`)."
msgstr ""

#: ../../../getting-started/protocols.markdown:43
msgid "Now with the protocol defined and implementations in hand, we can start using it:"
msgstr ""

#: ../../../getting-started/protocols.markdown:45
msgid "```iex\n"
"iex> Size.size(\"foo\")\n"
"3\n"
"iex> Size.size({:ok, \"hello\"})\n"
"2\n"
"iex> Size.size(%{label: \"some label\"})\n"
"1\n"
"```"
msgstr ""

#: ../../../getting-started/protocols.markdown:54
msgid "Passing a data type that doesn't implement the protocol raises an error:"
msgstr ""

#: ../../../getting-started/protocols.markdown:56
msgid "```iex\n"
"iex> Size.size([1, 2, 3])\n"
"** (Protocol.UndefinedError) protocol Size not implemented for [1, 2, 3]\n"
"```"
msgstr ""

#: ../../../getting-started/protocols.markdown:61
msgid "It's possible to implement protocols for all Elixir data types:"
msgstr ""

#: ../../../getting-started/protocols.markdown:63
msgid "* `Atom`\n"
"* `BitString`\n"
"* `Float`\n"
"* `Function`\n"
"* `Integer`\n"
"* `List`\n"
"* `Map`\n"
"* `PID`\n"
"* `Port`\n"
"* `Reference`\n"
"* `Tuple`"
msgstr ""

#: ../../../getting-started/protocols.markdown:76
msgid "## Protocols and structs"
msgstr ""

#: ../../../getting-started/protocols.markdown:78
msgid "The power of Elixir's extensibility comes when protocols and structs are used together."
msgstr ""

#: ../../../getting-started/protocols.markdown:80
msgid "In the [previous chapter](/getting-started/structs.html), we have learned that although structs are maps, they do not share protocol implementations with maps. For example, [`MapSet`](https://hexdocs.pm/elixir/MapSet.html)s (sets based on maps) are implemented as structs. Let's try to use the `Size` protocol with a `MapSet`:"
msgstr ""

#: ../../../getting-started/protocols.markdown:82
msgid "```iex\n"
"iex> Size.size(%{})\n"
"0\n"
"iex> set = %MapSet{} = MapSet.new\n"
"#MapSet<[]>\n"
"iex> Size.size(set)\n"
"** (Protocol.UndefinedError) protocol Size not implemented for #MapSet<[]>\n"
"```"
msgstr ""

#: ../../../getting-started/protocols.markdown:91
msgid "Instead of sharing protocol implementation with maps, structs require their own protocol implementation. Since a `MapSet` has its size precomputed and accessible through `MapSet.size/1`, we can define a `Size` implementation for it:"
msgstr ""

#: ../../../getting-started/protocols.markdown:93
msgid "```elixir\n"
"defimpl Size, for: MapSet do\n"
"  def size(set), do: MapSet.size(set)\n"
"end\n"
"```"
msgstr ""

#: ../../../getting-started/protocols.markdown:99
msgid "If desired, you could come up with your own semantics for the size of your struct. Not only that, you could use structs to build more robust data types, like queues, and implement all relevant protocols, such as `Enumerable` and possibly `Size`, for this data type."
msgstr ""

#: ../../../getting-started/protocols.markdown:101
msgid "```elixir\n"
"defmodule User do\n"
"  defstruct [:name, :age]\n"
"end"
msgstr ""

#: ../../../getting-started/protocols.markdown:106
msgid "defimpl Size, for: User do\n"
"  def size(_user), do: 2\n"
"end\n"
"```"
msgstr ""

#: ../../../getting-started/protocols.markdown:111
msgid "## Implementing `Any`"
msgstr ""

#: ../../../getting-started/protocols.markdown:113
msgid "Manually implementing protocols for all types can quickly become repetitive and tedious. In such cases, Elixir provides two options: we can explicitly derive the protocol implementation for our types or automatically implement the protocol for all types. In both cases, we need to implement the protocol for `Any`."
msgstr ""

#: ../../../getting-started/protocols.markdown:115
msgid "### Deriving"
msgstr ""

#: ../../../getting-started/protocols.markdown:117
msgid "Elixir allows us to derive a protocol implementation based on the `Any` implementation. Let's first implement `Any` as follows:"
msgstr ""

#: ../../../getting-started/protocols.markdown:119
#: ../../../getting-started/protocols.markdown:151
msgid "```elixir\n"
"defimpl Size, for: Any do\n"
"  def size(_), do: 0\n"
"end\n"
"```"
msgstr ""

#: ../../../getting-started/protocols.markdown:125
msgid "The implementation above is arguably not a reasonable one. For example, it makes no sense to say that the size of a `PID` or an `Integer` is `0`."
msgstr ""

#: ../../../getting-started/protocols.markdown:127
msgid "However, should we be fine with the implementation for `Any`, in order to use such implementation we would need to tell our struct to explicitly derive the `Size` protocol:"
msgstr ""

#: ../../../getting-started/protocols.markdown:129
msgid "```elixir\n"
"defmodule OtherUser do\n"
"  @derive [Size]\n"
"  defstruct [:name, :age]\n"
"end\n"
"```"
msgstr ""

#: ../../../getting-started/protocols.markdown:136
msgid "When deriving, Elixir will implement the `Size` protocol for `OtherUser` based on the implementation provided for `Any`."
msgstr ""

#: ../../../getting-started/protocols.markdown:138
msgid "### Fallback to `Any`"
msgstr ""

#: ../../../getting-started/protocols.markdown:140
msgid "Another alternative to `@derive` is to explicitly tell the protocol to fallback to `Any` when an implementation cannot be found. This can be achieved by setting `@fallback_to_any` to `true` in the protocol definition:"
msgstr ""

#: ../../../getting-started/protocols.markdown:142
msgid "```elixir\n"
"defprotocol Size do\n"
"  @fallback_to_any true\n"
"  def size(data)\n"
"end\n"
"```"
msgstr ""

#: ../../../getting-started/protocols.markdown:149
msgid "As we said in the previous section, the implementation of `Size` for `Any` is not one that can apply to any data type. That's one of the reasons why `@fallback_to_any` is an opt-in behaviour. For the majority of protocols, raising an error when a protocol is not implemented is the proper behaviour. That said, assuming we have implemented `Any` as in the previous section:"
msgstr ""

#: ../../../getting-started/protocols.markdown:157
msgid "Now all data types (including structs) that have not implemented the `Size` protocol will be considered to have a size of `0`."
msgstr ""

#: ../../../getting-started/protocols.markdown:159
msgid "Which technique is best between deriving and falling back to any depends on the use case but, given Elixir developers prefer explicit over implicit, you may see many libraries pushing towards the `@derive` approach."
msgstr ""

#: ../../../getting-started/protocols.markdown:161
msgid "## Built-in protocols"
msgstr ""

#: ../../../getting-started/protocols.markdown:163
msgid "Elixir ships with some built-in protocols. In previous chapters, we have discussed the `Enum` module which provides many functions that work with any data structure that implements the `Enumerable` protocol:"
msgstr ""

#: ../../../getting-started/protocols.markdown:165
msgid "```iex\n"
"iex> Enum.map [1, 2, 3], fn(x) -> x * 2 end\n"
"[2, 4, 6]\n"
"iex> Enum.reduce 1..3, 0, fn(x, acc) -> x + acc end\n"
"6\n"
"```\n"
"Another useful example is the `String.Chars` protocol, which specifies how to convert a data structure with characters to a string. It's exposed via the `to_string` function:"
msgstr ""

#: ../../../getting-started/protocols.markdown:173
msgid "```iex\n"
"iex> to_string :hello\n"
"\"hello\"\n"
"```"
msgstr ""

#: ../../../getting-started/protocols.markdown:178
msgid "Notice that string interpolation in Elixir calls the `to_string` function:"
msgstr ""

#: ../../../getting-started/protocols.markdown:180
msgid "```iex\n"
"iex> \"age: #{25}\"\n"
"\"age: 25\"\n"
"```"
msgstr ""

#: ../../../getting-started/protocols.markdown:185
msgid "The snippet above only works because numbers implement the `String.Chars` protocol. Passing a tuple, for example, will lead to an error:"
msgstr ""

#: ../../../getting-started/protocols.markdown:187
msgid "```iex\n"
"iex> tuple = {1, 2, 3}\n"
"{1, 2, 3}\n"
"iex> \"tuple: #{tuple}\"\n"
"** (Protocol.UndefinedError) protocol String.Chars not implemented for {1, 2, 3}\n"
"```"
msgstr ""

#: ../../../getting-started/protocols.markdown:194
msgid "When there is a need to \"print\" a more complex data structure, one can use the `inspect` function, based on the `Inspect` protocol:"
msgstr ""

#: ../../../getting-started/protocols.markdown:196
msgid "```iex\n"
"iex> \"tuple: #{inspect tuple}\"\n"
"\"tuple: {1, 2, 3}\"\n"
"```"
msgstr ""

#: ../../../getting-started/protocols.markdown:201
msgid "The `Inspect` protocol is the protocol used to transform any data structure into a readable textual representation. This is what tools like IEx use to print results:"
msgstr ""

#: ../../../getting-started/protocols.markdown:203
msgid "```iex\n"
"iex> {1, 2, 3}\n"
"{1, 2, 3}\n"
"iex> %User{}\n"
"%User{name: \"john\", age: 27}\n"
"```"
msgstr ""

#: ../../../getting-started/protocols.markdown:210
msgid "Keep in mind that, by convention, whenever the inspected value starts with `#`, it is representing a data structure in non-valid Elixir syntax. This means the inspect protocol is not reversible as information may be lost along the way:"
msgstr ""

#: ../../../getting-started/protocols.markdown:212
msgid "```iex\n"
"iex> inspect &(&1+2)\n"
"\"#Function<6.71889879/1 in :erl_eval.expr/5>\"\n"
"```"
msgstr ""

#: ../../../getting-started/protocols.markdown:217
msgid "There are other protocols in Elixir but this covers the most common ones."
msgstr ""

#: ../../../getting-started/protocols.markdown:219
msgid "## Protocol consolidation"
msgstr ""

#: ../../../getting-started/protocols.markdown:221
msgid "When working with Elixir projects, using the Mix build tool, you may see the output as follows:"
msgstr ""

#: ../../../getting-started/protocols.markdown:223
msgid "```\n"
"Consolidated String.Chars\n"
"Consolidated Collectable\n"
"Consolidated List.Chars\n"
"Consolidated IEx.Info\n"
"Consolidated Enumerable\n"
"Consolidated Inspect\n"
"```"
msgstr ""

#: ../../../getting-started/protocols.markdown:232
msgid "Those are all protocols that ship with Elixir and they are being consolidated. Because a protocol can dispatch to any data type, the protocol must check on every call if an implementation for the given type exists. This may be expensive."
msgstr ""

#: ../../../getting-started/protocols.markdown:234
msgid "However, after our project is compiled using a tool like Mix, we know all modules that have been defined, including protocols and their implementations. This way, the protocol can be consolidated into a very simple and fast dispatch module."
msgstr ""

#: ../../../getting-started/protocols.markdown:236
msgid "From Elixir v1.2, protocol consolidation happens automatically for all projects. We will build our own project in the ***Mix and OTP guide***."
msgstr ""

