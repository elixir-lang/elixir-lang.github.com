msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2017-10-30 15:10+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"layout: getting-started\n"
"title: Processes\n"
"---"
msgstr ""

msgid "# {{ page.title }}"
msgstr ""

msgid "{% include toc.html %}"
msgstr ""

msgid ""
"In Elixir, all code runs inside processes. Processes are isolated from each ot"
"her, run concurrent to one another and communicate via message passing. Proces"
"ses are not only the basis for concurrency in Elixir, but they also provide th"
"e means for building distributed and fault-tolerant programs."
msgstr ""

msgid ""
"Elixir's processes should not be confused with operating system processes. Pro"
"cesses in Elixir are extremely lightweight in terms of memory and CPU (unlike "
"threads in many other programming languages). Because of this, it is not uncom"
"mon to have tens or even hundreds of thousands of processes running simultaneo"
"usly."
msgstr ""

msgid ""
"In this chapter, we will learn about the basic constructs for spawning new pro"
"cesses, as well as sending and receiving messages between processes."
msgstr ""

msgid "## `spawn`"
msgstr ""

msgid ""
"The basic mechanism for spawning new processes is the auto-imported `spawn/1` "
"function:"
msgstr ""

msgid ""
"```iex\n"
"iex> spawn fn -> 1 + 2 end\n"
"#PID<0.43.0>\n"
"```"
msgstr ""

msgid "`spawn/1` takes a function which it will execute in another process."
msgstr ""

msgid ""
"Notice `spawn/1` returns a PID (process identifier). At this point, the proces"
"s you spawned is very likely dead. The spawned process will execute the given "
"function and exit after the function is done:"
msgstr ""

msgid ""
"```iex\n"
"iex> pid = spawn fn -> 1 + 2 end\n"
"#PID<0.44.0>\n"
"iex> Process.alive?(pid)\n"
"false\n"
"```"
msgstr ""

msgid ""
"> Note: you will likely get different process identifiers than the ones we are"
" getting in this guide."
msgstr ""

msgid "We can retrieve the PID of the current process by calling `self/0`:"
msgstr ""

msgid ""
"```iex\n"
"iex> self()\n"
"#PID<0.41.0>\n"
"iex> Process.alive?(self())\n"
"true\n"
"```"
msgstr ""

msgid ""
"Processes get much more interesting when we are able to send and receive messa"
"ges."
msgstr ""

msgid "## `send` and `receive`"
msgstr ""

msgid ""
"We can send messages to a process with `send/2` and receive them with `receive"
"/1`:"
msgstr ""

msgid ""
"```iex\n"
"iex> send self(), {:hello, \"world\"}\n"
"{:hello, \"world\"}\n"
"iex> receive do\n"
"...>   {:hello, msg} -> msg\n"
"...>   {:world, msg} -> \"won't match\"\n"
"...> end\n"
"\"world\"\n"
"```"
msgstr ""

msgid ""
"When a message is sent to a process, the message is stored in the process mail"
"box. The `receive/1` block goes through the current process mailbox searching "
"for a message that matches any of the given patterns. `receive/1` supports gua"
"rds and many clauses, such as `case/2`."
msgstr ""

msgid ""
"The process that sends the message does not block on `send/2`, it puts the mes"
"sage in the recipient's mailbox and continues. In particular, a process can se"
"nd messages to itself."
msgstr ""

msgid ""
"If there is no message in the mailbox matching any of the patterns, the curren"
"t process will wait until a matching message arrives. A timeout can also be sp"
"ecified:"
msgstr ""

msgid ""
"```iex\n"
"iex> receive do\n"
"...>   {:hello, msg}  -> msg\n"
"...> after\n"
"...>   1_000 -> \"nothing after 1s\"\n"
"...> end\n"
"\"nothing after 1s\"\n"
"```"
msgstr ""

msgid ""
"A timeout of 0 can be given when you already expect the message to be in the m"
"ailbox."
msgstr ""

msgid "Let's put it all together and send messages between processes:"
msgstr ""

msgid ""
"```iex\n"
"iex> parent = self()\n"
"#PID<0.41.0>\n"
"iex> spawn fn -> send(parent, {:hello, self()}) end\n"
"#PID<0.48.0>\n"
"iex> receive do\n"
"...>   {:hello, pid} -> \"Got hello from #{inspect pid}\"\n"
"...> end\n"
"\"Got hello from #PID<0.48.0>\"\n"
"```"
msgstr ""

msgid ""
"The `inspect/1` function is used to convert a data structure's internal repres"
"entation into a string, typically for printing. Notice that when the `receive`"
" block gets executed the sender process we have spawned may already be dead, a"
"s its only instruction was to send a message."
msgstr ""

msgid ""
"While in the shell, you may find the helper `flush/0` quite useful. It flushes"
" and prints all the messages in the mailbox."
msgstr ""

msgid ""
"```iex\n"
"iex> send self(), :hello\n"
":hello\n"
"iex> flush()\n"
":hello\n"
":ok\n"
"```"
msgstr ""

msgid "## Links"
msgstr ""

msgid ""
"The majority of times we spawn processes in Elixir, we spawn them as linked pr"
"ocesses. Before we show an example with `spawn_link/1`, let's see what happens"
" when a process started with `spawn/1` fails:"
msgstr ""

msgid ""
"```iex\n"
"iex> spawn fn -> raise \"oops\" end\n"
"#PID<0.58.0>"
msgstr ""

msgid ""
"[error] Process #PID<0.58.00> raised an exception\n"
"** (RuntimeError) oops\n"
"    (stdlib) erl_eval.erl:668: :erl_eval.do_apply/6\n"
"```"
msgstr ""

msgid ""
"It merely logged an error but the parent process is still running. That's beca"
"use processes are isolated. If we want the failure in one process to propagate"
" to another one, we should link them. This can be done with `spawn_link/1`:"
msgstr ""

msgid ""
"```iex\n"
"iex> self()\n"
"#PID<0.41.0>\n"
"iex> spawn_link fn -> raise \"oops\" end"
msgstr ""

msgid ""
"** (EXIT from #PID<0.41.0>) evaluator process exited with reason: an exception"
" was raised:\n"
"    ** (RuntimeError) oops\n"
"        (stdlib) erl_eval.erl:668: :erl_eval.do_apply/6"
msgstr ""

msgid ""
"[error] Process #PID<0.289.0> raised an exception\n"
"** (RuntimeError) oops\n"
"    (stdlib) erl_eval.erl:668: :erl_eval.do_apply/6\n"
"```"
msgstr ""

msgid ""
"Because processes are linked, we now see a message saying the parent process, "
"which is the shell process, has received an EXIT signal from another process c"
"ausing the shell to terminate. IEx detects this situation and starts a new she"
"ll session."
msgstr ""

msgid ""
"Linking can also be done manually by calling `Process.link/1`. We recommend th"
"at you take a look at [the `Process` module](https://hexdocs.pm/elixir/Process"
".html) for other functionality provided by processes."
msgstr ""

msgid ""
"Processes and links play an important role when building fault-tolerant system"
"s. Elixir processes are isolated and don't share anything by default. Therefor"
"e, a failure in a process will never crash or corrupt the state of another pro"
"cess. Links, however, allow processes to establish a relationship in a case of"
" failures. We often link our processes to supervisors which will detect when a"
" process dies and start a new process in its place."
msgstr ""

msgid ""
"While other languages would require us to catch/handle exceptions, in Elixir w"
"e are actually fine with letting processes fail because we expect supervisors "
"to properly restart our systems. \"Failing fast\" is a common philosophy when wr"
"iting Elixir software!"
msgstr ""

msgid ""
"`spawn/1` and `spawn_link/1` are the basic primitives for creating processes i"
"n Elixir. Although we have used them exclusively so far, most of the time we a"
"re going to use abstractions that build on top of them. Let's see the most com"
"mon one, called tasks."
msgstr ""

msgid "## Tasks"
msgstr ""

msgid ""
"Tasks build on top of the spawn functions to provide better error reports and "
"introspection:"
msgstr ""

msgid ""
"```iex\n"
"iex(1)> Task.start fn -> raise \"oops\" end\n"
"{:ok, #PID<0.55.0>}"
msgstr ""

msgid ""
"15:22:33.046 [error] Task #PID<0.55.0> started from #PID<0.53.0> terminating\n"
"** (RuntimeError) oops\n"
"    (stdlib) erl_eval.erl:668: :erl_eval.do_apply/6\n"
"    (elixir) lib/task/supervised.ex:85: Task.Supervised.do_apply/2\n"
"    (stdlib) proc_lib.erl:247: :proc_lib.init_p_do_apply/3\n"
"Function: #Function<20.99386804/0 in :erl_eval.expr/5>\n"
"    Args: []\n"
"```"
msgstr ""

msgid ""
"Instead of `spawn/1` and `spawn_link/1`, we use `Task.start/1` and `Task.start"
"_link/1` which return `{:ok, pid}` rather than just the PID. This is what enab"
"les tasks to be used in supervision trees. Furthermore, `Task` provides conven"
"ience functions, like `Task.async/1` and `Task.await/1`, and functionality to "
"ease distribution."
msgstr ""

msgid ""
"We will explore those functionalities in the ***Mix and OTP guide***, for now "
"it is enough to remember to use `Task` to get better error reports."
msgstr ""

msgid "## State"
msgstr ""

msgid ""
"We haven't talked about state so far in this guide. If you are building an app"
"lication that requires state, for example, to keep your application configurat"
"ion, or you need to parse a file and keep it in memory, where would you store "
"it?"
msgstr ""

msgid ""
"Processes are the most common answer to this question. We can write processes "
"that loop infinitely, maintain state, and send and receive messages. As an exa"
"mple, let's write a module that starts new processes that work as a key-value "
"store in a file named `kv.exs`:"
msgstr ""

msgid ""
"```elixir\n"
"defmodule KV do\n"
"  def start_link do\n"
"    Task.start_link(fn -> loop(%{}) end)\n"
"  end"
msgstr ""

msgid ""
"  defp loop(map) do\n"
"    receive do\n"
"      {:get, key, caller} ->\n"
"        send caller, Map.get(map, key)\n"
"        loop(map)\n"
"      {:put, key, value} ->\n"
"        loop(Map.put(map, key, value))\n"
"    end\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"Note that the `start_link` function starts a new process that runs the `loop/1"
"` function, starting with an empty map. The `loop/1` function then waits for m"
"essages and performs the appropriate action for each message. In the case of a"
" `:get` message, it sends a message back to the caller and calls `loop/1` agai"
"n, to wait for a new message. While the `:put` message actually invokes `loop/"
"1` with a new version of the map, with the given `key` and `value` stored."
msgstr ""

msgid "Let's give it a try by running `iex kv.exs`:"
msgstr ""

msgid ""
"```iex\n"
"iex> {:ok, pid} = KV.start_link\n"
"{:ok, #PID<0.62.0>}\n"
"iex> send pid, {:get, :hello, self()}\n"
"{:get, :hello, #PID<0.41.0>}\n"
"iex> flush()\n"
"nil\n"
":ok\n"
"```"
msgstr ""

msgid ""
"At first, the process map has no keys, so sending a `:get` message and then fl"
"ushing the current process inbox returns `nil`. Let's send a `:put` message an"
"d try it again:"
msgstr ""

msgid ""
"```iex\n"
"iex> send pid, {:put, :hello, :world}\n"
"{:put, :hello, :world}\n"
"iex> send pid, {:get, :hello, self()}\n"
"{:get, :hello, #PID<0.41.0>}\n"
"iex> flush()\n"
":world\n"
":ok\n"
"```"
msgstr ""

msgid ""
"Notice how the process is keeping a state and we can get and update this state"
" by sending the process messages. In fact, any process that knows the `pid` ab"
"ove will be able to send it messages and manipulate the state."
msgstr ""

msgid ""
"It is also possible to register the `pid`, giving it a name, and allowing ever"
"yone that knows the name to send it messages:"
msgstr ""

msgid ""
"```iex\n"
"iex> Process.register(pid, :kv)\n"
"true\n"
"iex> send :kv, {:get, :hello, self()}\n"
"{:get, :hello, #PID<0.41.0>}\n"
"iex> flush()\n"
":world\n"
":ok\n"
"```"
msgstr ""

msgid ""
"Using processes to maintain state and name registration are very common patter"
"ns in Elixir applications. However, most of the time, we won't implement those"
" patterns manually as above, but by using one of the many abstractions that sh"
"ip with Elixir. For example, Elixir provides [agents](https://hexdocs.pm/elixi"
"r/Agent.html), which are simple abstractions around state:"
msgstr ""

msgid ""
"```iex\n"
"iex> {:ok, pid} = Agent.start_link(fn -> %{} end)\n"
"{:ok, #PID<0.72.0>}\n"
"iex> Agent.update(pid, fn map -> Map.put(map, :hello, :world) end)\n"
":ok\n"
"iex> Agent.get(pid, fn map -> Map.get(map, :hello) end)\n"
":world\n"
"```"
msgstr ""

msgid ""
"A `:name` option could also be given to `Agent.start_link/2` and it would be a"
"utomatically registered. Besides agents, Elixir provides an API for building g"
"eneric servers (called `GenServer`), tasks, and more, all powered by processes"
" underneath. Those, along with supervision trees, will be explored with more d"
"etail in the ***Mix and OTP guide*** which will build a complete Elixir applic"
"ation from start to finish."
msgstr ""

msgid "For now, let's move on and explore the world of I/O in Elixir."
msgstr ""
