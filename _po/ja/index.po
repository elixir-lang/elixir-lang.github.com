msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2018-07-27 22:30+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"section: home\n"
"layout: default\n"
"---"
msgstr ""

msgid ""
"<div class=\"hfeed\">\n"
"  <div class=\"hentry post no-border\">\n"
"    <img src=\"/images/contents/home-code.png\" alt=\"Elixir Sample\" class=\"archi"
"ve-thumbnail\" />"
msgstr ""

msgid ""
"    <div class=\"entry-summary\">\n"
"      <p>Elixir is a dynamic, functional language designed for building scalab"
"le and maintainable applications.</p>"
msgstr ""
"    <div class=\"entry-summary\">\n"
"      <p>Elixirは拡張性と保守性の高いアプリケーションを構築するためにデザインされた、動的で関数型のプログラミング言語です。</p>"

msgid ""
"      <p>Elixir leverages the Erlang VM, known for running low-latency, distri"
"buted and fault-tolerant systems, while also being successfully used in web de"
"velopment and the embedded software domain.</p>"
msgstr ""
"      <p>Elixirは、低レイテンシで分散型のフォールトトレラントシステムや、Webや組み込みシステムの領域で成功を収めている、Erlang VM"
"を利用します。</p>"

msgid ""
"      <p>To learn more about Elixir, check our <a href=\"/getting-started/intro"
"duction.html\">getting started guide</a> and our <a href=\"/learning.html\">learn"
"ing page for other resources</a>. Or keep reading to get an overview of the pl"
"atform, language and tools.</p>\n"
"    </div>\n"
"  </div>"
msgstr ""
"      <p>詳しくは <a href=\"/getting-started/introduction.html\">getting started gui"
"de</a> や <a href=\"/learning.html\">learning page for other resources</a>をご覧ください"
"。以下ではElixirのプラットフォームや言語、ツールの概要を説明します。</p>\n"
"    </div>\n"
"  </div>"

msgid ""
"  <div class=\"hentry post\">\n"
"    <h3>Platform features</h3>\n"
"  </div>"
msgstr ""
"  <div class=\"hentry post\">\n"
"    <h3>プラットフォームの特徴</h3>\n"
"  </div>"

msgid ""
"  <div class=\"hentry post\">\n"
"    <h4>Scalability</h4>\n"
"    <div class=\"entry-summary\">"
msgstr ""
"  <div class=\"hentry post\">\n"
"    <h4>スケーラビリティ（拡張性）</h4>\n"
"    <div class=\"entry-summary\">"

msgid ""
"      <p>All Elixir code runs inside lightweight threads of execution (called "
"processes) that are isolated and exchange information via messages:</p>"
msgstr ""
"      <p>全てのElixirのコードは、隔離された軽量の実行スレッド（プロセスと呼ばれる）の中で動作し、メッセージを通して情報をやり取りします。</"
"p>"

msgid ""
"{% highlight elixir %}\n"
"current_process = self()"
msgstr ""

msgid ""
"# Spawn an Elixir process (not an operating system one!)\n"
"spawn_link(fn ->\n"
"  send current_process, {:msg, \"hello world\"}\n"
"end)"
msgstr ""

msgid ""
"# Block until the message is received\n"
"receive do\n"
"  {:msg, contents} -> IO.puts contents\n"
"end\n"
"{% endhighlight %}"
msgstr ""

msgid ""
"      <p>Due to their lightweight nature, it is not uncommon to have hundreds "
"of thousands of processes running <i>concurrently</i> in the same machine. Iso"
"lation allows processes to be garbage collected independently, reducing system"
"-wide pauses, and using all machine resources as efficiently as possible (vert"
"ical scaling).</p>"
msgstr ""
"      <p>その軽量性により、同一のマシン内で数千のプロセスが <i>同時に</i> 起動することも珍しくありません。プロセスの隔離により、各プロセス"
"が個別にガベージコレクションされることを許容し、システムの広範に及ぶポーズを減らし、全てのマシンリソースを可能な限り効率的に使うことが出来ます。（垂直拡張）"
"</p>"

msgid ""
"      <p>Processes are also able to communicate with other processes running o"
"n different machines in the same network. This provides the foundation for dis"
"tribution, allowing developers to coordinate work across multiple nodes (horiz"
"ontal scaling).</p>\n"
"    </div>\n"
"  </div>"
msgstr ""
"      <p>プロセスは、同一のネットワーク内に存在する、他のマシン上で動作しているプロセスとも通信することが出来ます。これは分散型システムの基盤となり"
"、複数のノードにまたがったシステムの構築を可能にします。（水平拡張）</p>\n"
"    </div>\n"
"  </div>"

msgid ""
"  <div class=\"hentry post\">\n"
"    <h4>Fault-tolerance</h4>"
msgstr ""
"  <div class=\"hentry post\">\n"
"    <h4>フォールトトレランス</h4>"

msgid ""
"    <div class=\"entry-summary\">\n"
"      <p>The unavoidable truth about software running in production is that <i"
">things will go wrong</i>. Even more when we take network, file systems, and o"
"ther third-party resources into account.</p>"
msgstr ""
"    <div class=\"entry-summary\">\n"
"      <p>本番環境で動作するソフトウェアに対する避けられない真実は <i>いつかは壊れる</i> ということです。ネットワークやファイルシステム、サ"
"ードパーティのリソースを考慮するとその確度はさらに高まります。</p>"

msgid ""
"      <p>To cope with failures, Elixir provides supervisors which describe how"
" to restart parts of your system when things go awry, going back to a known in"
"itial state that is guaranteed to work:</p>"
msgstr ""
"      <p>障害に対処するために、Elixirはスーパーバイザを提供します。スーパーバイザは何かが失敗した時にシステムの構成要素をどのようにリスタート"
"するかや、動作が保証された既知の初期状態に戻す方法を表します。</p>"

msgid ""
"{% highlight elixir %}\n"
"children = [\n"
"  TCP.Pool,\n"
"  {TCP.Acceptor, port: 4040}\n"
"]"
msgstr ""

msgid ""
"Supervisor.start_link(children, strategy: :one_for_one)\n"
"{% endhighlight %}\n"
"    </div>\n"
"  </div>"
msgstr ""

msgid ""
"  <div class=\"hentry post\">\n"
"    <h3>Language features</h3>\n"
"  </div>"
msgstr ""
"  <div class=\"hentry post\">\n"
"    <h3>言語の特徴</h3>\n"
"  </div>"

msgid ""
"  <div class=\"hentry post\">\n"
"    <h4>Functional programming</h4>"
msgstr ""
"  <div class=\"hentry post\">\n"
"    <h4>関数型プログラミング</h4>"

msgid ""
"    <div class=\"entry-summary\">\n"
"      <p>Functional programming promotes a coding style that helps developers "
"write code that is short, fast, and maintainable. For example, pattern matchin"
"g allows developers to easily destructure data and access its contents:</p>"
msgstr ""
"    <div class=\"entry-summary\">\n"
"      <p>関数型プログラミングは、保守性が高く、高速に動作し、また少ない記述量でコードを書く、というコーディングスタイルを促進します。例えば、パター"
"ンマッチングはデータを容易に分解し、その内容にアクセスすることができます。</p>"

msgid ""
"{% highlight elixir %}\n"
"%User{name: name, age: age} = User.get(\"John Doe\")\n"
"name #=> \"John Doe\"\n"
"{% endhighlight %}"
msgstr ""

msgid ""
"      <p>When mixed with guards, pattern matching allows us to elegantly match"
" and assert specific conditions for some code to execute:</p>"
msgstr ""
"      <p>ガードとパターンマッチングをの組み合わせは、あるコードを実行するための特定の条件を、エレガントに match, assert することを可"
"能にします。</p>"

msgid ""
"{% highlight elixir %}\n"
"def drive(%User{age: age}) when age >= 16 do\n"
"  # Code that drives a car\n"
"end"
msgstr ""

msgid ""
"drive(User.get(\"John Doe\"))\n"
"#=> Fails if the user is under 16\n"
"{% endhighlight %}"
msgstr ""

msgid ""
"      <p>Elixir relies heavily on those features to ensure your software is wo"
"rking under the expected constraints. And when it is not, don&rsquo;t worry, s"
"upervisors have your back!</p>\n"
"    </div>\n"
"  </div>"
msgstr ""
"      <p>予期される様々な制約の下で、ソフトウェアが動作することを確実にするために、Elixirはこれらの特徴に強く依存します。そしてもし動作しなか"
"ったとしても心配無用です。その場合はスーパーバイザがサポートします。</p>\n"
"    </div>\n"
"  </div>"

msgid ""
"  <div class=\"hentry post\">\n"
"    <h4>Extensibility and DSLs</h4>"
msgstr ""
"  <div class=\"hentry post\">\n"
"    <h4>拡張性とDSL</h4>"

msgid ""
"    <div class=\"entry-summary\">\n"
"      <p>Elixir has been designed to be extensible, letting developers natural"
"ly extend the language to particular domains, in order to increase their produ"
"ctivity.</p>"
msgstr ""
"    <div class=\"entry-summary\">\n"
"      <p>Elixirは拡張可能なようにデザインされています。開発者は生産性を高めるために、特定のドメイン用に言語を自然に拡張することができます。<"
"/p>"

msgid ""
"      <p>As an example, let&rsquo;s write a simple test case using <a href=\"ht"
"tps://hexdocs.pm/ex_unit/\">Elixir&rsquo;s test framework called ExUnit</a>:</p"
">"
msgstr ""
"      <p>例として、 <a href=\"https://hexdocs.pm/ex_unit/\">ExUnitと呼ばれるElixirのテストフレーム"
"ワーク</a> を使った簡単なテストケースを書いてみましょう。</p>"

msgid ""
"{% highlight elixir %}\n"
"defmodule MathTest do\n"
"  use ExUnit.Case, async: true"
msgstr ""

msgid ""
"  test \"can add two numbers\" do\n"
"    assert 1 + 1 == 2\n"
"  end\n"
"end\n"
"{% endhighlight %}"
msgstr ""

msgid ""
"      <p>The <code>async: true</code> option allows <code>test</code>s to run "
"in parallel, using as many CPU cores as possible, while the <code>assert</code"
"> functionality can introspect your code, providing great reports in case of f"
"ailures. Those features are built using Elixir macros, making it possible to a"
"dd new constructs as if they were part of the language itself.</p>\n"
"    </div>\n"
"  </div>"
msgstr ""
"      <p><code>async: true</code> オプションは、可能な限り多くのCPUコアを使うことで、各 <code>test</cod"
"e> を並列に実行することを可能にします。<code>assert</code> はコードを内観でき、テスト失敗時に素晴らしいレポートを提供してくれます。こ"
"れらの機能はElixirのマクロを利用して実現されており、あたかもそれが言語の一部であるかのように、新しい構文を追加することが可能です。</p>\n"
"    </div>\n"
"  </div>"

msgid ""
"  <div class=\"hentry post\">\n"
"    <h3>Tooling features</h3>\n"
"  </div>"
msgstr ""

msgid ""
"  <div class=\"hentry post\">\n"
"    <h4>A growing ecosystem</h4>"
msgstr ""

msgid ""
"    <div class=\"entry-summary\">\n"
"      <p>Elixir ships with a great set of tools to ease development. <a href=\""
"https://hexdocs.pm/mix/\">Mix is a build tool</a> that allows you to easily cre"
"ate projects, manage tasks, run tests and more:</p>"
msgstr ""

msgid ""
"{% highlight text %}\n"
"$ mix new my_app\n"
"$ cd my_app\n"
"$ mix test\n"
"."
msgstr ""

msgid ""
"Finished in 0.04 seconds (0.04s on load, 0.00s on tests)\n"
"1 tests, 0 failures\n"
"{% endhighlight %}"
msgstr ""

msgid ""
"      <p>Mix is also able to manage dependencies and integrates nicely with th"
"e <a href=\"https://hex.pm/\">Hex package manager</a>, which provides dependency"
" resolution and the ability to remotely fetch packages.</p>\n"
"    </div>\n"
"  </div>"
msgstr ""

msgid ""
"  <div class=\"hentry post\">\n"
"    <h4>Interactive development</h4>"
msgstr ""

msgid ""
"    <div class=\"entry-summary\">\n"
"      <p>Tools like <a href=\"https://hexdocs.pm/iex/\">IEx (Elixir&rsquo;s inte"
"ractive shell)</a> are able to leverage many aspects of the language and platf"
"orm to provide auto-complete, debugging tools, code reloading, as well as nice"
"ly formatted documentation:</p>"
msgstr ""

msgid ""
"{% highlight text %}\n"
"$ iex\n"
"Interactive Elixir - press Ctrl+C to exit (type h() ENTER for help)\n"
"iex> h String.trim           # Prints the documentation for function\n"
"iex> i \"Hello, World\"        # Prints information about the given data type\n"
"iex> break! String.trim/1    # Sets a breakpoint in the String.trim/1 function"
"\n"
"iex> recompile               # Recompiles the current project on the fly\n"
"{% endhighlight %}\n"
"    </div>\n"
"  </div>"
msgstr ""

msgid ""
"  <div class=\"hentry post\">\n"
"    <h4>Erlang compatible</h4>"
msgstr ""

msgid ""
"    <div class=\"entry-summary\">\n"
"      <p>Elixir runs on the Erlang VM giving developers complete access to Erl"
"ang&rsquo;s ecosystem, used by companies like <a href=\"https://www.heroku.com\""
">Heroku</a>, <a href=\"https://www.whatsapp.com\">WhatsApp</a>, <a href=\"https:/"
"/klarna.com\">Klarna</a> and many more to build distributed, fault-tolerant app"
"lications. An Elixir programmer can invoke any Erlang function with no runtime"
" cost:</p>"
msgstr ""

msgid ""
"{% highlight iex %}\n"
"iex> :crypto.hash(:md5, \"Using crypto from Erlang OTP\")\n"
"<<192, 223, 75, 115, ...>>\n"
"{% endhighlight %}"
msgstr ""

msgid ""
"      <p>To learn more about Elixir, check our <a href=\"/getting-started/intro"
"duction.html\">getting started guide</a>. We also have <a href=\"/docs.html\">onl"
"ine documentation available</a> and a <a href=\"/crash-course.html\">Crash Cours"
"e for Erlang developers</a>.</p>\n"
"    </div>\n"
"  </div>\n"
"</div>"
msgstr ""
