# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-07-26 17:55+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../crash-course.markdown:1
msgid "---\n"
"title: \"Erlang/Elixir Syntax: A Crash Course\"\n"
"section: home\n"
"layout: default\n"
"---"
msgstr ""

#: ../../crash-course.markdown:7
msgid "# {{ page.title }}"
msgstr ""

#: ../../crash-course.markdown:9
msgid "This is a quick introduction to the Elixir syntax for Erlang developers and vice-versa. It is the absolute minimum amount of knowledge you need in order to understand Elixir/Erlang code, support interoperability, read the docs, sample code, etc."
msgstr ""

#: ../../crash-course.markdown:11
msgid "{% include toc.html %}"
msgstr ""

#: ../../crash-course.markdown:13
msgid "## Running code"
msgstr ""

#: ../../crash-course.markdown:15
msgid "### Erlang"
msgstr ""

#: ../../crash-course.markdown:17
msgid "The fastest way to run some code is to launch the Erlang shell -- `erl`. Many code snippets on this page can be pasted directly into the shell. However, when you want to define a named function, Erlang expects it to be inside of a module, and modules have to be compiled. Here's a skeleton for a module:"
msgstr ""

#: ../../crash-course.markdown:19
msgid "```erlang\n"
"% module_name.erl\n"
"-module(module_name).  % you may use some other name\n"
"-compile(export_all)."
msgstr ""

#: ../../crash-course.markdown:24
msgid "hello() ->\n"
"  io:format(\"~s~n\", [\"Hello world!\"]).\n"
"```"
msgstr ""

#: ../../crash-course.markdown:28
msgid "Add your functions to it, save it to disk, run `erl` from the same directory and execute the `compile` command:"
msgstr ""

#: ../../crash-course.markdown:30
msgid "```erl\n"
"Eshell V5.9  (abort with ^G)\n"
"1> c(module_name).\n"
"ok\n"
"1> module_name:hello().\n"
"Hello world!\n"
"ok\n"
"```"
msgstr ""

#: ../../crash-course.markdown:39
msgid "You may keep the shell running while you're editing the file. Just don't forget to execute `c(module_name)` to load the latest changes. Note that the filename has to be the same as the one declared in the `-module()` directive, plus an extension `.erl`."
msgstr ""

#: ../../crash-course.markdown:41
msgid "### Elixir"
msgstr ""

#: ../../crash-course.markdown:43
msgid "Elixir too has an interactive shell called `iex`. Compiling Elixir code can be done with `elixirc` (which is similar to Erlang's `erlc`). Elixir also provides an executable named `elixir` to run Elixir code. The module defined above can be written in Elixir as:"
msgstr ""

#: ../../crash-course.markdown:45
msgid "```elixir\n"
"# module_name.ex\n"
"defmodule ModuleName do\n"
"  def hello do\n"
"    IO.puts \"Hello World\"\n"
"  end\n"
"end\n"
"```"
msgstr ""

#: ../../crash-course.markdown:54
msgid "And compiled from `iex`:"
msgstr ""

#: ../../crash-course.markdown:56
msgid "```iex\n"
"Interactive Elixir\n"
"iex> c(\"module_name.ex\")\n"
"[ModuleName]\n"
"iex> ModuleName.hello\n"
"Hello world!\n"
":ok\n"
"```"
msgstr ""

#: ../../crash-course.markdown:65
msgid "However notice that in Elixir you don't need to create a file only to create a new module, Elixir modules can be defined directly in the shell:"
msgstr ""

#: ../../crash-course.markdown:67
msgid "```elixir\n"
"defmodule MyModule do\n"
"  def hello do\n"
"    IO.puts \"Another Hello\"\n"
"  end\n"
"end\n"
"```"
msgstr ""

#: ../../crash-course.markdown:76
msgid "## Notable differences"
msgstr ""

#: ../../crash-course.markdown:78
msgid "This section goes over some of the syntactic differences between the two languages."
msgstr ""

#: ../../crash-course.markdown:80
msgid "### Operator names"
msgstr ""

#: ../../crash-course.markdown:82
msgid "Some operators are spelled differently."
msgstr ""

#: ../../crash-course.markdown:84
msgid "| Erlang         | Elixir         | Meaning                                 |\n"
"|----------------|----------------|-----------------------------------------|\n"
"| and            | NOT AVAILABLE  | Logical 'and', evaluates both arguments |\n"
"| andalso        | and            | Logical 'and', short-circuits           |\n"
"| or             | NOT AVAILABLE  | Logical 'or', evaluates both arguments  |\n"
"| orelse         | or             | Logical 'or', short-circuits            |\n"
"| =:=            | ===            | A match operator                        |\n"
"| =/=            | !==            | A negative match                        |\n"
"| /=             | !=             | Not equals                              |\n"
"| =<             | <=             | Less than or equals                     |"
msgstr ""

#: ../../crash-course.markdown:96
msgid "### Delimiters"
msgstr ""

#: ../../crash-course.markdown:98
msgid "Erlang expressions are terminated with a dot `.` and comma `,` is used to evaluate multiple expressions within one context (in a function definition, for instance). In Elixir, expressions are delimited by a line break or a semicolon `;`."
msgstr ""

#: ../../crash-course.markdown:100
#: ../../crash-course.markdown:120
#: ../../crash-course.markdown:184
#: ../../crash-course.markdown:208
#: ../../crash-course.markdown:236
#: ../../crash-course.markdown:254
#: ../../crash-course.markdown:288
#: ../../crash-course.markdown:308
#: ../../crash-course.markdown:340
#: ../../crash-course.markdown:454
#: ../../crash-course.markdown:486
#: ../../crash-course.markdown:506
#: ../../crash-course.markdown:570
#: ../../crash-course.markdown:596
#: ../../crash-course.markdown:634
#: ../../crash-course.markdown:701
#: ../../crash-course.markdown:723
#: ../../crash-course.markdown:794
msgid "**Erlang**"
msgstr ""

#: ../../crash-course.markdown:102
msgid "```erlang\n"
"X = 2, Y = 3.\n"
"X + Y.\n"
"```"
msgstr ""

#: ../../crash-course.markdown:107
#: ../../crash-course.markdown:142
#: ../../crash-course.markdown:194
#: ../../crash-course.markdown:217
#: ../../crash-course.markdown:243
#: ../../crash-course.markdown:262
#: ../../crash-course.markdown:296
#: ../../crash-course.markdown:318
#: ../../crash-course.markdown:348
#: ../../crash-course.markdown:465
#: ../../crash-course.markdown:495
#: ../../crash-course.markdown:528
#: ../../crash-course.markdown:582
#: ../../crash-course.markdown:612
#: ../../crash-course.markdown:652
#: ../../crash-course.markdown:711
#: ../../crash-course.markdown:748
#: ../../crash-course.markdown:809
msgid "**Elixir**"
msgstr ""

#: ../../crash-course.markdown:109
msgid "```elixir\n"
"x = 2; y = 3\n"
"x + y\n"
"```"
msgstr ""

#: ../../crash-course.markdown:114
msgid "### Variable names"
msgstr ""

#: ../../crash-course.markdown:116
msgid "Variables in Erlang can only be assigned once. The Erlang shell provides a special command `f` that allows you to erase the binding of a variable or all variables at once."
msgstr ""

#: ../../crash-course.markdown:118
msgid "Elixir allows you to assign to a variable more than once. If you want to match against the value of a previously assigned variable, you should use `^`:"
msgstr ""

#: ../../crash-course.markdown:122
msgid "```erl\n"
"Eshell V5.9  (abort with ^G)\n"
"1> X = 10.\n"
"10\n"
"2> X = X + 1.\n"
"** exception error: no match of right hand side value 11\n"
"3> X1 = X + 1.\n"
"11\n"
"4> f(X).\n"
"ok\n"
"5> X = X1 * X1.\n"
"121\n"
"6> f().\n"
"ok\n"
"7> X.\n"
"* 1: variable 'X' is unbound\n"
"8> X1.\n"
"* 1: variable 'X1' is unbound\n"
"```"
msgstr ""

#: ../../crash-course.markdown:144
msgid "```iex\n"
"iex> a = 1\n"
"1\n"
"iex> a = 2\n"
"2\n"
"iex> ^a = 3\n"
"** (MatchError) no match of right hand side value: 3\n"
"```"
msgstr ""

#: ../../crash-course.markdown:153
msgid "### Calling functions"
msgstr ""

#: ../../crash-course.markdown:155
msgid "Invoking a function from a module uses different syntax. In Erlang, you would write"
msgstr ""

#: ../../crash-course.markdown:157
msgid "```erlang\n"
"lists:last([1, 2]).\n"
"```"
msgstr ""

#: ../../crash-course.markdown:161
msgid "to invoke the `last` function from the `List` module. In Elixir, use the dot `.` in place of the colon `:`"
msgstr ""

#: ../../crash-course.markdown:163
msgid "```elixir\n"
"List.last([1, 2])\n"
"```"
msgstr ""

#: ../../crash-course.markdown:167
msgid "**Note**. Since Erlang modules are represented by atoms, you may invoke Erlang functions in Elixir as follows:"
msgstr ""

#: ../../crash-course.markdown:169
msgid "```elixir\n"
":lists.sort([3, 2, 1])\n"
"```"
msgstr ""

#: ../../crash-course.markdown:173
msgid "All of the Erlang built-ins reside in the `:erlang` module."
msgstr ""

#: ../../crash-course.markdown:176
msgid "## Data types"
msgstr ""

#: ../../crash-course.markdown:178
msgid "Erlang and Elixir have the same data types for the most part, but there are a number of differences."
msgstr ""

#: ../../crash-course.markdown:180
msgid "### Atoms"
msgstr ""

#: ../../crash-course.markdown:182
msgid "In Erlang, an `atom` is any identifier that starts with a lowercase letter, e.g. `ok`, `tuple`, `donut`. Identifiers that start with a capital letter are always treated as variable names. Elixir, on the other hand, uses the former for naming variables, and the latter are treated as atom aliases. Atoms in Elixir always start with a colon `:`."
msgstr ""

#: ../../crash-course.markdown:186
msgid "```erlang\n"
"im_an_atom.\n"
"me_too."
msgstr ""

#: ../../crash-course.markdown:190
msgid "Im_a_var.\n"
"X = 10.\n"
"```"
msgstr ""

#: ../../crash-course.markdown:196
msgid "```elixir\n"
":im_an_atom\n"
":me_too"
msgstr ""

#: ../../crash-course.markdown:200
msgid "im_a_var\n"
"x = 10"
msgstr ""

#: ../../crash-course.markdown:203
msgid "Module  # this is called an atom alias; it expands to :'Elixir.Module'\n"
"```"
msgstr ""

#: ../../crash-course.markdown:206
msgid "It is also possible to create atoms that start with a character other than a lowercase letter. The syntax is different between the two languages:"
msgstr ""

#: ../../crash-course.markdown:210
msgid "```erlang\n"
"is_atom(ok).                %=> true\n"
"is_atom('0_ok').            %=> true\n"
"is_atom('Multiple words').  %=> true\n"
"is_atom('').                %=> true\n"
"```"
msgstr ""

#: ../../crash-course.markdown:219
msgid "```elixir\n"
"is_atom :ok                 #=> true\n"
"is_atom :'ok'               #=> true\n"
"is_atom Ok                  #=> true\n"
"is_atom :\"Multiple words\"   #=> true\n"
"is_atom :\"\"                 #=> true\n"
"```"
msgstr ""

#: ../../crash-course.markdown:227
msgid "### Tuples"
msgstr ""

#: ../../crash-course.markdown:229
msgid "The syntax for tuples is the same in both languages, but the APIs are different. Elixir attempts to normalize Erlang libraries in a way that:"
msgstr ""

#: ../../crash-course.markdown:231
msgid "1. The `subject` of the function is always the first argument.\n"
"2. All data structures functions employ zero-based access."
msgstr ""

#: ../../crash-course.markdown:234
msgid "That said, Elixir does not import the default `element` and `setelement` functions, but instead provides `elem` and `put_elem`:"
msgstr ""

#: ../../crash-course.markdown:238
msgid "```erlang\n"
"element(1, {a, b, c}).       %=> a\n"
"setelement(1, {a, b, c}, d). %=> {d, b, c}\n"
"```"
msgstr ""

#: ../../crash-course.markdown:245
msgid "```elixir\n"
"elem({:a, :b, :c}, 0)         #=> :a\n"
"put_elem({:a, :b, :c}, 0, :d) #=> {:d, :b, :c}\n"
"```"
msgstr ""

#: ../../crash-course.markdown:250
msgid "### Lists and binaries"
msgstr ""

#: ../../crash-course.markdown:252
msgid "Elixir has a shortcut syntax for binaries:"
msgstr ""

#: ../../crash-course.markdown:256
msgid "```erlang\n"
"is_list('Hello').        %=> false\n"
"is_list(\"Hello\").        %=> true\n"
"is_binary(<<\"Hello\">>).  %=> true\n"
"```"
msgstr ""

#: ../../crash-course.markdown:264
msgid "```elixir\n"
"is_list 'Hello'          #=> true\n"
"is_binary \"Hello\"        #=> true\n"
"is_binary <<\"Hello\">>    #=> true\n"
"<<\"Hello\">> === \"Hello\"  #=> true\n"
"```"
msgstr ""

#: ../../crash-course.markdown:271
msgid "In Elixir, the word **string** means a UTF-8 binary and there is a `String` module that works on such data. Elixir also expects your source files to be UTF-8 encoded. On the other hand, **string** in Erlang refers to char lists and there is a `:string` module, that's not UTF-8 aware and works mostly with char lists."
msgstr ""

#: ../../crash-course.markdown:273
msgid "Elixir also supports multiline strings (also called *heredocs*):"
msgstr ""

#: ../../crash-course.markdown:275
msgid "```elixir\n"
"is_binary \"\"\"\n"
"This is a binary\n"
"spanning several\n"
"lines.\n"
"\"\"\"\n"
"#=> true\n"
"```"
msgstr ""

#: ../../crash-course.markdown:284
msgid "### Keyword list"
msgstr ""

#: ../../crash-course.markdown:286
msgid "Elixir offers a literal syntax for creating a list of two-item tuples where the first item in the tuple is an atom and calls them keyword lists:"
msgstr ""

#: ../../crash-course.markdown:290
msgid "```erlang\n"
"Proplist = [{another_key, 20}, {key, 10}].\n"
"proplists:get_value(another_key, Proplist).\n"
"%=> 20\n"
"```"
msgstr ""

#: ../../crash-course.markdown:298
msgid "```elixir\n"
"kw = [another_key: 20, key: 10]\n"
"kw[:another_key]\n"
"#=> 20\n"
"```"
msgstr ""

#: ../../crash-course.markdown:304
msgid "### Maps"
msgstr ""

#: ../../crash-course.markdown:306
msgid "Erlang R17 introduced maps, a key-value store, with no ordering. Keys and values can be any term. Creating, updating and matching maps in both languages is shown below:"
msgstr ""

#: ../../crash-course.markdown:310
msgid "```erlang\n"
"Map = #{key => 0}.\n"
"Updated = Map#{key := 1}.\n"
"#{key := Value} = Updated.\n"
"Value =:= 1.\n"
"%=> true\n"
"```"
msgstr ""

#: ../../crash-course.markdown:320
msgid "```elixir\n"
"map = %{:key => 0}\n"
"map = %{map | :key => 1}\n"
"%{:key => value} = map\n"
"value === 1\n"
"#=> true\n"
"```"
msgstr ""

#: ../../crash-course.markdown:328
msgid "If the keys are all atoms, Elixir allows developers to use `key: 0` for defining the map as well as using `.key` for accessing fields:"
msgstr ""

#: ../../crash-course.markdown:330
msgid "```elixir\n"
"map = %{key: 0}\n"
"map = %{map | key: 1}\n"
"map.key === 1\n"
"```"
msgstr ""

#: ../../crash-course.markdown:336
msgid "### Regular expressions"
msgstr ""

#: ../../crash-course.markdown:338
msgid "Elixir supports a literal syntax for regular expressions. Such syntax allows regexes to be compiled at compilation time instead of runtime and does not require you to double escape special regex characters:"
msgstr ""

#: ../../crash-course.markdown:342
msgid "```erlang\n"
"{ ok, Pattern } = re:compile(\"abc\\\\s\").\n"
"re:run(\"abc \", Pattern).\n"
"%=> { match, [\"abc \"] }\n"
"```"
msgstr ""

#: ../../crash-course.markdown:350
msgid "```elixir\n"
"Regex.run ~r/abc\\s/, \"abc \"\n"
"#=> [\"abc \"]\n"
"```"
msgstr ""

#: ../../crash-course.markdown:355
msgid "Regexes are also supported in heredocs, which is convenient when defining multiline regexes:"
msgstr ""

#: ../../crash-course.markdown:357
msgid "```elixir\n"
"Regex.regex? ~r\"\"\"\n"
"This is a regex\n"
"spanning several\n"
"lines.\n"
"\"\"\"\n"
"#=> true\n"
"```"
msgstr ""

#: ../../crash-course.markdown:367
msgid "## Modules"
msgstr ""

#: ../../crash-course.markdown:369
msgid "Each Erlang module lives in its own file which has the following structure:"
msgstr ""

#: ../../crash-course.markdown:371
msgid "```erlang\n"
"-module(hello_module).\n"
"-export([some_fun/0, some_fun/1])."
msgstr ""

#: ../../crash-course.markdown:375
msgid "% A \"Hello world\" function\n"
"some_fun() ->\n"
"  io:format('~s~n', ['Hello world!'])."
msgstr ""

#: ../../crash-course.markdown:379
msgid "% This one works only with lists\n"
"some_fun(List) when is_list(List) ->\n"
"  io:format('~s~n', List)."
msgstr ""

#: ../../crash-course.markdown:383
msgid "% Non-exported functions are private\n"
"priv() ->\n"
"  secret_info.\n"
"```"
msgstr ""

#: ../../crash-course.markdown:388
msgid "Here we create a module named ``hello_module``. In it we define three functions, the first two are made available for other modules to call via the ``export`` directive at the top. It contains a list of functions, each of which is written in the format ``<function name>/<arity>``. Arity stands for the number of arguments."
msgstr ""

#: ../../crash-course.markdown:390
msgid "An Elixir equivalent to the Erlang above:"
msgstr ""

#: ../../crash-course.markdown:392
msgid "```elixir\n"
"defmodule HelloModule do\n"
"  # A \"Hello world\" function\n"
"  def some_fun do\n"
"    IO.puts \"Hello world!\"\n"
"  end"
msgstr ""

#: ../../crash-course.markdown:399
msgid "  # This one works only with lists\n"
"  def some_fun(list) when is_list(list) do\n"
"    IO.inspect list\n"
"  end"
msgstr ""

#: ../../crash-course.markdown:404
msgid "  # A private function\n"
"  defp priv do\n"
"    :secret_info\n"
"  end\n"
"end\n"
"```"
msgstr ""

#: ../../crash-course.markdown:411
msgid "In Elixir, it is also possible to have multiple modules in one file, as well as nested modules:"
msgstr ""

#: ../../crash-course.markdown:413
msgid "```elixir\n"
"defmodule HelloModule do\n"
"  defmodule Utils do\n"
"    def util do\n"
"      IO.puts \"Utilize\"\n"
"    end"
msgstr ""

#: ../../crash-course.markdown:420
msgid "    defp priv do\n"
"      :cant_touch_this\n"
"    end\n"
"  end"
msgstr ""

#: ../../crash-course.markdown:425
msgid "  def dummy do\n"
"    :ok\n"
"  end\n"
"end"
msgstr ""

#: ../../crash-course.markdown:430
msgid "defmodule ByeModule do\n"
"end"
msgstr ""

#: ../../crash-course.markdown:433
msgid "HelloModule.dummy\n"
"#=> :ok"
msgstr ""

#: ../../crash-course.markdown:436
msgid "HelloModule.Utils.util\n"
"#=> \"Utilize\""
msgstr ""

#: ../../crash-course.markdown:439
msgid "HelloModule.Utils.priv\n"
"#=> ** (UndefinedFunctionError) undefined function: HelloModule.Utils.priv/0\n"
"```"
msgstr ""

#: ../../crash-course.markdown:444
msgid "## Function syntax"
msgstr ""

#: ../../crash-course.markdown:446
msgid "[This chapter][3] from the Erlang book provides a detailed description of pattern matching and function syntax in Erlang. Here, I'm briefly covering the main points and provide sample code both in Erlang and Elixir."
msgstr ""

#: ../../crash-course.markdown:448
msgid "[3]: http://learnyousomeerlang.com/syntax-in-functions"
msgstr ""

#: ../../crash-course.markdown:450
msgid "### Pattern matching"
msgstr ""

#: ../../crash-course.markdown:452
msgid "Pattern matching in Elixir is based on Erlang's implementation and in general is very similar:"
msgstr ""

#: ../../crash-course.markdown:456
msgid "```erlang\n"
"loop_through([H | T]) ->\n"
"  io:format('~p~n', [H]),\n"
"  loop_through(T);"
msgstr ""

#: ../../crash-course.markdown:461
msgid "loop_through([]) ->\n"
"  ok.\n"
"```"
msgstr ""

#: ../../crash-course.markdown:467
msgid "```elixir\n"
"def loop_through([h | t]) do\n"
"  IO.inspect h\n"
"  loop_through t\n"
"end"
msgstr ""

#: ../../crash-course.markdown:473
msgid "def loop_through([]) do\n"
"  :ok\n"
"end\n"
"```"
msgstr ""

#: ../../crash-course.markdown:478
msgid "When defining a function with the same name multiple times, each such definition is called a **clause**. In Erlang, clauses always go side by side and are separated by a semicolon ``;``. The last clause is terminated by a dot ``.``."
msgstr ""

#: ../../crash-course.markdown:480
msgid "Elixir doesn't require punctuation to separate clauses, but they must be grouped together."
msgstr ""

#: ../../crash-course.markdown:482
msgid "### Identifying functions"
msgstr ""

#: ../../crash-course.markdown:484
msgid "In both Erlang and Elixir, a function is not identified only by its name, but by its name and arity. In both examples below, we are defining four different functions (all named `sum`, but with different arity):"
msgstr ""

#: ../../crash-course.markdown:488
msgid "```erlang\n"
"sum() -> 0.\n"
"sum(A) -> A.\n"
"sum(A, B) -> A + B.\n"
"sum(A, B, C) -> A + B + C.\n"
"```"
msgstr ""

#: ../../crash-course.markdown:497
msgid "```elixir\n"
"def sum, do: 0\n"
"def sum(a), do: a\n"
"def sum(a, b), do: a + b\n"
"def sum(a, b, c), do: a + b + c\n"
"```"
msgstr ""

#: ../../crash-course.markdown:504
msgid "Guard expressions provide a concise way to define functions that accept a limited set of values based on some condition."
msgstr ""

#: ../../crash-course.markdown:508
msgid "```erlang\n"
"sum(A, B) when is_integer(A), is_integer(B) ->\n"
"  A + B;"
msgstr ""

#: ../../crash-course.markdown:512
msgid "sum(A, B) when is_list(A), is_list(B) ->\n"
"  A ++ B;"
msgstr ""

#: ../../crash-course.markdown:515
msgid "sum(A, B) when is_binary(A), is_binary(B) ->\n"
"  <<A/binary,  B/binary>>."
msgstr ""

#: ../../crash-course.markdown:518
msgid "sum(1, 2).\n"
"%=> 3"
msgstr ""

#: ../../crash-course.markdown:521
msgid "sum([1], [2]).\n"
"%=> [1, 2]"
msgstr ""

#: ../../crash-course.markdown:524
msgid "sum(\"a\", \"b\").\n"
"%=> \"ab\"\n"
"```"
msgstr ""

#: ../../crash-course.markdown:530
msgid "```elixir\n"
"def sum(a, b) when is_integer(a) and is_integer(b) do\n"
"  a + b\n"
"end"
msgstr ""

#: ../../crash-course.markdown:535
msgid "def sum(a, b) when is_list(a) and is_list(b) do\n"
"  a ++ b\n"
"end"
msgstr ""

#: ../../crash-course.markdown:539
msgid "def sum(a, b) when is_binary(a) and is_binary(b) do\n"
"  a <> b\n"
"end"
msgstr ""

#: ../../crash-course.markdown:543
msgid "sum 1, 2\n"
"#=> 3"
msgstr ""

#: ../../crash-course.markdown:546
msgid "sum [1], [2]\n"
"#=> [1, 2]"
msgstr ""

#: ../../crash-course.markdown:549
msgid "sum \"a\", \"b\"\n"
"#=> \"ab\"\n"
"```"
msgstr ""

#: ../../crash-course.markdown:553
msgid "### Default values"
msgstr ""

#: ../../crash-course.markdown:555
msgid "In addition, Elixir allows for default values for arguments, whereas Erlang does not."
msgstr ""

#: ../../crash-course.markdown:557
msgid "```elixir\n"
"def mul_by(x, n \\\\ 2) do\n"
"  x * n\n"
"end"
msgstr ""

#: ../../crash-course.markdown:562
msgid "mul_by 4, 3 #=> 12\n"
"mul_by 4    #=> 8\n"
"```"
msgstr ""

#: ../../crash-course.markdown:566
msgid "### Anonymous functions"
msgstr ""

#: ../../crash-course.markdown:568
msgid "Anonymous functions are defined in the following way:"
msgstr ""

#: ../../crash-course.markdown:572
msgid "```erlang\n"
"Sum = fun(A, B) -> A + B end.\n"
"Sum(4, 3).\n"
"%=> 7"
msgstr ""

#: ../../crash-course.markdown:577
msgid "Square = fun(X) -> X * X end.\n"
"lists:map(Square, [1, 2, 3, 4]).\n"
"%=> [1, 4, 9, 16]\n"
"```"
msgstr ""

#: ../../crash-course.markdown:584
msgid "```elixir\n"
"sum = fn(a, b) -> a + b end\n"
"sum.(4, 3)\n"
"#=> 7"
msgstr ""

#: ../../crash-course.markdown:589
msgid "square = fn(x) -> x * x end\n"
"Enum.map [1, 2, 3, 4], square\n"
"#=> [1, 4, 9, 16]\n"
"```"
msgstr ""

#: ../../crash-course.markdown:594
msgid "It is possible to use pattern matching when defining anonymous functions, too."
msgstr ""

#: ../../crash-course.markdown:598
msgid "```erlang\n"
"F = fun(Tuple = {a, b}) ->\n"
"        io:format(\"All your ~p are belong to us~n\", [Tuple]);\n"
"        ([]) ->\n"
"        \"Empty\"\n"
"    end."
msgstr ""

#: ../../crash-course.markdown:605
msgid "F([]).\n"
"%=> \"Empty\""
msgstr ""

#: ../../crash-course.markdown:608
msgid "F({a, b}).\n"
"%=> \"All your {a, b} are belong to us\"\n"
"```"
msgstr ""

#: ../../crash-course.markdown:614
msgid "```elixir\n"
"f = fn\n"
"      {:a, :b} = tuple ->\n"
"        IO.puts \"All your #{inspect tuple} are belong to us\"\n"
"      [] ->\n"
"        \"Empty\"\n"
"    end"
msgstr ""

#: ../../crash-course.markdown:622
msgid "f.([])\n"
"#=> \"Empty\""
msgstr ""

#: ../../crash-course.markdown:625
msgid "f.({:a, :b})\n"
"#=> \"All your {:a, :b} are belong to us\"\n"
"```"
msgstr ""

#: ../../crash-course.markdown:630
msgid "### First-class functions"
msgstr ""

#: ../../crash-course.markdown:632
msgid "Anonymous functions are first-class values, so they can be passed as arguments to other functions and also can serve as a return value. There is a special syntax to allow named functions be treated in the same manner."
msgstr ""

#: ../../crash-course.markdown:636
msgid "```erlang\n"
"% math.erl\n"
"-module(math).\n"
"-export([square/1])."
msgstr ""

#: ../../crash-course.markdown:641
msgid "square(X) -> X * X.\n"
"```"
msgstr ""

#: ../../crash-course.markdown:644
msgid "```erl\n"
"Eshell V5.9  (abort with ^G)\n"
"1> c(math).\n"
"{ok,math}\n"
"2> lists:map(fun math:square/1, [1, 2, 3]).\n"
"[1,4,9]\n"
"```"
msgstr ""

#: ../../crash-course.markdown:654
#: ../../crash-course.markdown:680
msgid "```elixir\n"
"defmodule Math do\n"
"  def square(x) do\n"
"    x * x\n"
"  end\n"
"end"
msgstr ""

#: ../../crash-course.markdown:661
#: ../../crash-course.markdown:687
msgid "Enum.map [1, 2, 3], &Math.square/1\n"
"#=> [1, 4, 9]\n"
"```"
msgstr ""

#: ../../crash-course.markdown:666
msgid "### Partials and function captures in Elixir"
msgstr ""

#: ../../crash-course.markdown:668
msgid "Elixir supports partial application of functions which can be used to define anonymous functions in a concise way:"
msgstr ""

#: ../../crash-course.markdown:670
msgid "```elixir\n"
"Enum.map [1, 2, 3, 4], &(&1 * 2)\n"
"#=> [2, 4, 6, 8]"
msgstr ""

#: ../../crash-course.markdown:674
msgid "List.foldl [1, 2, 3, 4], 0, &(&1 + &2)\n"
"#=> 10\n"
"```"
msgstr ""

#: ../../crash-course.markdown:678
msgid "We use the same `&` operator to capture a function, allowing us to pass named functions as arguments."
msgstr ""

#: ../../crash-course.markdown:691
msgid "The above would be equivalent to Erlang's `fun math:square/1`."
msgstr ""

#: ../../crash-course.markdown:693
msgid "## Control flow"
msgstr ""

#: ../../crash-course.markdown:695
msgid "The constructs `if` and `case` are actually expressions in both Erlang and Elixir, but may be used for control flow as in imperative languages."
msgstr ""

#: ../../crash-course.markdown:697
msgid "### Case"
msgstr ""

#: ../../crash-course.markdown:699
msgid "The ``case`` construct provides control flow based purely on pattern matching."
msgstr ""

#: ../../crash-course.markdown:703
msgid "```erlang\n"
"case {X, Y} of\n"
"  {a, b} -> ok;\n"
"  {b, c} -> good;\n"
"  Else -> Else\n"
"end\n"
"```"
msgstr ""

#: ../../crash-course.markdown:713
msgid "```elixir\n"
"case {x, y} do\n"
"  {:a, :b} -> :ok\n"
"  {:b, :c} -> :good\n"
"  other -> other\n"
"end\n"
"```"
msgstr ""

#: ../../crash-course.markdown:721
msgid "### If"
msgstr ""

#: ../../crash-course.markdown:725
msgid "```erlang\n"
"Test_fun = fun (X) ->\n"
"  if X > 10 ->\n"
"       greater_than_ten;\n"
"     X < 10, X > 0 ->\n"
"       less_than_ten_positive;\n"
"     X < 0; X =:= 0 ->\n"
"       zero_or_negative;\n"
"     true ->\n"
"       exactly_ten\n"
"  end\n"
"end."
msgstr ""

#: ../../crash-course.markdown:738
msgid "Test_fun(11).\n"
"%=> greater_than_ten"
msgstr ""

#: ../../crash-course.markdown:741
msgid "Test_fun(-2).\n"
"%=> zero_or_negative"
msgstr ""

#: ../../crash-course.markdown:744
msgid "Test_fun(10).\n"
"%=> exactly_ten\n"
"```"
msgstr ""

#: ../../crash-course.markdown:750
msgid "```elixir\n"
"test_fun = fn(x) ->\n"
"  cond do\n"
"    x > 10 ->\n"
"      :greater_than_ten\n"
"    x < 10 and x > 0 ->\n"
"      :less_than_ten_positive\n"
"    x < 0 or x === 0 ->\n"
"      :zero_or_negative\n"
"    true ->\n"
"      :exactly_ten\n"
"  end\n"
"end"
msgstr ""

#: ../../crash-course.markdown:764
msgid "test_fun.(44)\n"
"#=> :greater_than_ten"
msgstr ""

#: ../../crash-course.markdown:767
msgid "test_fun.(0)\n"
"#=> :zero_or_negative"
msgstr ""

#: ../../crash-course.markdown:770
msgid "test_fun.(10)\n"
"#=> :exactly_ten\n"
"```"
msgstr ""

#: ../../crash-course.markdown:774
msgid "There are two important differences between Elixir's `cond` and Erlang's `if`:"
msgstr ""

#: ../../crash-course.markdown:776
msgid "1) `cond` allows any expression on the left side while Erlang allows only guard clauses;"
msgstr ""

#: ../../crash-course.markdown:778
msgid "2) `cond` uses Elixir's concepts of truthy and falsy values (everything is truthy except `nil` and `false`), Erlang's `if` expects strictly a boolean;"
msgstr ""

#: ../../crash-course.markdown:780
msgid "Elixir also provides an `if` function that resembles more imperative languages and is useful when you need to check if one clause is true or false:"
msgstr ""

#: ../../crash-course.markdown:782
msgid "```elixir\n"
"if x > 10 do\n"
"  :greater_than_ten\n"
"else\n"
"  :not_greater_than_ten\n"
"end\n"
"```"
msgstr ""

#: ../../crash-course.markdown:790
msgid "### Sending and receiving messages"
msgstr ""

#: ../../crash-course.markdown:792
msgid "The syntax for sending and receiving differs only slightly between Erlang and Elixir."
msgstr ""

#: ../../crash-course.markdown:796
msgid "```erlang\n"
"Pid = self()."
msgstr ""

#: ../../crash-course.markdown:799
msgid "Pid ! {hello}."
msgstr ""

#: ../../crash-course.markdown:801
msgid "receive\n"
"  {hello} -> ok;\n"
"  Other -> Other\n"
"after\n"
"  10 -> timeout\n"
"end.\n"
"```"
msgstr ""

#: ../../crash-course.markdown:811
msgid "```elixir\n"
"pid = Kernel.self"
msgstr ""

#: ../../crash-course.markdown:814
msgid "send pid, {:hello}"
msgstr ""

#: ../../crash-course.markdown:816
msgid "receive do\n"
"  {:hello} -> :ok\n"
"  other -> other\n"
"after\n"
"  10 -> :timeout\n"
"end\n"
"```"
msgstr ""

#: ../../crash-course.markdown:825
msgid "## Adding Elixir to existing Erlang programs"
msgstr ""

#: ../../crash-course.markdown:827
msgid "Elixir compiles into BEAM byte code (via Erlang Abstract Format). This means that Elixir code can be called from Erlang and vice versa, without the need to write any bindings. All Elixir modules start with the `Elixir.` prefix followed by the regular Elixir name. For example, here is how to use the UTF-8 aware `String` downcase from Elixir in Erlang:"
msgstr ""

#: ../../crash-course.markdown:829
msgid "```erlang\n"
"-module(bstring).\n"
"-export([downcase/1])."
msgstr ""

#: ../../crash-course.markdown:833
msgid "downcase(Bin) ->\n"
"  'Elixir.String':downcase(Bin).\n"
"```"
msgstr ""

#: ../../crash-course.markdown:837
msgid "### Rebar integration"
msgstr ""

#: ../../crash-course.markdown:839
msgid "If you are using rebar, you should be able to include Elixir git repository as a dependency:"
msgstr ""

#: ../../crash-course.markdown:841
msgid "    https://github.com/elixir-lang/elixir.git"
msgstr ""

#: ../../crash-course.markdown:843
msgid "Elixir is structured similar to Erlang's OTP. It is divided into applications that are placed inside the `lib` directory, as seen in its [source code repository](https://github.com/elixir-lang/elixir). Since rebar does not recognize such structure, we need to explicitly add to our `rebar.config` which Elixir apps we want to use, for example:"
msgstr ""

#: ../../crash-course.markdown:845
msgid "```erlang\n"
"{lib_dirs, [\n"
"  \"deps/elixir/lib\"\n"
"]}.\n"
"```"
msgstr ""

#: ../../crash-course.markdown:851
msgid "This should be enough to invoke Elixir functions straight from your Erlang code. If you are also going to write Elixir code, you can [install Elixir's rebar plugin for automatic compilation](https://github.com/yrashk/rebar_elixir_plugin)."
msgstr ""

#: ../../crash-course.markdown:853
msgid "### Manual integration"
msgstr ""

#: ../../crash-course.markdown:855
msgid "If you are not using rebar, the easiest approach to use Elixir in your existing Erlang software is to install Elixir using one of the different ways specified in the [Getting Started guide](/getting-started/introduction.html) and add the `lib` directory in your checkout to `ERL_LIBS`."
msgstr ""

#: ../../crash-course.markdown:858
msgid "## Further reading"
msgstr ""

#: ../../crash-course.markdown:860
msgid "Erlang's official documentation site has a nice [collection][4] of programming examples. It can be a good exercise to translate them into Elixir."
msgstr ""

#: ../../crash-course.markdown:862
msgid "Elixir also provides a [Getting Started guide][6] and has [documentation available online][7]."
msgstr ""

#: ../../crash-course.markdown:864
msgid "[4]: http://www.erlang.org/doc/programming_examples/users_guide.html\n"
"[6]: /getting-started/introduction.html\n"
"[7]: /docs.html"
msgstr ""

