msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2017-10-30 15:10+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"layout: post\n"
"title: Elixir v1.3 released\n"
"author: José Valim\n"
"category: Releases\n"
"excerpt: Elixir v1.3 brings many improvements to the language, the compiler an"
"d its tooling, specially Mix (Elixir's build tool) and ExUnit (Elixir's test f"
"ramework).\n"
"---"
msgstr ""

msgid ""
"Elixir v1.3 brings many improvements to the language, the compiler and its too"
"ling, specially Mix (Elixir's build tool) and ExUnit (Elixir's test framework)"
". The most notable additions are the new Calendar types, the new cross-referen"
"ce checker in Mix, and the assertion diffing in ExUnit. We will explore all of"
" them and a couple more enhancements below."
msgstr ""

msgid ""
"With this release, we also welcome [Andrea Leopardi](http://github.com/whatyou"
"hide) to Elixir Core Team. He has contributed greatly to this release and main"
"tains important packages in the community, like [Gettext](https://github.com/e"
"lixir-lang/gettext) and [Redix](https://github.com/whatyouhide/redix)."
msgstr ""

msgid "## Language improvements"
msgstr ""

msgid ""
"The language has been improved semantically and includes new types and APIs. L"
"et's see the three major features."
msgstr ""

msgid "### Deprecation of imperative assignment"
msgstr ""

msgid ""
"Elixir will now warn if constructs like `if`, `case` and friends assign to a v"
"ariable that is accessed in an outer scope. As an example, imagine a function "
"called `format` that receives a message and some options and it must return a "
"path alongside the message:"
msgstr ""

msgid ""
"```elixir\n"
"def format(message, opts) do\n"
"  path =\n"
"    if (file = opts[:file]) && (line = opts[:line]) do\n"
"      relative = Path.relative_to_cwd(file)\n"
"      message  = Exception.format_file_line(relative, line) <> \" \" <> message\n"
"      relative\n"
"    end"
msgstr ""

msgid ""
"  {path, message}\n"
"end\n"
"```"
msgstr ""

msgid ""
"The `if` block above is implicitly changing the value in `message`. Now imagin"
"e we want to move the `if` block to its own function to clean up the implement"
"ation:"
msgstr ""

msgid ""
"```elixir\n"
"def format(message, opts) do\n"
"  path = with_file_and_line(message, opts)\n"
"  {path, message}\n"
"end"
msgstr ""

msgid ""
"defp with_file_and_line(message, opts) do\n"
"  if (file = opts[:file]) && (line = opts[:line]) do\n"
"    relative = Path.relative_to_cwd(file)\n"
"    message  = Exception.format_file_line(relative, line) <> \" \" <> message\n"
"    relative\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"The refactored version is broken because the `if` block was actually returning"
" two values, the relative path *and* the new message. Elixir v1.3 will warn on"
" such cases, forcing both variables to be explicitly returned from `if`, `case"
"` and other constructs. Furthermore, this change gives us the opportunity to u"
"nify the language scoping rules in future releases."
msgstr ""

msgid "### Calendar types and sigils"
msgstr ""

msgid "Elixir v1.3 introduces the `Calendar` module as well as 4 new calendar types:"
msgstr ""

msgid ""
"  * `Date` - used to store dates (year, month, day) in a given calendar\n"
"  * `Time` - used to store time (hour, minute, second, microseconds)\n"
"  * `NaiveDateTime` - used to store datetimes without a timezone (year, month,"
" day, hour, minute, second, microseconds) in a given calendar. It is called na"
"ïve because without a timezone, the datetime may not actually exist. For examp"
"le, when there are daylight savings changes, a whole hour may not exist (when "
"the clock moves forward) or a particular instant may happen twice (when the cl"
"ock moves backwards)\n"
"  * `DateTime` - used to store datetimes with timezone (year, month, day, hour"
", minute, second, microsecond and time zone, with abbreviation, UTC and standa"
"rd offset)"
msgstr ""

msgid ""
"The aim of the current implementation of the Calendar modules and its types is"
" to provide a base for interoperatibility in the ecosystem instead of full-fea"
"tured datetime API. This release includes basic functionality for building new"
" types and converting them from and back strings."
msgstr ""

msgid "Elixir v1.3 also introduces 3 new sigils related to the types above:"
msgstr ""

msgid ""
"  * `~D[2016-05-29]` - builds a new date\n"
"  * `~T[08:00:00]` and `~T[08:00:00.285]` - builds a new time (with different "
"precisions)\n"
"  * `~N[2016-05-29 08:00:00]` - builds a naive date time"
msgstr ""

msgid "### Access selectors"
msgstr ""

msgid ""
"This release introduces new accessors to make it simpler for developers to tra"
"verse nested data structures, traversing and updating data in different ways. "
" For instance, given a user with a list of languages, here is how to deeply tr"
"averse the map and convert all language names to uppercase:"
msgstr ""

msgid ""
"```iex\n"
"iex> user = %{name: \"john\",\n"
"...>          languages: [%{name: \"elixir\", type: :functional},\n"
"...>                      %{name: \"c\", type: :procedural}]}\n"
"iex> update_in user, [:languages, Access.all(), :name], &String.upcase/1\n"
"%{name: \"john\",\n"
"  languages: [%{name: \"ELIXIR\", type: :functional},\n"
"              %{name: \"C\", type: :procedural}]}\n"
"```"
msgstr ""

msgid "You can see the new accessors in the `Access` module."
msgstr ""

msgid "## Mix"
msgstr ""

msgid ""
"Mix includes new tasks to improve your everyday workflow. Some of those tasks "
"relies on many compiler improvements to know more about your code, providing s"
"tatic analysis to find possible bugs in your code and faster compilation cycle"
"s."
msgstr ""

msgid "### Compiling n files"
msgstr ""

msgid ""
"Mix no longer announces every file it compiles. Instead it outputs how many fi"
"les there is to compile per compilers. Here is the output for a project like ["
"`gettext`](https://github.com/elixir-lang/gettext):"
msgstr ""

msgid ""
"```\n"
"Compiling 1 file (.yrl)\n"
"Compiling 1 file (.erl)\n"
"Compiling 19 files (.ex)\n"
"Generated gettext app\n"
"```"
msgstr ""

msgid ""
"In case a file is taking too long to compile, Mix will announce such, for exam"
"ple:"
msgstr ""

msgid ""
"```\n"
"Compiling lib/gettext.ex (it's taking more than 10s)\n"
"```"
msgstr ""

msgid ""
"The goal of these changes is to put an increased focus on the \"warnings\" emitt"
"ed by the compiler."
msgstr ""

msgid ""
"In any case, the previous behaviour can be brought back with the `--verbose` f"
"lag and the compilation threshold for files that are taking long can be set vi"
"a the `--long-compilation-threshold` option."
msgstr ""

msgid "### mix xref"
msgstr ""

msgid ""
"Speaking about warnings, Mix v1.3 includes a new task called `xref` that perfo"
"rms cross reference checks in your code. One of such checks is the ability to "
"find calls to modules and functions that do not exist. For example, if in your"
" library code you call `ThisModuleDoesNotExist.foo(1, 2, 3)`, `mix xref unreac"
"hable` will be able to find such code and let you know about it."
msgstr ""

msgid ""
"Since such checks can discover possible bugs in your codebase, a new compiler "
"called `xref` has been added to `Mix.compilers/0`, so it runs by default every"
" time you compile your code. [PragTob has written an article exploring how thi"
"s new compiler has found bugs in existing projects](https://pragtob.wordpress."
"com/2016/06/02/elixir-1-3s-mix-xref-working-its-magic-in-a-real-world-example/"
")."
msgstr ""

msgid "We have included other modes in `xref`, such as:"
msgstr ""

msgid ""
"  * `mix xref callers Foo` - used to find all places in your code that calls a"
" function from the module `Foo`"
msgstr ""

msgid ""
"  * `mix xref graph` - generates a graph with dependencies between source file"
"s"
msgstr ""

msgid ""
"You can find documentation for all modes by running `mix help xref`. We hope t"
"ools and text editors can leverage such features to provide useful functionali"
"ty for their users, helping developers understand code complexity and finding "
"bugs early on."
msgstr ""

msgid "### Better dependency tracking"
msgstr ""

msgid ""
"Besides `xref`, Elixir v1.3 provides better module tracking generally. For exa"
"mple, in previous versions, if you changed a `:path` dependency, Elixir would "
"always fully recompile the current project. In this release, we have improved "
"the tracking algorithms such that, if you change a `:path` dependency, only th"
"e files that depend on such dependency are recompiled."
msgstr ""

msgid ""
"Such improvements do not only make compilation faster but they also make worki"
"ng with umbrella applications much more productive. Previously, changing a sib"
"ling application triggered a full project recompilation, now Elixir can track "
"between sibling applications and recompile only what is needed."
msgstr ""

msgid "### mix app.tree and deps.tree"
msgstr ""

msgid ""
"Mix also includes both `mix app.tree` and `mix deps.tree`. The first will list"
" all applications your current project needs to start in order to boot (i.e. t"
"he ones listed in `application/0` in your `mix.exs`) while the second will lis"
"ts all of your dependencies and so on recursively."
msgstr ""

msgid "Here is a quick example from [Plug](https://github.com/elixir-lang/plug):"
msgstr ""

msgid ""
"```elixir\n"
"$ mix app.tree\n"
"plug\n"
"├── elixir\n"
"├── crypto\n"
"├── logger\n"
"│   └── elixir\n"
"└── mime\n"
"    └── elixir\n"
"```"
msgstr ""

msgid ""
"The `--format dot` option can also be given to generate graph files to be open"
"ed by [GraphViz](http://www.graphviz.org). For example, here is the output of "
"running `mix deps.tree --format dot --only prod` in the [Phoenix web framework"
"](http://phoenixframework.org):"
msgstr ""

msgid ""
"<p style=\"text-align: center\">\n"
"  <img src=\"/images/contents/deps-tree-phoenix.svg\" alt=\"mix deps.tree for Pho"
"enix in production\">\n"
"</p>"
msgstr ""

msgid "### mix escript.install"
msgstr ""

msgid ""
"Mix also includes `mix escript.install` and `mix escript.uninstall` tasks for "
"managing escripts. The tasks was designed in a way to mimic the existing `mix "
"archive` functionality except that:"
msgstr ""

msgid ""
"  * Archives must be used sparingly because every new archive installed affect"
"s Mix performance, as every new archive is loaded when Mix boots. Escripts sol"
"ve this by being managed apart from your Elixir/Mix installed\n"
"  * Archives depends on the current Elixir version. Therefore, updating your E"
"lixir version may break an archive. Fortunately, escripts include Elixir insid"
"e themselves, and therefore do not depend on your Elixir system version"
msgstr ""

msgid ""
"Escripts will be installed at `~/.mix/escripts` which must be added to your [`"
"PATH` environment variable](https://en.wikipedia.org/wiki/PATH_(variable))."
msgstr ""

msgid "### Option parser integration"
msgstr ""

msgid ""
"Elixir v1.3 includes improvements to the option parser, including `OptionParse"
"r.parse!/2` and `OptionParser.parse_head!/2` functions that will raise in case"
" of invalid or unknown switches. Mix builds on top of this functionality to pr"
"ovide automatic error reporting solving a common complaint where invalid optio"
"ns were not reported by Mix tasks."
msgstr ""

msgid ""
"For example, invoking `mix test --unknown` in earlier Elixir versions would si"
"lently discard the `--unknown` option. Now `mix test` correctly reports such e"
"rrors:"
msgstr ""

msgid ""
"```\n"
"$ mix test --unknown\n"
"** (Mix) Could not invoke task \"test\": 1 error found!\n"
"--unknown : Unknown option\n"
"```"
msgstr ""

msgid ""
"Note not all tasks have been updated to use strict option parsing. Some tasks,"
" like `mix compile`, are actually a front-end to many other tasks, and as such"
", it cannot effectively assert which options are valid."
msgstr ""

msgid "## ExUnit"
msgstr ""

msgid ""
"ExUnit packs many improvements on the tooling side, better integration with ex"
"ternal tools, as well as mechanisms to improve the readability of your tests."
msgstr ""

msgid "### mix test \\-\\-stale"
msgstr ""

msgid ""
"ExUnit builds on top of `mix xref` to provide the `mix test --stale` functiona"
"lity. When the `--stale` flag is given, `mix` will only run the tests that may"
" have changed since the last time you ran `mix test --stale`. For example:"
msgstr ""

msgid ""
"  * If you saved a test file on disk, Mix will run that file and ignore the on"
"es that have not changed\n"
"  * If you changed a library file, for example, `lib/foo.ex` that defines `Foo"
"`, any test that invokes a function in `Foo` directly or indirectly will also "
"run\n"
"  * If you modify your `mix.exs` or your `test/test_helper.exs`, Mix will run "
"the whole test suite"
msgstr ""

msgid ""
"This feature provides a great workflow for developers, allowing them to effort"
"lessly focus on parts of the codebase when developing new features."
msgstr ""

msgid "### Diffing"
msgstr ""

msgid ""
"ExUnit will now include diff-ing output every time a developer asserts `assert"
" left == right` in their tests. For example, the assertion:"
msgstr ""

msgid ""
"```elixir\n"
"assert \"fox jumps over the lazy dog\" ==\n"
"       \"brown fox jumps over the dog\"\n"
"```"
msgstr ""

msgid "will fail with"
msgstr ""

msgid "![ExUnit diff](/images/contents/exunit-diff.png)"
msgstr ""

msgid ""
"such that \"lazy\" in \"lhs\" will be shown in red to denote it has been removed f"
"rom \"rhs\" while \"brown\" in \"rhs\" will be shown in green to denote it has been "
"added to the \"rhs\"."
msgstr ""

msgid ""
"When working with large or nested data structures, the diffing algorithm makes"
" it fast and convenient to spot the actual differences in the asserted values."
msgstr ""

msgid "### Test types"
msgstr ""

msgid ""
"ExUnit v1.3 includes the ability to register different test types. This means "
"libraries like QuickCheck can now provide functionality such as:"
msgstr ""

msgid ""
"```elixir\n"
"defmodule StringTest do\n"
"  use ExUnit.Case, async: true\n"
"  use PropertyTestingLibrary"
msgstr ""

msgid ""
"  property \"starts_with?\" do\n"
"    forall({s1, s2} <- {utf8, utf8}) do\n"
"      String.starts_with?(s1 <> s2, s1)\n"
"    end\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"At the end of the run, ExUnit will also report it as a property, including bot"
"h the amount of tests and properties:"
msgstr ""

msgid ""
"```\n"
"1 property, 10 tests, 0 failures\n"
"```"
msgstr ""

msgid "### Named setups and describes"
msgstr ""

msgid ""
"Finally, ExUnit v1.3 includes the ability to organize tests together in descri"
"be blocks:"
msgstr ""

msgid ""
"```elixir\n"
"defmodule StringTest do\n"
"  use ExUnit.Case, async: true"
msgstr ""

msgid ""
"  describe \"String.capitalize/2\" do\n"
"    test \"uppercases the first grapheme\" do\n"
"      assert \"T\" <> _ = String.capitalize(\"test\")\n"
"    end"
msgstr ""

msgid ""
"    test \"lowercases the remaining graphemes\" do\n"
"      assert \"Test\" = String.capitalize(\"TEST\")\n"
"    end\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"Every test inside a describe block will be tagged with the describe block name"
". This allows developers to run tests that belong to particular blocks, be the"
"m in the same file or across many files:"
msgstr ""

msgid ""
"```\n"
"$ mix test --only describe:\"String.capitalize/2\"\n"
"```"
msgstr ""

msgid ""
"Note describe blocks cannot be nested. Instead of relying on hierarchy for com"
"position, we want developers to build on top of named setups. For example:"
msgstr ""

msgid ""
"```elixir\n"
"defmodule UserManagementTest do\n"
"  use ExUnit.Case, async: true"
msgstr ""

msgid ""
"  describe \"when user is logged in and is an admin\" do\n"
"    setup [:log_user_in, :set_type_to_admin]"
msgstr ""

msgid ""
"    test ...\n"
"  end"
msgstr ""

msgid ""
"  describe \"when user is logged in and is a manager\" do\n"
"    setup [:log_user_in, :set_type_to_manager]"
msgstr ""

msgid ""
"  defp log_user_in(context) do\n"
"    # ...\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"By restricting hierarchies in favor of named setups, it is straight-forward fo"
"r the developer to glance at each describe block and know exactly the setup st"
"eps involved."
msgstr ""

msgid "## Summing up"
msgstr ""

msgid ""
"The full list of changes is available in our [release notes](https://github.co"
"m/elixir-lang/elixir/releases/tag/v1.3.0). Don't forget to check [the Install "
"section](/install.html) to get Elixir installed and our [Getting Started guide"
"](http://elixir-lang.org/getting-started/introduction.html) to learn more."
msgstr ""

msgid "Happy coding!"
msgstr ""
