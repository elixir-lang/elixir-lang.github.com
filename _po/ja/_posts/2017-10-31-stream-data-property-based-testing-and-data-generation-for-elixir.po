msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2017-10-30 15:10+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"layout: post\n"
"title: \"StreamData: Property-based testing and data generation for Elixir\"\n"
"author: Andrea Leopardi\n"
"category: Releases\n"
"excerpt: We are working on data generation and property-based testing for the "
"next versions of Elixir.\n"
"---"
msgstr ""

msgid ""
"In this blog post, we'll talk about property-based testing and sample data gen"
"eration. We'll cover what these are, why we want them in Elixir, and what are "
"are plans for the future. If you want to use the features discussed here or yo"
"u want to read more formal documentation, head over to [stream_data][], which "
"is a library that currently provides both features (albeit in beta form) and w"
"hich is where we are focusing our efforts."
msgstr ""

msgid "## Sample data generation"
msgstr ""

msgid ""
"The core of the [stream_data][] library is `StreamData`: this module provides "
"all the functionalities related to generating sample data of many kinds. It in"
"cludes both data generators for data types (like integers or booleans) as well"
" as tools to combine other generators (such as `one_of(list_of_generators)`)."
msgstr ""

msgid ""
"Developers are not supposed to create generators from scratch, but use the pro"
"vided generators and the provided combinator functions to compose them. An exa"
"mple of a generator is the one returned by `StreamData.integer()`: this functi"
"on returns a generator that generates integers. Generators are infinite stream"
"s of terms that implement the `Enumerable` protocol. This means we can do oper"
"ations such as taking terms out of a generator through functions from `Enum` a"
"nd `Stream`:"
msgstr ""

msgid ""
"```elixir\n"
"Enum.take(StreamData.integer(), 5)\n"
"#=> [1, -1, 3, 4, 3]\n"
"```"
msgstr ""

msgid ""
"`StreamData` contains some functions to modify generators. For example, you ca"
"n build a generator of positive integers on top of `StreamData.integer()` and "
"`StreamData.map/2`:"
msgstr ""

msgid ""
"```elixir\n"
"generator = StreamData.map(StreamData.integer(), &abs/1)\n"
"Enum.take(generator, 5)\n"
"#=> [0, 1, 3, 3, 2]\n"
"```"
msgstr ""

msgid ""
"`StreamData.map/2` is encouraged over `Stream.map/2` because generators return"
" values that can shrink, which is something property-based testing takes advan"
"tage of as we'll see later on. When treated as enumerables, generators return "
"normal values that cannot be shrinked."
msgstr ""

msgid ""
"We decided to separate data-generation from property-based testing because it'"
"s something that developers can take advantage of in situations outside of pro"
"perty-based testing. For example, data streams can be used to seed a database "
"or to have randomly generated data available during regular tests."
msgstr ""

msgid "## Property-based testing"
msgstr ""

msgid "We often write tests like this:"
msgstr ""

msgid ""
"```elixir\n"
"test \"length/1 calculates the length of a list\" do\n"
"  assert length([]) == 0\n"
"  assert length([:one]) == 1\n"
"  assert length([1, 2, 3]) == 3\n"
"end\n"
"```"
msgstr ""

msgid ""
"This test is written using an *example-based approach*. We are writing both th"
"e input to the piece of software we are testing as well as the expected output"
", and the testing tool is verifying that running the software on the given inp"
"ut results in the expected output. This style of testing is common and useful "
"because it lets you get up and running easily and also lets you test known cor"
"ner cases in an explicit way. However, it's hard to test many cases this way a"
"nd even harder to uncover *unknown* corner cases that may reveal bugs in your "
"code."
msgstr ""

msgid ""
"Property-based testing is an intuitive way to fix some of the problems mention"
"ed above."
msgstr ""

msgid ""
"```elixir\n"
"property \"length/1 is always >= 0\" do\n"
"  check all list <- list_of(term()) do\n"
"    assert length(list) >= 0\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"With property-based testing, you specify a set of valid inputs (lists in the e"
"xample above) for your code and verify that your code holds some property for "
"values taken at random from the valid inputs. In the example above, the test t"
"akes many (usually around 100) values at random from the `list_of(term())` *ge"
"nerator* and verifies a property of `length/1`, that is, that `length/1` alway"
"s returns a non-negative integer. A generator is just a `StreamData` generator"
", as we discussed in the previous section."
msgstr ""

msgid "### Shrinking"
msgstr ""

msgid ""
"Since we're generating lots of random inputs to test, inputs that cause failur"
"es are often complex and convoluted. Take this trivial example of a property:"
msgstr ""

msgid ""
"```elixir\n"
"property \"list does not contain multiples of 4\" do\n"
"  check all list <- list_of(positive_integer()) do\n"
"    refute Enum.any?(list, &(rem(&1, 4) == 0))\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid "When running this property, the failure might trigger for a list like this:"
msgstr ""

msgid ""
"```elixir\n"
"[19, 12, 6, 11, 2, 20, 10]\n"
"```"
msgstr ""

msgid ""
"From this list, it's not easy to see why the test is failing (well, we know wh"
"y because we wrote a doctored test that's supposed to fail). When running the "
"property though, the failure that will be reported will look like this:"
msgstr ""

msgid ""
"```\n"
"1) property list does not contain multiples of 7 (MyPropertyTest)\n"
"   my_property_test.exs:6\n"
"   Failed with generated values (after 4 attempt(s)):"
msgstr ""

msgid ""
"       list <- list_of(positive_integer())\n"
"       #=> [4]"
msgstr ""

msgid ""
"   Expected false or nil, got true\n"
"   code: refute Enum.any?(list, &(rem(&1, 4) == 0))\n"
"```"
msgstr ""

msgid ""
"This error shows the minimal generated value that triggers the failure, that i"
"s, `[4]`. The process of finding the minimal generated value that triggers a f"
"ailure is called *shrinking*. All generators that come with `StreamData` gener"
"ate values that \"bundle\" a way to shrink them so that property-based testing c"
"an use this to provide the shrinking functionality. Shrinking is a fundamental"
" part of property-based testing as it takes out the *noise* of random-generate"
"d data to reduce the failing data to focused and easier-to-understand terms."
msgstr ""

msgid "### Using property-based testing in stream_data"
msgstr ""

msgid ""
"The core of property-based testing in stream_data is the `check all` macro. In"
" this macro, you list a bunch of generators and filters (very similarly to how"
" you would in `for` comprehensions) and then pass a body where you can verify "
"that a property holds for the generated data."
msgstr ""

msgid ""
"To make the `check all` macro available in your test, alongside importing all "
"functions from `StreamData`, you can `use ExUnitProperties`:"
msgstr ""

msgid ""
"```elixir\n"
"defmodule MyPropertyTest do\n"
"  use ExUnit.Case, async: true\n"
"  use ExUnitProperties"
msgstr ""

msgid ""
"  test \"the in/2 operator works with lists\" do\n"
"    check all list <- list_of(term()),\n"
"              list != [],\n"
"              elem <- member_of(list) do\n"
"      assert elem in list\n"
"    end\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"As you can see, we can filter generated data (`list != []`) directly in the `c"
"heck all` macro. We can also do simple assignments. The example above uses the"
" `check all` macro inside a regular `test`. If you want that your properties a"
"re reported as \"property\" at the end of an ExUnit test run, you can use the `p"
"roperty` macro instead:"
msgstr ""

msgid ""
"  property \"sum of positive integer is greater than both integers\" do\n"
"    check all list <- list_of(term()),\n"
"              list != [],\n"
"              elem <- member_of(list) do\n"
"      assert elem in list\n"
"    end\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"By doing this your properties will also be tagged with the `:property` tag, wh"
"ich means you will be able to do things like:"
msgstr ""

msgid ""
"```bash\n"
"mix test --only property\n"
"```"
msgstr ""

msgid "to run only properties."
msgstr ""

msgid ""
"There's not much more to the mechanics of stream_data. Most of the work you wi"
"ll have to do revolves around finding good properties to test for your code an"
"d writing good generators for the data over which you want to test. Head over "
"to [stream_data][]'s documentation for detailed documentation."
msgstr ""

msgid "### Advantages of property-based testing"
msgstr ""

msgid ""
"Using property-based testing has some advantages. First of all, it lets you te"
"st properties of your code over many more values than you otherwise would with"
" example-based testing. While it's true that random data generation can't cove"
"r all the possible values that a piece of code can deal with, the confidence i"
"n your codebase can still increase over time because the property-based tests "
"will likely generate different values on each run. Example-based testing means"
" your test data will not change over time."
msgstr ""

msgid ""
"Property-based testing however can also have a more powerful impact on the way"
" you design software. When you start writing property-based tests, you will st"
"art thinking about what guarantees your code provides and what properties it s"
"atisfies. If you write properties before writing code, this can easily influen"
"ce the way you write that code."
msgstr ""

msgid "### Learning resources"
msgstr ""

msgid ""
"Property-based testing is not something specific to Elixir. While having its r"
"oots in Haskell (check out the [original QuickCheck paper][quickcheck-paper] i"
"f you're interested), nowadays many languages have stable and usable implement"
"ations of it: Clojure has [test.check][], Python has [Hypothesis][], and many "
"more. One of the most famous and complete tools for property-based testing exi"
"sts for Erlang itself: [QuickCheck][] by Quviq is a complete commercial soluti"
"on for property-based testing in Erlang of both stateless as well as stateful "
"systems, and Quviq even provides a custom Erlang scheduler to test race condit"
"ions in your concurrent programs."
msgstr ""

msgid ""
"A young but awesome book about property-based testing written by Fred Hebert i"
"s also available at [propertesting.com][]. This book is a *proper* (pun intend"
"ed) guide to property-based testing and uses an Erlang library called [PropEr]"
"[]. However, the concepts and techniques perfectly apply to Elixir and stream_"
"data as well."
msgstr ""

msgid "## Why include property-based testing in Elixir (and rewriting from scratch)"
msgstr ""

msgid ""
"The community has expressed some concern regarding two main things: why do we "
"want to include a property-based testing tool in Elixir's standard library? An"
"d why write such a tool from scratch instead of using one of the existing Erla"
"ng or Elixir solutions?"
msgstr ""

msgid ""
"The answer to the first question is that we believe providing such a tool in t"
"he standard library will encourage developers to use property-based testing an"
"d ultimately improve their software and the way they write it. At the same tim"
"e, we want to be able to use property-based testing to test the Elixir codebas"
"e itself (which already turned out great [in the past][quickcheck-pr])."
msgstr ""

msgid ""
"The reasons for writing a new property-based testing library from scratch are "
"best explained by José in [this ElixirForum post][elixirforum-post]:"
msgstr ""

msgid ""
"> * Since we want to bundle it as part of Elixir, the code should be open sour"
"ce with an appropriate license.\n"
"> * We wanted to add both data generation and property testing to Elixir. That"
"'s why the library is called stream_data instead of something named after prop"
"erty tests. The goal is to reduce the learning curve behind property testing b"
"y exposing the data generation aspect as streams, which is a known construct t"
"o most Elixir developers. We had this approach in mind for a while and the fir"
"st library we saw leveraging this in practice was [@pragdave's pollution][poll"
"ution].\n"
"> * Finally, since the core team are taking the responsibility of maintaining "
"property testing as part of Elixir for potentially the rest of our lives, we w"
"ant to have full understanding of every single line of code. This is non-negot"
"iable as it guarantees we can continue to consistently improve the code as we "
"move forward.\n"
">\n"
"> We understand rolling our own implementation has its downsides, especially s"
"ince it lacks maturity compared to alternatives, but we balance it by actively"
" seeking input from knowledgeable folks and by listening to the feedback that "
"comes from the community, which we are very thankful for."
msgstr ""

msgid "## Roadmap"
msgstr ""

msgid ""
"stream_data and the functionalities it includes are scheduled to be included i"
"n one of the next two Elixir releases, likely 1.6 but possibly 1.7. We have us"
"ed the names `StreamData` and `ExUnitProperties` to avoid conflicts when those"
" modules are eventually merged into Elixir. When merged, they will be renamed "
"to the proper `Stream.Data` and `ExUnit.Properties` modules. Right now, all de"
"velopment is happening in the [stream_data][] repository, where we are discuss"
"ing features and giving users a chance to try out the functionalities early on"
". We'd love for anyone to get involved in trying stream_data and we'd love fee"
"dback!"
msgstr ""

msgid ""
"[stream_data]: https://github.com/whatyouhide/stream_data\n"
"[quickcheck-paper]: http://www.cs.tufts.edu/~nr/cs257/archive/john-hughes/quic"
"k.pdf\n"
"[test.check]: https://github.com/clojure/test.check\n"
"[Hypothesis]: https://github.com/HypothesisWorks/hypothesis-python\n"
"[QuickCheck]: http://quviq.com\n"
"[propertesting.com]: http://propertesting.com\n"
"[PropEr]: https://github.com/manopapad/proper\n"
"[quickcheck-pr]: https://github.com/elixir-lang/elixir/pull/5022#issuecomment-"
"233195478\n"
"[pollution]: https://github.com/pragdave/pollution\n"
"[elixirforum-post]: https://elixirforum.com/t/questions-about-property-testing"
"-stream-data/9445/47"
msgstr ""
