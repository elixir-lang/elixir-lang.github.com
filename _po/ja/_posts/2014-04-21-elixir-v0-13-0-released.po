msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2017-10-30 15:10+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"layout: post\n"
"title: Elixir v0.13.0 released, hex.pm and ElixirConf announced\n"
"author: JosÃ© Valim\n"
"category: Releases\n"
"excerpt: \"Elixir v0.13.0 comes with substantial improvements to the language: "
"maps, structs, comprehensiona and more. It also marks the announcement of the "
"hex.pm package manager and the announcment of ElixirConf!\"\n"
"---"
msgstr ""

msgid "Hello folks!"
msgstr ""

msgid ""
"Elixir v0.13.0 has been released. It contains changes that will effectively sh"
"ape how developers will write Elixir code from now on, making it an important "
"milestone towards v1.0! On this post we are going to cover some of those chang"
"es, the road to Elixir v1.0, as well as the announcement of [hex.pm](https://h"
"ex.pm)."
msgstr ""

msgid "Before we go into the changes, let's briefly talk about ElixirConf!"
msgstr ""

msgid "## ElixirConf"
msgstr ""

msgid ""
"We are excited to announce [ElixirConf](http://elixirconf.com), the first ever"
" Elixir conference, happening July 25-26, 2014 in Austin, TX. The Call For Pro"
"posals is open and we are waiting for your talks!"
msgstr ""

msgid ""
"The registration is also open and we hope you will join us on this exciting ev"
"ent. We welcome Elixir developers and enthusiasts that are looking forward to "
"be part of our thrilling community!"
msgstr ""

msgid "## Summary"
msgstr ""

msgid "In a nutshell, here is what new:"
msgstr ""

msgid "* Elixir now runs on and requires Erlang R17;"
msgstr ""

msgid ""
"* With Erlang R17, Elixir also adds support for maps, which are key-value data"
" structures that supports pattern matching. We'll explore maps, their features"
" and limitations in this post;"
msgstr ""

msgid ""
"* Elixir v0.13 also provides structs, an alternative to Elixir records. Struct"
"s are more flexible than records, provide faster polymorphic operations, and s"
"till provide the same compile-time guarantees many came to love in records;"
msgstr ""

msgid ""
"* The [Getting Started guide](/getting-started/introduction.html) was rewritte"
"n from scratch. The previous guide was comprised of 7 chapters and was about t"
"o become 2 years old. The new guide features 20 chapters, it explores the new "
"maps and structs (which are part of this release), and it goes deeper into top"
"ics like IO and File handling. It also includes an extra guide, still in devel"
"opment, about [Meta-Programming in Elixir](/getting-started/meta/quote-and-unq"
"uote.html);"
msgstr ""

msgid ""
"* Elixir v0.13 provides a new comprehension syntax that not only works with li"
"sts, but with any [`Enumerable`](https://hexdocs.pm/elixir/Enumerable.html). T"
"he output of a comprehension is also extensible via the [`Collectable`](https:"
"//hexdocs.pm/elixir/Collectable.html) protocol;"
msgstr ""

msgid ""
"* Mix, Elixir's build tool, has been improved in order to provide better workf"
"lows when compiling projects and working with dependencies;"
msgstr ""

msgid ""
"* There are many other changes, like the addition of [StringIO](https://hexdoc"
"s.pm/elixir/StringIO.html), support for [tags and filters in ExUnit](https://h"
"exdocs.pm/ex_unit/ExUnit.Case.html) and more. Please check the [CHANGELOG](htt"
"ps://github.com/elixir-lang/elixir/blob/v0.13.0/CHANGELOG.md) for the complete"
" list."
msgstr ""

msgid ""
"Even with all those improvements, Elixir v0.13.0 is backwards compatible with "
"Elixir v0.12.5 and upgrading should be a clean process."
msgstr ""

msgid "## Maps"
msgstr ""

msgid "Maps are key-value data structures:"
msgstr ""

msgid ""
"```iex\n"
"iex> map = %{\"hello\" => :world}\n"
"%{\"hello\" => :world}\n"
"iex> map[\"hello\"]\n"
":world\n"
"iex> map[:other]\n"
"nil\n"
"```"
msgstr ""

msgid "Maps do not have a explicit ordering and keys and values can be any term."
msgstr ""

msgid "Maps can be pattern matched on:"
msgstr ""

msgid ""
"```iex\n"
"iex> %{\"hello\" => world} = map\n"
"%{\"hello\" => :world}\n"
"iex> world\n"
":world\n"
"iex> %{} = map\n"
"%{\"hello\" => :world}\n"
"iex> %{\"other\" => value} = map\n"
"** (MatchError) no match of right hand side value\n"
"```"
msgstr ""

msgid ""
"A map pattern will match any map that has all the keys specified in the patter"
"n. The values for the matching keys must also match. For example, `%{\"hello\" ="
"> world}` will match any map that has the key `\"hello\"` and assign the value t"
"o `world`, while `%{\"hello\" => \"world\"}` will match any map that has the key `"
"\"hello\"` with value equals to `\"world\"`. An empty map pattern (`%{}`) will mat"
"ch all maps."
msgstr ""

msgid ""
"Developers can use the functions in the [`Map` module](https://hexdocs.pm/elix"
"ir/Map.html) to work with maps. For more information on maps and how they comp"
"are to other associative data structures in the language, please check the [Ma"
"ps chapter in our new Getting Started guide](/getting-started/keywords-and-map"
"s.html). Elixir Sips has also released two episodes that cover maps ([part 1]("
"http://elixirsips.com/episodes/054_maps_part_1.html) and [part 2](http://elixi"
"rsips.com/episodes/055_maps_part_2.html))."
msgstr ""

msgid ""
"Maps also provide special syntax for creating, accessing and updating maps wit"
"h atom keys:"
msgstr ""

msgid ""
"```iex\n"
"iex> user = %{name: \"john\", age: 27}\n"
"%{name: \"john\", age: 27}\n"
"iex> user.name\n"
"\"john\"\n"
"iex> user = %{user | name: \"meg\"}\n"
"%{name: \"meg\", age: 27}\n"
"iex> user.name\n"
"\"meg\"\n"
"```"
msgstr ""

msgid ""
"Both access and update syntax above expect the given keys to exist. Trying to "
"access or update a key that does not exist raises an error:"
msgstr ""

msgid ""
"```iex\n"
"iex> %{ user | address: [] }\n"
"** (ArgumentError) argument error\n"
"     :maps.update(:address, [], %{})\n"
"```"
msgstr ""

msgid ""
"As we will see, this functionality becomes very useful when working with struc"
"ts."
msgstr ""

msgid "## Structs"
msgstr ""

msgid ""
"Structs are meant to replace Elixir records. Records in Elixir are simply tupl"
"es supported by modules which store record metadata:"
msgstr ""

msgid ""
"```elixir\n"
"defrecord User, name: nil, age: 0\n"
"```"
msgstr ""

msgid "Internally, this record is represented as the following tuple:"
msgstr ""

msgid ""
"```elixir\n"
"# {tag, name, age}\n"
"{User, nil, 0}\n"
"```"
msgstr ""

msgid "Records can also be created and pattern matched on:"
msgstr ""

msgid ""
"```iex\n"
"iex> user = User[name: \"john\"]\n"
"User[name: \"john\", age: 0]\n"
"iex> user.name\n"
"\"john\"\n"
"iex> User[name: name] = user\n"
"User[name: \"john\", age: 0]\n"
"iex> name\n"
"\"john\"\n"
"```"
msgstr ""

msgid ""
"Pattern matching works because the record meta-data is stored in the User modu"
"le which can be accessed when building patterns."
msgstr ""

msgid ""
"However, records came with their own issues. First of all, since records were "
"made of data (the underlying tuple) and a module (functions/behaviour), they w"
"ere frequently misused as an attempt to bundle data and behaviour together in "
"Elixir, for example:"
msgstr ""

msgid ""
"```elixir\n"
"defrecord User, name: nil, age: 0 do\n"
"  def first_name(self) do\n"
"    self.name |> String.split |> Enum.at(0)\n"
"  end\n"
"end"
msgstr ""

msgid ""
"User[name: \"john doe\"].first_name #=> \"john\"\n"
"```"
msgstr ""

msgid ""
"Not only that, records were often slow in protocol dispatches because every tu"
"ple can potentially be a record, sometimes leading to expensive checks at runt"
"ime."
msgstr ""

msgid ""
"Since maps are meant to replace many cases of records in Erlang, we saw with t"
"he introduction of maps the perfect opportunity to revisit Elixir records as w"
"ell. In order to understand the reasoning behind structs, let's list the featu"
"res we got from Elixir records:"
msgstr ""

msgid ""
"1. A way to organize data by fields\n"
"2. Efficient in-memory representation and operations\n"
"3. Compile-time structures with compile-time errors\n"
"4. The basic foundation for polymorphism in Elixir"
msgstr ""

msgid ""
"Maps naturally solve issues `1.` and `2.` above. In particular, maps that have"
" same keys share the same key-space in memory. That's why the update operation"
" `%{map | ...}` we have seen above is relevant: if we know we are updating an "
"existing key, the new map created as result of the update operation can share "
"the same key space as the old map without extra checks. For more details on wh"
"y Maps are efficient, I would recommend [reading Joe's blog post on the matter"
"](http://joearms.github.io/2014/02/01/big-changes-to-erlang.html)."
msgstr ""

msgid ""
"Structs were added to address features `3.` and `4.`. A struct needs to be exp"
"licitly defined via `defstruct`:"
msgstr ""

msgid ""
"```elixir\n"
"defmodule User do\n"
"  defstruct name: nil, age: 0\n"
"end\n"
"```"
msgstr ""

msgid ""
"Now a `User` struct can be created without a need to explicitly list all neces"
"sary fields:"
msgstr ""

msgid ""
"```iex\n"
"iex> user = %User{name: \"john\"}\n"
"%User{name: \"john\", age: 0}\n"
"```"
msgstr ""

msgid ""
"Trying to create a struct with an unknown key raises an error during compilati"
"on:"
msgstr ""

msgid ""
"```iex\n"
"iex> user = %User{address: []}\n"
"** (CompileError) unknown key :address for struct User\n"
"```"
msgstr ""

msgid ""
"Furthermore, every struct has a `__struct__` field which contains the struct n"
"ame:"
msgstr ""

msgid ""
"```iex\n"
"iex> user.__struct__\n"
"User\n"
"```"
msgstr ""

msgid ""
"The `__struct__` field is also used for polymorphic dispatch in protocols, add"
"ressing issue `4.`."
msgstr ""

msgid ""
"It is interesting to note that structs solve both drawbacks we have earlier me"
"ntioned regarding records. Structs are purely data and polymorphic dispatch is"
" now faster and more robust as it happens only for explicitly tagged structs."
msgstr ""

msgid ""
"For more information on structs, check out the [Structs chapter in the getting"
" started guide](/getting-started/structs.html) (you may also want to read the "
"new [Protocols chapter](/getting-started/protocols.html) after it)."
msgstr ""

msgid "## Maps, structs and the future"
msgstr ""

msgid ""
"With the introduction of maps and structs, some deprecations will arrive on up"
"coming releases. First of all, the `ListDict` data structure is being deprecat"
"ed and phased out. Records are also being deprecated from the language, althou"
"gh it is going to be a longer process, as many projects and Elixir itself stil"
"l use records in diverse occasions."
msgstr ""

msgid ""
"Note though only Elixir records are being deprecated. Erlang records, which ar"
"e basically syntax sugar around tuples, will remain in the language for the ra"
"re cases Elixir developers need to interact with Erlang libraries that provide"
" records. In particular, the [Record](https://hexdocs.pm/elixir/Record.html) h"
"as been updated to provide the new Record API (while keeping the old one for b"
"ackwards compatibility)."
msgstr ""

msgid ""
"Finally, structs are still in active development and new features, like `@deri"
"ve`, should land in upcoming Elixir releases. For those interested, the [origi"
"nal maps and structs proposal is still availble](https://gist.github.com/josev"
"alim/b30c881df36801611d13)."
msgstr ""

msgid "## Comprehensions"
msgstr ""

msgid ""
"Erlang R17 also introduced recursion to anonymous functions. This feature, whi"
"le still not available from Elixir, allows Elixir to provide a more flexible a"
"nd extensible comprehension syntax."
msgstr ""

msgid ""
"The most common use case of a comprehension are [list comprehensions](https://"
"en.wikipedia.org/wiki/List_comprehension). For example, we can get all the squ"
"are values of elements in a list as follows:"
msgstr ""

msgid ""
"```iex\n"
"iex> for n <- [1, 2, 3, 4], do: n * n\n"
"[1, 4, 9, 16]\n"
"```"
msgstr ""

msgid ""
"We say the `n <- [1, 2, 3, 4]` part is a comprehension generator. In previous "
"Elixir versions, Elixir supported only lists in generators. In Elixir v0.13.0,"
" any Enumerable is supported (ranges, maps, etc):"
msgstr ""

msgid ""
"```iex\n"
"iex> for n <- 1..4, do: n * n\n"
"[1, 4, 9, 16]\n"
"```"
msgstr ""

msgid ""
"As in previous Elixir versions, there is also support for a bitstring generato"
"r. In the example below, we receive a stream of RGB pixels as a binary and bre"
"ak it down into triplets:"
msgstr ""

msgid ""
"```iex\n"
"iex> pixels = <<213, 45, 132, 64, 76, 32, 76, 0, 0, 234, 32, 15>>\n"
"iex> for <<r::8, g::8, b::8 <- pixels>>, do: {r, g, b}\n"
"[{213, 45, 132}, {64, 76, 32}, {76, 0, 0}, {234, 32, 15}]\n"
"```"
msgstr ""

msgid ""
"By default, a comprehension returns a list as a result. However the result of "
"a comprehension can be inserted into different data structures by passing the "
"`:into` option. For example, we can use bitstring generators with the `:into` "
"option to easily remove all spaces in a string:"
msgstr ""

msgid ""
"```iex\n"
"iex> for <<c <- \" hello world \">>, c != ?\\s, into: \"\", do: <<c>>\n"
"\"helloworld\"\n"
"```"
msgstr ""

msgid ""
"Sets, maps and other dictionaries can also be given with the `:into` option. I"
"n general, the `:into` accepts any structure as long as it implements the [`Co"
"llectable` protocol](https://hexdocs.pm/elixir/Collectable.html)."
msgstr ""

msgid ""
"For example, the `IO` module provides streams, that are both `Enumerable` and "
"`Collectable`. You can implement an echo terminal that returns whatever is typ"
"ed into the shell, but in upcase, using comprehensions:"
msgstr ""

msgid ""
"```iex\n"
"iex> stream = IO.stream(:stdio, :line)\n"
"iex> for line <- stream, into: stream do\n"
"...>   String.upcase(line) <> \"\n"
"\"\n"
"...> end\n"
"```"
msgstr ""

msgid ""
"This makes comprehensions useful not only for working with in-memory collectio"
"ns but also with files, io devices, and other sources. In future releases, we "
"will continue exploring how to make comprehensions more expressive, following "
"in the footsteps of other functional programming research on the topic (like C"
"omprehensive Comprehensions and Parallel Comprehensions)."
msgstr ""

msgid "## Mix workflows"
msgstr ""

msgid ""
"The last big change we want to discuss in this release are the improvements do"
"ne to Mix, Elixir's build tool. Mix is an essential tool to Elixir developers "
"and helps developers to compile their projects, manage their dependencies, run"
" tests and so on."
msgstr ""

msgid ""
"In previous releases, Mix was used to download and compile dependencies per en"
"vironment. That meant the usual workflow was less than ideal: every time a dep"
"endency was updated, developers had to explicitly fetch and compile the depend"
"encies for each environment. The workflow would be something like:"
msgstr ""

msgid ""
"```bash\n"
"$ mix deps.get\n"
"$ mix compile\n"
"$ MIX_ENV=test mix deps.get\n"
"$ mix test\n"
"```"
msgstr ""

msgid ""
"In Elixir v0.13, `mix deps.get` only fetches dependencies and it does so accro"
"ss all environments (unless an `--only` flag is specified). To support this ne"
"w behaviour, dependencies now support the `:only` option:"
msgstr ""

msgid ""
"```elixir\n"
"def deps do\n"
"  [{:ecto, github: \"elixir-lang/ecto\"},\n"
"   {:hackney, github: \"benoitc/hackney\", only: [:test]}]\n"
"end\n"
"```"
msgstr ""

msgid ""
"Dependencies now are also automatically compiled before you run a command. For"
" example, `mix compile` will automatically compile pending dependencies for th"
"e current environment. `mix test` will do the same for test dependencies and s"
"o on, interrupting less the developer workflow."
msgstr ""

msgid "## hex.pm"
msgstr ""

msgid ""
"This release also marks the announcement of [hex.pm](https://hex.pm/), a packa"
"ge manager for the Erlang VM. Hex allows you to package and publish your proje"
"cts while fetching them and performing dependency resolution in your applicati"
"ons."
msgstr ""

msgid ""
"Currently Hex only integrates with Mix and contributions to extend it to other"
" tools and other languages in the Erlang VM are welcome!"
msgstr ""

msgid "## The next steps"
msgstr ""

msgid ""
"As seen in this announcement, this release dictates many of the developments t"
"hat will happen in Elixir and its community in the following weeks. All projec"
"ts are recommended to start moving from records to structs, paving the way for"
" the deprecation of records before 1.0."
msgstr ""

msgid ""
"The next months will also focus on integrating Elixir more tightly to OTP. Dur"
"ing the keynote at Erlang Factory, [Catalyse Change](https://www.youtube.com/w"
"atch?v=Djv4C9H9yz4), Dave Thomas and I argued that there are many useful patte"
"rns, re-implemented everyday by developers, that could make development more p"
"roductive within the Erlang VM if exposed accordingly."
msgstr ""

msgid "That said, in the next months we plan to:"
msgstr ""

msgid ""
"* Integrate applications configuration (provided by OTP) right into Mix;\n"
"* Provide an Elixir logger that knows how to print and format Elixir exception"
"s and stacktraces;\n"
"* Properly expose the functionality provided by Applications, Supervisors, Gen"
"Servers and GenEvents and study how they can integrate with Elixir. For exampl"
"e, how to consume events from GenEvent as a [stream of data](https://hexdocs.p"
"m/elixir/Stream.html)?\n"
"* Study how patterns like tasks and agents can be integrated into the language"
", often picking up the lessons learned by libraries like [e2](http://e2project"
".org/erlang.html) and [functionality exposed by OTP itself](http://www.erlang."
"org/doc/man/rpc.html);\n"
"* Rewrite the Mix and ExUnit guides to focus on applications and OTP as a whol"
"e, rebranding it to \"Building Apps with Mix and OTP\";"
msgstr ""

msgid ""
"You can learn more about Elixir in our [Getting Started guide](/getting-starte"
"d/introduction.html) and download this release in the [v0.13 announcement](htt"
"ps://github.com/elixir-lang/elixir/releases/tag/v0.13.0). We hope to see you a"
"t [ElixirConf](http://elixirconf.com/) as well as pushing your packages to [he"
"x.pm](https://hex.pm/)."
msgstr ""
