msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2017-10-30 15:10+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"layout: post\n"
"title: Elixir v1.2 released\n"
"author: JosÃ© Valim\n"
"category: Releases\n"
"excerpt: Elixir v1.2 brings enhancements, bug fixes, performance improvements "
"and more into Elixir.\n"
"---"
msgstr ""

msgid ""
"v1.2 brings enhancements, bug fixes, performance improvements and more into El"
"ixir. Elixir v1.2 relies on many features in Erlang 18, requiring at least Erl"
"ang 18+. Upgrading to Erlang 18 is therefore necessary before upgrading Elixir"
"."
msgstr ""

msgid ""
"To celebrate this release and the new year, we have also reviewed both the [Ge"
"tting Started](http://elixir-lang.org/getting-started/introduction.html) and ["
"Mix & OTP](http://elixir-lang.org/getting-started/mix-otp/introduction-to-mix."
"html) guides, bringing it up to date and exploring new functionalities added s"
"ince Elixir v1.0."
msgstr ""

msgid "## Erlang 18 support"
msgstr ""

msgid "We have brought many features specific to Erlang 18. Here are the highlights:"
msgstr ""

msgid ""
"  * Maps can now scale from dozens to millions of keys. Therefore, usage of th"
"e modules `Dict` and `HashDict` is now discouraged and will be deprecated in f"
"uture releases, instead use `Map`. Similarly, `Set` and `HashSet` will be depr"
"ecated in favor of `MapSet`\n"
"  * Compilation times are ~15% faster on average due to improvements in both t"
"he Elixir and Erlang compilers and by using maps more extensively in the compi"
"lation stack\n"
"  * Dialyzer now emits less false negative warnings thanks to new annotations "
"available in the Erlang compiler"
msgstr ""

msgid "## Language improvements"
msgstr ""

msgid "This release includes many notable language improvements."
msgstr ""

msgid ""
"The first of them was the addition of multi aliases/imports/require. Often dev"
"elopers would write:"
msgstr ""

msgid ""
"```elixir\n"
"alias MyApp.Foo\n"
"alias MyApp.Bar\n"
"alias MyApp.Baz\n"
"```"
msgstr ""

msgid "Now it can be written in one line by using the new multi syntax:"
msgstr ""

msgid ""
"```elixir\n"
"alias MyApp.{Foo, Bar, Baz}\n"
"```"
msgstr ""

msgid "We have also added support for variables in map keys. Now you can write:"
msgstr ""

msgid ""
"```iex\n"
"iex> key = :hello\n"
"iex> value = \"world\"\n"
"iex> %{key => value}\n"
"%{:hello => \"world\"}\n"
"```"
msgstr ""

msgid ""
"Furthermore, variables can also be used on pattern matching along-side the pin"
" operator:"
msgstr ""

msgid ""
"```elixir\n"
"iex> key = :hello\n"
"iex> %{^key => value} = %{:hello => \"another world\"}\n"
"iex> value\n"
"\"another world\"\n"
"```"
msgstr ""

msgid ""
"Finally, Elixir v1.2 introduces the `with` special form that allows developers"
" to match on multiple expressions concisely. Previously, one would write"
msgstr ""

msgid ""
"```elixir\n"
"case File.read(\"my_file.ex\") do\n"
"  {:ok, contents} ->\n"
"    case Code.eval_string(contents) do\n"
"      {res, _binding} ->\n"
"        {:ok, res}\n"
"      error ->\n"
"        error\n"
"  error -> error\n"
"    error\n"
"end\n"
"```"
msgstr ""

msgid "such can now be rewritten as"
msgstr ""

msgid ""
"```elixir\n"
"with {:ok, contents} <- File.read(\"my_file.ex\"),\n"
"     {res, binding} <- Code.eval_string(contents),\n"
"     do: {:ok, res}\n"
"```"
msgstr ""

msgid ""
"`with` will match each left side of `<-` against the right side, executing exp"
"ressions until one of those match fails or until the `do: expression` is perfo"
"rmed. In case a match fails, the non-matching result is returned."
msgstr ""

msgid "These improvements aim to make the language more consistent and expressive."
msgstr ""

msgid "## Getting started experience"
msgstr ""

msgid ""
"We have also improved both the parser and compiler to be more aware of languag"
"e constructs, emitting warnings on common pitfalls like when piping to express"
"ions without parentheses or when defining unsafe variables. Such improvements "
"will point developers to the more idiomatic way of writing Elixir code early o"
"n."
msgstr ""

msgid ""
"Elixir v1.2 also introduces the `i/1` helper in IEx, which allows developers t"
"o retrieve information about any data type. This will help newcomers explore t"
"he language values while providing experienced developers with crucial informa"
"tion about the value they are introspecting. For example, giving a PID to `i/1"
"` will show if it has a registered name, linked processes and more. Giving it "
"a module, like `i(String)`, shows compile-time information and others."
msgstr ""

msgid ""
"All of those improvements tie nicely with our updates to the Getting Started g"
"uide, ensuring learning Elixir is more fun and efficient than ever before."
msgstr ""

msgid "## Workflow improvements"
msgstr ""

msgid ""
"One of Elixir goals is to build upon the abstractions provided by Erlang/OTP a"
"nd make them more productive by focusing on the tooling aspect."
msgstr ""

msgid ""
"One of such efforts resulted in \"Umbrella Projects\", which allows developers t"
"o build multiple applications side-by-side, but still run and test them in iso"
"lation when desired. Because each application contains its own configuration, "
"supervision tree and initialization cycle, this gives developers the proper me"
"chanisms to break monolithic applications apart without introducing the comple"
"xity of managing multiple, different repositories."
msgstr ""

msgid ""
"Up to this release, umbrella applications shared mostly dependencies, which me"
"ant each application still had their own build directory and their own compila"
"tion cycle. Elixir v1.2 allows developers to also share both build and configu"
"ration files. This change allows teams to drastically reduce compilation times"
" in umbrella projects by adding the following configuration to each umbrella a"
"pp's `mix.exs` file:"
msgstr ""

msgid ""
"```elixir\n"
"build_path: \"../../_build\",\n"
"config_path: \"../../config/config.exs\",\n"
"```"
msgstr ""

msgid ""
"Umbrella applications generated with Elixir v1.2 will by default include this "
"configuration. The downside of this approach is that applications are a bit le"
"ss isolated, since configuration is now shared across all projects, although d"
"evelopers can revert back to the previous behaviour by simply removing the fla"
"gs above."
msgstr ""

msgid ""
"Finally, Mix will now consolidate protocols by default as we are now able to c"
"onsolidate in parallel and cache the consolidation results, providing the best"
" performance across all environments without affecting compilation times."
msgstr ""

msgid ""
"These are great additions on top of the faster compilation times we have achie"
"ved when migrating to Erlang 18."
msgstr ""

msgid "## Rebar 3 support"
msgstr ""

msgid ""
"With Rebar 3 gaining more adoption in the Erlang community, Mix is now able to"
" fetch and compile Rebar 3 dependencies. This feature is currently experimenta"
"l and therefore opt-in: if you have a Rebar 3 dependency, you can ask Mix to u"
"se Rebar 3 to compile it by passing the `manager: :rebar3` option. Once config"
"ured, Mix will prompt you to install Rebar 3 if it is not yet available."
msgstr ""

msgid ""
"The full list of changes is available in our [release notes](https://github.co"
"m/elixir-lang/elixir/releases/tag/v1.2.0). Don't forget to check [the Install "
"section](/install.html) to get Elixir installed and our [Getting Started guide"
"](http://elixir-lang.org/getting-started/introduction.html) to learn more."
msgstr ""

msgid "Happy coding!"
msgstr ""
