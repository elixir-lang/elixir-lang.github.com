msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2017-10-30 15:10+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"layout: post\n"
"title: Elixir v1.5 released\n"
"author: José Valim\n"
"category: Releases\n"
"excerpt: Elixir v1.5 integrates with Erlang/OTP 20 and bring changes that impr"
"oves the language reach and the developer experience\n"
"---"
msgstr ""

msgid ""
"Elixir v1.5 includes new features, enhancements, and bug fixes. While [Elixir "
"v1.4](/blog/2017/01/05/elixir-v1-4-0-released/) focused on tools for concurren"
"cy and scalability, Elixir v1.5 brings many improvements to the developer expe"
"rience and quality of life. As we will see, many of those are powered by the l"
"atest Erlang/OTP 20. This is also the last Elixir release that supports Erlang"
"/OTP 18."
msgstr ""

msgid ""
"Note: this announcement contains [asciinema](https://asciinema.org) snippets. "
"You may need to enable 3rd-party JavaScript on this site in order to see them."
" If JavaScript is disabled, noscript tags with the proper links will be shown."
msgstr ""

msgid "## UTF-8 atoms, function names and variables"
msgstr ""

msgid ""
"Elixir v1.5 supports non-quoted atoms and variables to be in UTF-8 when using "
"Erlang/OTP 20. For example:"
msgstr ""

msgid ""
"```elixir\n"
"test \"こんにちは世界\" do\n"
"  assert :こんにちは世界\n"
"end\n"
"```"
msgstr ""

msgid "Or:"
msgstr ""

msgid ""
"```elixir\n"
"saudação = \"Bom dia!\"\n"
"```"
msgstr ""

msgid ""
"Elixir follows the recommendations in [Unicode Annex #31](http://unicode.org/r"
"eports/tr31/) to make Elixir more accessible to other languages and communitie"
"s. Identifiers must still be a sequence of letters, followed by digits and com"
"bining marks. This means symbols, such as mathematical notations and emoji, ar"
"e not allowed in identifiers."
msgstr ""

msgid ""
"For a complete reference on Elixir syntax, see the [Syntax Reference](https://"
"hexdocs.pm/elixir/1.5/syntax-reference.html). For technical details on Unicode"
" support, see [Unicode Syntax](https://hexdocs.pm/elixir/1.5/unicode-syntax.ht"
"ml)."
msgstr ""

msgid "## IEx helpers and breakpoints"
msgstr ""

msgid "IEx got many enhancements to the developer experience."
msgstr ""

msgid ""
"First of all, the autocompletion system is now capable of autocompleting varia"
"bles and user imports:"
msgstr ""

msgid ""
"<script type=\"text/javascript\" src=\"https://asciinema.org/a/iAOk0yaZtQDsuJqn2s"
"Xa1FRQW.js\" id=\"asciicast-iAOk0yaZtQDsuJqn2sXa1FRQW\" async></script><noscript>"
"<p><a href=\"https://asciinema.org/a/iAOk0yaZtQDsuJqn2sXa1FRQW\">See the example"
" in asciinema</a></p></noscript>"
msgstr ""

msgid ""
"IEx also got new functions, such as `exports/1`, for listing all functions and"
" macros in a module, and the new `runtime_info/0`:"
msgstr ""

msgid ""
"<script type=\"text/javascript\" src=\"https://asciinema.org/a/NT3xvSaB8f1vv7yaTv"
"zaoJxBD.js\" id=\"asciicast-NT3xvSaB8f1vv7yaTvzaoJxBD\" async></script><noscript>"
"<p><a href=\"https://asciinema.org/a/NT3xvSaB8f1vv7yaTvzaoJxBD\">See the example"
" in asciinema</a></p></noscript>"
msgstr ""

msgid ""
"Finally, IEx also features a breakpoint system for code debugging when running"
" on Erlang/OTP 20. The following functions have been added to aid debugging:"
msgstr ""

msgid ""
"  * `break!/2` - sets up a breakpoint for a given `Mod.fun/arity`\n"
"  * `break!/4` - sets up a breakpoint for the given module, function, arity\n"
"  * `breaks/0` - prints all breakpoints and their ids\n"
"  * `continue/0` - continues until the next breakpoint in the same process\n"
"  * `open/0` - opens editor on the current breakpoint\n"
"  * `remove_breaks/0` - removes all breakpoints in all modules\n"
"  * `remove_breaks/1` - removes all breakpoints in a given module\n"
"  * `reset_break/1` - sets the number of stops on the given id to zero\n"
"  * `reset_break/3` - sets the number of stops on the given module, function, "
"arity to zero\n"
"  * `respawn/0` - starts a new shell (breakpoints will ask for permission once"
" more)\n"
"  * `whereami/1` - shows the current location"
msgstr ""

msgid "Let's see an example:"
msgstr ""

msgid ""
"<script type=\"text/javascript\" src=\"https://asciinema.org/a/0h3po0AmTcBAorc5GB"
"NU97nrs.js\" id=\"asciicast-0h3po0AmTcBAorc5GBNU97nrs\" async></script><noscript>"
"<p><a href=\"https://asciinema.org/a/0h3po0AmTcBAorc5GBNU97nrs\">See the example"
" in asciinema</a></p></noscript>"
msgstr ""

msgid ""
"In the snippet above we set a breakpoint in the `URI.decode_query/2` function,"
" which is then triggered when invoked the function. We used `whereami/1` to ge"
"t more information about the surrounded code and we were also able to access t"
"he variables at place of debugging. From there, we can either set more breakpo"
"ints, remove existing breakpoints and continue execution. The session ended by"
" calling `open`, which will open your editor at the file and line under debugg"
"ing. `open/1` can also be invoked by passing any module or function, and IEx w"
"ill open your editor at that place."
msgstr ""

msgid ""
"The debugging functions improve the experience both within IEx and during test"
"ing. For example, if you are debugging a Phoenix application, you can start `I"
"Ex` while running your test suite with `iex -S mix test --trace` and then call"
" `IEx.break!(MyAppWeb.UserController.index/2)` to debug the `index` action of "
"the `UserController`. Note we gave the `--trace` flag to `mix test`, which ens"
"ures only one test runs at a time and removes any timeouts from the suite."
msgstr ""

msgid "## Exception.blame"
msgstr ""

msgid ""
"`Exception.blame/3` is a new function in Elixir that is capable of attaching d"
"ebug information to certain exceptions. Currently this is used to augment `Fun"
"ctionClauseError`s with a summary of all clauses and which parts of clause mat"
"ch and which ones didn't. Let's try it out:"
msgstr ""

msgid ""
"<script type=\"text/javascript\" src=\"https://asciinema.org/a/EgQUdDe1CIz90EYYei"
"piS8jo8.js\" id=\"asciicast-EgQUdDe1CIz90EYYeipiS8jo8\" async></script><noscript>"
"<p><a href=\"https://asciinema.org/a/EgQUdDe1CIz90EYYeipiS8jo8\">See the example"
" in asciinema</a></p></noscript>"
msgstr ""

msgid ""
"In the example above, an argument that did not match or guard that did not eva"
"luate to true are shown between in red. If the terminal does not support ANSI "
"coloring, they are wrapped in `-` instead of shown in red."
msgstr ""

msgid ""
"Since blaming an exception can be expensive, `Exception.blame/3` must be used "
"exclusively in debugging situations. It is not advised to apply it to producti"
"on components such as a Logger. This feature has been integrated into the comp"
"iler, the command line, ExUnit and IEx."
msgstr ""

msgid "This feature also requires Erlang/OTP 20."
msgstr ""

msgid "## Streamlined child specs"
msgstr ""

msgid ""
"Elixir v1.5 streamlines how supervisors are defined and used in Elixir. Elixir"
" now allows child specifications, which specify how a child process is supervi"
"sed, to be defined in modules. In previous versions, a project using Phoenix w"
"ould write:"
msgstr ""

msgid ""
"```elixir\n"
"import Supervisor.Spec"
msgstr ""

msgid ""
"children = [\n"
"  supervisor(MyApp.Repo, []),\n"
"  supervisor(MyApp.Endpoint, [])\n"
"]"
msgstr ""

msgid ""
"Supervisor.start_link(children, strategy: :one_for_one)\n"
"```"
msgstr ""

msgid "In Elixir v1.5, one might do:"
msgstr ""

msgid ""
"```elixir\n"
"children = [\n"
"  MyApp.Repo,\n"
"  MyApp.Endpoint\n"
"]"
msgstr ""

msgid "The above works by calling the `child_spec/1` function on the given modules."
msgstr ""

msgid ""
"This new approach allows `MyApp.Repo` and `MyApp.Endpoint` to control how they"
" run under a supervisor. This reduces the chances of mistakes being made, such"
" as starting an Ecto repository as a worker or forgetting to declare that task"
"s are temporary in a supervision tree."
msgstr ""

msgid ""
"If it is necessary to configure any of the children, such can be done by passi"
"ng a tuple instead of an atom:"
msgstr ""

msgid ""
"```elixir\n"
"children = [\n"
"  {MyApp.Repo, url: \"ecto://localhost:4567/my_dev\"},\n"
"  MyApp.Endpoint\n"
"]\n"
"```"
msgstr ""

msgid ""
"The modules `Agent`, `Registry`, `Task`, and `Task.Supervisor` have been updat"
"ed to include a `child_spec/1` function, allowing them to be used directly in "
"a supervision tree similar to the examples above. `use Agent`, `use GenServer`"
", `use Supervisor`, and `use Task` have also been updated to automatically def"
"ine an overridable `child_spec/1` function."
msgstr ""

msgid ""
"Finally, child specifications are now provided as maps (data-structures) inste"
"ad of the previous `Supervisor.Spec.worker/3` and `Supervisor.Spec.supervisor/"
"3` APIs. This behaviour also aligns with how supervisors are configured in Erl"
"ang/OTP 18+. See the updated [`Supervisor`](https://hexdocs.pm/elixir/1.5/Supe"
"rvisor.html) docs for more information, as well as the new `Supervisor.init/2`"
" and `Supervisor.child_spec/2` functions."
msgstr ""

msgid "## @impl"
msgstr ""

msgid ""
"This release also allows developers to mark which functions in a given module "
"are an implementation of a callback. For example, when using the [Plug](https:"
"//github.com/elixir-lang/plug) project, one needs to implement both `init/1` a"
"nd `call/2` when writing a Plug:"
msgstr ""

msgid ""
"```elixir\n"
"defmodule MyApp do\n"
"  @behaviour Plug"
msgstr ""

msgid ""
"  def init(_opts) do\n"
"    opts\n"
"  end"
msgstr ""

msgid ""
"  def call(conn, _opts) do\n"
"    Plug.Conn.send_resp(conn, 200, \"hello world\")\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"The problem with the approach above is that, once more and more functions are "
"added to the `MyApp` module, it becomes increasingly harder to know the purpos"
"es of the `init/1` and `call/2` functions. For example, for a developer unfami"
"liar with Plug, are those functions part of the `MyApp` API or are they implem"
"entations of a given callback?"
msgstr ""

msgid ""
"Elixir v1.5 introduces the `@impl` attribute, which allows us to mark that cer"
"tain functions are implementation of callbacks:"
msgstr ""

msgid ""
"  @impl true\n"
"  def init(_opts) do\n"
"    opts\n"
"  end"
msgstr ""

msgid ""
"  @impl true\n"
"  def call(conn, _opts) do\n"
"    Plug.Conn.send_resp(conn, 200, \"hello world\")\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid ""
"You may even use `@impl Plug` if you want to explicitly document which behavio"
"ur defines the callback you are implementing."
msgstr ""

msgid "Overall, using `@impl` has the following advantages:"
msgstr ""

msgid ""
"  * Readability of the code is increased, as it is now clear which functions a"
"re part of your API and which ones are callback implementations. To reinforce "
"this idea, `@impl true` automatically marks the function as `@doc false`, disa"
"bling documentation unless `@doc` is explicitly set"
msgstr ""

msgid ""
"  * If you define `@impl` before a function that is not a callback, Elixir wil"
"l error. This is useful in case of typos or in case the behaviour definition c"
"hanges (such as a new major version of a library you depend on is released)"
msgstr ""

msgid ""
"  * If you use `@impl` in one implementation, Elixir will force you to declare"
" `@impl` for all other implementations in the same module, keeping your module"
"s consistent"
msgstr ""

msgid "## Calendar improvements"
msgstr ""

msgid ""
"[Elixir v1.3](https://elixir-lang.org/blog/2016/06/21/elixir-v1-3-0-released/)"
" introduced the Calendar module with the underlying  `Time`, `Date`, `NaiveDat"
"eTime` and `Datetime` data types. We are glad to announce we consider the base"
" Calendar API to be finished in Elixir v1.5. This release includes many enhanc"
"ements, such as `Date.range/2` and the ability to convert between different ca"
"lendars."
msgstr ""

msgid "## Summing up"
msgstr ""

msgid ""
"The full list of changes is available in our [release notes](https://github.co"
"m/elixir-lang/elixir/releases/tag/v1.5.0). There are many other exciting chang"
"es, such as compiler enhancements that reduces compilation times by 10%-15% on"
" averages. When taken into account with the compiler improvements in Erlang/OT"
"P 20 itself, some applications have seen gains up to 30% in compilation times."
msgstr ""

msgid ""
"Don't forget to check [the Install section](/install.html) to get Elixir insta"
"lled and our [Getting Started guide](http://elixir-lang.org/getting-started/in"
"troduction.html) to learn more."
msgstr ""
