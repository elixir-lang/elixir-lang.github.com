msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2017-10-30 15:10+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"layout: post\n"
"title: Elixir v0.10.0 released\n"
"author: JosÃ© Valim\n"
"category: Releases\n"
"excerpt: Elixir v0.10.0 is out with support for streams, sets, pretty printing"
" and many improvements for Mix and ExUnit.\n"
"---"
msgstr ""

msgid ""
"Elixir v0.10.0 is released with support for streams, sets and many improvement"
"s to the Mix and ExUnit applications."
msgstr ""

msgid "## Streams"
msgstr ""

msgid ""
"The default mechanism for working with collections in Elixir is the `Enum` mod"
"ule. With it, you can map over ranges, lists, sets, dictionaries and any other"
" structure as long as it implements the `Enumerable` protocol:"
msgstr ""

msgid ""
"```elixir\n"
"Enum.map([1, 2, 3], fn(x) -> x * 2 end)\n"
"#=> [2, 4, 6]\n"
"```"
msgstr ""

msgid "The `Enum` module performs eager evaluation. Consider the following example:"
msgstr ""

msgid ""
"```elixir\n"
"[1, 2, 3]\n"
"  |> Enum.take_while(fn(x) -> x < 3 end)\n"
"  |> Enum.map(fn(x) -> x * 2 end)\n"
"#=> [2, 4]\n"
"```"
msgstr ""

msgid ""
"In the example above, we enumerate the items in list once, taking all elements"
" that are less than 3, and then we enumerate the remaining elements again, mul"
"tiplying them by two. In order to retrieve the final result, we have created o"
"ne intermediate list. As we add more operations, more intermediate lists will "
"be generated."
msgstr ""

msgid ""
"This approach is simple and efficient for the majority of the cases but, when "
"working with large collections, we can generate many, possibly large, intermed"
"iate lists affecting performance. That's one of the problems Streams solve. Le"
"t's rewrite the example above using Streams:"
msgstr ""

msgid ""
"```elixir\n"
"[1, 2, 3]\n"
"  |> Stream.take_while(fn(x) -> x < 3 end)\n"
"  |> Stream.map(fn(x) -> x * 2 end)\n"
"#=> #Stream.Lazy<...>\n"
"```"
msgstr ""

msgid ""
"Now, instead of getting the result back, we got a Stream. The list elements ar"
"e yet to be enumerated! We can realize the stream  by calling any of the Enum "
"functions, like `Enum.to_list/1`. By doing so the list will be iterated just o"
"nce avoiding the intermediary representations."
msgstr ""

msgid ""
"In a nutshell, Streams are composable, lazy enumerables. Streams are also usef"
"ul when doing IO or expressing infinite computations. We can retrieve a file a"
"s a stream:"
msgstr ""

msgid ""
"```elixir\n"
"File.stream!(\"README.md\")\n"
"```"
msgstr ""

msgid ""
"In the example above, we got a stream that will enumerate the lines in the fil"
"e one by one when enumerated. We could further extend the stream above, for ex"
"ample, by rejecting blank lines, and the file will be opened just when its res"
"ults are actually needed."
msgstr ""

msgid "Do you need a random number generator? We got your back:"
msgstr ""

msgid ""
"```elixir\n"
"Stream.repeatedly(fn -> :random.uniform end) |> Enum.take(3)\n"
"#=> [0.4435846174457203, 0.7230402056221108, 0.94581636451987]\n"
"```"
msgstr ""

msgid ""
"`Stream.repeatedly/1` returns an infinite stream but that's ok we just need it"
"s first three elements. You can learn more about [stream and related functions"
" in `Stream` module documentation](https://hexdocs.pm/elixir/Stream.html)."
msgstr ""

msgid "## Sets"
msgstr ""

msgid ""
"This release also adds [the Sets API](https://hexdocs.pm/elixir/Set.html) to E"
"lixir and a HashSet implementation. The HashSet implementation follows [the sa"
"me design goals as the HashDict implementation](/blog/2013/01/27/elixir-v0-8-0"
"-released/) released at the beginning of this year, starting with a compact re"
"presentation and expanding and contracting as needed."
msgstr ""

msgid ""
"This feature was a contribution from [Joseph Wilk](https://github.com/josephwi"
"lk) and he talks about its implementation and provides some benchmarks [on his"
" blog](http://blog.josephwilk.net/elixir/sets-in-elixir.html)."
msgstr ""

msgid "## Pretty printing"
msgstr ""

msgid ""
"Another addition to this release is pretty printing. The pretty printing start"
"ed as an implementation of the [Wadler paper](http://homepages.inf.ed.ac.uk/wa"
"dler/papers/prettier/prettier.pdf) by [Jonns Mostovoys](https://github.com/man"
"pages) which was then improved by [Gustavo Brunoro](https://github.com/brunoro"
") under his Google Summer of Code project as described in [Lindig's _Strictly "
"Prettier_ paper](http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.34.22"
"00)."
msgstr ""

msgid ""
"As soon as you upgrade to Elixir v0.10.0 and start IEx, you will get pretty pr"
"inting for all data structures provided by Elixir. We have also added document"
"ation to the `Inspect` module about [adding pretty printing to your own struct"
"ures](https://hexdocs.pm/elixir/Inspect.html) as well as [using the document a"
"lgebra for any other kind of formatting](https://hexdocs.pm/elixir/Inspect.Alg"
"ebra.html)."
msgstr ""

msgid "## Other improvements"
msgstr ""

msgid "Other notable improvements are:"
msgstr ""

msgid ""
"* We have improved Mix to be able to fetch Rebar dependencies, making integrat"
"ion with the existing Erlang ecossystem much easier, thanks to [Eric Meadows-J"
"onsson](https://github.com/ericmj);"
msgstr ""

msgid ""
"* ExUnit now supports the trace option, enabled via `mix test --trace`, which "
"forces tests to run sequentially and print the test names and extra informatio"
"n as it goes;"
msgstr ""

msgid ""
"* We are also working hard on Windows support, improving its command-line tool"
"s and working towards a green test suite, thanks to [Tom Jansens](https://gith"
"ub.com/tojans);"
msgstr ""

msgid ""
"* Meta-programming in Elixir was also improved by the addition of the `binding"
"/0` and `binding/1` macros plus the additions of `Macro.expand_once/2` and `Ma"
"cro.expand_all/2` to the [`Macro` module](https://hexdocs.pm/elixir/Macro.html"
");"
msgstr ""

msgid ""
"There are also improvements to typespecs, error messages, many bug fixes and s"
"ome backwards incompatible changes. We have posted a detailed [upgrade instruc"
"tions on the mailing list](https://groups.google.com/forum/?fromgroups#!topic/"
"elixir-lang-talk/ksrefrgK1eY). For a general overview, [check out the CHANGELO"
"G](https://github.com/elixir-lang/elixir/blob/v0.10.0/CHANGELOG.md)."
msgstr ""

msgid ""
"Give Elixir a try! You can start with our [getting started guide](/getting-sta"
"rted/introduction.html), or check out our sidebar for other learning resources"
"."
msgstr ""
