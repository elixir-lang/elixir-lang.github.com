msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2017-10-30 15:10+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"layout: post\n"
"title: Elixir v1.4 released\n"
"author: JosÃ© Valim\n"
"category: Releases\n"
"excerpt: Elixir v1.4 brings many improvements to the language, its standard li"
"brary and the Mix build tool.\n"
"---"
msgstr ""

msgid ""
"Elixir v1.4 brings new features, enhancements and bug fixes. The most notable "
"changes are the addition of the `Registry` module, the `Task.async_stream/3` a"
"nd `Task.async_stream/5` function which aid developers in writing concurrent s"
"oftware, and the new application inference and commands added to Mix."
msgstr ""

msgid ""
"In this post we will cover the main additions. The complete [release notes](ht"
"tps://github.com/elixir-lang/elixir/releases/tag/v1.4.0) are also available."
msgstr ""

msgid "## Registry"
msgstr ""

msgid ""
"The [`Registry`](https://hexdocs.pm/elixir/Registry.html) is a new module in E"
"lixir's standard library that allows Elixir developers to implement patterns s"
"uch as name lookups, code dispatching or even a pubsub system in a simple and "
"scalable way."
msgstr ""

msgid ""
"Broadly speaking, the Registry is a local, decentralized and scalable key-valu"
"e process storage. Let's break this in parts:"
msgstr ""

msgid ""
"  * Local because keys and values are only accessible to the current node (opp"
"osite to distributed)\n"
"  * Decentralized because there is no single entity responsible for managing t"
"he registry\n"
"  * Scalable because performance scales linearly with the addition of more cor"
"es upon partitioning"
msgstr ""

msgid ""
"A registry may have unique or duplicate keys. Every key-value pair is associat"
"ed to the process registering the key. Keys are automatically removed once the"
" owner process terminates. Starting, registering and looking up keys is quite "
"straight-forward:"
msgstr ""

msgid ""
"```iex\n"
"iex> Registry.start_link(:unique, MyRegistry)\n"
"iex> {:ok, _} = Registry.register(MyRegistry, \"hello\", 1)\n"
"iex> Registry.lookup(MyRegistry, \"hello\")\n"
"[{self(), 1}]\n"
"```"
msgstr ""

msgid ""
"Finally, huge thanks to [Bram Verburg](https://twitter.com/voltonez) who has p"
"erformed [extensive benchmarks](https://docs.google.com/spreadsheets/d/1MByRZJ"
"MCnZ1wPiLhBEnSRRSuy1QXp8kr27PIOXO3qqg/edit#gid=0) on the registry to show it s"
"cales linearly with the number of cores by increasing the number of partitions"
"."
msgstr ""

msgid "## Syntax coloring"
msgstr ""

msgid ""
"Elixir v1.4 introduces the ability to syntax color inspected data structures a"
"nd IEx automatically relies on this feature to provide syntax coloring for eva"
"luated shell results:"
msgstr ""

msgid "![IEx coloring](/images/contents/iex-coloring.png)"
msgstr ""

msgid "This behaviour can be configured via the `:syntax_colors` coloring option:"
msgstr ""

msgid ""
"```elixir\n"
"IEx.configure [colors: [syntax_colors: [atom: :cyan, string: :green]]]\n"
"```"
msgstr ""

msgid "To disable coloring altogether, simply pass an empty list to `:syntax_colors`."
msgstr ""

msgid "## Task.async_stream"
msgstr ""

msgid ""
"When there is a need to traverse a collection of items concurrently, Elixir de"
"velopers often resort to tasks:"
msgstr ""

msgid ""
"```elixir\n"
"collection\n"
"|> Enum.map(&Task.async(SomeMod, :function, [&1]))\n"
"|> Enum.map(&Task.await/1)\n"
"```"
msgstr ""

msgid ""
"The snippet above will spawn a new task by invoking `SomeMod.function(element)"
"` for every element in the collection and then await for the task results."
msgstr ""

msgid ""
"However, the snippet above will spawn and run concurrently as many tasks as th"
"ere are items in the collection. While this may be fine in many occasions, inc"
"luding small collections, sometimes it is necessary to restrict amount of task"
"s running concurrently, specially when shared resources are involved."
msgstr ""

msgid ""
"Elixir v1.4 adds `Task.async_stream/3` and `Task.async_stream/5` which brings "
"some of the lessons we learned from [the GenStage project](/blog/2016/07/14/an"
"nouncing-genstage/) directly into Elixir:"
msgstr ""

msgid ""
"```elixir\n"
"collection\n"
"|> Task.async_stream(SomeMod, :function, [], max_concurrency: 8)\n"
"|> Enum.to_list()\n"
"```"
msgstr ""

msgid ""
"The code above will also start the same `SomeMod.function(element)` task for e"
"very element in the collection except it will also guarantee we have at most 8"
" tasks being processed at the same time. You can use `System.schedulers_online"
"` to retrieve the number of cores and balance the processing based on the amou"
"nt of cores available."
msgstr ""

msgid ""
"The `Task.async_stream` functions are also lazy, allowing developers to partia"
"lly consume the stream until a condition is reached. Furthermore, `Task.Superv"
"isor.async_stream/4` and `Task.Supervisor.async_stream/6` can be used to ensur"
"e the concurrent tasks are spawned under a given supervisor."
msgstr ""

msgid "## Application inference"
msgstr ""

msgid ""
"In previous Mix versions, most of your dependencies had to be added both to yo"
"ur dependencies list and applications list. Here is how a `mix.exs` would look"
" like:"
msgstr ""

msgid ""
"```elixir\n"
"def application do\n"
"  [applications: [:logger, :plug, :postgrex]]\n"
"end"
msgstr ""

msgid ""
"def deps do\n"
"  [{:plug, \"~> 1.2\"},\n"
"   {:postgrex, \"~> 1.0\"}]\n"
"end\n"
"```"
msgstr ""

msgid ""
"This was a common source of confusion and quite error prone as many developers"
" would not list their dependencies in the applications list."
msgstr ""

msgid ""
"Mix v1.4 now automatically infers your applications list as long as you leave "
"the `:applications` key empty. The `mix.exs` above can be rewritten to:"
msgstr ""

msgid ""
"```elixir\n"
"def application do\n"
"  [extra_applications: [:logger]]\n"
"end"
msgstr ""

msgid ""
"With the above, Mix will automatically build your application list based on yo"
"ur dependencies. Developers now only need to specify which applications shippe"
"d as part of Erlang or Elixir that they require, such as `:logger`."
msgstr ""

msgid ""
"Finally, if there is a dependency you don't want to include in the application"
" runtime list, you can do so by specifying the `runtime: false` option:"
msgstr ""

msgid "    {:distillery, \"> 0.0.0\", runtime: false}"
msgstr ""

msgid ""
"We hope this feature provides a more streamlined workflow for developers who a"
"re building releases for their Elixir projects."
msgstr ""

msgid "## Mix install from SCM"
msgstr ""

msgid ""
"Mix v1.4 can now install escripts and archives from both Git and Hex, providin"
"g you with even more options for distributing Elixir code."
msgstr ""

msgid ""
"This makes it possible to distribute CLI applications written in Elixir by pub"
"lishing a package which builds an escript to Hex. [`ex_doc`](https://hex.pm/pa"
"ckages/ex_doc) has been updated to serve as an example of how to use this new "
"functionality."
msgstr ""

msgid "Simply running:"
msgstr ""

msgid "    mix escript.install hex ex_doc"
msgstr ""

msgid ""
"will fetch `ex_doc` and its dependencies, build them, and then install `ex_doc"
"` to `~/.mix/escripts` (by default). After adding `~/.mix/escripts` to your `P"
"ATH`, running `ex_doc` is as simple as:"
msgstr ""

msgid "    ex_doc"
msgstr ""

msgid ""
"You can now also install archives from Hex in this way. Since they are fetched"
" and built on the user's machine, they do not have the same limitations as pre"
"-built archives. However, keep in mind archives are loaded on every Mix comman"
"d and may conflict with modules or dependencies in your projects. For this rea"
"son, escripts is the preferred format for sharing executables."
msgstr ""

msgid ""
"It is also possible to install escripts and archives by providing a Git/GitHub"
" repo. See `mix help escript.install` and `mix help archive.install` for more "
"details."
msgstr ""

msgid "## Summing up"
msgstr ""

msgid ""
"The full list of changes is available in our [release notes](https://github.co"
"m/elixir-lang/elixir/releases/tag/v1.4.0). Don't forget to check [the Install "
"section](/install.html) to get Elixir installed and our [Getting Started guide"
"](http://elixir-lang.org/getting-started/introduction.html) to learn more."
msgstr ""

msgid "Happy coding!"
msgstr ""
